
PCR102_SWV20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aa70  08012a64  08012a64  00022a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d4d4  0801d4d4  0002d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d4dc  0801d4dc  0002d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d4e0  0801d4e0  0002d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002ac  20000000  0801d4e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ae4  200002ac  0801d790  000302ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d90  0801d790  00030d90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006d188  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000fcb0  00000000  00000000  0009d464  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a48  00000000  00000000  000ad118  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005268  00000000  00000000  000afb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00004022  00000000  00000000  000b4dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00026e10  00000000  00000000  000b8dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000de55f  00000000  00000000  000dfbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fa  00000000  00000000  001be159  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a2bc  00000000  00000000  001be254  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00017cb5  00000000  00000000  001c8510  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         000000b4  00000000  00000000  001e01c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000183  00000000  00000000  001e027c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ac 	.word	0x200002ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012a4c 	.word	0x08012a4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	08012a4c 	.word	0x08012a4c

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ae:	f1a4 0401 	sub.w	r4, r4, #1
 80004b2:	d1e9      	bne.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <acc_hal_integration_sleep_us>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sleep_us(uint32_t time_usec)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_usec / 1000);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <acc_hal_integration_sleep_us+0x20>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	099b      	lsrs	r3, r3, #6
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f9b8 	bl	8001234 <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	10624dd3 	.word	0x10624dd3

08000ed0 <acc_hal_integration_sensor_transfer>:


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_SPI_SS_GPIO_Port, A111_SPI_SS_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <acc_hal_integration_sensor_transfer+0x40>)
 8000ee2:	f001 f819 	bl	8001f18 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, 5000);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <acc_hal_integration_sensor_transfer+0x44>)
 8000ef8:	f002 f9d2 	bl	80032a0 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(A111_SPI_SS_GPIO_Port, A111_SPI_SS_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <acc_hal_integration_sensor_transfer+0x40>)
 8000f02:	f001 f809 	bl	8001f18 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	48000800 	.word	0x48000800
 8000f14:	20000c2c 	.word	0x20000c2c

08000f18 <acc_hal_integration_reset_sensor>:


static bool acc_hal_integration_reset_sensor(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(XC111_SPI_SS1_GPIO_Port, XC111_SPI_SS1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(XC111_SPI_SS0_GPIO_Port, XC111_SPI_SS0_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(A111_RESET_N_GPIO_Port, A111_RESET_N_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(A111_SPI_SS_GPIO_Port, A111_SPI_SS_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <acc_hal_integration_reset_sensor+0x20>)
 8000f22:	f000 fff9 	bl	8001f18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <acc_hal_integration_reset_sensor+0x20>)
 8000f2c:	f000 fff4 	bl	8001f18 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(XC111_PMU_ENABLE_GPIO_Port, XC111_PMU_ENABLE_Pin, GPIO_PIN_RESET);

	return true;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	48000800 	.word	0x48000800

08000f3c <acc_hal_integration_all_sensors_inactive>:
 * @brief Get the combined status of all sensors
 *
 * @return False if any sensor is busy
 */
static bool acc_hal_integration_all_sensors_inactive(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	if (sensor_state == SENSOR_STATE_BUSY)
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <acc_hal_integration_all_sensors_inactive+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d101      	bne.n	8000f4c <acc_hal_integration_all_sensors_inactive+0x10>
	{
		return false;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e000      	b.n	8000f4e <acc_hal_integration_all_sensors_inactive+0x12>
	}

	return true;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	200002c8 	.word	0x200002c8

08000f5c <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	if (sensor_state == SENSOR_STATE_BUSY)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <acc_hal_integration_sensor_power_on+0x64>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d022      	beq.n	8000fb2 <acc_hal_integration_sensor_power_on+0x56>
	}

//	HAL_GPIO_WritePin(XC111_SPI_SS1_GPIO_Port, XC111_SPI_SS1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(XC111_SPI_SS0_GPIO_Port, XC111_SPI_SS0_Pin, GPIO_PIN_RESET);

	if (acc_hal_integration_all_sensors_inactive())
 8000f6c:	f7ff ffe6 	bl	8000f3c <acc_hal_integration_all_sensors_inactive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d014      	beq.n	8000fa0 <acc_hal_integration_sensor_power_on+0x44>
//		HAL_GPIO_WritePin(A111_RESET_N_GPIO_Port, A111_RESET_N_Pin, GPIO_PIN_RESET);

//		HAL_GPIO_WritePin(XC111_PMU_ENABLE_GPIO_Port, XC111_PMU_ENABLE_Pin, GPIO_PIN_SET);

		// Wait for PMU to stabilize
		acc_hal_integration_sleep_us(5000);
 8000f76:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f7a:	f7ff ff97 	bl	8000eac <acc_hal_integration_sleep_us>

		HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <acc_hal_integration_sensor_power_on+0x68>)
 8000f84:	f000 ffc8 	bl	8001f18 <HAL_GPIO_WritePin>

		// Wait for Power On Reset
		acc_hal_integration_sleep_us(5000);
 8000f88:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f8c:	f7ff ff8e 	bl	8000eac <acc_hal_integration_sleep_us>
		HAL_GPIO_WritePin(A111_SPI_SS_GPIO_Port, A111_SPI_SS_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <acc_hal_integration_sensor_power_on+0x68>)
 8000f96:	f000 ffbf 	bl	8001f18 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(A111_RESET_N_GPIO_Port, A111_RESET_N_Pin, GPIO_PIN_SET);

		sensor_state = SENSOR_STATE_READY;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <acc_hal_integration_sensor_power_on+0x64>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
	}

	if (sensor_state != SENSOR_STATE_READY)
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <acc_hal_integration_sensor_power_on+0x64>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d106      	bne.n	8000fb6 <acc_hal_integration_sensor_power_on+0x5a>
	{
		return;
	}

	sensor_state = SENSOR_STATE_BUSY;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <acc_hal_integration_sensor_power_on+0x64>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]

	return;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <acc_hal_integration_sensor_power_on+0x5c>
		return;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <acc_hal_integration_sensor_power_on+0x5c>
		return;
 8000fb6:	bf00      	nop
}
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002c8 	.word	0x200002c8
 8000fc4:	48000800 	.word	0x48000800

08000fc8 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	bool status;

	if (sensor_state != SENSOR_STATE_BUSY)
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <acc_hal_integration_sensor_power_off+0x34>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d10b      	bne.n	8000ff0 <acc_hal_integration_sensor_power_off+0x28>
	{
		return;
	}

	status = acc_hal_integration_reset_sensor();
 8000fd8:	f7ff ff9e 	bl	8000f18 <acc_hal_integration_reset_sensor>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]

	if (status)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <acc_hal_integration_sensor_power_off+0x2c>
	{
		sensor_state = SENSOR_STATE_UNKNOWN;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <acc_hal_integration_sensor_power_off+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000fec:	bf00      	nop
 8000fee:	e001      	b.n	8000ff4 <acc_hal_integration_sensor_power_off+0x2c>
		return;
 8000ff0:	bf00      	nop
 8000ff2:	e000      	b.n	8000ff6 <acc_hal_integration_sensor_power_off+0x2e>
	return;
 8000ff4:	bf00      	nop
}
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200002c8 	.word	0x200002c8

08001000 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

//	HAL_GPIO_WritePin(XC111_SPI_SS1_GPIO_Port, XC111_SPI_SS1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(XC111_SPI_SS0_GPIO_Port, XC111_SPI_SS0_Pin, GPIO_PIN_RESET);

	const uint32_t wait_begin_ms = HAL_GetTick();
 800100a:	f000 f907 	bl	800121c <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]
	while (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8001010:	e00d      	b.n	800102e <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	{
		if (timeout_ms == 0 || HAL_GetTick() - wait_begin_ms > timeout_ms)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <acc_hal_integration_wait_for_sensor_interrupt+0x28>
 8001018:	f000 f900 	bl	800121c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d201      	bcs.n	800102c <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
		{
			return false;
 8001028:	2300      	movs	r3, #0
 800102a:	e009      	b.n	8001040 <acc_hal_integration_wait_for_sensor_interrupt+0x40>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800102c:	bf30      	wfi
	while (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 800102e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <acc_hal_integration_wait_for_sensor_interrupt+0x48>)
 8001034:	f000 ff58 	bl	8001ee8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d1e9      	bne.n	8001012 <acc_hal_integration_wait_for_sensor_interrupt+0x12>

		// Wait for the next tick interrupt
		__WFI();
	}

	return true;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	48000400 	.word	0x48000400

0800104c <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <acc_hal_integration_get_reference_frequency+0x18>)
 8001052:	ee07 3a90 	vmov	s15, r3
}
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	4bb71b00 	.word	0x4bb71b00

08001068 <acc_hal_integration_get_current_time>:


static uint32_t acc_hal_integration_get_current_time(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800106c:	f000 f8d6 	bl	800121c <HAL_GetTick>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <acc_hal_integration_log>:


static void acc_hal_integration_log(acc_log_level_t level, const char *module, const char *buffer)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b092      	sub	sp, #72	; 0x48
 800107c:	af06      	add	r7, sp, #24
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	uint32_t time_ms = acc_hal_integration_get_current_time();
 8001084:	f7ff fff0 	bl	8001068 <acc_hal_integration_get_current_time>
 8001088:	62f8      	str	r0, [r7, #44]	; 0x2c
	char     level_ch;

	unsigned int timestamp    = time_ms;
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001090:	4a25      	ldr	r2, [pc, #148]	; (8001128 <acc_hal_integration_log+0xb0>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0d5b      	lsrs	r3, r3, #21
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <acc_hal_integration_log+0xb4>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0b9a      	lsrs	r2, r3, #14
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <acc_hal_integration_log+0xb8>)
 80010a6:	fba3 1302 	umull	r1, r3, r3, r2
 80010aa:	0959      	lsrs	r1, r3, #5
 80010ac:	460b      	mov	r3, r1
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	623b      	str	r3, [r7, #32]
	unsigned int seconds      = timestamp / 1000 % 60;
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <acc_hal_integration_log+0xbc>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	099a      	lsrs	r2, r3, #6
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <acc_hal_integration_log+0xb8>)
 80010c4:	fba3 1302 	umull	r1, r3, r3, r2
 80010c8:	0959      	lsrs	r1, r3, #5
 80010ca:	460b      	mov	r3, r1
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	61fb      	str	r3, [r7, #28]
	unsigned int milliseconds = timestamp % 1000;
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <acc_hal_integration_log+0xbc>)
 80010da:	fba2 1203 	umull	r1, r2, r2, r3
 80010de:	0992      	lsrs	r2, r2, #6
 80010e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010e4:	fb01 f202 	mul.w	r2, r1, r2
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d804      	bhi.n	80010fc <acc_hal_integration_log+0x84>
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <acc_hal_integration_log+0xc0>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	e000      	b.n	80010fe <acc_hal_integration_log+0x86>
 80010fc:	233f      	movs	r3, #63	; 0x3f
 80010fe:	75fb      	strb	r3, [r7, #23]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, 0, level_ch, module, buffer);
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	9204      	str	r2, [sp, #16]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	9203      	str	r2, [sp, #12]
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2300      	movs	r3, #0
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	6a3a      	ldr	r2, [r7, #32]
 8001118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <acc_hal_integration_log+0xc4>)
 800111c:	f00f fb5a 	bl	80107d4 <iprintf>
}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	95217cb1 	.word	0x95217cb1
 800112c:	45e7b273 	.word	0x45e7b273
 8001130:	88888889 	.word	0x88888889
 8001134:	10624dd3 	.word	0x10624dd3
 8001138:	08012a90 	.word	0x08012a90
 800113c:	08012a64 	.word	0x08012a64

08001140 <acc_hal_integration_get_implementation>:


acc_hal_t acc_hal_integration_get_implementation(void)
{
 8001140:	b4b0      	push	{r4, r5, r7}
 8001142:	b08f      	sub	sp, #60	; 0x3c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	acc_hal_t hal =
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <acc_hal_integration_get_implementation+0x44>)
 800114a:	f107 0408 	add.w	r4, r7, #8
 800114e:	461d      	mov	r5, r3
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800115c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		.log.log_level = ACC_LOG_LEVEL_INFO,
		.log.log       = acc_hal_integration_log
	};

	return hal;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	461d      	mov	r5, r3
 8001164:	f107 0408 	add.w	r4, r7, #8
 8001168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001174:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	373c      	adds	r7, #60	; 0x3c
 800117c:	46bd      	mov	sp, r7
 800117e:	bcb0      	pop	{r4, r5, r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	08012a98 	.word	0x08012a98

08001188 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001192:	2003      	movs	r0, #3
 8001194:	f000 f952 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001198:	2000      	movs	r0, #0
 800119a:	f000 f80d 	bl	80011b8 <HAL_InitTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	e001      	b.n	80011ae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011aa:	f005 fa5f 	bl	800666c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ae:	79fb      	ldrb	r3, [r7, #7]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_InitTick+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_InitTick+0x44>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	099b      	lsrs	r3, r3, #6
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f976 	bl	80014c2 <HAL_SYSTICK_Config>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e005      	b.n	80011ee <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f000 f932 	bl	8001452 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000144 	.word	0x20000144
 80011fc:	10624dd3 	.word	0x10624dd3

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick++;
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <HAL_IncTick+0x18>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x18>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000bf0 	.word	0x20000bf0

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000bf0 	.word	0x20000bf0

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d002      	beq.n	8001254 <HAL_Delay+0x20>
  {
    wait++;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001254:	bf00      	nop
 8001256:	f7ff ffe1 	bl	800121c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	429a      	cmp	r2, r3
 8001264:	d8f7      	bhi.n	8001256 <HAL_Delay+0x22>
  {
  }
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <NVIC_EnableIRQ+0x30>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <NVIC_DisableIRQ+0x30>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	3320      	adds	r3, #32
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100

0800133c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	da0b      	bge.n	8001368 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <NVIC_SetPriority+0x4c>)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	3b04      	subs	r3, #4
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001366:	e009      	b.n	800137c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <NVIC_SetPriority+0x50>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	e000e100 	.word	0xe000e100

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff13 	bl	8001270 <NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff28 	bl	80012b8 <NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff1b 	bl	80012d4 <NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff27 	bl	8001308 <NVIC_DisableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff94 	bl	80013f8 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d005      	beq.n	80014fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2204      	movs	r2, #4
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e029      	b.n	8001552 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 020e 	bic.w	r2, r2, #14
 800150c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 021c 	and.w	r2, r3, #28
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
    }
  }
  return status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800156e:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_FLASH_Program+0xd0>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_FLASH_Program+0x1e>
 8001576:	2302      	movs	r3, #2
 8001578:	e053      	b.n	8001622 <HAL_FLASH_Program+0xc6>
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_FLASH_Program+0xd0>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001580:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001584:	f000 f888 	bl	8001698 <FLASH_WaitForLastOperation>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
	
  if(status == HAL_OK)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d143      	bne.n	800161a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_FLASH_Program+0xd0>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_FLASH_Program+0xd4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d009      	beq.n	80015b8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_FLASH_Program+0xd4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_FLASH_Program+0xd4>)
 80015aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_FLASH_Program+0xd0>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	771a      	strb	r2, [r3, #28]
 80015b6:	e002      	b.n	80015be <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_FLASH_Program+0xd0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d107      	bne.n	80015d4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80015c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f000 f8c5 	bl	8001758 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80015ce:	2301      	movs	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	e010      	b.n	80015f6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d002      	beq.n	80015e0 <HAL_FLASH_Program+0x84>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d10a      	bne.n	80015f6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	f000 f8d9 	bl	800179c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d102      	bne.n	80015f6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80015f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015f4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015fa:	f000 f84d 	bl	8001698 <FLASH_WaitForLastOperation>
 80015fe:	4603      	mov	r3, r0
 8001600:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_FLASH_Program+0xd4>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <HAL_FLASH_Program+0xd4>)
 8001612:	4013      	ands	r3, r2
 8001614:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001616:	f000 f9cf 	bl	80019b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_FLASH_Program+0xd0>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]

  return status;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_FLASH_Unlock+0x38>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	da0b      	bge.n	800165e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_FLASH_Unlock+0x38>)
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_FLASH_Unlock+0x3c>)
 800164a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_FLASH_Unlock+0x38>)
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_FLASH_Unlock+0x40>)
 8001650:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_FLASH_Unlock+0x38>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	da01      	bge.n	800165e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800165e:	79fb      	ldrb	r3, [r7, #7]
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40022000 	.word	0x40022000
 8001670:	45670123 	.word	0x45670123
 8001674:	cdef89ab 	.word	0xcdef89ab

08001678 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_FLASH_Lock+0x1c>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_FLASH_Lock+0x1c>)
 8001682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001686:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40022000 	.word	0x40022000

08001698 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fdbc 	bl	800121c <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80016a6:	e00d      	b.n	80016c4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ae:	d009      	beq.n	80016c4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80016b0:	f7ff fdb4 	bl	800121c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d801      	bhi.n	80016c4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e03e      	b.n	8001742 <FLASH_WaitForLastOperation+0xaa>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d0ea      	beq.n	80016a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <FLASH_WaitForLastOperation+0xb8>)
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01e      	beq.n	800172e <FLASH_WaitForLastOperation+0x96>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <FLASH_WaitForLastOperation+0xbc>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <FLASH_WaitForLastOperation+0xbc>)
 80016fa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <FLASH_WaitForLastOperation+0x7e>
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	618b      	str	r3, [r1, #24]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <FLASH_WaitForLastOperation+0x92>
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001728:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e009      	b.n	8001742 <FLASH_WaitForLastOperation+0xaa>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b01      	cmp	r3, #1
 8001738:	d102      	bne.n	8001740 <FLASH_WaitForLastOperation+0xa8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <FLASH_WaitForLastOperation+0xb4>)
 800173c:	2201      	movs	r2, #1
 800173e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000
 8001750:	0002c3fa 	.word	0x0002c3fa
 8001754:	20000000 	.word	0x20000000

08001758 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001758:	b490      	push	{r4, r7}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <FLASH_Program_DoubleWord+0x40>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <FLASH_Program_DoubleWord+0x40>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6153      	str	r3, [r2, #20]
  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001776:	e9d7 1200 	ldrd	r1, r2, [r7]
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f04f 0400 	mov.w	r4, #0
 8001782:	0013      	movs	r3, r2
 8001784:	2400      	movs	r4, #0
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	3204      	adds	r2, #4
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bc90      	pop	{r4, r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000

0800179c <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <FLASH_Program_Fast+0x54>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <FLASH_Program_Fast+0x54>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017be:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	3304      	adds	r3, #4
 80017cc:	613b      	str	r3, [r7, #16]
    src_addr++;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3304      	adds	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
    row_index--;
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
  } while (row_index != 0U);
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ef      	bne.n	80017c0 <FLASH_Program_Fast+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 80017e0:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000

080017f4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_FLASHEx_Erase+0x16>
 8001806:	2302      	movs	r3, #2
 8001808:	e08b      	b.n	8001922 <HAL_FLASHEx_Erase+0x12e>
 800180a:	4b48      	ldr	r3, [pc, #288]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001814:	f7ff ff40 	bl	8001698 <FLASH_WaitForLastOperation>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d17b      	bne.n	800191a <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001830:	2b00      	cmp	r3, #0
 8001832:	d019      	beq.n	8001868 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 800183a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a37      	ldr	r2, [pc, #220]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 8001852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 800185a:	2203      	movs	r2, #3
 800185c:	771a      	strb	r2, [r3, #28]
 800185e:	e016      	b.n	800188e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 8001862:	2201      	movs	r2, #1
 8001864:	771a      	strb	r2, [r3, #28]
 8001866:	e012      	b.n	800188e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 800187a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 8001882:	2202      	movs	r2, #2
 8001884:	771a      	strb	r2, [r3, #28]
 8001886:	e002      	b.n	800188e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001888:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 800188a:	2200      	movs	r2, #0
 800188c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d111      	bne.n	80018ba <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f84a 	bl	8001934 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018a4:	f7ff fef8 	bl	8001698 <FLASH_WaitForLastOperation>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	6153      	str	r3, [r2, #20]
 80018b8:	e02d      	b.n	8001916 <HAL_FLASHEx_Erase+0x122>
#endif      
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	601a      	str	r2, [r3, #0]
      
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	e01d      	b.n	8001906 <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4619      	mov	r1, r3
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 f84d 	bl	8001970 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018da:	f7ff fedd 	bl	8001698 <FLASH_WaitForLastOperation>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_FLASHEx_Erase+0x13c>)
 80018e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018ec:	f023 0302 	bic.w	r3, r3, #2
 80018f0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	601a      	str	r2, [r3, #0]
          break;
 80018fe:	e00a      	b.n	8001916 <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3301      	adds	r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4413      	add	r3, r2
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3d9      	bcc.n	80018ca <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }
    
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001916:	f000 f84f 	bl	80019b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_FLASHEx_Erase+0x138>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]

  return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000
 8001930:	40022000 	.word	0x40022000

08001934 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <FLASH_MassErase+0x38>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <FLASH_MassErase+0x38>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <FLASH_MassErase+0x38>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <FLASH_MassErase+0x38>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6153      	str	r3, [r2, #20]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000

08001970 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <FLASH_PageErase+0x44>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <FLASH_PageErase+0x44>)
 800198c:	4313      	orrs	r3, r2
 800198e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <FLASH_PageErase+0x44>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <FLASH_PageErase+0x44>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <FLASH_PageErase+0x44>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <FLASH_PageErase+0x44>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	6153      	str	r3, [r2, #20]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40022000 	.word	0x40022000

080019b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <FLASH_FlushCaches+0x80>)
 80019c0:	7f1b      	ldrb	r3, [r3, #28]
 80019c2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d002      	beq.n	80019d0 <FLASH_FlushCaches+0x18>
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d111      	bne.n	80019f4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <FLASH_FlushCaches+0x84>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <FLASH_FlushCaches+0x84>)
 80019d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <FLASH_FlushCaches+0x84>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <FLASH_FlushCaches+0x84>)
 80019e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <FLASH_FlushCaches+0x84>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <FLASH_FlushCaches+0x84>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d002      	beq.n	8001a00 <FLASH_FlushCaches+0x48>
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d111      	bne.n	8001a24 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <FLASH_FlushCaches+0x84>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <FLASH_FlushCaches+0x84>)
 8001a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <FLASH_FlushCaches+0x84>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <FLASH_FlushCaches+0x84>)
 8001a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <FLASH_FlushCaches+0x84>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <FLASH_FlushCaches+0x84>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <FLASH_FlushCaches+0x80>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	40022000 	.word	0x40022000

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e154      	b.n	8001cfa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8146 	beq.w	8001cf4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x38>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	6939      	ldr	r1, [r7, #16]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d00b      	beq.n	8001b14 <HAL_GPIO_Init+0xd4>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d007      	beq.n	8001b14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b08:	2b11      	cmp	r3, #17
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b12      	cmp	r3, #18
 8001b12:	d130      	bne.n	8001b76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 0201 	and.w	r2, r3, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80a0 	beq.w	8001cf4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_GPIO_Init+0x2d8>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_GPIO_Init+0x2d8>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc0:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_GPIO_Init+0x2d8>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bcc:	4a53      	ldr	r2, [pc, #332]	; (8001d1c <HAL_GPIO_Init+0x2dc>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bf6:	d019      	beq.n	8001c2c <HAL_GPIO_Init+0x1ec>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_GPIO_Init+0x2e0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1e8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <HAL_GPIO_Init+0x2e4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1e0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <HAL_GPIO_Init+0x2ec>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1dc>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e008      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c20:	2303      	movs	r3, #3
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3e:	4937      	ldr	r1, [pc, #220]	; (8001d1c <HAL_GPIO_Init+0x2dc>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c4c:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c70:	4a2f      	ldr	r2, [pc, #188]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9a:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f aea3 	bne.w	8001a50 <HAL_GPIO_Init+0x10>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d42:	e0b7      	b.n	8001eb4 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d44:	2201      	movs	r2, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80aa 	beq.w	8001eae <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2103      	movs	r1, #3
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	08d2      	lsrs	r2, r2, #3
 8001d8e:	4019      	ands	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2103      	movs	r1, #3
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2101      	movs	r1, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2103      	movs	r1, #3
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001dd8:	4a3d      	ldr	r2, [pc, #244]	; (8001ed0 <HAL_GPIO_DeInit+0x19c>)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_DeInit+0x102>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <HAL_GPIO_DeInit+0x1a0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_DeInit+0xfe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <HAL_GPIO_DeInit+0x1a4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_DeInit+0xfa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a31      	ldr	r2, [pc, #196]	; (8001edc <HAL_GPIO_DeInit+0x1a8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_DeInit+0xf6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a30      	ldr	r2, [pc, #192]	; (8001ee0 <HAL_GPIO_DeInit+0x1ac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_DeInit+0xf2>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_DeInit+0x104>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_DeInit+0x104>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_DeInit+0x104>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_DeInit+0x104>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_DeInit+0x104>
 8001e36:	2300      	movs	r3, #0
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d132      	bne.n	8001eae <HAL_GPIO_DeInit+0x17a>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_GPIO_DeInit+0x19c>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43da      	mvns	r2, r3
 8001e68:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <HAL_GPIO_DeInit+0x19c>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	400a      	ands	r2, r1
 8001e70:	3302      	adds	r3, #2
 8001e72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4919      	ldr	r1, [pc, #100]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4912      	ldr	r1, [pc, #72]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_GPIO_DeInit+0x1b0>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f47f af41 	bne.w	8001d44 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	48000c00 	.word	0x48000c00
 8001ee0:	48001000 	.word	0x48001000
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40007000 	.word	0x40007000

08001f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f72:	d130      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f80:	d038      	beq.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2232      	movs	r2, #50	; 0x32
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa8:	e002      	b.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbc:	d102      	bne.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f2      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd0:	d110      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e00f      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d007      	beq.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fec:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40007000 	.word	0x40007000
 8002008:	20000144 	.word	0x20000144
 800200c:	431bde83 	.word	0x431bde83

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e395      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4ba3      	ldr	r3, [pc, #652]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202c:	4ba0      	ldr	r3, [pc, #640]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80df 	beq.w	8002202 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_RCC_OscConfig+0x4a>
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b0c      	cmp	r3, #12
 800204e:	f040 8086 	bne.w	800215e <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b01      	cmp	r3, #1
 8002056:	f040 8082 	bne.w	800215e <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800205a:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x62>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e36d      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <HAL_RCC_OscConfig+0x7c>
 8002082:	4b8b      	ldr	r3, [pc, #556]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208a:	e005      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	4293      	cmp	r3, r2
 800209a:	d223      	bcs.n	80020e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd0d 	bl	8002ac0 <RCC_SetFlashLatencyFromMSIRange>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e34e      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b0:	4b7f      	ldr	r3, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a7e      	ldr	r2, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4979      	ldr	r1, [pc, #484]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4974      	ldr	r1, [pc, #464]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
 80020e2:	e022      	b.n	800212a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a71      	ldr	r2, [pc, #452]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	496c      	ldr	r1, [pc, #432]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4967      	ldr	r1, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fcd0 	bl	8002ac0 <RCC_SetFlashLatencyFromMSIRange>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e311      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212a:	f000 fbf5 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800212e:	4601      	mov	r1, r0
 8002130:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a5e      	ldr	r2, [pc, #376]	; (80022b4 <HAL_RCC_OscConfig+0x2a4>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	fa21 f303 	lsr.w	r3, r1, r3
 8002146:	4a5c      	ldr	r2, [pc, #368]	; (80022b8 <HAL_RCC_OscConfig+0x2a8>)
 8002148:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f7ff f834 	bl	80011b8 <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d052      	beq.n	8002200 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	e2f7      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d032      	beq.n	80021cc <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002166:	4b52      	ldr	r3, [pc, #328]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002172:	f7ff f853 	bl	800121c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800217a:	f7ff f84f 	bl	800121c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e2e0      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002198:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a44      	ldr	r2, [pc, #272]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	493f      	ldr	r1, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	493a      	ldr	r1, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
 80021ca:	e01a      	b.n	8002202 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a37      	ldr	r2, [pc, #220]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d8:	f7ff f820 	bl	800121c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e0:	f7ff f81c 	bl	800121c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e2ad      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1d0>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d072      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d005      	beq.n	8002220 <HAL_RCC_OscConfig+0x210>
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d10e      	bne.n	8002238 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d062      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d15e      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e28a      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x240>
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0x27c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x264>
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0x27c>
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01a      	beq.n	80022ca <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe ffc2 	bl	800121c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	e00f      	b.n	80022bc <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe ffbe 	bl	800121c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d908      	bls.n	80022bc <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e24f      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	080163e4 	.word	0x080163e4
 80022b8:	20000144 	.word	0x20000144
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022bc:	4bae      	ldr	r3, [pc, #696]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0e9      	beq.n	800229c <HAL_RCC_OscConfig+0x28c>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe ffa7 	bl	800121c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d2:	f7fe ffa3 	bl	800121c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e234      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e4:	4ba4      	ldr	r3, [pc, #656]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2c2>
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d060      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b04      	cmp	r3, #4
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x302>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d119      	bne.n	8002340 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002312:	4b99      	ldr	r3, [pc, #612]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x31a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e211      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b93      	ldr	r3, [pc, #588]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	498f      	ldr	r1, [pc, #572]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233e:	e040      	b.n	80023c2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d023      	beq.n	8002390 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b8b      	ldr	r3, [pc, #556]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a8a      	ldr	r2, [pc, #552]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe ff62 	bl	800121c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7fe ff5e 	bl	800121c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1ef      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236e:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	061b      	lsls	r3, r3, #24
 8002388:	497b      	ldr	r1, [pc, #492]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
 800238e:	e018      	b.n	80023c2 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002390:	4b79      	ldr	r3, [pc, #484]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a78      	ldr	r2, [pc, #480]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe ff3e 	bl	800121c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a4:	f7fe ff3a 	bl	800121c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1cb      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b6:	4b70      	ldr	r3, [pc, #448]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03c      	beq.n	8002448 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01c      	beq.n	8002410 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b68      	ldr	r3, [pc, #416]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	4a66      	ldr	r2, [pc, #408]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe ff19 	bl	800121c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ee:	f7fe ff15 	bl	800121c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1a6      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002400:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ef      	beq.n	80023ee <HAL_RCC_OscConfig+0x3de>
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002416:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fefc 	bl	800121c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fef8 	bl	800121c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e189      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243a:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ef      	bne.n	8002428 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a5 	beq.w	80025a0 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	4b3e      	ldr	r3, [pc, #248]	; (800257c <HAL_RCC_OscConfig+0x56c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x56c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3a      	ldr	r2, [pc, #232]	; (800257c <HAL_RCC_OscConfig+0x56c>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7fe febf 	bl	800121c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fe febb 	bl	800121c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e14c      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCC_OscConfig+0x56c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_RCC_OscConfig+0x4ca>
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d8:	e024      	b.n	8002524 <HAL_RCC_OscConfig+0x514>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d110      	bne.n	8002504 <HAL_RCC_OscConfig+0x4f4>
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f2:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	e00f      	b.n	8002524 <HAL_RCC_OscConfig+0x514>
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d016      	beq.n	800255a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fe76 	bl	800121c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fe72 	bl	800121c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e101      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_OscConfig+0x568>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ed      	beq.n	8002534 <HAL_RCC_OscConfig+0x524>
 8002558:	e019      	b.n	800258e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe fe5f 	bl	800121c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002560:	e00e      	b.n	8002580 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fe5b 	bl	800121c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d905      	bls.n	8002580 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0ea      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002580:	4b75      	ldr	r3, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e9      	bne.n	8002562 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258e:	7ffb      	ldrb	r3, [r7, #31]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	4b70      	ldr	r3, [pc, #448]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	4a6f      	ldr	r2, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d03c      	beq.n	8002626 <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01c      	beq.n	80025ee <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80025b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ba:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe fe2a 	bl	800121c <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025cc:	f7fe fe26 	bl	800121c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0b7      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025de:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80025e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ef      	beq.n	80025cc <HAL_RCC_OscConfig+0x5bc>
 80025ec:	e01b      	b.n	8002626 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025ee:	4b5a      	ldr	r3, [pc, #360]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80025f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7fe fe0d 	bl	800121c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002606:	f7fe fe09 	bl	800121c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e09a      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 800261a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ef      	bne.n	8002606 <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 808e 	beq.w	800274c <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b0c      	cmp	r3, #12
 8002634:	f000 8088 	beq.w	8002748 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b02      	cmp	r3, #2
 800263e:	d155      	bne.n	80026ec <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b45      	ldr	r3, [pc, #276]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a44      	ldr	r2, [pc, #272]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fde6 	bl	800121c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fde2 	bl	800121c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e073      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	3b01      	subs	r3, #1
 8002678:	011a      	lsls	r2, r3, #4
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	055b      	lsls	r3, r3, #21
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	065b      	lsls	r3, r3, #25
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	06db      	lsls	r3, r3, #27
 80026a6:	492c      	ldr	r1, [pc, #176]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a29      	ldr	r2, [pc, #164]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fdaa 	bl	800121c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fda6 	bl	800121c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e037      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x6bc>
 80026ea:	e02f      	b.n	800274c <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 8002716:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fd7c 	bl	800121c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fd78 	bl	800121c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e009      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_RCC_OscConfig+0x748>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x718>
 8002746:	e001      	b.n	800274c <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0c6      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4960      	ldr	r1, [pc, #384]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0ae      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d04c      	beq.n	8002846 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d121      	bne.n	8002804 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e09c      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d115      	bne.n	8002804 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e090      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e4:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e084      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	4b45      	ldr	r3, [pc, #276]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e07c      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 0203 	bic.w	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	493e      	ldr	r1, [pc, #248]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002816:	f7fe fd01 	bl	800121c <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281c:	e00a      	b.n	8002834 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281e:	f7fe fcfd 	bl	800121c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e064      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 020c 	and.w	r2, r3, #12
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	429a      	cmp	r2, r3
 8002844:	d1eb      	bne.n	800281e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	492b      	ldr	r1, [pc, #172]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d210      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4923      	ldr	r1, [pc, #140]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_RCC_ClockConfig+0x1ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e034      	b.n	80028fe <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4917      	ldr	r1, [pc, #92]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490f      	ldr	r1, [pc, #60]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4601      	mov	r1, r0
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_RCC_ClockConfig+0x1b0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1b4>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	fa21 f303 	lsr.w	r3, r1, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe fc60 	bl	80011b8 <HAL_InitTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80028fc:	7afb      	ldrb	r3, [r7, #11]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
 8002910:	080163e4 	.word	0x080163e4
 8002914:	20000144 	.word	0x20000144

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x34>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d121      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d11e      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800294c:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e005      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002974:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d102      	bne.n	8002996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x130>)
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e004      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x134>)
 800299e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d145      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	3301      	adds	r3, #1
 80029bc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d002      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0xb2>
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0xcc>
 80029c8:	e019      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x130>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 80029d4:	68d2      	ldr	r2, [r2, #12]
 80029d6:	0a12      	lsrs	r2, r2, #8
 80029d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
      break;
 80029e2:	e019      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x134>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 80029ee:	68d2      	ldr	r2, [r2, #12]
 80029f0:	0a12      	lsrs	r2, r2, #8
 80029f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
      break;
 80029fc:	e00c      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 8002a08:	68d2      	ldr	r2, [r2, #12]
 8002a0a:	0a12      	lsrs	r2, r2, #8
 8002a0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
      break;
 8002a16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x128>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0e5b      	lsrs	r3, r3, #25
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a32:	69bb      	ldr	r3, [r7, #24]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3724      	adds	r7, #36	; 0x24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080163fc 	.word	0x080163fc
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000144 	.word	0x20000144

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a70:	4601      	mov	r1, r0
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	080163f4 	.word	0x080163f4

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a98:	f7ff ffda 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0adb      	lsrs	r3, r3, #11
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	080163f4 	.word	0x080163f4

08002ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ad8:	f7ff fa36 	bl	8001f48 <HAL_PWREx_GetVoltageRange>
 8002adc:	6178      	str	r0, [r7, #20]
 8002ade:	e014      	b.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6593      	str	r3, [r2, #88]	; 0x58
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002af8:	f7ff fa26 	bl	8001f48 <HAL_PWREx_GetVoltageRange>
 8002afc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b10:	d10b      	bne.n	8002b2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d919      	bls.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b1c:	d902      	bls.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b1e:	2302      	movs	r3, #2
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e013      	b.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b24:	2301      	movs	r3, #1
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e010      	b.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d902      	bls.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b30:	2303      	movs	r3, #3
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e00a      	b.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d102      	bne.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e004      	b.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b70      	cmp	r3, #112	; 0x70
 8002b46:	d101      	bne.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b48:	2301      	movs	r3, #1
 8002b4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 0207 	bic.w	r2, r3, #7
 8002b54:	4909      	ldr	r1, [pc, #36]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02f      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ba6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002bb0:	e00f      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bbe:	e00c      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f9f0 	bl	8002fac <RCCEx_PLLSAI1_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd0:	e003      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	494e      	ldr	r1, [pc, #312]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 809e 	beq.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a3f      	ldr	r2, [pc, #252]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fae6 	bl	800121c <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c52:	e009      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fae2 	bl	800121c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	74fb      	strb	r3, [r7, #19]
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d15a      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01e      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d019      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe faa2 	bl	800121c <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fa9e 	bl	800121c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cf2:	e006      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ec      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d1e:	e009      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d34:	7c7b      	ldrb	r3, [r7, #17]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b9b      	ldr	r3, [pc, #620]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a9a      	ldr	r2, [pc, #616]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d52:	4b95      	ldr	r3, [pc, #596]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 0203 	bic.w	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4991      	ldr	r1, [pc, #580]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d74:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	4989      	ldr	r1, [pc, #548]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d96:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	4980      	ldr	r1, [pc, #512]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	4978      	ldr	r1, [pc, #480]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	496f      	ldr	r1, [pc, #444]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4967      	ldr	r1, [pc, #412]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	495e      	ldr	r1, [pc, #376]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e40:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	4956      	ldr	r1, [pc, #344]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	494d      	ldr	r1, [pc, #308]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d028      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	4945      	ldr	r1, [pc, #276]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a3f      	ldr	r2, [pc, #252]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eae:	60d3      	str	r3, [r2, #12]
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f872 	bl	8002fac <RCCEx_PLLSAI1_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d028      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	492d      	ldr	r1, [pc, #180]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f00:	d106      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0c:	60d3      	str	r3, [r2, #12]
 8002f0e:	e011      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f843 	bl	8002fac <RCCEx_PLLSAI1_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01c      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	4916      	ldr	r1, [pc, #88]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f5e:	d10c      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2102      	movs	r1, #2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f820 	bl	8002fac <RCCEx_PLLSAI1_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000

08002fac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fba:	4b73      	ldr	r3, [pc, #460]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d018      	beq.n	8002ff8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fc6:	4b70      	ldr	r3, [pc, #448]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10d      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fde:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
       ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d044      	beq.n	800307c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e041      	b.n	800307c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d00c      	beq.n	800301a <RCCEx_PLLSAI1_Config+0x6e>
 8003000:	2b03      	cmp	r3, #3
 8003002:	d013      	beq.n	800302c <RCCEx_PLLSAI1_Config+0x80>
 8003004:	2b01      	cmp	r3, #1
 8003006:	d120      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003008:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d11d      	bne.n	8003050 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003018:	e01a      	b.n	8003050 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800301a:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e013      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800302c:	4b56      	ldr	r3, [pc, #344]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003048:	e006      	b.n	8003058 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      break;
 800304e:	e004      	b.n	800305a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003050:	bf00      	nop
 8003052:	e002      	b.n	800305a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003058:	bf00      	nop
    }

    if(status == HAL_OK)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003060:	4b49      	ldr	r3, [pc, #292]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6819      	ldr	r1, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	3b01      	subs	r3, #1
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	430b      	orrs	r3, r1
 8003076:	4944      	ldr	r1, [pc, #272]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d17c      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a40      	ldr	r2, [pc, #256]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003088:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800308c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308e:	f7fe f8c5 	bl	800121c <HAL_GetTick>
 8003092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003094:	e009      	b.n	80030aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003096:	f7fe f8c1 	bl	800121c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d902      	bls.n	80030aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	73fb      	strb	r3, [r7, #15]
        break;
 80030a8:	e005      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ef      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d15f      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d110      	bne.n	80030e4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6892      	ldr	r2, [r2, #8]
 80030d2:	0211      	lsls	r1, r2, #8
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	06d2      	lsls	r2, r2, #27
 80030da:	430a      	orrs	r2, r1
 80030dc:	492a      	ldr	r1, [pc, #168]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	610b      	str	r3, [r1, #16]
 80030e2:	e027      	b.n	8003134 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d112      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ea:	4b27      	ldr	r3, [pc, #156]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	0211      	lsls	r1, r2, #8
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6912      	ldr	r2, [r2, #16]
 8003100:	0852      	lsrs	r2, r2, #1
 8003102:	3a01      	subs	r2, #1
 8003104:	0552      	lsls	r2, r2, #21
 8003106:	430a      	orrs	r2, r1
 8003108:	491f      	ldr	r1, [pc, #124]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	610b      	str	r3, [r1, #16]
 800310e:	e011      	b.n	8003134 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003118:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6892      	ldr	r2, [r2, #8]
 8003120:	0211      	lsls	r1, r2, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6952      	ldr	r2, [r2, #20]
 8003126:	0852      	lsrs	r2, r2, #1
 8003128:	3a01      	subs	r2, #1
 800312a:	0652      	lsls	r2, r2, #25
 800312c:	430a      	orrs	r2, r1
 800312e:	4916      	ldr	r1, [pc, #88]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a13      	ldr	r2, [pc, #76]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800313a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe f86c 	bl	800121c <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003146:	e009      	b.n	800315c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003148:	f7fe f868 	bl	800121c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	73fb      	strb	r3, [r7, #15]
          break;
 800315a:	e005      	b.n	8003168 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	4904      	ldr	r1, [pc, #16]	; (8003188 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07c      	b.n	8003298 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f003 fa13 	bl	80065e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031de:	d902      	bls.n	80031e6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e002      	b.n	80031ec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031f4:	d007      	beq.n	8003206 <HAL_SPI_Init+0x7a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031fe:	d002      	beq.n	8003206 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003216:	d903      	bls.n	8003220 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
 800321e:	e002      	b.n	8003226 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	ea42 0103 	orr.w	r1, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0204 	and.w	r2, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032ae:	2301      	movs	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x26>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e1fb      	b.n	80036be <HAL_SPI_TransmitReceive+0x41e>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ce:	f7fd ffa5 	bl	800121c <HAL_GetTick>
 80032d2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ea:	7efb      	ldrb	r3, [r7, #27]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d00e      	beq.n	800330e <HAL_SPI_TransmitReceive+0x6e>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f6:	d106      	bne.n	8003306 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <HAL_SPI_TransmitReceive+0x66>
 8003300:	7efb      	ldrb	r3, [r7, #27]
 8003302:	2b04      	cmp	r3, #4
 8003304:	d003      	beq.n	800330e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800330c:	e1cd      	b.n	80036aa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x80>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x80>
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003326:	e1c0      	b.n	80036aa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b04      	cmp	r3, #4
 8003332:	d003      	beq.n	800333c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2205      	movs	r2, #5
 8003338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	887a      	ldrh	r2, [r7, #2]
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800337e:	d802      	bhi.n	8003386 <HAL_SPI_TransmitReceive+0xe6>
 8003380:	8a3b      	ldrh	r3, [r7, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d908      	bls.n	8003398 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	e007      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d007      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033ce:	d97c      	bls.n	80034ca <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive+0x13e>
 80033d8:	8a7b      	ldrh	r3, [r7, #18]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d169      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003402:	e056      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d11b      	bne.n	800344a <HAL_SPI_TransmitReceive+0x1aa>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <HAL_SPI_TransmitReceive+0x1aa>
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	2b01      	cmp	r3, #1
 8003420:	d113      	bne.n	800344a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d11c      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x1f2>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	b292      	uxth	r2, r2
 8003470:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	1c9a      	adds	r2, r3, #2
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800348e:	2301      	movs	r3, #1
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003492:	f7fd fec3 	bl	800121c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349e:	429a      	cmp	r2, r3
 80034a0:	d807      	bhi.n	80034b2 <HAL_SPI_TransmitReceive+0x212>
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d003      	beq.n	80034b2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034b0:	e0fb      	b.n	80036aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1a3      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x164>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d19d      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x164>
 80034c8:	e0df      	b.n	800368a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_SPI_TransmitReceive+0x23a>
 80034d2:	8a7b      	ldrh	r3, [r7, #18]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 80cb 	bne.w	8003670 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d912      	bls.n	800350a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b02      	subs	r3, #2
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003508:	e0b2      	b.n	8003670 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003530:	e09e      	b.n	8003670 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b02      	cmp	r3, #2
 800353e:	d134      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x30a>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02f      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x30a>
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	2b01      	cmp	r3, #1
 800354e:	d12c      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d912      	bls.n	8003580 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	881a      	ldrh	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b02      	subs	r3, #2
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800357e:	e012      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d148      	bne.n	800364a <HAL_SPI_TransmitReceive+0x3aa>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d042      	beq.n	800364a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d923      	bls.n	8003618 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	b292      	uxth	r2, r2
 80035dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b02      	subs	r3, #2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d81f      	bhi.n	8003646 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e016      	b.n	8003646 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f103 020c 	add.w	r2, r3, #12
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	7812      	ldrb	r2, [r2, #0]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003646:	2301      	movs	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800364a:	f7fd fde7 	bl	800121c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_TransmitReceive+0x3c2>
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d102      	bne.n	8003668 <HAL_SPI_TransmitReceive+0x3c8>
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800366e:	e01c      	b.n	80036aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	f47f af5b 	bne.w	8003532 <HAL_SPI_TransmitReceive+0x292>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f af54 	bne.w	8003532 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f8f0 	bl	8003874 <SPI_EndRxTxTransaction>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
 80036a6:	e000      	b.n	80036aa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80036a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3728      	adds	r7, #40	; 0x28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d6:	e04c      	b.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d048      	beq.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80036e0:	f7fd fd9c 	bl	800121c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d902      	bls.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d13d      	bne.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370e:	d111      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003718:	d004      	beq.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d107      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	d10f      	bne.n	800375e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e00f      	b.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	429a      	cmp	r2, r3
 800378e:	d1a3      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80037a8:	e057      	b.n	800385a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037b0:	d106      	bne.n	80037c0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d048      	beq.n	800385a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80037c8:	f7fd fd28 	bl	800121c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d902      	bls.n	80037de <SPI_WaitFifoStateUntilTimeout+0x44>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13d      	bne.n	800385a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f6:	d111      	bne.n	800381c <SPI_WaitFifoStateUntilTimeout+0x82>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003800:	d004      	beq.n	800380c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d107      	bne.n	800381c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d10f      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e008      	b.n	800386c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d19f      	bne.n	80037aa <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2200      	movs	r2, #0
 8003888:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff ff84 	bl	800379a <SPI_WaitFifoStateUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e027      	b.n	80038f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff ff07 	bl	80036c6 <SPI_WaitFlagStateUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e014      	b.n	80038f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ff5d 	bl	800379a <SPI_WaitFifoStateUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e000      	b.n	80038f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01d      	b.n	800394e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f002 ffd2 	bl	80068d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 fa74 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_TIM_Base_Start_IT+0x54>)
 8003978:	4013      	ands	r3, r2
 800397a:	2b06      	cmp	r3, #6
 800397c:	d00f      	beq.n	800399e <HAL_TIM_Base_Start_IT+0x46>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_TIM_Base_Start_IT+0x54>)
 8003986:	4013      	ands	r3, r2
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d007      	beq.n	800399e <HAL_TIM_Base_Start_IT+0x46>
  {
    __HAL_TIM_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10f      	bne.n	80039f8 <HAL_TIM_Base_Stop_IT+0x48>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	f240 4344 	movw	r3, #1092	; 0x444
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_Base_Stop_IT+0x48>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d122      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d11b      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0202 	mvn.w	r2, #2
 8003a32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f9d0 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003a4e:	e005      	b.n	8003a5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9c2 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f9d3 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d122      	bne.n	8003ab6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d11b      	bne.n	8003ab6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0204 	mvn.w	r2, #4
 8003a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9a6 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003aa2:	e005      	b.n	8003ab0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f998 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9a9 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d122      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d11b      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0208 	mvn.w	r2, #8
 8003ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f97c 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003af6:	e005      	b.n	8003b04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f96e 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f97f 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d122      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d11b      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0210 	mvn.w	r2, #16
 8003b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2208      	movs	r2, #8
 8003b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f952 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b4a:	e005      	b.n	8003b58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f944 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f955 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10e      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0201 	mvn.w	r2, #1
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f002 fef3 	bl	8006970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa99 	bl	80040e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa8c 	bl	80040fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f903 	bl	8003e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0220 	mvn.w	r2, #32
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa4c 	bl	80040d4 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_ConfigClockSource+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0ba      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x18e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d07a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x14a>
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d80d      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x74>
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	f000 8086 	beq.w	8003dae <HAL_TIM_ConfigClockSource+0x16a>
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d803      	bhi.n	8003cae <HAL_TIM_ConfigClockSource+0x6a>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8081 	beq.w	8003dae <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cac:	e088      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d07d      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x16a>
 8003cb2:	2b30      	cmp	r3, #48	; 0x30
 8003cb4:	d07b      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8003cb6:	e083      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d018      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0xaa>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d804      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x86>
 8003cc0:	2b50      	cmp	r3, #80	; 0x50
 8003cc2:	d044      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x10a>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d052      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x12a>
      break;
 8003cc8:	e07a      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8003cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cce:	d003      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x94>
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd4:	d028      	beq.n	8003d28 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8003cd6:	e073      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	6093      	str	r3, [r2, #8]
      break;
 8003cec:	e068      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6899      	ldr	r1, [r3, #8]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f000 f973 	bl	8003fe8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	609a      	str	r2, [r3, #8]
      break;
 8003d26:	e04b      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6899      	ldr	r1, [r3, #8]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f000 f956 	bl	8003fe8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d4a:	609a      	str	r2, [r3, #8]
      break;
 8003d4c:	e038      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f8ca 	bl	8003ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2150      	movs	r1, #80	; 0x50
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f923 	bl	8003fb2 <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e028      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 f8e9 	bl	8003f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2160      	movs	r1, #96	; 0x60
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f913 	bl	8003fb2 <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e018      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 f8aa 	bl	8003ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2140      	movs	r1, #64	; 0x40
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f903 	bl	8003fb2 <TIM_ITRx_SetConfig>
      break;
 8003dac:	e008      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f000 f8fa 	bl	8003fb2 <TIM_ITRx_SetConfig>
      break;
 8003dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <TIM_Base_SetConfig+0xbc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x20>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <TIM_Base_SetConfig+0xbc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_Base_SetConfig+0x52>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d007      	beq.n	8003e7e <TIM_Base_SetConfig+0x52>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <TIM_Base_SetConfig+0xc0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0x52>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <TIM_Base_SetConfig+0xc4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <TIM_Base_SetConfig+0xbc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0xa0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <TIM_Base_SetConfig+0xc0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xa0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <TIM_Base_SetConfig+0xc4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400

08003ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0201 	bic.w	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f023 030a 	bic.w	r3, r3, #10
 8003f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b087      	sub	sp, #28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0210 	bic.w	r2, r3, #16
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	031b      	lsls	r3, r3, #12
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f043 0307 	orr.w	r3, r3, #7
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	021a      	lsls	r2, r3, #8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	431a      	orrs	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800403c:	2302      	movs	r3, #2
 800403e:	e040      	b.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004070:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004094:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40012c00 	.word	0x40012c00

080040d4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e043      	b.n	80041aa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f002 fca4 	bl	8006a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 faa5 	bl	80046a4 <UART_SetConfig>
 800415a:	4603      	mov	r3, r0
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e022      	b.n	80041aa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fd8f 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004180:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004190:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fe16 	bl	8004dd4 <UART_CheckIdleState>
 80041a8:	4603      	mov	r3, r0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e02a      	b.n	800421a <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f002 fc91 	bl	8006b1c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_UART_Transmit_IT>:
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
  extern volatile int abc;
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b20      	cmp	r3, #32
 800423c:	d145      	bne.n	80042ca <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_UART_Transmit_IT+0x26>
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e03e      	b.n	80042cc <HAL_UART_Transmit_IT+0xa8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_UART_Transmit_IT+0x38>
 8004258:	2302      	movs	r3, #2
 800425a:	e037      	b.n	80042cc <HAL_UART_Transmit_IT+0xa8>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	88fa      	ldrh	r2, [r7, #6]
 8004276:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2221      	movs	r2, #33	; 0x21
 800428a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    }
    else
#endif
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d107      	bne.n	80042a8 <HAL_UART_Transmit_IT+0x84>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <HAL_UART_Transmit_IT+0x84>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <HAL_UART_Transmit_IT+0xb4>)
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64
 80042a6:	e002      	b.n	80042ae <HAL_UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_UART_Transmit_IT+0xb8>)
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

      /* Enable the Transmit Data Register Empty interrupt */
#if defined(USART_CR1_FIFOEN)
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042c4:	601a      	str	r2, [r3, #0]
#endif
    }

    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	08004fdd 	.word	0x08004fdd
 80042dc:	08004f69 	.word	0x08004f69

080042e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	f040 8086 	bne.w	8004408 <HAL_UART_Receive_IT+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_UART_Receive_IT+0x28>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e07e      	b.n	800440a <HAL_UART_Receive_IT+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_UART_Receive_IT+0x3a>
 8004316:	2302      	movs	r3, #2
 8004318:	e077      	b.n	800440a <HAL_UART_Receive_IT+0x12a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d10e      	bne.n	8004366 <HAL_UART_Receive_IT+0x86>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_UART_Receive_IT+0x7c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800435a:	e028      	b.n	80043ae <HAL_UART_Receive_IT+0xce>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	22ff      	movs	r2, #255	; 0xff
 8004360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004364:	e023      	b.n	80043ae <HAL_UART_Receive_IT+0xce>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_UART_Receive_IT+0xaa>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <HAL_UART_Receive_IT+0xa0>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800437e:	e016      	b.n	80043ae <HAL_UART_Receive_IT+0xce>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	227f      	movs	r2, #127	; 0x7f
 8004384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004388:	e011      	b.n	80043ae <HAL_UART_Receive_IT+0xce>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004392:	d10c      	bne.n	80043ae <HAL_UART_Receive_IT+0xce>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_UART_Receive_IT+0xc6>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	227f      	movs	r2, #127	; 0x7f
 80043a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043a4:	e003      	b.n	80043ae <HAL_UART_Receive_IT+0xce>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	223f      	movs	r2, #63	; 0x3f
 80043aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2222      	movs	r2, #34	; 0x22
 80043b8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	609a      	str	r2, [r3, #8]
    }
    else
#endif
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d107      	bne.n	80043e6 <HAL_UART_Receive_IT+0x106>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <HAL_UART_Receive_IT+0x106>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <HAL_UART_Receive_IT+0x138>)
 80043e2:	661a      	str	r2, [r3, #96]	; 0x60
 80043e4:	e002      	b.n	80043ec <HAL_UART_Receive_IT+0x10c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <HAL_UART_Receive_IT+0x13c>)
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
#if defined(USART_CR1_FIFOEN)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
#else
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004402:	601a      	str	r2, [r3, #0]
#endif
    }

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_UART_Receive_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	08005137 	.word	0x08005137
 800441c:	08005091 	.word	0x08005091

08004420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d113      	bne.n	8004476 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
    if (((isrflags & USART_ISR_RXNE) != RESET)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_UART_IRQHandler+0x56>
#endif
    {
      if (huart->RxISR != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80fd 	beq.w	8004666 <HAL_UART_IRQHandler+0x246>
      {
        huart->RxISR(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
      }
      return;
 8004474:	e0f7      	b.n	8004666 <HAL_UART_IRQHandler+0x246>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
#else
  if ((errorflags != RESET)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80bf 	beq.w	80045fc <HAL_UART_IRQHandler+0x1dc>
      && (((cr3its & USART_CR3_EIE) != RESET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80b4 	beq.w	80045fc <HAL_UART_IRQHandler+0x1dc>
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <HAL_UART_IRQHandler+0x9c>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <HAL_UART_IRQHandler+0xc4>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2202      	movs	r2, #2
 80044d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f043 0204 	orr.w	r2, r3, #4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <HAL_UART_IRQHandler+0xec>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2204      	movs	r2, #4
 80044fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	f043 0202 	orr.w	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	675a      	str	r2, [r3, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if (((isrflags & USART_ISR_ORE) != RESET)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d013      	beq.n	800453e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != RESET)))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_UART_IRQHandler+0x11e>
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2208      	movs	r2, #8
 8004530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	f043 0208 	orr.w	r2, r3, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8091 	beq.w	800466a <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_UART_IRQHandler+0x14c>
#endif
      {
        if (huart->RxISR != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_UART_IRQHandler+0x166>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d131      	bne.n	80045ea <HAL_UART_IRQHandler+0x1ca>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fcb7 	bl	8004efa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d123      	bne.n	80045e2 <HAL_UART_IRQHandler+0x1c2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d013      	beq.n	80045da <HAL_UART_IRQHandler+0x1ba>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	4a30      	ldr	r2, [pc, #192]	; (8004678 <HAL_UART_IRQHandler+0x258>)
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc ff8b 	bl	80014da <HAL_DMA_Abort_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d016      	beq.n	80045f8 <HAL_UART_IRQHandler+0x1d8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80045d4:	4610      	mov	r0, r2
 80045d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e00e      	b.n	80045f8 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f858 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e00a      	b.n	80045f8 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f854 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	e006      	b.n	80045f8 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f850 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	675a      	str	r2, [r3, #116]	; 0x74
      }
    }
    return;
 80045f6:	e038      	b.n	800466a <HAL_UART_IRQHandler+0x24a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	bf00      	nop
    return;
 80045fa:	e036      	b.n	800466a <HAL_UART_IRQHandler+0x24a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <HAL_UART_IRQHandler+0x202>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_UART_IRQHandler+0x202>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fde0 	bl	80051e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004620:	e026      	b.n	8004670 <HAL_UART_IRQHandler+0x250>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
#else
  if (((isrflags & USART_ISR_TXE) != RESET)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_UART_IRQHandler+0x228>
#endif
  {
    if (huart->TxISR != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463a:	2b00      	cmp	r3, #0
 800463c:	d017      	beq.n	800466e <HAL_UART_IRQHandler+0x24e>
    {
      huart->TxISR(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
    }
    return;
 8004646:	e012      	b.n	800466e <HAL_UART_IRQHandler+0x24e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00e      	beq.n	8004670 <HAL_UART_IRQHandler+0x250>
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_UART_IRQHandler+0x250>
  {
    UART_EndTransmit_IT(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fcfd 	bl	800505c <UART_EndTransmit_IT>
    return;
 8004662:	bf00      	nop
 8004664:	e004      	b.n	8004670 <HAL_UART_IRQHandler+0x250>
      return;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <HAL_UART_IRQHandler+0x250>
    return;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <HAL_UART_IRQHandler+0x250>
    return;
 800466e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif
}
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	08004f3d 	.word	0x08004f3d

0800467c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80046a8:	b088      	sub	sp, #32
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80046b2:	2310      	movs	r3, #16
 80046b4:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4bae      	ldr	r3, [pc, #696]	; (80049a0 <UART_SetConfig+0x2fc>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	69f9      	ldr	r1, [r7, #28]
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4aa4      	ldr	r2, [pc, #656]	; (80049a4 <UART_SetConfig+0x300>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	4313      	orrs	r3, r2
 8004720:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a9b      	ldr	r2, [pc, #620]	; (80049a8 <UART_SetConfig+0x304>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d121      	bne.n	8004784 <UART_SetConfig+0xe0>
 8004740:	4b9a      	ldr	r3, [pc, #616]	; (80049ac <UART_SetConfig+0x308>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d816      	bhi.n	800477c <UART_SetConfig+0xd8>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0xb0>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004765 	.word	0x08004765
 8004758:	08004771 	.word	0x08004771
 800475c:	0800476b 	.word	0x0800476b
 8004760:	08004777 	.word	0x08004777
 8004764:	2301      	movs	r3, #1
 8004766:	76fb      	strb	r3, [r7, #27]
 8004768:	e096      	b.n	8004898 <UART_SetConfig+0x1f4>
 800476a:	2302      	movs	r3, #2
 800476c:	76fb      	strb	r3, [r7, #27]
 800476e:	e093      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004770:	2304      	movs	r3, #4
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e090      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004776:	2308      	movs	r3, #8
 8004778:	76fb      	strb	r3, [r7, #27]
 800477a:	e08d      	b.n	8004898 <UART_SetConfig+0x1f4>
 800477c:	2310      	movs	r3, #16
 800477e:	76fb      	strb	r3, [r7, #27]
 8004780:	bf00      	nop
 8004782:	e089      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a89      	ldr	r2, [pc, #548]	; (80049b0 <UART_SetConfig+0x30c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d134      	bne.n	80047f8 <UART_SetConfig+0x154>
 800478e:	4b87      	ldr	r3, [pc, #540]	; (80049ac <UART_SetConfig+0x308>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d829      	bhi.n	80047f0 <UART_SetConfig+0x14c>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0x100>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047f1 	.word	0x080047f1
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047f1 	.word	0x080047f1
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	080047f1 	.word	0x080047f1
 80047c4:	080047df 	.word	0x080047df
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f1 	.word	0x080047f1
 80047d4:	080047eb 	.word	0x080047eb
 80047d8:	2300      	movs	r3, #0
 80047da:	76fb      	strb	r3, [r7, #27]
 80047dc:	e05c      	b.n	8004898 <UART_SetConfig+0x1f4>
 80047de:	2302      	movs	r3, #2
 80047e0:	76fb      	strb	r3, [r7, #27]
 80047e2:	e059      	b.n	8004898 <UART_SetConfig+0x1f4>
 80047e4:	2304      	movs	r3, #4
 80047e6:	76fb      	strb	r3, [r7, #27]
 80047e8:	e056      	b.n	8004898 <UART_SetConfig+0x1f4>
 80047ea:	2308      	movs	r3, #8
 80047ec:	76fb      	strb	r3, [r7, #27]
 80047ee:	e053      	b.n	8004898 <UART_SetConfig+0x1f4>
 80047f0:	2310      	movs	r3, #16
 80047f2:	76fb      	strb	r3, [r7, #27]
 80047f4:	bf00      	nop
 80047f6:	e04f      	b.n	8004898 <UART_SetConfig+0x1f4>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a6d      	ldr	r2, [pc, #436]	; (80049b4 <UART_SetConfig+0x310>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d120      	bne.n	8004844 <UART_SetConfig+0x1a0>
 8004802:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <UART_SetConfig+0x308>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800480c:	2b10      	cmp	r3, #16
 800480e:	d00f      	beq.n	8004830 <UART_SetConfig+0x18c>
 8004810:	2b10      	cmp	r3, #16
 8004812:	d802      	bhi.n	800481a <UART_SetConfig+0x176>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <UART_SetConfig+0x180>
 8004818:	e010      	b.n	800483c <UART_SetConfig+0x198>
 800481a:	2b20      	cmp	r3, #32
 800481c:	d005      	beq.n	800482a <UART_SetConfig+0x186>
 800481e:	2b30      	cmp	r3, #48	; 0x30
 8004820:	d009      	beq.n	8004836 <UART_SetConfig+0x192>
 8004822:	e00b      	b.n	800483c <UART_SetConfig+0x198>
 8004824:	2300      	movs	r3, #0
 8004826:	76fb      	strb	r3, [r7, #27]
 8004828:	e036      	b.n	8004898 <UART_SetConfig+0x1f4>
 800482a:	2302      	movs	r3, #2
 800482c:	76fb      	strb	r3, [r7, #27]
 800482e:	e033      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004830:	2304      	movs	r3, #4
 8004832:	76fb      	strb	r3, [r7, #27]
 8004834:	e030      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004836:	2308      	movs	r3, #8
 8004838:	76fb      	strb	r3, [r7, #27]
 800483a:	e02d      	b.n	8004898 <UART_SetConfig+0x1f4>
 800483c:	2310      	movs	r3, #16
 800483e:	76fb      	strb	r3, [r7, #27]
 8004840:	bf00      	nop
 8004842:	e029      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <UART_SetConfig+0x300>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d123      	bne.n	8004896 <UART_SetConfig+0x1f2>
 800484e:	4b57      	ldr	r3, [pc, #348]	; (80049ac <UART_SetConfig+0x308>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485c:	d012      	beq.n	8004884 <UART_SetConfig+0x1e0>
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004862:	d802      	bhi.n	800486a <UART_SetConfig+0x1c6>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <UART_SetConfig+0x1d4>
 8004868:	e012      	b.n	8004890 <UART_SetConfig+0x1ec>
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486e:	d006      	beq.n	800487e <UART_SetConfig+0x1da>
 8004870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004874:	d009      	beq.n	800488a <UART_SetConfig+0x1e6>
 8004876:	e00b      	b.n	8004890 <UART_SetConfig+0x1ec>
 8004878:	2300      	movs	r3, #0
 800487a:	76fb      	strb	r3, [r7, #27]
 800487c:	e00c      	b.n	8004898 <UART_SetConfig+0x1f4>
 800487e:	2302      	movs	r3, #2
 8004880:	76fb      	strb	r3, [r7, #27]
 8004882:	e009      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004884:	2304      	movs	r3, #4
 8004886:	76fb      	strb	r3, [r7, #27]
 8004888:	e006      	b.n	8004898 <UART_SetConfig+0x1f4>
 800488a:	2308      	movs	r3, #8
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e003      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004890:	2310      	movs	r3, #16
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	e000      	b.n	8004898 <UART_SetConfig+0x1f4>
 8004896:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <UART_SetConfig+0x300>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f040 80f4 	bne.w	8004a8c <UART_SetConfig+0x3e8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a4:	7efb      	ldrb	r3, [r7, #27]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d823      	bhi.n	80048f2 <UART_SetConfig+0x24e>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x20c>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048e3 	.word	0x080048e3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	080048f3 	.word	0x080048f3
 80048d0:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7fe f8c8 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80048d8:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80048da:	e00d      	b.n	80048f8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <UART_SetConfig+0x314>)
 80048de:	60fb      	str	r3, [r7, #12]
#endif
        break;
 80048e0:	e00a      	b.n	80048f8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe f819 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80048e6:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80048e8:	e006      	b.n	80048f8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	60fb      	str	r3, [r7, #12]
#endif
        break;
 80048f0:	e002      	b.n	80048f8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	74fb      	strb	r3, [r7, #19]
        break;
 80048f6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 81b9 	beq.w	8004c72 <UART_SetConfig+0x5ce>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	429a      	cmp	r2, r3
 800490e:	d305      	bcc.n	800491c <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d902      	bls.n	8004922 <UART_SetConfig+0x27e>
      {
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	74fb      	strb	r3, [r7, #19]
 8004920:	e1a7      	b.n	8004c72 <UART_SetConfig+0x5ce>
      }
      else
      {
        switch (clocksource)
 8004922:	7efb      	ldrb	r3, [r7, #27]
 8004924:	2b08      	cmp	r3, #8
 8004926:	f200 809e 	bhi.w	8004a66 <UART_SetConfig+0x3c2>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x28c>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004955 	.word	0x08004955
 8004934:	08004a67 	.word	0x08004a67
 8004938:	080049bd 	.word	0x080049bd
 800493c:	08004a67 	.word	0x08004a67
 8004940:	080049f1 	.word	0x080049f1
 8004944:	08004a67 	.word	0x08004a67
 8004948:	08004a67 	.word	0x08004a67
 800494c:	08004a67 	.word	0x08004a67
 8004950:	08004a3d 	.word	0x08004a3d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004954:	f7fe f888 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	f04f 0400 	mov.w	r4, #0
 8004968:	0214      	lsls	r4, r2, #8
 800496a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800496e:	020b      	lsls	r3, r1, #8
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6852      	ldr	r2, [r2, #4]
 8004974:	0852      	lsrs	r2, r2, #1
 8004976:	4611      	mov	r1, r2
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	eb13 0b01 	adds.w	fp, r3, r1
 8004980:	eb44 0c02 	adc.w	ip, r4, r2
 8004984:	4658      	mov	r0, fp
 8004986:	4661      	mov	r1, ip
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f04f 0400 	mov.w	r4, #0
 8004990:	461a      	mov	r2, r3
 8004992:	4623      	mov	r3, r4
 8004994:	f7fc f90a 	bl	8000bac <__aeabi_uldivmod>
 8004998:	4603      	mov	r3, r0
 800499a:	460c      	mov	r4, r1
 800499c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800499e:	e065      	b.n	8004a6c <UART_SetConfig+0x3c8>
 80049a0:	efff69f3 	.word	0xefff69f3
 80049a4:	40008000 	.word	0x40008000
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40004400 	.word	0x40004400
 80049b4:	40004800 	.word	0x40004800
 80049b8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	f04f 0400 	mov.w	r4, #0
 80049c6:	49b1      	ldr	r1, [pc, #708]	; (8004c8c <UART_SetConfig+0x5e8>)
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	eb13 0b01 	adds.w	fp, r3, r1
 80049d0:	eb44 0c02 	adc.w	ip, r4, r2
 80049d4:	4658      	mov	r0, fp
 80049d6:	4661      	mov	r1, ip
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f04f 0400 	mov.w	r4, #0
 80049e0:	461a      	mov	r2, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	f7fc f8e2 	bl	8000bac <__aeabi_uldivmod>
 80049e8:	4603      	mov	r3, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	617b      	str	r3, [r7, #20]
#endif
            break;
 80049ee:	e03d      	b.n	8004a6c <UART_SetConfig+0x3c8>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80049f0:	f7fd ff92 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	f04f 0400 	mov.w	r4, #0
 8004a04:	0214      	lsls	r4, r2, #8
 8004a06:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a0a:	020b      	lsls	r3, r1, #8
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	0852      	lsrs	r2, r2, #1
 8004a12:	4611      	mov	r1, r2
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	eb13 0b01 	adds.w	fp, r3, r1
 8004a1c:	eb44 0c02 	adc.w	ip, r4, r2
 8004a20:	4658      	mov	r0, fp
 8004a22:	4661      	mov	r1, ip
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4623      	mov	r3, r4
 8004a30:	f7fc f8bc 	bl	8000bac <__aeabi_uldivmod>
 8004a34:	4603      	mov	r3, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	617b      	str	r3, [r7, #20]
#endif
            break;
 8004a3a:	e017      	b.n	8004a6c <UART_SetConfig+0x3c8>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	f04f 0400 	mov.w	r4, #0
 8004a46:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004a4a:	f144 0100 	adc.w	r1, r4, #0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	461a      	mov	r2, r3
 8004a58:	4623      	mov	r3, r4
 8004a5a:	f7fc f8a7 	bl	8000bac <__aeabi_uldivmod>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	617b      	str	r3, [r7, #20]
#endif
            break;
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x3c8>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	74fb      	strb	r3, [r7, #19]
            break;
 8004a6a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a72:	d308      	bcc.n	8004a86 <UART_SetConfig+0x3e2>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7a:	d204      	bcs.n	8004a86 <UART_SetConfig+0x3e2>
        {
          huart->Instance->BRR = usartdiv;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e0f5      	b.n	8004c72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	74fb      	strb	r3, [r7, #19]
 8004a8a:	e0f2      	b.n	8004c72 <UART_SetConfig+0x5ce>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a94:	d17f      	bne.n	8004b96 <UART_SetConfig+0x4f2>
  {
    switch (clocksource)
 8004a96:	7efb      	ldrb	r3, [r7, #27]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d85c      	bhi.n	8004b56 <UART_SetConfig+0x4b2>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0x400>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004b57 	.word	0x08004b57
 8004ab4:	08004b21 	.word	0x08004b21
 8004ab8:	08004b57 	.word	0x08004b57
 8004abc:	08004b57 	.word	0x08004b57
 8004ac0:	08004b57 	.word	0x08004b57
 8004ac4:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ac8:	f7fd ffce 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8004acc:	4603      	mov	r3, r0
 8004ace:	005a      	lsls	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	441a      	add	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004ae4:	e03a      	b.n	8004b5c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004ae6:	f7fd ffd5 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8004aea:	4603      	mov	r3, r0
 8004aec:	005a      	lsls	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004b02:	e02b      	b.n	8004b5c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004b0e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6852      	ldr	r2, [r2, #4]
 8004b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004b1e:	e01d      	b.n	8004b5c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b20:	f7fd fefa 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8004b24:	4603      	mov	r3, r0
 8004b26:	005a      	lsls	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	441a      	add	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004b3c:	e00e      	b.n	8004b5c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004b54:	e002      	b.n	8004b5c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	74fb      	strb	r3, [r7, #19]
        break;
 8004b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b0f      	cmp	r3, #15
 8004b60:	d916      	bls.n	8004b90 <UART_SetConfig+0x4ec>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d212      	bcs.n	8004b90 <UART_SetConfig+0x4ec>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f023 030f 	bic.w	r3, r3, #15
 8004b72:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	897b      	ldrh	r3, [r7, #10]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	897a      	ldrh	r2, [r7, #10]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	e070      	b.n	8004c72 <UART_SetConfig+0x5ce>
    }
    else
    {
      ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	74fb      	strb	r3, [r7, #19]
 8004b94:	e06d      	b.n	8004c72 <UART_SetConfig+0x5ce>
    }
  }
  else
  {
    switch (clocksource)
 8004b96:	7efb      	ldrb	r3, [r7, #27]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d859      	bhi.n	8004c50 <UART_SetConfig+0x5ac>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0x500>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004be5 	.word	0x08004be5
 8004bac:	08004c01 	.word	0x08004c01
 8004bb0:	08004c51 	.word	0x08004c51
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004c51 	.word	0x08004c51
 8004bbc:	08004c51 	.word	0x08004c51
 8004bc0:	08004c51 	.word	0x08004c51
 8004bc4:	08004c39 	.word	0x08004c39
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004bc8:	f7fd ff4e 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004be2:	e038      	b.n	8004c56 <UART_SetConfig+0x5b2>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004be4:	f7fd ff56 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	441a      	add	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004bfe:	e02a      	b.n	8004c56 <UART_SetConfig+0x5b2>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004c0a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6852      	ldr	r2, [r2, #4]
 8004c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004c1a:	e01c      	b.n	8004c56 <UART_SetConfig+0x5b2>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c1c:	f7fd fe7c 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004c36:	e00e      	b.n	8004c56 <UART_SetConfig+0x5b2>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004c4e:	e002      	b.n	8004c56 <UART_SetConfig+0x5b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	74fb      	strb	r3, [r7, #19]
        break;
 8004c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b0f      	cmp	r3, #15
 8004c5a:	d908      	bls.n	8004c6e <UART_SetConfig+0x5ca>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d204      	bcs.n	8004c6e <UART_SetConfig+0x5ca>
    {
      huart->Instance->BRR = usartdiv;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	e001      	b.n	8004c72 <UART_SetConfig+0x5ce>
    }
    else
    {
      ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	f4240000 	.word	0xf4240000

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004de6:	f7fc fa19 	bl	800121c <HAL_GetTick>
 8004dea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d10e      	bne.n	8004e18 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f82c 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e022      	b.n	8004e5e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d10e      	bne.n	8004e44 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f816 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e00c      	b.n	8004e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e76:	e02c      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d028      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e86:	f7fc f9c9 	bl	800121c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d21d      	bcs.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea4:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00f      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d0c3      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f10:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff fb98 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b21      	cmp	r3, #33	; 0x21
 8004f7a:	d129      	bne.n	8004fd0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d110      	bne.n	8004faa <UART_TxISR_8BIT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f96:	601a      	str	r2, [r3, #0]
#endif

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
      huart->TxXferCount--;
    }
  }
}
 8004fa8:	e012      	b.n	8004fd0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	1c59      	adds	r1, r3, #1
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b21      	cmp	r3, #33	; 0x21
 8004fee:	d12f      	bne.n	8005050 <UART_TxISR_16BIT+0x74>
  {
    if (huart->TxXferCount == 0)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d110      	bne.n	800501e <UART_TxISR_16BIT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500a:	601a      	str	r2, [r3, #0]
#endif

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2;
      huart->TxXferCount--;
    }
  }
}
 800501c:	e018      	b.n	8005050 <UART_TxISR_16BIT+0x74>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	881a      	ldrh	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005030:	b292      	uxth	r2, r2
 8005032:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	1c9a      	adds	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fafa 	bl	800467c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800509e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b22      	cmp	r3, #34	; 0x22
 80050aa:	d136      	bne.n	800511a <UART_RxISR_8BIT+0x8a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050b2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050b4:	89bb      	ldrh	r3, [r7, #12]
 80050b6:	b2d9      	uxtb	r1, r3
 80050b8:	89fb      	ldrh	r3, [r7, #14]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	1c5c      	adds	r4, r3, #1
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	6544      	str	r4, [r0, #84]	; 0x54
 80050c6:	400a      	ands	r2, r1
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]

    if (--huart->RxXferCount == 0)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4619      	mov	r1, r3
 80050dc:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d124      	bne.n	800512e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050f2:	601a      	str	r2, [r3, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 fd36 	bl	8006b84 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005118:	e009      	b.n	800512e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	8b1b      	ldrh	r3, [r3, #24]
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	b292      	uxth	r2, r2
 800512c:	831a      	strh	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bd90      	pop	{r4, r7, pc}

08005136 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005144:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b22      	cmp	r3, #34	; 0x22
 8005150:	d138      	bne.n	80051c4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005158:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005160:	89ba      	ldrh	r2, [r7, #12]
 8005162:	89fb      	ldrh	r3, [r7, #14]
 8005164:	4013      	ands	r3, r2
 8005166:	b29a      	uxth	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29b      	uxth	r3, r3
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4619      	mov	r1, r3
 8005186:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 800518a:	2b00      	cmp	r3, #0
 800518c:	d124      	bne.n	80051d8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800519c:	601a      	str	r2, [r3, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fce1 	bl	8006b84 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051c2:	e009      	b.n	80051d8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	8b1b      	ldrh	r3, [r3, #24]
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0208 	orr.w	r2, r2, #8
 80051d4:	b292      	uxth	r2, r2
 80051d6:	831a      	strh	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <readFlash>:
sConfig_t config = {.pid=0x0002, .vid=0x0010, .addr=0x0C, .baudrate=0x03, .parity=0, .stopBit=0x01, .number=0,
		0xffff, 0, 0xffff, 0, 0xffff, 0, 0xffff, 0, 0xffff, 0,
		.sort = 0, .start=0x00C8, .stop = 0x1A90, 0x0190, 0x0A, 0x46, 0x02, 0x01, 0x00C8, 0, 0x03};

static void readFlash(uint32_t addr, void *buf, uint16_t count)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
	int i;
	uint8_t *p = (uint8_t *)buf;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e00b      	b.n	8005224 <readFlash+0x30>
		p[i] = *(uint8_t *)addr;
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	440b      	add	r3, r1
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
		addr += 1;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	3301      	adds	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	429a      	cmp	r2, r3
 800522a:	dbef      	blt.n	800520c <readFlash+0x18>
	}

}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <writeFlash>:
#define RADAR_CALI_ADDRESS   0x8032800
static FLASH_EraseInitTypeDef eraseInit = {FLASH_TYPEERASE_PAGES, FLASH_BANK_1, 100, 1};
static FLASH_EraseInitTypeDef eraseCaInit = {FLASH_TYPEERASE_PAGES, FLASH_BANK_1, 101, 1};

static void writeFlash(void *data, uint8_t len)
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
	uint32_t addr = RADAR_CONFIG_ADDRESS;
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <writeFlash+0x70>)
 8005246:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800524c:	b672      	cpsid	i

	__disable_irq();
	HAL_FLASH_Unlock();
 800524e:	f7fc f9f1 	bl	8001634 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8005252:	f107 030c 	add.w	r3, r7, #12
 8005256:	4619      	mov	r1, r3
 8005258:	4814      	ldr	r0, [pc, #80]	; (80052ac <writeFlash+0x74>)
 800525a:	f7fc facb 	bl	80017f4 <HAL_FLASHEx_Erase>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <writeFlash+0x78>)
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <writeFlash+0x7c>)
 8005262:	611a      	str	r2, [r3, #16]
	for(uint8_t i=0; i < len; ) {
 8005264:	2300      	movs	r3, #0
 8005266:	74fb      	strb	r3, [r7, #19]
 8005268:	e013      	b.n	8005292 <writeFlash+0x5a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, *((uint64_t *)data + i/8));
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	e9d3 3400 	ldrd	r3, r4, [r3]
 800527a:	461a      	mov	r2, r3
 800527c:	4623      	mov	r3, r4
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	2000      	movs	r0, #0
 8005282:	f7fc f96b 	bl	800155c <HAL_FLASH_Program>
		addr += 8;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3308      	adds	r3, #8
 800528a:	617b      	str	r3, [r7, #20]
		i += 8;
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	3308      	adds	r3, #8
 8005290:	74fb      	strb	r3, [r7, #19]
	for(uint8_t i=0; i < len; ) {
 8005292:	7cfa      	ldrb	r2, [r7, #19]
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	429a      	cmp	r2, r3
 8005298:	d3e7      	bcc.n	800526a <writeFlash+0x32>
	}

	HAL_FLASH_Lock();
 800529a:	f7fc f9ed 	bl	8001678 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800529e:	b662      	cpsie	i
	__enable_irq();

}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd90      	pop	{r4, r7, pc}
 80052a8:	08032000 	.word	0x08032000
 80052ac:	2000004c 	.word	0x2000004c
 80052b0:	40022000 	.word	0x40022000
 80052b4:	00010031 	.word	0x00010031

080052b8 <storeConfig>:

void storeConfig(){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
	writeCali(0);
 80052bc:	f04f 0000 	mov.w	r0, #0
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f000 f820 	bl	8005308 <writeCali>
	writeFlash(&config, 48);
 80052c8:	2130      	movs	r1, #48	; 0x30
 80052ca:	4807      	ldr	r0, [pc, #28]	; (80052e8 <storeConfig+0x30>)
 80052cc:	f7ff ffb4 	bl	8005238 <writeFlash>
	writeCali(0x0102030401020304);
 80052d0:	a103      	add	r1, pc, #12	; (adr r1, 80052e0 <storeConfig+0x28>)
 80052d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d6:	f000 f817 	bl	8005308 <writeCali>
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	01020304 	.word	0x01020304
 80052e4:	01020304 	.word	0x01020304
 80052e8:	20000020 	.word	0x20000020

080052ec <restoreConfig>:

void restoreConfig(void){
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
	readFlash(RADAR_CONFIG_ADDRESS, &config, 48);
 80052f0:	2230      	movs	r2, #48	; 0x30
 80052f2:	4903      	ldr	r1, [pc, #12]	; (8005300 <restoreConfig+0x14>)
 80052f4:	4803      	ldr	r0, [pc, #12]	; (8005304 <restoreConfig+0x18>)
 80052f6:	f7ff ff7d 	bl	80051f4 <readFlash>
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000020 	.word	0x20000020
 8005304:	08032000 	.word	0x08032000

08005308 <writeCali>:
void getConfig(sConfig_t *p){
	readFlash(RADAR_CONFIG_ADDRESS, p, 48);
}

void writeCali(uint64_t data)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	e9c7 0100 	strd	r0, r1, [r7]
	uint32_t addr = RADAR_CALI_ADDRESS;
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <writeCali+0x44>)
 8005314:	60fb      	str	r3, [r7, #12]
	uint32_t pageError = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800531a:	b672      	cpsid	i
	__disable_irq();
	HAL_FLASH_Unlock();
 800531c:	f7fc f98a 	bl	8001634 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&eraseCaInit, &pageError);
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4619      	mov	r1, r3
 8005326:	480a      	ldr	r0, [pc, #40]	; (8005350 <writeCali+0x48>)
 8005328:	f7fc fa64 	bl	80017f4 <HAL_FLASHEx_Erase>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <writeCali+0x4c>)
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <writeCali+0x50>)
 8005330:	611a      	str	r2, [r3, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 8005332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	2000      	movs	r0, #0
 800533a:	f7fc f90f 	bl	800155c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800533e:	f7fc f99b 	bl	8001678 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8005342:	b662      	cpsie	i
	__enable_irq();
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	08032800 	.word	0x08032800
 8005350:	2000005c 	.word	0x2000005c
 8005354:	40022000 	.word	0x40022000
 8005358:	00010031 	.word	0x00010031

0800535c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005362:	f107 0314 	add.w	r3, r7, #20
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	609a      	str	r2, [r3, #8]
 800536e:	60da      	str	r2, [r3, #12]
 8005370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <MX_GPIO_Init+0x140>)
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	4a49      	ldr	r2, [pc, #292]	; (800549c <MX_GPIO_Init+0x140>)
 8005378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <MX_GPIO_Init+0x140>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800538a:	4b44      	ldr	r3, [pc, #272]	; (800549c <MX_GPIO_Init+0x140>)
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	4a43      	ldr	r2, [pc, #268]	; (800549c <MX_GPIO_Init+0x140>)
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <MX_GPIO_Init+0x140>)
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053a2:	4b3e      	ldr	r3, [pc, #248]	; (800549c <MX_GPIO_Init+0x140>)
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a6:	4a3d      	ldr	r2, [pc, #244]	; (800549c <MX_GPIO_Init+0x140>)
 80053a8:	f043 0304 	orr.w	r3, r3, #4
 80053ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <MX_GPIO_Init+0x140>)
 80053b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ba:	4b38      	ldr	r3, [pc, #224]	; (800549c <MX_GPIO_Init+0x140>)
 80053bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053be:	4a37      	ldr	r2, [pc, #220]	; (800549c <MX_GPIO_Init+0x140>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053c6:	4b35      	ldr	r3, [pc, #212]	; (800549c <MX_GPIO_Init+0x140>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A111_SPI_SS_GPIO_Port, A111_SPI_SS_Pin, GPIO_PIN_RESET);
 80053d2:	2200      	movs	r2, #0
 80053d4:	2140      	movs	r1, #64	; 0x40
 80053d6:	4832      	ldr	r0, [pc, #200]	; (80054a0 <MX_GPIO_Init+0x144>)
 80053d8:	f7fc fd9e 	bl	8001f18 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 80053dc:	2200      	movs	r2, #0
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	482f      	ldr	r0, [pc, #188]	; (80054a0 <MX_GPIO_Init+0x144>)
 80053e2:	f7fc fd99 	bl	8001f18 <HAL_GPIO_WritePin>

   /*Configure GPIO pins : PBPin PBPin PBPin */
   GPIO_InitStruct.Pin = A111_SPI_SS_Pin;
 80053e6:	2340      	movs	r3, #64	; 0x40
 80053e8:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ea:	2301      	movs	r3, #1
 80053ec:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f2:	2300      	movs	r3, #0
 80053f4:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(A111_SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	4619      	mov	r1, r3
 80053fc:	4828      	ldr	r0, [pc, #160]	; (80054a0 <MX_GPIO_Init+0x144>)
 80053fe:	f7fc fb1f 	bl	8001a40 <HAL_GPIO_Init>
   /*Configure GPIO pin : PtPin */
   GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005406:	2301      	movs	r3, #1
 8005408:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800540e:	2300      	movs	r3, #0
 8005410:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8005412:	f107 0314 	add.w	r3, r7, #20
 8005416:	4619      	mov	r1, r3
 8005418:	4821      	ldr	r0, [pc, #132]	; (80054a0 <MX_GPIO_Init+0x144>)
 800541a:	f7fc fb11 	bl	8001a40 <HAL_GPIO_Init>
   /*Configure GPIO pin : PtPin */
   GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 800541e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005422:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	4619      	mov	r1, r3
 8005432:	481c      	ldr	r0, [pc, #112]	; (80054a4 <MX_GPIO_Init+0x148>)
 8005434:	f7fc fb04 	bl	8001a40 <HAL_GPIO_Init>

   /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = Power_1_8_EN_Pin;
 8005438:	2302      	movs	r3, #2
 800543a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800543c:	2301      	movs	r3, #1
 800543e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005444:	2300      	movs	r3, #0
 8005446:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Power_1_8_EN_GPIO_Port, &GPIO_InitStruct);
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	4619      	mov	r1, r3
 800544e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005452:	f7fc faf5 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED1_Pin;
 8005456:	2301      	movs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005462:	2300      	movs	r3, #0
 8005464:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8005466:	f107 0314 	add.w	r3, r7, #20
 800546a:	4619      	mov	r1, r3
 800546c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005470:	f7fc fae6 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005474:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005478:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800547a:	2301      	movs	r3, #1
 800547c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005482:	2302      	movs	r3, #2
 8005484:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	4619      	mov	r1, r3
 800548c:	4805      	ldr	r0, [pc, #20]	; (80054a4 <MX_GPIO_Init+0x148>)
 800548e:	f7fc fad7 	bl	8001a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
*/
}
 8005492:	bf00      	nop
 8005494:	3728      	adds	r7, #40	; 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	48000800 	.word	0x48000800
 80054a4:	48000400 	.word	0x48000400

080054a8 <dataParse>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
bool dataParse(uint8_t *buf, uint8_t len)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
	bool ret = 1;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
	if (((buf[0] != config.addr) && buf[0]) || len > 256) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	4b25      	ldr	r3, [pc, #148]	; (8005554 <dataParse+0xac>)
 80054be:	791b      	ldrb	r3, [r3, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d006      	beq.n	80054d2 <dataParse+0x2a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <dataParse+0x2a>
		ret = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
 80054d0:	e03b      	b.n	800554a <dataParse+0xa2>
	} else {
		if (buf[1] == 0x10) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3301      	adds	r3, #1
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d109      	bne.n	80054f0 <dataParse+0x48>
			if (len != (sizeof(sRtuHead_t) + 1 + buf[sizeof(sRtuHead_t)] + 2)) {
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3306      	adds	r3, #6
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	3309      	adds	r3, #9
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d02f      	beq.n	800554a <dataParse+0xa2>
				ret = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
				goto out;
 80054ee:	e02c      	b.n	800554a <dataParse+0xa2>
			}
	    } else if (len != (sizeof(sRtuHead_t) + 2)) {
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d002      	beq.n	80054fc <dataParse+0x54>
			ret = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
			goto out;
 80054fa:	e026      	b.n	800554a <dataParse+0xa2>
		} else {
			uint8_t crchi,crclo;
			crchi = (crcCheck(buf, len-2) & 0xff00) >> 8;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	3b02      	subs	r3, #2
 8005500:	b2db      	uxtb	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb1f 	bl	8005b48 <crcCheck>
 800550a:	4603      	mov	r3, r0
 800550c:	121b      	asrs	r3, r3, #8
 800550e:	73bb      	strb	r3, [r7, #14]
			crclo = crcCheck(buf, len-2) & 0x00ff;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	3b02      	subs	r3, #2
 8005514:	b2db      	uxtb	r3, r3
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb15 	bl	8005b48 <crcCheck>
 800551e:	4603      	mov	r3, r0
 8005520:	737b      	strb	r3, [r7, #13]
			if ((buf[len - 2] != crclo) || (buf[len - 1] != crchi)) {
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	3b02      	subs	r3, #2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	7b7a      	ldrb	r2, [r7, #13]
 800552e:	429a      	cmp	r2, r3
 8005530:	d107      	bne.n	8005542 <dataParse+0x9a>
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	3b01      	subs	r3, #1
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	7bba      	ldrb	r2, [r7, #14]
 800553e:	429a      	cmp	r2, r3
 8005540:	d002      	beq.n	8005548 <dataParse+0xa0>
				ret = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e000      	b.n	800554a <dataParse+0xa2>
			}
		}
	}

out:
 8005548:	bf00      	nop
	return ret;
 800554a:	7bfb      	ldrb	r3, [r7, #15]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000020 	.word	0x20000020

08005558 <main>:
  */

void initConfig()
{}
int main(void)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b08f      	sub	sp, #60	; 0x3c
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800555e:	f7fb fe13 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005562:	f000 f925 	bl	80057b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005566:	f7ff fef9 	bl	800535c <MX_GPIO_Init>
  MX_SPI2_Init();
 800556a:	f000 fffd 	bl	8006568 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800556e:	f001 fa59 	bl	8006a24 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005572:	f001 f90d 	bl	8006790 <MX_TIM2_Init>
  MX_TIM15_Init();
 8005576:	f001 f959 	bl	800682c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 800557a:	2201      	movs	r2, #1
 800557c:	497c      	ldr	r1, [pc, #496]	; (8005770 <main+0x218>)
 800557e:	487d      	ldr	r0, [pc, #500]	; (8005774 <main+0x21c>)
 8005580:	f7fe feae 	bl	80042e0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */
  if (*(uint64_t *)0x8032800 == 0x0102030401020304) {
 8005584:	4b7c      	ldr	r3, [pc, #496]	; (8005778 <main+0x220>)
 8005586:	e9d3 3400 	ldrd	r3, r4, [r3]
 800558a:	a277      	add	r2, pc, #476	; (adr r2, 8005768 <main+0x210>)
 800558c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005590:	4294      	cmp	r4, r2
 8005592:	bf08      	it	eq
 8005594:	428b      	cmpeq	r3, r1
 8005596:	d102      	bne.n	800559e <main+0x46>
  	  restoreConfig();
 8005598:	f7ff fea8 	bl	80052ec <restoreConfig>
 800559c:	e001      	b.n	80055a2 <main+0x4a>
  } else {
	  storeConfig();
 800559e:	f7ff fe8b 	bl	80052b8 <storeConfig>
  }

  POWER_ON
 80055a2:	2201      	movs	r2, #1
 80055a4:	2102      	movs	r1, #2
 80055a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055aa:	f7fc fcb5 	bl	8001f18 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 80055ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055b2:	f7fb fe3f 	bl	8001234 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  CLEAR_BIT(huart1.Instance->CR1, USART_CR1_TE);
 80055b6:	4b6f      	ldr	r3, [pc, #444]	; (8005774 <main+0x21c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <main+0x21c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0208 	bic.w	r2, r2, #8
 80055c4:	601a      	str	r2, [r3, #0]
  	  (&huart1)->gState = HAL_UART_STATE_BUSY;
 80055c6:	4b6b      	ldr	r3, [pc, #428]	; (8005774 <main+0x21c>)
 80055c8:	2224      	movs	r2, #36	; 0x24
 80055ca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  acc_hal_t hal = acc_hal_integration_get_implementation();
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb fdb5 	bl	8001140 <acc_hal_integration_get_implementation>
  if (!acc_rss_activate(&hal)) {
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fe71 	bl	80072c0 <acc_rss_activate>
 80055de:	4603      	mov	r3, r0
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <main+0x96>
  	return false;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e0b5      	b.n	800575a <main+0x202>
  }
  //printf("config.measuaremode = %d\n", config.measureMode);
  while (1)
  {
    /* USER CODE END WHILE */
	  radarInit();
 80055ee:	f000 f955 	bl	800589c <radarInit>
	  SET_BIT(huart1.Instance->CR1, USART_CR1_TE);
 80055f2:	4b60      	ldr	r3, [pc, #384]	; (8005774 <main+0x21c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b5e      	ldr	r3, [pc, #376]	; (8005774 <main+0x21c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	601a      	str	r2, [r3, #0]
	  huart1.gState = HAL_UART_STATE_READY;
 8005602:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <main+0x21c>)
 8005604:	2220      	movs	r2, #32
 8005606:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	  if (configUart) {
 800560a:	4b5c      	ldr	r3, [pc, #368]	; (800577c <main+0x224>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <main+0xce>
		configUart = 0;
 8005612:	4b5a      	ldr	r3, [pc, #360]	; (800577c <main+0x224>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
		uartConfig();
 8005618:	f001 fb78 	bl	8006d0c <uartConfig>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 800561c:	2201      	movs	r2, #1
 800561e:	4954      	ldr	r1, [pc, #336]	; (8005770 <main+0x218>)
 8005620:	4854      	ldr	r0, [pc, #336]	; (8005774 <main+0x21c>)
 8005622:	f7fe fe5d 	bl	80042e0 <HAL_UART_Receive_IT>
	}
	 if (config.measureMode == 1) {
 8005626:	4b56      	ldr	r3, [pc, #344]	; (8005780 <main+0x228>)
 8005628:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800562c:	2b01      	cmp	r3, #1
 800562e:	d106      	bne.n	800563e <main+0xe6>
		  __HAL_TIM_SET_COUNTER(&htim15, 0);
 8005630:	4b54      	ldr	r3, [pc, #336]	; (8005784 <main+0x22c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2200      	movs	r2, #0
 8005636:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start_IT(&htim15);
 8005638:	4852      	ldr	r0, [pc, #328]	; (8005784 <main+0x22c>)
 800563a:	f7fe f98d 	bl	8003958 <HAL_TIM_Base_Start_IT>
	  }

	  while (1) {

		  if (huart1.RxState == HAL_UART_STATE_READY) {
 800563e:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <main+0x21c>)
 8005640:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b20      	cmp	r3, #32
 8005648:	d108      	bne.n	800565c <main+0x104>
			  while(HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 800564a:	bf00      	nop
 800564c:	2201      	movs	r2, #1
 800564e:	4948      	ldr	r1, [pc, #288]	; (8005770 <main+0x218>)
 8005650:	4848      	ldr	r0, [pc, #288]	; (8005774 <main+0x21c>)
 8005652:	f7fe fe45 	bl	80042e0 <HAL_UART_Receive_IT>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f7      	bne.n	800564c <main+0xf4>
				  ;
		  }
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);

		  if ((config.measureMode == 1) && (doDet == 1)) {
 800565c:	4b48      	ldr	r3, [pc, #288]	; (8005780 <main+0x228>)
 800565e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005662:	2b01      	cmp	r3, #1
 8005664:	d130      	bne.n	80056c8 <main+0x170>
 8005666:	4b48      	ldr	r3, [pc, #288]	; (8005788 <main+0x230>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d12b      	bne.n	80056c8 <main+0x170>
			  execDetOnce(handle, reflections, reflection_count_max, &result_info);
 8005670:	4b46      	ldr	r3, [pc, #280]	; (800578c <main+0x234>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	2205      	movs	r2, #5
 8005676:	4b46      	ldr	r3, [pc, #280]	; (8005790 <main+0x238>)
 8005678:	4946      	ldr	r1, [pc, #280]	; (8005794 <main+0x23c>)
 800567a:	f000 f9f1 	bl	8005a60 <execDetOnce>
			  //int status = huart1.RxState;
			  //HAL_UART_Transmit_IT(&huart1, (uint8_t *)&status, 4);
			  doDet = 0;
 800567e:	4b42      	ldr	r3, [pc, #264]	; (8005788 <main+0x230>)
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
			  if (!config.compareSwitch) {
 8005684:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <main+0x228>)
 8005686:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800568a:	2b00      	cmp	r3, #0
 800568c:	d11c      	bne.n	80056c8 <main+0x170>
				  if (config.distance1 <= config.compareLength) {
 800568e:	4b3c      	ldr	r3, [pc, #240]	; (8005780 <main+0x228>)
 8005690:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005694:	b29a      	uxth	r2, r3
 8005696:	4b3a      	ldr	r3, [pc, #232]	; (8005780 <main+0x228>)
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	b29b      	uxth	r3, r3
 800569c:	429a      	cmp	r2, r3
 800569e:	d80d      	bhi.n	80056bc <main+0x164>
					  //HAL_UART_Transmit_IT(&huart1, "1234", 4);
					  while(huart1.gState != HAL_UART_STATE_READY);
 80056a0:	bf00      	nop
 80056a2:	4b34      	ldr	r3, [pc, #208]	; (8005774 <main+0x21c>)
 80056a4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d1f9      	bne.n	80056a2 <main+0x14a>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80056ae:	2201      	movs	r2, #1
 80056b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056b4:	4838      	ldr	r0, [pc, #224]	; (8005798 <main+0x240>)
 80056b6:	f7fc fc2f 	bl	8001f18 <HAL_GPIO_WritePin>
 80056ba:	e005      	b.n	80056c8 <main+0x170>
				  } else {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80056bc:	2200      	movs	r2, #0
 80056be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056c2:	4835      	ldr	r0, [pc, #212]	; (8005798 <main+0x240>)
 80056c4:	f7fc fc28 	bl	8001f18 <HAL_GPIO_WritePin>
				  }
			  }
		  }
		  if (dataAna && !dataErr) {
 80056c8:	4b34      	ldr	r3, [pc, #208]	; (800579c <main+0x244>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0b5      	beq.n	800563e <main+0xe6>
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <main+0x248>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1b1      	bne.n	800563e <main+0xe6>
			  dataAna = 0;
 80056da:	4b30      	ldr	r3, [pc, #192]	; (800579c <main+0x244>)
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
			  uint8_t aa = dataParse(USART_RX_BUF, USART_RX_POS);
 80056e0:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <main+0x24c>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	4619      	mov	r1, r3
 80056e6:	4830      	ldr	r0, [pc, #192]	; (80057a8 <main+0x250>)
 80056e8:	f7ff fede 	bl	80054a8 <dataParse>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			  if (aa) {
 80056f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0a1      	beq.n	800563e <main+0xe6>
				  uint8_t ret;
				  ret = rtuParse(USART_RX_BUF, USART_RX_POS); //ret = 0成功//ret = 1更改配置重启
 80056fa:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <main+0x24c>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4829      	ldr	r0, [pc, #164]	; (80057a8 <main+0x250>)
 8005702:	f000 facb 	bl	8005c9c <rtuParse>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				  while(huart1.gState != HAL_UART_STATE_READY);
 800570c:	bf00      	nop
 800570e:	4b19      	ldr	r3, [pc, #100]	; (8005774 <main+0x21c>)
 8005710:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b20      	cmp	r3, #32
 8005718:	d1f9      	bne.n	800570e <main+0x1b6>
				  if (ret == 1) {
 800571a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800571e:	2b01      	cmp	r3, #1
 8005720:	d18d      	bne.n	800563e <main+0xe6>
					  HAL_TIM_Base_Stop_IT(&htim15);
 8005722:	4818      	ldr	r0, [pc, #96]	; (8005784 <main+0x22c>)
 8005724:	f7fe f944 	bl	80039b0 <HAL_TIM_Base_Stop_IT>
					  CLEAR_BIT(huart1.Instance->CR1, USART_CR1_TE);
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <main+0x21c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <main+0x21c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0208 	bic.w	r2, r2, #8
 8005736:	601a      	str	r2, [r3, #0]
					  (&huart1)->gState = HAL_UART_STATE_BUSY;
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <main+0x21c>)
 800573a:	2224      	movs	r2, #36	; 0x24
 800573c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
					  acc_detector_distance_peak_deactivate(handle);
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <main+0x234>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fc1f 	bl	8006f88 <acc_detector_distance_peak_deactivate>
					  acc_detector_distance_peak_destroy(&handle);
 800574a:	4810      	ldr	r0, [pc, #64]	; (800578c <main+0x234>)
 800574c:	f001 fc4e 	bl	8006fec <acc_detector_distance_peak_destroy>
					  acc_detector_distance_peak_configuration_destroy(&distance_configuration);
 8005750:	4816      	ldr	r0, [pc, #88]	; (80057ac <main+0x254>)
 8005752:	f001 fb7d 	bl	8006e50 <acc_detector_distance_peak_configuration_destroy>
				  	  break;
 8005756:	bf00      	nop
	  radarInit();
 8005758:	e749      	b.n	80055ee <main+0x96>


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800575a:	4618      	mov	r0, r3
 800575c:	373c      	adds	r7, #60	; 0x3c
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}
 8005762:	bf00      	nop
 8005764:	f3af 8000 	nop.w
 8005768:	01020304 	.word	0x01020304
 800576c:	01020304 	.word	0x01020304
 8005770:	20000d88 	.word	0x20000d88
 8005774:	20000d10 	.word	0x20000d10
 8005778:	08032800 	.word	0x08032800
 800577c:	200002c9 	.word	0x200002c9
 8005780:	20000020 	.word	0x20000020
 8005784:	20000c90 	.word	0x20000c90
 8005788:	200002cd 	.word	0x200002cd
 800578c:	20000c1c 	.word	0x20000c1c
 8005790:	20000c20 	.word	0x20000c20
 8005794:	20000bf4 	.word	0x20000bf4
 8005798:	48000400 	.word	0x48000400
 800579c:	200002cc 	.word	0x200002cc
 80057a0:	200003d1 	.word	0x200003d1
 80057a4:	200003d0 	.word	0x200003d0
 80057a8:	200002d0 	.word	0x200002d0
 80057ac:	20000c24 	.word	0x20000c24

080057b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b0ae      	sub	sp, #184	; 0xb8
 80057b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057ba:	2244      	movs	r2, #68	; 0x44
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f00a fc90 	bl	80100e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	225c      	movs	r2, #92	; 0x5c
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f00a fc82 	bl	80100e4 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80057e0:	2309      	movs	r3, #9
 80057e2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057f0:	2302      	movs	r3, #2
 80057f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057f6:	2303      	movs	r3, #3
 80057f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005802:	2314      	movs	r3, #20
 8005804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005808:	2307      	movs	r3, #7
 800580a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800580e:	2302      	movs	r3, #2
 8005810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005814:	2302      	movs	r3, #2
 8005816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800581a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800581e:	4618      	mov	r0, r3
 8005820:	f7fc fbf6 	bl	8002010 <HAL_RCC_OscConfig>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800582a:	f000 f82f 	bl	800588c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800582e:	230f      	movs	r3, #15
 8005830:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005832:	2303      	movs	r3, #3
 8005834:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005836:	2300      	movs	r3, #0
 8005838:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800583a:	2300      	movs	r3, #0
 800583c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800583e:	2300      	movs	r3, #0
 8005840:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005846:	2104      	movs	r1, #4
 8005848:	4618      	mov	r0, r3
 800584a:	f7fc ff87 	bl	800275c <HAL_RCC_ClockConfig>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005854:	f000 f81a 	bl	800588c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005858:	2301      	movs	r3, #1
 800585a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fd f98c 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800586e:	f000 f80d 	bl	800588c <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005872:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005876:	f7fc fb75 	bl	8001f64 <HAL_PWREx_ControlVoltageScaling>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005880:	f000 f804 	bl	800588c <Error_Handler>
  }
}
 8005884:	bf00      	nop
 8005886:	37b8      	adds	r7, #184	; 0xb8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005890:	bf00      	nop
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <radarInit>:

extern acc_detector_distance_peak_configuration_t distance_configuration;
extern acc_service_configuration_t envelope_configuration;
extern acc_detector_distance_peak_handle_t handle;
int radarInit()
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0

	distance_configuration = acc_detector_distance_peak_configuration_create();
 80058a2:	f001 fc19 	bl	80070d8 <acc_detector_distance_peak_configuration_create>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b68      	ldr	r3, [pc, #416]	; (8005a4c <radarInit+0x1b0>)
 80058aa:	601a      	str	r2, [r3, #0]
		if (distance_configuration == NULL)
 80058ac:	4b67      	ldr	r3, [pc, #412]	; (8005a4c <radarInit+0x1b0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <radarInit+0x1c>
		{
			//fprintf(stderr, "acc_detector_distance_peak_configuration_create() failed\n");
			acc_rss_deactivate();
 80058b4:	f001 fd3a 	bl	800732c <acc_rss_deactivate>
			//return false;
		}
		acc_detector_distance_peak_service_profile_set(distance_configuration, config.profile + 1);
 80058b8:	4b64      	ldr	r3, [pc, #400]	; (8005a4c <radarInit+0x1b0>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b64      	ldr	r3, [pc, #400]	; (8005a50 <radarInit+0x1b4>)
 80058be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80058c2:	3301      	adds	r3, #1
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f001 fbd0 	bl	800706c <acc_detector_distance_peak_service_profile_set>
		if (config.stop - config.start <= 1900) {
 80058cc:	4b60      	ldr	r3, [pc, #384]	; (8005a50 <radarInit+0x1b4>)
 80058ce:	8c1b      	ldrh	r3, [r3, #32]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	4b5e      	ldr	r3, [pc, #376]	; (8005a50 <radarInit+0x1b4>)
 80058d6:	8bdb      	ldrh	r3, [r3, #30]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f240 726c 	movw	r2, #1900	; 0x76c
 80058e0:	4293      	cmp	r3, r2
 80058e2:	dc06      	bgt.n	80058f2 <radarInit+0x56>
			acc_detector_distance_peak_downsampling_factor_set(distance_configuration,1);
 80058e4:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <radarInit+0x1b0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 fc1c 	bl	8007128 <acc_detector_distance_peak_downsampling_factor_set>
 80058f0:	e018      	b.n	8005924 <radarInit+0x88>
		} else if (config.stop - config.start <= 4100) {
 80058f2:	4b57      	ldr	r3, [pc, #348]	; (8005a50 <radarInit+0x1b4>)
 80058f4:	8c1b      	ldrh	r3, [r3, #32]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	4b55      	ldr	r3, [pc, #340]	; (8005a50 <radarInit+0x1b4>)
 80058fc:	8bdb      	ldrh	r3, [r3, #30]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 0204 	movw	r2, #4100	; 0x1004
 8005906:	4293      	cmp	r3, r2
 8005908:	dc06      	bgt.n	8005918 <radarInit+0x7c>
			acc_detector_distance_peak_downsampling_factor_set(distance_configuration,2);
 800590a:	4b50      	ldr	r3, [pc, #320]	; (8005a4c <radarInit+0x1b0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2102      	movs	r1, #2
 8005910:	4618      	mov	r0, r3
 8005912:	f001 fc09 	bl	8007128 <acc_detector_distance_peak_downsampling_factor_set>
 8005916:	e005      	b.n	8005924 <radarInit+0x88>
		} else {
			acc_detector_distance_peak_downsampling_factor_set(distance_configuration,4);
 8005918:	4b4c      	ldr	r3, [pc, #304]	; (8005a4c <radarInit+0x1b0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2104      	movs	r1, #4
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fc02 	bl	8007128 <acc_detector_distance_peak_downsampling_factor_set>
		}

		acc_detector_distance_peak_set_absolute_amplitude(distance_configuration, true);
 8005924:	4b49      	ldr	r3, [pc, #292]	; (8005a4c <radarInit+0x1b0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fca6 	bl	800727c <acc_detector_distance_peak_set_absolute_amplitude>
		if (!config.sort) {
 8005930:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <radarInit+0x1b4>)
 8005932:	7f5b      	ldrb	r3, [r3, #29]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <radarInit+0xaa>
			acc_detector_distance_peak_set_sort_by_amplitude(distance_configuration, true);
 8005938:	4b44      	ldr	r3, [pc, #272]	; (8005a4c <radarInit+0x1b0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fcae 	bl	80072a0 <acc_detector_distance_peak_set_sort_by_amplitude>
 8005944:	e005      	b.n	8005952 <radarInit+0xb6>
		} else {
			acc_detector_distance_peak_set_sort_by_amplitude(distance_configuration, false);
 8005946:	4b41      	ldr	r3, [pc, #260]	; (8005a4c <radarInit+0x1b0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fca7 	bl	80072a0 <acc_detector_distance_peak_set_sort_by_amplitude>
		}

		acc_detector_distance_peak_running_average_factor_set(distance_configuration, ((float)config.relate) / 100);
 8005952:	4b3e      	ldr	r3, [pc, #248]	; (8005a4c <radarInit+0x1b0>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <radarInit+0x1b4>)
 8005958:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005a54 <radarInit+0x1b8>
 8005968:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800596c:	eeb0 0a66 	vmov.f32	s0, s13
 8005970:	4610      	mov	r0, r2
 8005972:	f001 fbd5 	bl	8007120 <acc_detector_distance_peak_running_average_factor_set>

		acc_sensor_id_t sensor_id = 1;
 8005976:	2301      	movs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
		float           start_m   = (float)config.start / 1000;
 800597a:	4b35      	ldr	r3, [pc, #212]	; (8005a50 <radarInit+0x1b4>)
 800597c:	8bdb      	ldrh	r3, [r3, #30]
 800597e:	b29b      	uxth	r3, r3
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005988:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005a58 <radarInit+0x1bc>
 800598c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005990:	edc7 7a04 	vstr	s15, [r7, #16]
		float           length_m  = (float)(config.stop - config.start) / 1000;
 8005994:	4b2e      	ldr	r3, [pc, #184]	; (8005a50 <radarInit+0x1b4>)
 8005996:	8c1b      	ldrh	r3, [r3, #32]
 8005998:	b29b      	uxth	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <radarInit+0x1b4>)
 800599e:	8bdb      	ldrh	r3, [r3, #30]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059ac:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005a58 <radarInit+0x1bc>
 80059b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059b4:	edc7 7a03 	vstr	s15, [r7, #12]

		acc_base_configuration_t base_configuration = acc_detector_distance_peak_get_base_configuration(distance_configuration);
 80059b8:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <radarInit+0x1b0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 fb43 	bl	8007048 <acc_detector_distance_peak_get_base_configuration>
 80059c2:	60b8      	str	r0, [r7, #8]
		acc_base_configuration_sensor_set(base_configuration, sensor_id);
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	68b8      	ldr	r0, [r7, #8]
 80059c8:	f004 f80e 	bl	80099e8 <acc_base_configuration_sensor_set>
		acc_base_configuration_requested_start_set(base_configuration, start_m);
 80059cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80059d0:	68b8      	ldr	r0, [r7, #8]
 80059d2:	f004 f827 	bl	8009a24 <acc_base_configuration_requested_start_set>
		acc_base_configuration_requested_length_set(base_configuration, length_m);
 80059d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80059da:	68b8      	ldr	r0, [r7, #8]
 80059dc:	f004 f844 	bl	8009a68 <acc_base_configuration_requested_length_set>
		acc_detector_distance_peak_metadata_t   metadata;
		handle = acc_detector_distance_peak_create(distance_configuration);
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <radarInit+0x1b0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 fa4b 	bl	8006e80 <acc_detector_distance_peak_create>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <radarInit+0x1c0>)
 80059ee:	601a      	str	r2, [r3, #0]
				acc_detector_distance_peak_threshold_estimation_reset(distance_configuration);
				acc_detector_distance_peak_threshold_estimation_update(distance_configuration,100, metadata.start_m, metadata.start_m+metadata.length_m);
				acc_detector_distance_peak_set_sensitivity(distance_configuration, 0.5);
			}
		*/
		acc_detector_distance_peak_set_threshold_mode_fixed(distance_configuration, config.threshold);
 80059f0:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <radarInit+0x1b0>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <radarInit+0x1b4>)
 80059f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f001 fc2b 	bl	8007258 <acc_detector_distance_peak_set_threshold_mode_fixed>
		acc_base_configuration_hw_accelerated_average_samples_set(base_configuration, config.average);
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <radarInit+0x1b4>)
 8005a04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a08:	4619      	mov	r1, r3
 8005a0a:	68b8      	ldr	r0, [r7, #8]
 8005a0c:	f004 f8c0 	bl	8009b90 <acc_base_configuration_hw_accelerated_average_samples_set>
		acc_base_configuration_repetition_mode_on_demand_set(base_configuration);
 8005a10:	68b8      	ldr	r0, [r7, #8]
 8005a12:	f004 f83b 	bl	8009a8c <acc_base_configuration_repetition_mode_on_demand_set>
		//acc_base_configuration_receiver_gain_set(base_configuration,0.8);
		//acc_sweep_configuration_receiver_gain_set(sweep_configuration, 0.8);
	    //float gain=acc_base_configuration_receiver_gain_get(base_configuration);
	    //printf("gain = %d\n", (uint8_t)(gain*100));

	    acc_base_configuration_power_save_mode_set(base_configuration, config.powerSaveMode);
 8005a16:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <radarInit+0x1b4>)
 8005a18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68b8      	ldr	r0, [r7, #8]
 8005a20:	f004 f84a 	bl	8009ab8 <acc_base_configuration_power_save_mode_set>

		if (!acc_detector_distance_peak_activate(handle)) {
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <radarInit+0x1c0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 fa83 	bl	8006f34 <acc_detector_distance_peak_activate>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f083 0301 	eor.w	r3, r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <radarInit+0x1a4>
			acc_detector_distance_peak_destroy(&handle);
 8005a3a:	4808      	ldr	r0, [pc, #32]	; (8005a5c <radarInit+0x1c0>)
 8005a3c:	f001 fad6 	bl	8006fec <acc_detector_distance_peak_destroy>
		}

}
 8005a40:	bf00      	nop
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000c24 	.word	0x20000c24
 8005a50:	20000020 	.word	0x20000020
 8005a54:	42c80000 	.word	0x42c80000
 8005a58:	447a0000 	.word	0x447a0000
 8005a5c:	20000c1c 	.word	0x20000c1c

08005a60 <execDetOnce>:

bool execDetOnce(acc_detector_distance_peak_handle_t handle, \
		acc_detector_distance_peak_reflection_t *reflections, \
		uint16_t reflection_count_max,
		acc_detector_distance_peak_result_info_t *result_info)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
	bool success = true;
 8005a70:	2301      	movs	r3, #1
 8005a72:	757b      	strb	r3, [r7, #21]
	uint16_t reflection_count = reflection_count_max;
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	827b      	strh	r3, [r7, #18]
	success = acc_detector_distance_peak_get_next(handle, reflections, &reflection_count, result_info);
 8005a78:	f107 0212 	add.w	r2, r7, #18
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f001 fb55 	bl	8007130 <acc_detector_distance_peak_get_next>
 8005a86:	4603      	mov	r3, r0
 8005a88:	757b      	strb	r3, [r7, #21]
	if (!success) {
 8005a8a:	7d7b      	ldrb	r3, [r7, #21]
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <execDetOnce+0x3a>
		//printf("acc_detector_distance_peak_get_next() failed\n");
		return success;
 8005a96:	7d7b      	ldrb	r3, [r7, #21]
 8005a98:	e04b      	b.n	8005b32 <execDetOnce+0xd2>
	}
	config.number = reflection_count;
 8005a9a:	8a7b      	ldrh	r3, [r7, #18]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <execDetOnce+0xdc>)
 8005aa0:	721a      	strb	r2, [r3, #8]
	for (uint8_t i = 0; i < reflection_count; i++) {
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
 8005aa6:	e026      	b.n	8005af6 <execDetOnce+0x96>
		*(&config.distance1 + i*2) = (unsigned int)((reflections[i].distance * 1000.0f) + 0.5f);
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	4413      	add	r3, r2
 8005ab0:	edd3 7a00 	vldr	s15, [r3]
 8005ab4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005b40 <execDetOnce+0xe0>
 8005ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005abc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <execDetOnce+0xe4>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	ee17 2a90 	vmov	r2, s15
 8005ad6:	b292      	uxth	r2, r2
 8005ad8:	801a      	strh	r2, [r3, #0]
		*(&config.distance1 + i*2 + 1) = (unsigned int)(reflections[i].amplitude);
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	4916      	ldr	r1, [pc, #88]	; (8005b44 <execDetOnce+0xe4>)
 8005aea:	440b      	add	r3, r1
 8005aec:	8892      	ldrh	r2, [r2, #4]
 8005aee:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < reflection_count; i++) {
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	3301      	adds	r3, #1
 8005af4:	75fb      	strb	r3, [r7, #23]
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	8a7b      	ldrh	r3, [r7, #18]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d3d3      	bcc.n	8005aa8 <execDetOnce+0x48>
	}
	for (uint8_t j = reflection_count; j < 5; j++) {
 8005b00:	8a7b      	ldrh	r3, [r7, #18]
 8005b02:	75bb      	strb	r3, [r7, #22]
 8005b04:	e011      	b.n	8005b2a <execDetOnce+0xca>
		*(&config.distance1 + j*2) = 0xffff;
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <execDetOnce+0xe4>)
 8005b0e:	4413      	add	r3, r2
 8005b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b14:	801a      	strh	r2, [r3, #0]
		*(&config.distance1 + j*2 + 1) = 0;
 8005b16:	7dbb      	ldrb	r3, [r7, #22]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <execDetOnce+0xe4>)
 8005b1e:	4413      	add	r3, r2
 8005b20:	2200      	movs	r2, #0
 8005b22:	801a      	strh	r2, [r3, #0]
	for (uint8_t j = reflection_count; j < 5; j++) {
 8005b24:	7dbb      	ldrb	r3, [r7, #22]
 8005b26:	3301      	adds	r3, #1
 8005b28:	75bb      	strb	r3, [r7, #22]
 8005b2a:	7dbb      	ldrb	r3, [r7, #22]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d9ea      	bls.n	8005b06 <execDetOnce+0xa6>
	}
	//printf("Peak %d, Distance: %3u mm, Amplitude: %u\n", 0, config.distance1, config.amplitude1);

	return success;
 8005b30:	7d7b      	ldrb	r3, [r7, #21]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000020 	.word	0x20000020
 8005b40:	447a0000 	.word	0x447a0000
 8005b44:	20000029 	.word	0x20000029

08005b48 <crcCheck>:
#include "radar.h"
#include "global.h"
#include "usart.h"

uint16_t crcCheck(uint8_t *data, uint8_t size)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
	uint8_t i0,i1;
	uint8_t CRClo,CRChi;
	uint8_t savehi,savelo;
	CRClo = CRChi = 0xff;
 8005b54:	23ff      	movs	r3, #255	; 0xff
 8005b56:	733b      	strb	r3, [r7, #12]
 8005b58:	7b3b      	ldrb	r3, [r7, #12]
 8005b5a:	737b      	strb	r3, [r7, #13]
	for(i0=0; i0<size; i0++)	{
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	e033      	b.n	8005bca <crcCheck+0x82>
		CRClo = CRClo^*(data+i0);
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	7b7b      	ldrb	r3, [r7, #13]
 8005b6c:	4053      	eors	r3, r2
 8005b6e:	737b      	strb	r3, [r7, #13]
		for(i1=0; i1<8; i1++) {
 8005b70:	2300      	movs	r3, #0
 8005b72:	73bb      	strb	r3, [r7, #14]
 8005b74:	e023      	b.n	8005bbe <crcCheck+0x76>
			savehi = CRChi;
 8005b76:	7b3b      	ldrb	r3, [r7, #12]
 8005b78:	72fb      	strb	r3, [r7, #11]
			savelo = CRClo;
 8005b7a:	7b7b      	ldrb	r3, [r7, #13]
 8005b7c:	72bb      	strb	r3, [r7, #10]
			CRChi>>=1;
 8005b7e:	7b3b      	ldrb	r3, [r7, #12]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	733b      	strb	r3, [r7, #12]
			CRClo>>=1;
 8005b84:	7b7b      	ldrb	r3, [r7, #13]
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	737b      	strb	r3, [r7, #13]
			if((savehi&1) == 1) {
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <crcCheck+0x54>
				CRClo |= 0x80;
 8005b94:	7b7b      	ldrb	r3, [r7, #13]
 8005b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b9a:	737b      	strb	r3, [r7, #13]
			}
			if((savelo&1) == 1) {
 8005b9c:	7abb      	ldrb	r3, [r7, #10]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <crcCheck+0x70>
				CRChi ^= 0xA0;
 8005ba6:	7b3b      	ldrb	r3, [r7, #12]
 8005ba8:	f083 035f 	eor.w	r3, r3, #95	; 0x5f
 8005bac:	43db      	mvns	r3, r3
 8005bae:	733b      	strb	r3, [r7, #12]
				CRClo ^= 1;
 8005bb0:	7b7b      	ldrb	r3, [r7, #13]
 8005bb2:	f083 0301 	eor.w	r3, r3, #1
 8005bb6:	737b      	strb	r3, [r7, #13]
		for(i1=0; i1<8; i1++) {
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	73bb      	strb	r3, [r7, #14]
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d9d8      	bls.n	8005b76 <crcCheck+0x2e>
	for(i0=0; i0<size; i0++)	{
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
 8005bca:	7bfa      	ldrb	r2, [r7, #15]
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3c7      	bcc.n	8005b62 <crcCheck+0x1a>
			}
		}
	}
	return (CRChi<<8) | CRClo;
 8005bd2:	7b3b      	ldrb	r3, [r7, #12]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	7b7b      	ldrb	r3, [r7, #13]
 8005bda:	b21b      	sxth	r3, r3
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	b29b      	uxth	r3, r3
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <rtuExpRsp>:
#define RTU_EXCEPT3 3
#define RTU_EXCEPT4 4


int rtuExpRsp(uint8_t rtuExp, uint8_t *data)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	6039      	str	r1, [r7, #0]
 8005bfa:	71fb      	strb	r3, [r7, #7]
	int ret = -1;
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005c00:	60fb      	str	r3, [r7, #12]
	data[1] |= 0x80;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]
	switch(rtuExp) {
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d81e      	bhi.n	8005c5a <rtuExpRsp+0x6a>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <rtuExpRsp+0x34>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c3f 	.word	0x08005c3f
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c53 	.word	0x08005c53
		case RTU_EXCEPT1:
			data[2] = 1;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	3302      	adds	r3, #2
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
			break;
 8005c3c:	e00d      	b.n	8005c5a <rtuExpRsp+0x6a>
		case RTU_EXCEPT2:
			data[2] = 2;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	3302      	adds	r3, #2
 8005c42:	2202      	movs	r2, #2
 8005c44:	701a      	strb	r2, [r3, #0]
			break;
 8005c46:	e008      	b.n	8005c5a <rtuExpRsp+0x6a>
		case RTU_EXCEPT3:
			data[2] = 3;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	701a      	strb	r2, [r3, #0]
			break;
 8005c50:	e003      	b.n	8005c5a <rtuExpRsp+0x6a>
		case RTU_EXCEPT4:
			data[2] = 4;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	3302      	adds	r3, #2
 8005c56:	2204      	movs	r2, #4
 8005c58:	701a      	strb	r2, [r3, #0]
		default: ;
	}
	data[3] = crcCheck(data, 3) & 0xff;
 8005c5a:	2103      	movs	r1, #3
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f7ff ff73 	bl	8005b48 <crcCheck>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	3303      	adds	r3, #3
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
	data[4] = crcCheck(data, 3) >> 8;
 8005c6e:	2103      	movs	r1, #3
 8005c70:	6838      	ldr	r0, [r7, #0]
 8005c72:	f7ff ff69 	bl	8005b48 <crcCheck>
 8005c76:	4603      	mov	r3, r0
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, data, 5);
 8005c84:	2205      	movs	r2, #5
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	4803      	ldr	r0, [pc, #12]	; (8005c98 <rtuExpRsp+0xa8>)
 8005c8a:	f7fe facb 	bl	8004224 <HAL_UART_Transmit_IT>
	return ret;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000d10 	.word	0x20000d10

08005c9c <rtuParse>:
		(uint8_t *)&config.amplitude5, &zero, &config.sort, (uint8_t *)&config.start + 1, (uint8_t *)&config.start, (uint8_t *)&config.stop + 1,
		(uint8_t *)&config.stop, (uint8_t *)&config.threshold + 1, (uint8_t *)&config.threshold, &zero,
		&config.average, &zero, &config.relate, &zero, &config.profile, &zero, &config.measureMode,
		(uint8_t *)&config.compareLength + 1, (uint8_t *)&config.compareLength, &zero, &config.compareSwitch, &zero, &config.powerSaveMode};
int rtuParse (uint8_t *data,uint8_t len)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b0c8      	sub	sp, #288	; 0x120
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	1d3b      	adds	r3, r7, #4
 8005ca4:	6018      	str	r0, [r3, #0]
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	1cfb      	adds	r3, r7, #3
 8005caa:	701a      	strb	r2, [r3, #0]

    int ret = -1;
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    uint8_t pdata[256];
	for(uint8_t i=0; i<len; i++) {
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8005cba:	e00f      	b.n	8005cdc <rtuParse+0x40>
		pdata[i] = ((uint8_t *)data)[i];
 8005cbc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005cc0:	1d3a      	adds	r2, r7, #4
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	441a      	add	r2, r3
 8005cc6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005cca:	7811      	ldrb	r1, [r2, #0]
 8005ccc:	f107 020c 	add.w	r2, r7, #12
 8005cd0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<len; i++) {
 8005cd2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8005cdc:	1cfb      	adds	r3, r7, #3
 8005cde:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3e9      	bcc.n	8005cbc <rtuParse+0x20>
	}
    switch (pdata[1]) {
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	f000 80b9 	beq.w	8005e66 <rtuParse+0x1ca>
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	f000 8214 	beq.w	8006122 <rtuParse+0x486>
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	f040 8418 	bne.w	8006530 <rtuParse+0x894>
				rebootSystem();
			}
			break;
	*/
		case 0x03:
			if(pdata[0]) {
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 841e 	beq.w	8006548 <rtuParse+0x8ac>
				if (pdata[4] || !pdata[5] || (pdata[5] > 0x1B)) {
 8005d0c:	f107 030c 	add.w	r3, r7, #12
 8005d10:	791b      	ldrb	r3, [r3, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <rtuParse+0x8e>
 8005d16:	f107 030c 	add.w	r3, r7, #12
 8005d1a:	795b      	ldrb	r3, [r3, #5]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <rtuParse+0x8e>
 8005d20:	f107 030c 	add.w	r3, r7, #12
 8005d24:	795b      	ldrb	r3, [r3, #5]
 8005d26:	2b1b      	cmp	r3, #27
 8005d28:	d906      	bls.n	8005d38 <rtuParse+0x9c>
					rtuExpRsp(RTU_EXCEPT3, pdata);
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4619      	mov	r1, r3
 8005d30:	2003      	movs	r0, #3
 8005d32:	f7ff ff5d 	bl	8005bf0 <rtuExpRsp>
 8005d36:	e095      	b.n	8005e64 <rtuParse+0x1c8>
				} else if ( !pdata[2] && (pdata[3] + pdata[5] < 0x1C)) {
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	789b      	ldrb	r3, [r3, #2]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f040 8089 	bne.w	8005e56 <rtuParse+0x1ba>
 8005d44:	f107 030c 	add.w	r3, r7, #12
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	795b      	ldrb	r3, [r3, #5]
 8005d52:	4413      	add	r3, r2
 8005d54:	2b1b      	cmp	r3, #27
 8005d56:	dc7e      	bgt.n	8005e56 <rtuParse+0x1ba>
					uint8_t addr = pdata[3];
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
					uint8_t num = pdata[5] * 2;
 8005d62:	f107 030c 	add.w	r3, r7, #12
 8005d66:	795b      	ldrb	r3, [r3, #5]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
					pdata[2] = num;
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8005d76:	709a      	strb	r2, [r3, #2]
					if (config.measureMode == 0 && !(addr > 0x0F || ((addr + num/2) < 0x05))) {
 8005d78:	4bc0      	ldr	r3, [pc, #768]	; (800607c <rtuParse+0x3e0>)
 8005d7a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d114      	bne.n	8005dac <rtuParse+0x110>
 8005d82:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8005d86:	2b0f      	cmp	r3, #15
 8005d88:	d810      	bhi.n	8005dac <rtuParse+0x110>
 8005d8a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8005d8e:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8005d92:	0852      	lsrs	r2, r2, #1
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	4413      	add	r3, r2
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	dd07      	ble.n	8005dac <rtuParse+0x110>
						execDetOnce(handle, reflections, reflection_count_max, &result_info);
 8005d9c:	4bb8      	ldr	r3, [pc, #736]	; (8006080 <rtuParse+0x3e4>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	4bb8      	ldr	r3, [pc, #736]	; (8006084 <rtuParse+0x3e8>)
 8005da2:	881a      	ldrh	r2, [r3, #0]
 8005da4:	4bb8      	ldr	r3, [pc, #736]	; (8006088 <rtuParse+0x3ec>)
 8005da6:	49b9      	ldr	r1, [pc, #740]	; (800608c <rtuParse+0x3f0>)
 8005da8:	f7ff fe5a 	bl	8005a60 <execDetOnce>
					}
					for (uint8_t temp = 0; temp < num; temp++) {
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8005db2:	e014      	b.n	8005dde <rtuParse+0x142>
						pdata[3 + temp] = *configuration[addr * 2 + temp];
 8005db4:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8005dbe:	4413      	add	r3, r2
 8005dc0:	4ab3      	ldr	r2, [pc, #716]	; (8006090 <rtuParse+0x3f4>)
 8005dc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005dc6:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8005dca:	3303      	adds	r3, #3
 8005dcc:	7811      	ldrb	r1, [r2, #0]
 8005dce:	f107 020c 	add.w	r2, r7, #12
 8005dd2:	54d1      	strb	r1, [r2, r3]
					for (uint8_t temp = 0; temp < num; temp++) {
 8005dd4:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8005dde:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 8005de2:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3e4      	bcc.n	8005db4 <rtuParse+0x118>
					}
					pdata[3 + num] = crcCheck(pdata, 3 + num) & 0xff;
 8005dea:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005dee:	3303      	adds	r3, #3
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fea5 	bl	8005b48 <crcCheck>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	461a      	mov	r2, r3
 8005e02:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005e06:	3303      	adds	r3, #3
 8005e08:	b2d1      	uxtb	r1, r2
 8005e0a:	f107 020c 	add.w	r2, r7, #12
 8005e0e:	54d1      	strb	r1, [r2, r3]
					pdata[4 + num] = crcCheck(pdata, 3 + num) >> 8;
 8005e10:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005e14:	3303      	adds	r3, #3
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fe92 	bl	8005b48 <crcCheck>
 8005e24:	4603      	mov	r3, r0
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005e2e:	3304      	adds	r3, #4
 8005e30:	b2d1      	uxtb	r1, r2
 8005e32:	f107 020c 	add.w	r2, r7, #12
 8005e36:	54d1      	strb	r1, [r2, r3]
					HAL_UART_Transmit_IT(&huart1, pdata, 5 + num);
 8005e38:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3305      	adds	r3, #5
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f107 030c 	add.w	r3, r7, #12
 8005e46:	4619      	mov	r1, r3
 8005e48:	4892      	ldr	r0, [pc, #584]	; (8006094 <rtuParse+0x3f8>)
 8005e4a:	f7fe f9eb 	bl	8004224 <HAL_UART_Transmit_IT>
					ret = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				} else if ( !pdata[2] && (pdata[3] + pdata[5] < 0x1C)) {
 8005e54:	e006      	b.n	8005e64 <rtuParse+0x1c8>
				} else {
					rtuExpRsp(RTU_EXCEPT2, pdata);
 8005e56:	f107 030c 	add.w	r3, r7, #12
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	2002      	movs	r0, #2
 8005e5e:	f7ff fec7 	bl	8005bf0 <rtuExpRsp>
				}
			}
			break;
 8005e62:	e371      	b.n	8006548 <rtuParse+0x8ac>
 8005e64:	e370      	b.n	8006548 <rtuParse+0x8ac>
		case 0x06:
			if(pdata[2] || (pdata[3] > 0x1A) || (pdata[3] < 2) || (pdata[3] > 4 && pdata[3] < 0X10)) {
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	789b      	ldrb	r3, [r3, #2]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d113      	bne.n	8005e98 <rtuParse+0x1fc>
 8005e70:	f107 030c 	add.w	r3, r7, #12
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	2b1a      	cmp	r3, #26
 8005e78:	d80e      	bhi.n	8005e98 <rtuParse+0x1fc>
 8005e7a:	f107 030c 	add.w	r3, r7, #12
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d909      	bls.n	8005e98 <rtuParse+0x1fc>
 8005e84:	f107 030c 	add.w	r3, r7, #12
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d90b      	bls.n	8005ea6 <rtuParse+0x20a>
 8005e8e:	f107 030c 	add.w	r3, r7, #12
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	2b0f      	cmp	r3, #15
 8005e96:	d806      	bhi.n	8005ea6 <rtuParse+0x20a>
				rtuExpRsp(RTU_EXCEPT2, pdata);
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	2002      	movs	r0, #2
 8005ea0:	f7ff fea6 	bl	8005bf0 <rtuExpRsp>
 8005ea4:	e13c      	b.n	8006120 <rtuParse+0x484>
			}else {
				uint8_t addr = pdata[3], dataHi = pdata[4], dataLo = pdata[5];
 8005ea6:	f107 030c 	add.w	r3, r7, #12
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 8005eb0:	f107 030c 	add.w	r3, r7, #12
 8005eb4:	791b      	ldrb	r3, [r3, #4]
 8005eb6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005eba:	f107 030c 	add.w	r3, r7, #12
 8005ebe:	795b      	ldrb	r3, [r3, #5]
 8005ec0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				if (((addr == 0x02) && (dataHi || dataLo > 0xF7 || !dataLo)) || ((addr == 0x03) && (dataHi))||(addr == 0x10 && (dataHi || dataLo > 2)) || (((addr == 0x11) ||
 8005ec4:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d10e      	bne.n	8005eea <rtuParse+0x24e>
 8005ecc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 80cb 	bne.w	800606c <rtuParse+0x3d0>
 8005ed6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005eda:	2bf7      	cmp	r3, #247	; 0xf7
 8005edc:	f200 80c6 	bhi.w	800606c <rtuParse+0x3d0>
 8005ee0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80c1 	beq.w	800606c <rtuParse+0x3d0>
 8005eea:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d104      	bne.n	8005efc <rtuParse+0x260>
 8005ef2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 80b8 	bne.w	800606c <rtuParse+0x3d0>
 8005efc:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d109      	bne.n	8005f18 <rtuParse+0x27c>
 8005f04:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f040 80af 	bne.w	800606c <rtuParse+0x3d0>
 8005f0e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	f200 80aa 	bhi.w	800606c <rtuParse+0x3d0>
 8005f18:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005f1c:	2b11      	cmp	r3, #17
 8005f1e:	d003      	beq.n	8005f28 <rtuParse+0x28c>
 8005f20:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005f24:	2b12      	cmp	r3, #18
 8005f26:	d113      	bne.n	8005f50 <rtuParse+0x2b4>
						(addr == 0x12)) && (((dataHi<<8)+dataLo) < 0xC8 || ((dataHi<<8)+dataLo) > 0x1A90))|| ((addr == 0x12 && (((dataHi<<8)+dataLo) <= config.start))) ||
 8005f28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005f2c:	021a      	lsls	r2, r3, #8
 8005f2e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005f32:	4413      	add	r3, r2
 8005f34:	2bc7      	cmp	r3, #199	; 0xc7
 8005f36:	f340 8099 	ble.w	800606c <rtuParse+0x3d0>
 8005f3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005f44:	4413      	add	r3, r2
 8005f46:	f641 2290 	movw	r2, #6800	; 0x1a90
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f300 808e 	bgt.w	800606c <rtuParse+0x3d0>
 8005f50:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005f54:	2b12      	cmp	r3, #18
 8005f56:	d10a      	bne.n	8005f6e <rtuParse+0x2d2>
 8005f58:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005f5c:	021a      	lsls	r2, r3, #8
 8005f5e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005f62:	4413      	add	r3, r2
 8005f64:	4a45      	ldr	r2, [pc, #276]	; (800607c <rtuParse+0x3e0>)
 8005f66:	8bd2      	ldrh	r2, [r2, #30]
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	dd7e      	ble.n	800606c <rtuParse+0x3d0>
 8005f6e:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005f72:	2b11      	cmp	r3, #17
 8005f74:	d10a      	bne.n	8005f8c <rtuParse+0x2f0>
						((addr == 0x11) && ((dataHi<<8)+dataLo)>=config.stop) ||((addr == 0x13) && (((dataHi<<8)+dataLo) < 0x64 || ((dataHi<<8)+dataLo) > 0x2701)) || ((addr == 0x14) && (dataHi || !dataLo ||
 8005f76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005f7a:	021a      	lsls	r2, r3, #8
 8005f7c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005f80:	4413      	add	r3, r2
 8005f82:	4a3e      	ldr	r2, [pc, #248]	; (800607c <rtuParse+0x3e0>)
 8005f84:	8c12      	ldrh	r2, [r2, #32]
 8005f86:	b292      	uxth	r2, r2
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	da6f      	bge.n	800606c <rtuParse+0x3d0>
 8005f8c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005f90:	2b13      	cmp	r3, #19
 8005f92:	d111      	bne.n	8005fb8 <rtuParse+0x31c>
 8005f94:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005f98:	021a      	lsls	r2, r3, #8
 8005f9a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005f9e:	4413      	add	r3, r2
 8005fa0:	2b63      	cmp	r3, #99	; 0x63
 8005fa2:	dd63      	ble.n	800606c <rtuParse+0x3d0>
 8005fa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005fa8:	021a      	lsls	r2, r3, #8
 8005faa:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005fae:	4413      	add	r3, r2
 8005fb0:	f242 7201 	movw	r2, #9985	; 0x2701
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	dc59      	bgt.n	800606c <rtuParse+0x3d0>
 8005fb8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005fbc:	2b14      	cmp	r3, #20
 8005fbe:	d10b      	bne.n	8005fd8 <rtuParse+0x33c>
 8005fc0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d151      	bne.n	800606c <rtuParse+0x3d0>
 8005fc8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d04d      	beq.n	800606c <rtuParse+0x3d0>
 8005fd0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005fd4:	2b3f      	cmp	r3, #63	; 0x3f
 8005fd6:	d849      	bhi.n	800606c <rtuParse+0x3d0>
						dataLo>0x3F)) || ((addr == 0X15) && (dataHi || dataLo > 0x64)) || ((addr == 0x16) && (dataHi || (dataLo>4))) ||((addr == 0x17|| addr == 0x19) && (dataHi || dataLo > 1))
 8005fd8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005fdc:	2b15      	cmp	r3, #21
 8005fde:	d107      	bne.n	8005ff0 <rtuParse+0x354>
 8005fe0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d141      	bne.n	800606c <rtuParse+0x3d0>
 8005fe8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005fec:	2b64      	cmp	r3, #100	; 0x64
 8005fee:	d83d      	bhi.n	800606c <rtuParse+0x3d0>
 8005ff0:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005ff4:	2b16      	cmp	r3, #22
 8005ff6:	d107      	bne.n	8006008 <rtuParse+0x36c>
 8005ff8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d135      	bne.n	800606c <rtuParse+0x3d0>
 8006000:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006004:	2b04      	cmp	r3, #4
 8006006:	d831      	bhi.n	800606c <rtuParse+0x3d0>
 8006008:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800600c:	2b17      	cmp	r3, #23
 800600e:	d003      	beq.n	8006018 <rtuParse+0x37c>
 8006010:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8006014:	2b19      	cmp	r3, #25
 8006016:	d107      	bne.n	8006028 <rtuParse+0x38c>
 8006018:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800601c:	2b00      	cmp	r3, #0
 800601e:	d125      	bne.n	800606c <rtuParse+0x3d0>
 8006020:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006024:	2b01      	cmp	r3, #1
 8006026:	d821      	bhi.n	800606c <rtuParse+0x3d0>
						|| ((addr == 0x18) && (((dataHi<<8)+dataLo) < 0xc8 || ((dataHi<<8)+dataLo) > 0x1A90)) || ((addr == 0x1A) && (dataHi || dataLo>3))) {
 8006028:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800602c:	2b18      	cmp	r3, #24
 800602e:	d111      	bne.n	8006054 <rtuParse+0x3b8>
 8006030:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006034:	021a      	lsls	r2, r3, #8
 8006036:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800603a:	4413      	add	r3, r2
 800603c:	2bc7      	cmp	r3, #199	; 0xc7
 800603e:	dd15      	ble.n	800606c <rtuParse+0x3d0>
 8006040:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006044:	021a      	lsls	r2, r3, #8
 8006046:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800604a:	4413      	add	r3, r2
 800604c:	f641 2290 	movw	r2, #6800	; 0x1a90
 8006050:	4293      	cmp	r3, r2
 8006052:	dc0b      	bgt.n	800606c <rtuParse+0x3d0>
 8006054:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8006058:	2b1a      	cmp	r3, #26
 800605a:	d11d      	bne.n	8006098 <rtuParse+0x3fc>
 800605c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <rtuParse+0x3d0>
 8006064:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006068:	2b03      	cmp	r3, #3
 800606a:	d915      	bls.n	8006098 <rtuParse+0x3fc>
					rtuExpRsp(RTU_EXCEPT3, pdata);
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	4619      	mov	r1, r3
 8006072:	2003      	movs	r0, #3
 8006074:	f7ff fdbc 	bl	8005bf0 <rtuExpRsp>
 8006078:	e052      	b.n	8006120 <rtuParse+0x484>
 800607a:	bf00      	nop
 800607c:	20000020 	.word	0x20000020
 8006080:	20000c1c 	.word	0x20000c1c
 8006084:	080163e0 	.word	0x080163e0
 8006088:	20000c20 	.word	0x20000c20
 800608c:	20000bf4 	.word	0x20000bf4
 8006090:	2000006c 	.word	0x2000006c
 8006094:	20000d10 	.word	0x20000d10
				} else {
					if((addr == 0x03 && (dataLo != config.baudrate)) || (addr == 0x04 && (((dataHi<<8)+dataLo) != ((config.parity<<8)+config.stopBit)))) {
 8006098:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800609c:	2b03      	cmp	r3, #3
 800609e:	d105      	bne.n	80060ac <rtuParse+0x410>
 80060a0:	4bc6      	ldr	r3, [pc, #792]	; (80063bc <rtuParse+0x720>)
 80060a2:	795b      	ldrb	r3, [r3, #5]
 80060a4:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d111      	bne.n	80060d0 <rtuParse+0x434>
 80060ac:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d110      	bne.n	80060d6 <rtuParse+0x43a>
 80060b4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80060b8:	021a      	lsls	r2, r3, #8
 80060ba:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80060be:	441a      	add	r2, r3
 80060c0:	4bbe      	ldr	r3, [pc, #760]	; (80063bc <rtuParse+0x720>)
 80060c2:	799b      	ldrb	r3, [r3, #6]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	49bd      	ldr	r1, [pc, #756]	; (80063bc <rtuParse+0x720>)
 80060c8:	79c9      	ldrb	r1, [r1, #7]
 80060ca:	440b      	add	r3, r1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d002      	beq.n	80060d6 <rtuParse+0x43a>
						configUart = 1;
 80060d0:	4bbb      	ldr	r3, [pc, #748]	; (80063c0 <rtuParse+0x724>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	701a      	strb	r2, [r3, #0]
					}
					*(configuration[addr * 2]) = dataHi;
 80060d6:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4ab9      	ldr	r2, [pc, #740]	; (80063c4 <rtuParse+0x728>)
 80060de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e2:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80060e6:	701a      	strb	r2, [r3, #0]
					*(configuration[addr * 2 + 1]) = dataLo;
 80060e8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	3301      	adds	r3, #1
 80060f0:	4ab4      	ldr	r2, [pc, #720]	; (80063c4 <rtuParse+0x728>)
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80060fa:	701a      	strb	r2, [r3, #0]
					storeConfig();
 80060fc:	f7ff f8dc 	bl	80052b8 <storeConfig>
					if(pdata[0]) {
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <rtuParse+0x47c>
						HAL_UART_Transmit_IT(&huart1, pdata, 8);
 800610a:	f107 030c 	add.w	r3, r7, #12
 800610e:	2208      	movs	r2, #8
 8006110:	4619      	mov	r1, r3
 8006112:	48ad      	ldr	r0, [pc, #692]	; (80063c8 <rtuParse+0x72c>)
 8006114:	f7fe f886 	bl	8004224 <HAL_UART_Transmit_IT>
					}
					ret = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				}
			}
			break;
 800611e:	e216      	b.n	800654e <rtuParse+0x8b2>
 8006120:	e215      	b.n	800654e <rtuParse+0x8b2>
		case 0x10:
			if (pdata[4] || !pdata[5] || (pdata[6] != pdata[5] * 2) || (pdata[5] > 0x0B)) {
 8006122:	f107 030c 	add.w	r3, r7, #12
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d113      	bne.n	8006154 <rtuParse+0x4b8>
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	795b      	ldrb	r3, [r3, #5]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <rtuParse+0x4b8>
 8006136:	f107 030c 	add.w	r3, r7, #12
 800613a:	799b      	ldrb	r3, [r3, #6]
 800613c:	461a      	mov	r2, r3
 800613e:	f107 030c 	add.w	r3, r7, #12
 8006142:	795b      	ldrb	r3, [r3, #5]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	429a      	cmp	r2, r3
 8006148:	d104      	bne.n	8006154 <rtuParse+0x4b8>
 800614a:	f107 030c 	add.w	r3, r7, #12
 800614e:	795b      	ldrb	r3, [r3, #5]
 8006150:	2b0b      	cmp	r3, #11
 8006152:	d906      	bls.n	8006162 <rtuParse+0x4c6>
				rtuExpRsp(RTU_EXCEPT3, pdata);
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	4619      	mov	r1, r3
 800615a:	2003      	movs	r0, #3
 800615c:	f7ff fd48 	bl	8005bf0 <rtuExpRsp>
 8006160:	e1e5      	b.n	800652e <rtuParse+0x892>
			} else if ( !pdata[2] && ((pdata[3]>1 && pdata[3]<5 && pdata[3]+pdata[5]<6) || (pdata[3]>0x0F && pdata[3]+pdata[5]<0x1C))) {
 8006162:	f107 030c 	add.w	r3, r7, #12
 8006166:	789b      	ldrb	r3, [r3, #2]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 81d8 	bne.w	800651e <rtuParse+0x882>
 800616e:	f107 030c 	add.w	r3, r7, #12
 8006172:	78db      	ldrb	r3, [r3, #3]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d90e      	bls.n	8006196 <rtuParse+0x4fa>
 8006178:	f107 030c 	add.w	r3, r7, #12
 800617c:	78db      	ldrb	r3, [r3, #3]
 800617e:	2b04      	cmp	r3, #4
 8006180:	d809      	bhi.n	8006196 <rtuParse+0x4fa>
 8006182:	f107 030c 	add.w	r3, r7, #12
 8006186:	78db      	ldrb	r3, [r3, #3]
 8006188:	461a      	mov	r2, r3
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	795b      	ldrb	r3, [r3, #5]
 8006190:	4413      	add	r3, r2
 8006192:	2b05      	cmp	r3, #5
 8006194:	dd10      	ble.n	80061b8 <rtuParse+0x51c>
 8006196:	f107 030c 	add.w	r3, r7, #12
 800619a:	78db      	ldrb	r3, [r3, #3]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	f240 81be 	bls.w	800651e <rtuParse+0x882>
 80061a2:	f107 030c 	add.w	r3, r7, #12
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f107 030c 	add.w	r3, r7, #12
 80061ae:	795b      	ldrb	r3, [r3, #5]
 80061b0:	4413      	add	r3, r2
 80061b2:	2b1b      	cmp	r3, #27
 80061b4:	f300 81b3 	bgt.w	800651e <rtuParse+0x882>
				uint8_t addr;
				uint8_t dataHi, dataLo;
				uint16_t temp = 0, temp1 = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80061be:	2300      	movs	r3, #0
 80061c0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				for (uint8_t i=0; i < pdata[5]; i++) {
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80061ca:	e122      	b.n	8006412 <rtuParse+0x776>
					dataHi = pdata[7 + 2 * i];
 80061cc:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	3307      	adds	r3, #7
 80061d4:	f107 020c 	add.w	r2, r7, #12
 80061d8:	5cd3      	ldrb	r3, [r2, r3]
 80061da:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
					dataLo = pdata[8 + 2 * i];
 80061de:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80061e2:	3304      	adds	r3, #4
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	f107 020c 	add.w	r2, r7, #12
 80061ea:	5cd3      	ldrb	r3, [r2, r3]
 80061ec:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
					addr = pdata[3] + i;
 80061f0:	f107 030c 	add.w	r3, r7, #12
 80061f4:	78da      	ldrb	r2, [r3, #3]
 80061f6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80061fa:	4413      	add	r3, r2
 80061fc:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
					if(!configUart &&((addr == 0x03 && (dataLo != config.baudrate)) || (addr == 0x04 && ((dataHi<<8)+dataLo != (config.parity<<8)+config.stopBit)))) {
 8006200:	4b6f      	ldr	r3, [pc, #444]	; (80063c0 <rtuParse+0x724>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11e      	bne.n	8006246 <rtuParse+0x5aa>
 8006208:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800620c:	2b03      	cmp	r3, #3
 800620e:	d105      	bne.n	800621c <rtuParse+0x580>
 8006210:	4b6a      	ldr	r3, [pc, #424]	; (80063bc <rtuParse+0x720>)
 8006212:	795b      	ldrb	r3, [r3, #5]
 8006214:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8006218:	429a      	cmp	r2, r3
 800621a:	d111      	bne.n	8006240 <rtuParse+0x5a4>
 800621c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8006220:	2b04      	cmp	r3, #4
 8006222:	d110      	bne.n	8006246 <rtuParse+0x5aa>
 8006224:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006228:	021a      	lsls	r2, r3, #8
 800622a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800622e:	441a      	add	r2, r3
 8006230:	4b62      	ldr	r3, [pc, #392]	; (80063bc <rtuParse+0x720>)
 8006232:	799b      	ldrb	r3, [r3, #6]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	4961      	ldr	r1, [pc, #388]	; (80063bc <rtuParse+0x720>)
 8006238:	79c9      	ldrb	r1, [r1, #7]
 800623a:	440b      	add	r3, r1
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <rtuParse+0x5aa>
						configUart = 1;
 8006240:	4b5f      	ldr	r3, [pc, #380]	; (80063c0 <rtuParse+0x724>)
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
					}
					if (((addr == 0x02) && (dataHi || dataLo > 0xF7 || !dataLo)) || ((addr == 0x03) && (dataHi))||(addr == 0x10 && (dataHi || dataLo > 2)) || (((addr == 0x11) ||
 8006246:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800624a:	2b02      	cmp	r3, #2
 800624c:	d10e      	bne.n	800626c <rtuParse+0x5d0>
 800624e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 80ab 	bne.w	80063ae <rtuParse+0x712>
 8006258:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800625c:	2bf7      	cmp	r3, #247	; 0xf7
 800625e:	f200 80a6 	bhi.w	80063ae <rtuParse+0x712>
 8006262:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80a1 	beq.w	80063ae <rtuParse+0x712>
 800626c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8006270:	2b03      	cmp	r3, #3
 8006272:	d104      	bne.n	800627e <rtuParse+0x5e2>
 8006274:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8098 	bne.w	80063ae <rtuParse+0x712>
 800627e:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8006282:	2b10      	cmp	r3, #16
 8006284:	d109      	bne.n	800629a <rtuParse+0x5fe>
 8006286:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 808f 	bne.w	80063ae <rtuParse+0x712>
 8006290:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8006294:	2b02      	cmp	r3, #2
 8006296:	f200 808a 	bhi.w	80063ae <rtuParse+0x712>
 800629a:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800629e:	2b11      	cmp	r3, #17
 80062a0:	d003      	beq.n	80062aa <rtuParse+0x60e>
 80062a2:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80062a6:	2b12      	cmp	r3, #18
 80062a8:	d111      	bne.n	80062ce <rtuParse+0x632>
							(addr == 0x12)) && (((dataHi<<8)+dataLo) < 0xC8 || ((dataHi<<8)+dataLo) > 0x1A90)) || ((addr == 0x13) && (((dataHi<<8)+dataLo) < 0x64 || ((dataHi<<8)+dataLo) > 0x2701)) || ((addr == 0x14) && (dataHi || !dataLo ||
 80062aa:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80062b4:	4413      	add	r3, r2
 80062b6:	2bc7      	cmp	r3, #199	; 0xc7
 80062b8:	dd79      	ble.n	80063ae <rtuParse+0x712>
 80062ba:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80062c4:	4413      	add	r3, r2
 80062c6:	f641 2290 	movw	r2, #6800	; 0x1a90
 80062ca:	4293      	cmp	r3, r2
 80062cc:	dc6f      	bgt.n	80063ae <rtuParse+0x712>
 80062ce:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80062d2:	2b13      	cmp	r3, #19
 80062d4:	d111      	bne.n	80062fa <rtuParse+0x65e>
 80062d6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80062e0:	4413      	add	r3, r2
 80062e2:	2b63      	cmp	r3, #99	; 0x63
 80062e4:	dd63      	ble.n	80063ae <rtuParse+0x712>
 80062e6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80062f0:	4413      	add	r3, r2
 80062f2:	f242 7201 	movw	r2, #9985	; 0x2701
 80062f6:	4293      	cmp	r3, r2
 80062f8:	dc59      	bgt.n	80063ae <rtuParse+0x712>
 80062fa:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80062fe:	2b14      	cmp	r3, #20
 8006300:	d10b      	bne.n	800631a <rtuParse+0x67e>
 8006302:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006306:	2b00      	cmp	r3, #0
 8006308:	d151      	bne.n	80063ae <rtuParse+0x712>
 800630a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04d      	beq.n	80063ae <rtuParse+0x712>
 8006312:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8006316:	2b3f      	cmp	r3, #63	; 0x3f
 8006318:	d849      	bhi.n	80063ae <rtuParse+0x712>
							dataLo>0x3F)) || ((addr == 0X15) && (dataHi || dataLo > 0x64)) || ((addr == 0x16) && (dataHi || (dataLo>4))) ||((addr == 0x17|| addr == 0x19) && (dataHi || dataLo > 1))
 800631a:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800631e:	2b15      	cmp	r3, #21
 8006320:	d107      	bne.n	8006332 <rtuParse+0x696>
 8006322:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006326:	2b00      	cmp	r3, #0
 8006328:	d141      	bne.n	80063ae <rtuParse+0x712>
 800632a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d83d      	bhi.n	80063ae <rtuParse+0x712>
 8006332:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8006336:	2b16      	cmp	r3, #22
 8006338:	d107      	bne.n	800634a <rtuParse+0x6ae>
 800633a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800633e:	2b00      	cmp	r3, #0
 8006340:	d135      	bne.n	80063ae <rtuParse+0x712>
 8006342:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8006346:	2b04      	cmp	r3, #4
 8006348:	d831      	bhi.n	80063ae <rtuParse+0x712>
 800634a:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800634e:	2b17      	cmp	r3, #23
 8006350:	d003      	beq.n	800635a <rtuParse+0x6be>
 8006352:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8006356:	2b19      	cmp	r3, #25
 8006358:	d107      	bne.n	800636a <rtuParse+0x6ce>
 800635a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800635e:	2b00      	cmp	r3, #0
 8006360:	d125      	bne.n	80063ae <rtuParse+0x712>
 8006362:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8006366:	2b01      	cmp	r3, #1
 8006368:	d821      	bhi.n	80063ae <rtuParse+0x712>
							|| ((addr == 0x18) && (((dataHi<<8)+dataLo) < 0xc8 || ((dataHi<<8)+dataLo) > 0x1A90)) || ((addr == 0x1A) && (dataHi || dataLo>3))) {
 800636a:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800636e:	2b18      	cmp	r3, #24
 8006370:	d111      	bne.n	8006396 <rtuParse+0x6fa>
 8006372:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006376:	021a      	lsls	r2, r3, #8
 8006378:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800637c:	4413      	add	r3, r2
 800637e:	2bc7      	cmp	r3, #199	; 0xc7
 8006380:	dd15      	ble.n	80063ae <rtuParse+0x712>
 8006382:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800638c:	4413      	add	r3, r2
 800638e:	f641 2290 	movw	r2, #6800	; 0x1a90
 8006392:	4293      	cmp	r3, r2
 8006394:	dc0b      	bgt.n	80063ae <rtuParse+0x712>
 8006396:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800639a:	2b1a      	cmp	r3, #26
 800639c:	d116      	bne.n	80063cc <rtuParse+0x730>
 800639e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <rtuParse+0x712>
 80063a6:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d90e      	bls.n	80063cc <rtuParse+0x730>
						rtuExpRsp(RTU_EXCEPT3, pdata);
 80063ae:	f107 030c 	add.w	r3, r7, #12
 80063b2:	4619      	mov	r1, r3
 80063b4:	2003      	movs	r0, #3
 80063b6:	f7ff fc1b 	bl	8005bf0 <rtuExpRsp>
						goto out;
 80063ba:	e0c8      	b.n	800654e <rtuParse+0x8b2>
 80063bc:	20000020 	.word	0x20000020
 80063c0:	200002c9 	.word	0x200002c9
 80063c4:	2000006c 	.word	0x2000006c
 80063c8:	20000d10 	.word	0x20000d10
					}
					if (addr == 0x11) {
 80063cc:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80063d0:	2b11      	cmp	r3, #17
 80063d2:	d10a      	bne.n	80063ea <rtuParse+0x74e>
						temp = (dataHi << 8) + dataLo;
 80063d4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80063d8:	b29b      	uxth	r3, r3
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	4413      	add	r3, r2
 80063e6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
					}
					if (addr == 0x12) {
 80063ea:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80063ee:	2b12      	cmp	r3, #18
 80063f0:	d10a      	bne.n	8006408 <rtuParse+0x76c>
						temp1 = (dataHi << 8) + dataLo;
 80063f2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8006400:	b29b      	uxth	r3, r3
 8006402:	4413      	add	r3, r2
 8006404:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				for (uint8_t i=0; i < pdata[5]; i++) {
 8006408:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800640c:	3301      	adds	r3, #1
 800640e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8006412:	f107 030c 	add.w	r3, r7, #12
 8006416:	795b      	ldrb	r3, [r3, #5]
 8006418:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 800641c:	429a      	cmp	r2, r3
 800641e:	f4ff aed5 	bcc.w	80061cc <rtuParse+0x530>
					}
				}

				if ((temp && temp1 &&(temp >= temp1)) ||(temp && !temp1 && (temp>= config.stop)) || (!temp && temp1 && (temp1 <= config.start))) {
 8006422:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <rtuParse+0x7a2>
 800642a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <rtuParse+0x7a2>
 8006432:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8006436:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800643a:	429a      	cmp	r2, r3
 800643c:	d21d      	bcs.n	800647a <rtuParse+0x7de>
 800643e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <rtuParse+0x7c0>
 8006446:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <rtuParse+0x7c0>
 800644e:	4b43      	ldr	r3, [pc, #268]	; (800655c <rtuParse+0x8c0>)
 8006450:	8c1b      	ldrh	r3, [r3, #32]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8006458:	429a      	cmp	r2, r3
 800645a:	d20e      	bcs.n	800647a <rtuParse+0x7de>
 800645c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006460:	2b00      	cmp	r3, #0
 8006462:	d111      	bne.n	8006488 <rtuParse+0x7ec>
 8006464:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00d      	beq.n	8006488 <rtuParse+0x7ec>
 800646c:	4b3b      	ldr	r3, [pc, #236]	; (800655c <rtuParse+0x8c0>)
 800646e:	8bdb      	ldrh	r3, [r3, #30]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8006476:	429a      	cmp	r2, r3
 8006478:	d806      	bhi.n	8006488 <rtuParse+0x7ec>
					rtuExpRsp(RTU_EXCEPT3, pdata);
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	4619      	mov	r1, r3
 8006480:	2003      	movs	r0, #3
 8006482:	f7ff fbb5 	bl	8005bf0 <rtuExpRsp>
					goto out;
 8006486:	e062      	b.n	800654e <rtuParse+0x8b2>
				}
				for (uint8_t i=0; i<pdata[6]; i++) {
 8006488:	2300      	movs	r3, #0
 800648a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800648e:	e015      	b.n	80064bc <rtuParse+0x820>
					*(configuration[pdata[3] * 2 + i]) = pdata[7+i];
 8006490:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8006494:	1dda      	adds	r2, r3, #7
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	78db      	ldrb	r3, [r3, #3]
 800649c:	0059      	lsls	r1, r3, #1
 800649e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80064a2:	440b      	add	r3, r1
 80064a4:	492e      	ldr	r1, [pc, #184]	; (8006560 <rtuParse+0x8c4>)
 80064a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80064aa:	f107 010c 	add.w	r1, r7, #12
 80064ae:	5c8a      	ldrb	r2, [r1, r2]
 80064b0:	701a      	strb	r2, [r3, #0]
				for (uint8_t i=0; i<pdata[6]; i++) {
 80064b2:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80064b6:	3301      	adds	r3, #1
 80064b8:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 80064bc:	f107 030c 	add.w	r3, r7, #12
 80064c0:	799b      	ldrb	r3, [r3, #6]
 80064c2:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d3e2      	bcc.n	8006490 <rtuParse+0x7f4>
				}
				storeConfig();
 80064ca:	f7fe fef5 	bl	80052b8 <storeConfig>
				ret = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				if(pdata[0]) {
 80064d4:	f107 030c 	add.w	r3, r7, #12
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d026      	beq.n	800652c <rtuParse+0x890>
					pdata[6] = crcCheck(pdata, 6) & 0xff;
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	2106      	movs	r1, #6
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fb2f 	bl	8005b48 <crcCheck>
 80064ea:	4603      	mov	r3, r0
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	f107 030c 	add.w	r3, r7, #12
 80064f2:	719a      	strb	r2, [r3, #6]
					pdata[7] = crcCheck(pdata, 6) >> 8;
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	2106      	movs	r1, #6
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fb24 	bl	8005b48 <crcCheck>
 8006500:	4603      	mov	r3, r0
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	b29b      	uxth	r3, r3
 8006506:	b2da      	uxtb	r2, r3
 8006508:	f107 030c 	add.w	r3, r7, #12
 800650c:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(&huart1, pdata, 8);
 800650e:	f107 030c 	add.w	r3, r7, #12
 8006512:	2208      	movs	r2, #8
 8006514:	4619      	mov	r1, r3
 8006516:	4813      	ldr	r0, [pc, #76]	; (8006564 <rtuParse+0x8c8>)
 8006518:	f7fd fe84 	bl	8004224 <HAL_UART_Transmit_IT>
			} else if ( !pdata[2] && ((pdata[3]>1 && pdata[3]<5 && pdata[3]+pdata[5]<6) || (pdata[3]>0x0F && pdata[3]+pdata[5]<0x1C))) {
 800651c:	e006      	b.n	800652c <rtuParse+0x890>
				}

			} else {
				rtuExpRsp(RTU_EXCEPT2,pdata);
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	4619      	mov	r1, r3
 8006524:	2002      	movs	r0, #2
 8006526:	f7ff fb63 	bl	8005bf0 <rtuExpRsp>
			}
			break;
 800652a:	e010      	b.n	800654e <rtuParse+0x8b2>
			} else if ( !pdata[2] && ((pdata[3]>1 && pdata[3]<5 && pdata[3]+pdata[5]<6) || (pdata[3]>0x0F && pdata[3]+pdata[5]<0x1C))) {
 800652c:	bf00      	nop
			break;
 800652e:	e00e      	b.n	800654e <rtuParse+0x8b2>
    	default:
    	    if(pdata[0])
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <rtuParse+0x8b0>
				rtuExpRsp(RTU_EXCEPT1,pdata);
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	4619      	mov	r1, r3
 8006540:	2001      	movs	r0, #1
 8006542:	f7ff fb55 	bl	8005bf0 <rtuExpRsp>
 8006546:	e002      	b.n	800654e <rtuParse+0x8b2>
			break;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <rtuParse+0x8b2>
    }
out:
 800654c:	bf00      	nop
	return ret;
 800654e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c

}
 8006552:	4618      	mov	r0, r3
 8006554:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000020 	.word	0x20000020
 8006560:	2000006c 	.word	0x2000006c
 8006564:	20000d10 	.word	0x20000d10

08006568 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <MX_SPI2_Init+0x74>)
 800656e:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <MX_SPI2_Init+0x78>)
 8006570:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006572:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <MX_SPI2_Init+0x74>)
 8006574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006578:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800657a:	4b18      	ldr	r3, [pc, #96]	; (80065dc <MX_SPI2_Init+0x74>)
 800657c:	2200      	movs	r2, #0
 800657e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006580:	4b16      	ldr	r3, [pc, #88]	; (80065dc <MX_SPI2_Init+0x74>)
 8006582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006586:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <MX_SPI2_Init+0x74>)
 800658a:	2200      	movs	r2, #0
 800658c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <MX_SPI2_Init+0x74>)
 8006590:	2200      	movs	r2, #0
 8006592:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <MX_SPI2_Init+0x74>)
 8006596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800659c:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <MX_SPI2_Init+0x74>)
 800659e:	2200      	movs	r2, #0
 80065a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <MX_SPI2_Init+0x74>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <MX_SPI2_Init+0x74>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <MX_SPI2_Init+0x74>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <MX_SPI2_Init+0x74>)
 80065b6:	2207      	movs	r2, #7
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <MX_SPI2_Init+0x74>)
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <MX_SPI2_Init+0x74>)
 80065c2:	2208      	movs	r2, #8
 80065c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80065c6:	4805      	ldr	r0, [pc, #20]	; (80065dc <MX_SPI2_Init+0x74>)
 80065c8:	f7fc fde0 	bl	800318c <HAL_SPI_Init>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80065d2:	f7ff f95b 	bl	800588c <Error_Handler>
  }

}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000c2c 	.word	0x20000c2c
 80065e0:	40003800 	.word	0x40003800

080065e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a17      	ldr	r2, [pc, #92]	; (8006660 <HAL_SPI_MspInit+0x7c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d128      	bne.n	8006658 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006606:	4b17      	ldr	r3, [pc, #92]	; (8006664 <HAL_SPI_MspInit+0x80>)
 8006608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660a:	4a16      	ldr	r2, [pc, #88]	; (8006664 <HAL_SPI_MspInit+0x80>)
 800660c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006610:	6593      	str	r3, [r2, #88]	; 0x58
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <HAL_SPI_MspInit+0x80>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <HAL_SPI_MspInit+0x80>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	4a10      	ldr	r2, [pc, #64]	; (8006664 <HAL_SPI_MspInit+0x80>)
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800662a:	4b0e      	ldr	r3, [pc, #56]	; (8006664 <HAL_SPI_MspInit+0x80>)
 800662c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8006636:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800663a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663c:	2302      	movs	r3, #2
 800663e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006644:	2303      	movs	r3, #3
 8006646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006648:	2305      	movs	r3, #5
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664c:	f107 0314 	add.w	r3, r7, #20
 8006650:	4619      	mov	r1, r3
 8006652:	4805      	ldr	r0, [pc, #20]	; (8006668 <HAL_SPI_MspInit+0x84>)
 8006654:	f7fb f9f4 	bl	8001a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006658:	bf00      	nop
 800665a:	3728      	adds	r7, #40	; 0x28
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40003800 	.word	0x40003800
 8006664:	40021000 	.word	0x40021000
 8006668:	48000400 	.word	0x48000400

0800666c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <HAL_MspInit+0x44>)
 8006674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006676:	4a0e      	ldr	r2, [pc, #56]	; (80066b0 <HAL_MspInit+0x44>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6613      	str	r3, [r2, #96]	; 0x60
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_MspInit+0x44>)
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_MspInit+0x44>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <HAL_MspInit+0x44>)
 8006690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006694:	6593      	str	r3, [r2, #88]	; 0x58
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <HAL_MspInit+0x44>)
 8006698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000

080066b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80066b8:	bf00      	nop
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066c6:	e7fe      	b.n	80066c6 <HardFault_Handler+0x4>

080066c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066cc:	e7fe      	b.n	80066cc <MemManage_Handler+0x4>

080066ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066ce:	b480      	push	{r7}
 80066d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066d2:	e7fe      	b.n	80066d2 <BusFault_Handler+0x4>

080066d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066d8:	e7fe      	b.n	80066d8 <UsageFault_Handler+0x4>

080066da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066da:	b480      	push	{r7}
 80066dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066de:	bf00      	nop
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066f6:	b480      	push	{r7}
 80066f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066fa:	bf00      	nop
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006708:	f7fa fd7a 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800670c:	bf00      	nop
 800670e:	bd80      	pop	{r7, pc}

08006710 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006714:	4802      	ldr	r0, [pc, #8]	; (8006720 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8006716:	f7fd f976 	bl	8003a06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800671a:	bf00      	nop
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000c90 	.word	0x20000c90

08006724 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <SystemInit+0x64>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672e:	4a16      	ldr	r2, [pc, #88]	; (8006788 <SystemInit+0x64>)
 8006730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006738:	4b14      	ldr	r3, [pc, #80]	; (800678c <SystemInit+0x68>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a13      	ldr	r2, [pc, #76]	; (800678c <SystemInit+0x68>)
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <SystemInit+0x68>)
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800674a:	4b10      	ldr	r3, [pc, #64]	; (800678c <SystemInit+0x68>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a0f      	ldr	r2, [pc, #60]	; (800678c <SystemInit+0x68>)
 8006750:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006754:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006758:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <SystemInit+0x68>)
 800675c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006760:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <SystemInit+0x68>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <SystemInit+0x68>)
 8006768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <SystemInit+0x68>)
 8006770:	2200      	movs	r2, #0
 8006772:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <SystemInit+0x64>)
 8006776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800677a:	609a      	str	r2, [r3, #8]
#endif
}
 800677c:	bf00      	nop
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	e000ed00 	.word	0xe000ed00
 800678c:	40021000 	.word	0x40021000

08006790 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006796:	f107 0310 	add.w	r3, r7, #16
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	605a      	str	r2, [r3, #4]
 80067a0:	609a      	str	r2, [r3, #8]
 80067a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067a4:	1d3b      	adds	r3, r7, #4
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80067ae:	4b1e      	ldr	r3, [pc, #120]	; (8006828 <MX_TIM2_Init+0x98>)
 80067b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 955-1;
 80067b6:	4b1c      	ldr	r3, [pc, #112]	; (8006828 <MX_TIM2_Init+0x98>)
 80067b8:	f240 32ba 	movw	r2, #954	; 0x3ba
 80067bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067be:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <MX_TIM2_Init+0x98>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 80067c4:	4b18      	ldr	r3, [pc, #96]	; (8006828 <MX_TIM2_Init+0x98>)
 80067c6:	2203      	movs	r2, #3
 80067c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ca:	4b17      	ldr	r3, [pc, #92]	; (8006828 <MX_TIM2_Init+0x98>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067d0:	4b15      	ldr	r3, [pc, #84]	; (8006828 <MX_TIM2_Init+0x98>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80067d6:	4814      	ldr	r0, [pc, #80]	; (8006828 <MX_TIM2_Init+0x98>)
 80067d8:	f7fd f892 	bl	8003900 <HAL_TIM_Base_Init>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80067e2:	f7ff f853 	bl	800588c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80067ec:	f107 0310 	add.w	r3, r7, #16
 80067f0:	4619      	mov	r1, r3
 80067f2:	480d      	ldr	r0, [pc, #52]	; (8006828 <MX_TIM2_Init+0x98>)
 80067f4:	f7fd fa26 	bl	8003c44 <HAL_TIM_ConfigClockSource>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80067fe:	f7ff f845 	bl	800588c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4806      	ldr	r0, [pc, #24]	; (8006828 <MX_TIM2_Init+0x98>)
 8006810:	f7fd fc0a 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800681a:	f7ff f837 	bl	800588c <Error_Handler>
  }

}
 800681e:	bf00      	nop
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000cd0 	.word	0x20000cd0

0800682c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	609a      	str	r2, [r3, #8]
 800683e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800684a:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <MX_TIM15_Init+0x9c>)
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <MX_TIM15_Init+0xa0>)
 800684e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8000-1;
 8006850:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <MX_TIM15_Init+0x9c>)
 8006852:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006856:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <MX_TIM15_Init+0x9c>)
 800685a:	2200      	movs	r2, #0
 800685c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <MX_TIM15_Init+0x9c>)
 8006860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006864:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <MX_TIM15_Init+0x9c>)
 8006868:	2200      	movs	r2, #0
 800686a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800686c:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <MX_TIM15_Init+0x9c>)
 800686e:	2200      	movs	r2, #0
 8006870:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <MX_TIM15_Init+0x9c>)
 8006874:	2200      	movs	r2, #0
 8006876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8006878:	4813      	ldr	r0, [pc, #76]	; (80068c8 <MX_TIM15_Init+0x9c>)
 800687a:	f7fd f841 	bl	8003900 <HAL_TIM_Base_Init>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8006884:	f7ff f802 	bl	800588c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800688c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800688e:	f107 0310 	add.w	r3, r7, #16
 8006892:	4619      	mov	r1, r3
 8006894:	480c      	ldr	r0, [pc, #48]	; (80068c8 <MX_TIM15_Init+0x9c>)
 8006896:	f7fd f9d5 	bl	8003c44 <HAL_TIM_ConfigClockSource>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80068a0:	f7fe fff4 	bl	800588c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068a4:	2300      	movs	r3, #0
 80068a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4805      	ldr	r0, [pc, #20]	; (80068c8 <MX_TIM15_Init+0x9c>)
 80068b2:	f7fd fbb9 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80068bc:	f7fe ffe6 	bl	800588c <Error_Handler>
  }

}
 80068c0:	bf00      	nop
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000c90 	.word	0x20000c90
 80068cc:	40014000 	.word	0x40014000

080068d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e0:	d114      	bne.n	800690c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068e2:	4b19      	ldr	r3, [pc, #100]	; (8006948 <HAL_TIM_Base_MspInit+0x78>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <HAL_TIM_Base_MspInit+0x78>)
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	6593      	str	r3, [r2, #88]	; 0x58
 80068ee:	4b16      	ldr	r3, [pc, #88]	; (8006948 <HAL_TIM_Base_MspInit+0x78>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2108      	movs	r1, #8
 80068fe:	201c      	movs	r0, #28
 8006900:	f7fa fda7 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006904:	201c      	movs	r0, #28
 8006906:	f7fa fdc0 	bl	800148a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800690a:	e018      	b.n	800693e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0e      	ldr	r2, [pc, #56]	; (800694c <HAL_TIM_Base_MspInit+0x7c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d113      	bne.n	800693e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <HAL_TIM_Base_MspInit+0x78>)
 8006918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691a:	4a0b      	ldr	r2, [pc, #44]	; (8006948 <HAL_TIM_Base_MspInit+0x78>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006920:	6613      	str	r3, [r2, #96]	; 0x60
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_TIM_Base_MspInit+0x78>)
 8006924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 8, 0);
 800692e:	2200      	movs	r2, #0
 8006930:	2108      	movs	r1, #8
 8006932:	2018      	movs	r0, #24
 8006934:	f7fa fd8d 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006938:	2018      	movs	r0, #24
 800693a:	f7fa fda6 	bl	800148a <HAL_NVIC_EnableIRQ>
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	40021000 	.word	0x40021000
 800694c:	40014000 	.word	0x40014000

08006950 <TIM2_IRQHandler>:
volatile uint8_t doDet = 0;
extern UART_HandleTypeDef huart1;


void TIM2_IRQHandler(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <TIM2_IRQHandler+0x1c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b01      	cmp	r3, #1
 8006960:	d102      	bne.n	8006968 <TIM2_IRQHandler+0x18>
		HAL_TIM_IRQHandler(&htim2);
 8006962:	4802      	ldr	r0, [pc, #8]	; (800696c <TIM2_IRQHandler+0x1c>)
 8006964:	f7fd f84f 	bl	8003a06 <HAL_TIM_IRQHandler>
	}
}
 8006968:	bf00      	nop
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000cd0 	.word	0x20000cd0

08006970 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *timer)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	if (timer->Instance == htim2.Instance) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b21      	ldr	r3, [pc, #132]	; (8006a04 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d131      	bne.n	80069e8 <HAL_TIM_PeriodElapsedCallback+0x78>
		timInCount++;
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	3301      	adds	r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006990:	701a      	strb	r2, [r3, #0]
		//printf("1");
		if (timInCount == 5 * (115200/huart1.Init.BaudRate)) {
 8006992:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	4619      	mov	r1, r3
 800699a:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d102      	bne.n	80069b6 <HAL_TIM_PeriodElapsedCallback+0x46>
			dataFrameErr = 1;
 80069b0:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
		}
		if (timInCount == 9 * (115200/huart1.Init.BaudRate)) {
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	4619      	mov	r1, r3
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4413      	add	r3, r2
 80069d0:	4299      	cmp	r1, r3
 80069d2:	d112      	bne.n	80069fa <HAL_TIM_PeriodElapsedCallback+0x8a>
			//printf("\n timecallback end\n");
			dataFrameComp = 1;
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
			dataAna = 1;
 80069da:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80069e0:	4808      	ldr	r0, [pc, #32]	; (8006a04 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80069e2:	f7fc ffe5 	bl	80039b0 <HAL_TIM_Base_Stop_IT>
		}
	} else if(timer->Instance == htim15.Instance) {
		doDet = 1;
	}
}
 80069e6:	e008      	b.n	80069fa <HAL_TIM_PeriodElapsedCallback+0x8a>
	} else if(timer->Instance == htim15.Instance) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d102      	bne.n	80069fa <HAL_TIM_PeriodElapsedCallback+0x8a>
		doDet = 1;
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000cd0 	.word	0x20000cd0
 8006a08:	200002cb 	.word	0x200002cb
 8006a0c:	20000d10 	.word	0x20000d10
 8006a10:	200002ca 	.word	0x200002ca
 8006a14:	20000148 	.word	0x20000148
 8006a18:	200002cc 	.word	0x200002cc
 8006a1c:	20000c90 	.word	0x20000c90
 8006a20:	200002cd 	.word	0x200002cd

08006a24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006a28:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a2a:	4a15      	ldr	r2, [pc, #84]	; (8006a80 <MX_USART1_UART_Init+0x5c>)
 8006a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006a2e:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a36:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006a3c:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a4a:	220c      	movs	r2, #12
 8006a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a54:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a66:	4805      	ldr	r0, [pc, #20]	; (8006a7c <MX_USART1_UART_Init+0x58>)
 8006a68:	f7fd fb52 	bl	8004110 <HAL_UART_Init>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <MX_USART1_UART_Init+0x52>
  {
     Error_Handler();
 8006a72:	f7fe ff0b 	bl	800588c <Error_Handler>
  }

}
 8006a76:	bf00      	nop
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000d10 	.word	0x20000d10
 8006a80:	40013800 	.word	0x40013800

08006a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a8c:	f107 0314 	add.w	r3, r7, #20
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	609a      	str	r2, [r3, #8]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <HAL_UART_MspInit+0x90>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d131      	bne.n	8006b0a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <HAL_UART_MspInit+0x94>)
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <HAL_UART_MspInit+0x94>)
 8006aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ab0:	6613      	str	r3, [r2, #96]	; 0x60
 8006ab2:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_UART_MspInit+0x94>)
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006abe:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <HAL_UART_MspInit+0x94>)
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <HAL_UART_MspInit+0x94>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <HAL_UART_MspInit+0x94>)
 8006acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006adc:	2302      	movs	r3, #2
 8006ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ae8:	2307      	movs	r3, #7
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aec:	f107 0314 	add.w	r3, r7, #20
 8006af0:	4619      	mov	r1, r3
 8006af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006af6:	f7fa ffa3 	bl	8001a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8006afa:	2200      	movs	r2, #0
 8006afc:	2108      	movs	r1, #8
 8006afe:	2025      	movs	r0, #37	; 0x25
 8006b00:	f7fa fca7 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006b04:	2025      	movs	r0, #37	; 0x25
 8006b06:	f7fa fcc0 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40013800 	.word	0x40013800
 8006b18:	40021000 	.word	0x40021000

08006b1c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <HAL_UART_MspDeInit+0x38>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d10e      	bne.n	8006b4c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_UART_MspDeInit+0x3c>)
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <HAL_UART_MspDeInit+0x3c>)
 8006b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b38:	6613      	str	r3, [r2, #96]	; 0x60
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006b3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b42:	f7fb f8f7 	bl	8001d34 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006b46:	2025      	movs	r0, #37	; 0x25
 8006b48:	f7fa fcad 	bl	80014a6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000

08006b5c <_write>:
  return ch;
}
#endif
*/
int _write(int file, char *ptr, int len)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	/*
	if (huart1.gState == HAL_UART_STATE_BUSY) {
		return 0;
	}*/
	return HAL_UART_Transmit_IT(&huart1, (uint8_t*)ptr, len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	4803      	ldr	r0, [pc, #12]	; (8006b80 <_write+0x24>)
 8006b72:	f7fd fb57 	bl	8004224 <HAL_UART_Transmit_IT>
 8006b76:	4603      	mov	r3, r0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000d10 	.word	0x20000d10

08006b84 <HAL_UART_RxCpltCallback>:
extern volatile uint8_t dataAna;
extern TIM_HandleTypeDef htim2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	if( huart->Instance==USART1) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <HAL_UART_RxCpltCallback+0x90>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d13a      	bne.n	8006c0c <HAL_UART_RxCpltCallback+0x88>
		timInCount = 0;
 8006b96:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <HAL_UART_RxCpltCallback+0x94>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]
		if (dataFrameComp) {
 8006b9c:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <HAL_UART_RxCpltCallback+0x98>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d013      	beq.n	8006bce <HAL_UART_RxCpltCallback+0x4a>
			dataFrameComp = 0;
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <HAL_UART_RxCpltCallback+0x98>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
			dataFrameErr = 0;
 8006bac:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <HAL_UART_RxCpltCallback+0x9c>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
			dataErr = 0;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <HAL_UART_RxCpltCallback+0xa0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
			dataAna = 0;
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <HAL_UART_RxCpltCallback+0xa4>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
			USART_RX_BUF[0] = aRxBuffer[0];
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <HAL_UART_RxCpltCallback+0xa8>)
 8006bc0:	781a      	ldrb	r2, [r3, #0]
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <HAL_UART_RxCpltCallback+0xac>)
 8006bc4:	701a      	strb	r2, [r3, #0]
			USART_RX_POS = 1;
 8006bc6:	4b1b      	ldr	r3, [pc, #108]	; (8006c34 <HAL_UART_RxCpltCallback+0xb0>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e017      	b.n	8006bfe <HAL_UART_RxCpltCallback+0x7a>
		} else {
			USART_RX_BUF[USART_RX_POS] = aRxBuffer[0];
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <HAL_UART_RxCpltCallback+0xb0>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <HAL_UART_RxCpltCallback+0xa8>)
 8006bd6:	7819      	ldrb	r1, [r3, #0]
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <HAL_UART_RxCpltCallback+0xac>)
 8006bda:	5499      	strb	r1, [r3, r2]
			USART_RX_POS++;
 8006bdc:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <HAL_UART_RxCpltCallback+0xb0>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <HAL_UART_RxCpltCallback+0xb0>)
 8006be6:	701a      	strb	r2, [r3, #0]
			if (USART_RX_POS == 256) {
				USART_RX_POS = 0;
			}
			HAL_TIM_Base_Stop_IT(&htim2);
 8006be8:	4813      	ldr	r0, [pc, #76]	; (8006c38 <HAL_UART_RxCpltCallback+0xb4>)
 8006bea:	f7fc fee1 	bl	80039b0 <HAL_TIM_Base_Stop_IT>
			if (dataFrameErr) {
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <HAL_UART_RxCpltCallback+0x9c>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_UART_RxCpltCallback+0x7a>
				dataErr = 1;
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <HAL_UART_RxCpltCallback+0xa0>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
			}
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <HAL_UART_RxCpltCallback+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim2);
 8006c06:	480c      	ldr	r0, [pc, #48]	; (8006c38 <HAL_UART_RxCpltCallback+0xb4>)
 8006c08:	f7fc fea6 	bl	8003958 <HAL_TIM_Base_Start_IT>
	}
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40013800 	.word	0x40013800
 8006c18:	200002cb 	.word	0x200002cb
 8006c1c:	20000148 	.word	0x20000148
 8006c20:	200002ca 	.word	0x200002ca
 8006c24:	200003d1 	.word	0x200003d1
 8006c28:	200002cc 	.word	0x200002cc
 8006c2c:	20000d88 	.word	0x20000d88
 8006c30:	200002d0 	.word	0x200002d0
 8006c34:	200003d0 	.word	0x200003d0
 8006c38:	20000cd0 	.word	0x20000cd0

08006c3c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
	uint32_t timeout=0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
	uint32_t maxDelay=0x1FFFF;
 8006c46:	4b2e      	ldr	r3, [pc, #184]	; (8006d00 <USART1_IRQHandler+0xc4>)
 8006c48:	613b      	str	r3, [r7, #16]

	uint32_t isrflags   = READ_REG(huart1.Instance->ISR);
 8006c4a:	4b2e      	ldr	r3, [pc, #184]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	60fb      	str	r3, [r7, #12]
	uint32_t cr1its     = READ_REG(huart1.Instance->CR1);
 8006c52:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60bb      	str	r3, [r7, #8]
	uint32_t cr3its     = READ_REG(huart1.Instance->CR3);
 8006c5a:	4b2a      	ldr	r3, [pc, #168]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	607b      	str	r3, [r7, #4]
	uint32_t errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	603b      	str	r3, [r7, #0]
	if ( (((errorflags == RESET) && (isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) ||
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d109      	bne.n	8006c84 <USART1_IRQHandler+0x48>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <USART1_IRQHandler+0x48>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10c      	bne.n	8006c9e <USART1_IRQHandler+0x62>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d033      	beq.n	8006cf2 <USART1_IRQHandler+0xb6>
			((errorflags != RESET)&& (((cr3its & USART_CR3_EIE) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <USART1_IRQHandler+0x62>
	          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))) {
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d029      	beq.n	8006cf2 <USART1_IRQHandler+0xb6>
		HAL_UART_IRQHandler(&huart1);
 8006c9e:	4819      	ldr	r0, [pc, #100]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006ca0:	f7fd fbbe 	bl	8004420 <HAL_UART_IRQHandler>

		timeout=0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
		while (huart1.RxState != HAL_UART_STATE_READY)
 8006ca8:	e006      	b.n	8006cb8 <USART1_IRQHandler+0x7c>
		{
			timeout++;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	3301      	adds	r3, #1
 8006cae:	617b      	str	r3, [r7, #20]
			if(timeout>maxDelay) break;
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d806      	bhi.n	8006cc6 <USART1_IRQHandler+0x8a>
		while (huart1.RxState != HAL_UART_STATE_READY)
 8006cb8:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006cba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d1f2      	bne.n	8006caa <USART1_IRQHandler+0x6e>
 8006cc4:	e000      	b.n	8006cc8 <USART1_IRQHandler+0x8c>
			if(timeout>maxDelay) break;
 8006cc6:	bf00      	nop
		}
		timeout=0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
		while(HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 8006ccc:	e006      	b.n	8006cdc <USART1_IRQHandler+0xa0>
		{
			timeout++;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
			if(timeout>maxDelay) break;
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d808      	bhi.n	8006cee <USART1_IRQHandler+0xb2>
		while(HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	490a      	ldr	r1, [pc, #40]	; (8006d08 <USART1_IRQHandler+0xcc>)
 8006ce0:	4808      	ldr	r0, [pc, #32]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006ce2:	f7fd fafd 	bl	80042e0 <HAL_UART_Receive_IT>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <USART1_IRQHandler+0x92>
	if ( (((errorflags == RESET) && (isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) ||
 8006cec:	e004      	b.n	8006cf8 <USART1_IRQHandler+0xbc>
			if(timeout>maxDelay) break;
 8006cee:	bf00      	nop
	if ( (((errorflags == RESET) && (isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) ||
 8006cf0:	e002      	b.n	8006cf8 <USART1_IRQHandler+0xbc>
		}
	} else {
		HAL_UART_IRQHandler(&huart1);
 8006cf2:	4804      	ldr	r0, [pc, #16]	; (8006d04 <USART1_IRQHandler+0xc8>)
 8006cf4:	f7fd fb94 	bl	8004420 <HAL_UART_IRQHandler>
	}
}
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	0001ffff 	.word	0x0001ffff
 8006d04:	20000d10 	.word	0x20000d10
 8006d08:	20000d88 	.word	0x20000d88

08006d0c <uartConfig>:

void uartConfig()
{
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
	uint32_t baud[8] = {2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200};
 8006d12:	4b35      	ldr	r3, [pc, #212]	; (8006de8 <uartConfig+0xdc>)
 8006d14:	463c      	mov	r4, r7
 8006d16:	461d      	mov	r5, r3
 8006d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_DeInit(&huart1);
 8006d24:	4831      	ldr	r0, [pc, #196]	; (8006dec <uartConfig+0xe0>)
 8006d26:	f7fd fa44 	bl	80041b2 <HAL_UART_DeInit>
	if (config.baudrate && (config.baudrate < 9)) {
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <uartConfig+0xe4>)
 8006d2c:	795b      	ldrb	r3, [r3, #5]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00f      	beq.n	8006d52 <uartConfig+0x46>
 8006d32:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <uartConfig+0xe4>)
 8006d34:	795b      	ldrb	r3, [r3, #5]
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d80b      	bhi.n	8006d52 <uartConfig+0x46>
		huart1.Init.BaudRate = baud[config.baudrate - 1];
 8006d3a:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <uartConfig+0xe4>)
 8006d3c:	795b      	ldrb	r3, [r3, #5]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	f107 0220 	add.w	r2, r7, #32
 8006d46:	4413      	add	r3, r2
 8006d48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006d4c:	4a27      	ldr	r2, [pc, #156]	; (8006dec <uartConfig+0xe0>)
 8006d4e:	6053      	str	r3, [r2, #4]
 8006d50:	e003      	b.n	8006d5a <uartConfig+0x4e>
	} else {
		huart1.Init.BaudRate = 9600;
 8006d52:	4b26      	ldr	r3, [pc, #152]	; (8006dec <uartConfig+0xe0>)
 8006d54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006d58:	605a      	str	r2, [r3, #4]
	}
	if (config.parity == 0 || config.parity > 2) {
 8006d5a:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <uartConfig+0xe4>)
 8006d5c:	799b      	ldrb	r3, [r3, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <uartConfig+0x5e>
 8006d62:	4b23      	ldr	r3, [pc, #140]	; (8006df0 <uartConfig+0xe4>)
 8006d64:	799b      	ldrb	r3, [r3, #6]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d903      	bls.n	8006d72 <uartConfig+0x66>
		 huart1.Init.Parity = UART_PARITY_NONE;
 8006d6a:	4b20      	ldr	r3, [pc, #128]	; (8006dec <uartConfig+0xe0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	611a      	str	r2, [r3, #16]
 8006d70:	e010      	b.n	8006d94 <uartConfig+0x88>
	} else if(config.parity == 1) {
 8006d72:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <uartConfig+0xe4>)
 8006d74:	799b      	ldrb	r3, [r3, #6]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d104      	bne.n	8006d84 <uartConfig+0x78>
		huart1.Init.Parity = UART_PARITY_EVEN;
 8006d7a:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <uartConfig+0xe0>)
 8006d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d80:	611a      	str	r2, [r3, #16]
 8006d82:	e007      	b.n	8006d94 <uartConfig+0x88>
	} else if(config.parity == 2) {
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <uartConfig+0xe4>)
 8006d86:	799b      	ldrb	r3, [r3, #6]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d103      	bne.n	8006d94 <uartConfig+0x88>
		huart1.Init.Parity = UART_PARITY_ODD;
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <uartConfig+0xe0>)
 8006d8e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006d92:	611a      	str	r2, [r3, #16]
	}
	if (config.stopBit == 1 || config.stopBit >3) {
 8006d94:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <uartConfig+0xe4>)
 8006d96:	79db      	ldrb	r3, [r3, #7]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d003      	beq.n	8006da4 <uartConfig+0x98>
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <uartConfig+0xe4>)
 8006d9e:	79db      	ldrb	r3, [r3, #7]
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d903      	bls.n	8006dac <uartConfig+0xa0>
		huart1.Init.StopBits = UART_STOPBITS_1;
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <uartConfig+0xe0>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	e015      	b.n	8006dd8 <uartConfig+0xcc>
	} else if (!config.stopBit) {
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <uartConfig+0xe4>)
 8006dae:	79db      	ldrb	r3, [r3, #7]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <uartConfig+0xb2>
		huart1.Init.StopBits = UART_STOPBITS_0_5;
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <uartConfig+0xe0>)
 8006db6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dba:	60da      	str	r2, [r3, #12]
 8006dbc:	e00c      	b.n	8006dd8 <uartConfig+0xcc>
	} else if (config.stopBit == 2) {
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <uartConfig+0xe4>)
 8006dc0:	79db      	ldrb	r3, [r3, #7]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d104      	bne.n	8006dd0 <uartConfig+0xc4>
		huart1.Init.StopBits = UART_STOPBITS_1_5;
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <uartConfig+0xe0>)
 8006dc8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006dcc:	60da      	str	r2, [r3, #12]
 8006dce:	e003      	b.n	8006dd8 <uartConfig+0xcc>
	} else {
		huart1.Init.StopBits = UART_STOPBITS_2;
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <uartConfig+0xe0>)
 8006dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dd6:	60da      	str	r2, [r3, #12]
	}
	HAL_UART_Init(&huart1);
 8006dd8:	4804      	ldr	r0, [pc, #16]	; (8006dec <uartConfig+0xe0>)
 8006dda:	f7fd f999 	bl	8004110 <HAL_UART_Init>
}
 8006dde:	bf00      	nop
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bdb0      	pop	{r4, r5, r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08012ac8 	.word	0x08012ac8
 8006dec:	20000d10 	.word	0x20000d10
 8006df0:	20000020 	.word	0x20000020

08006df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006df8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006dfa:	e003      	b.n	8006e04 <LoopCopyDataInit>

08006dfc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006dfe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006e00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006e02:	3104      	adds	r1, #4

08006e04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006e04:	480b      	ldr	r0, [pc, #44]	; (8006e34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006e08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006e0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006e0c:	d3f6      	bcc.n	8006dfc <CopyDataInit>
	ldr	r2, =_sbss
 8006e0e:	4a0b      	ldr	r2, [pc, #44]	; (8006e3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006e10:	e002      	b.n	8006e18 <LoopFillZerobss>

08006e12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006e12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006e14:	f842 3b04 	str.w	r3, [r2], #4

08006e18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <LoopForever+0x16>)
	cmp	r2, r3
 8006e1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006e1c:	d3f9      	bcc.n	8006e12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e1e:	f7ff fc81 	bl	8006724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e22:	f009 f907 	bl	8010034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006e26:	f7fe fb97 	bl	8005558 <main>

08006e2a <LoopForever>:

LoopForever:
    b LoopForever
 8006e2a:	e7fe      	b.n	8006e2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e2c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8006e30:	0801d4e4 	.word	0x0801d4e4
	ldr	r0, =_sdata
 8006e34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006e38:	200002ac 	.word	0x200002ac
	ldr	r2, =_sbss
 8006e3c:	200002ac 	.word	0x200002ac
	ldr	r3, = _ebss
 8006e40:	20000d90 	.word	0x20000d90

08006e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006e44:	e7fe      	b.n	8006e44 <ADC1_IRQHandler>
	...

08006e48 <reflection_comparison_by_amplitude>:
 8006e48:	888b      	ldrh	r3, [r1, #4]
 8006e4a:	8880      	ldrh	r0, [r0, #4]
 8006e4c:	1a18      	subs	r0, r3, r0
 8006e4e:	4770      	bx	lr

08006e50 <acc_detector_distance_peak_configuration_destroy>:
 8006e50:	b1a0      	cbz	r0, 8006e7c <acc_detector_distance_peak_configuration_destroy+0x2c>
 8006e52:	6803      	ldr	r3, [r0, #0]
 8006e54:	b193      	cbz	r3, 8006e7c <acc_detector_distance_peak_configuration_destroy+0x2c>
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	b182      	cbz	r2, 8006e7c <acc_detector_distance_peak_configuration_destroy+0x2c>
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	b172      	cbz	r2, 8006e7c <acc_detector_distance_peak_configuration_destroy+0x2c>
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
 8006e62:	1d18      	adds	r0, r3, #4
 8006e64:	f000 fd18 	bl	8007898 <acc_service_envelope_configuration_destroy>
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	3014      	adds	r0, #20
 8006e6c:	f002 fa04 	bl	8009278 <acc_alg_distance_peak_detect_destroy_detector>
 8006e70:	6820      	ldr	r0, [r4, #0]
 8006e72:	f003 f993 	bl	800a19c <acc_integration_mem_free>
 8006e76:	2300      	movs	r3, #0
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd10      	pop	{r4, pc}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop

08006e80 <acc_detector_distance_peak_create>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	4607      	mov	r7, r0
 8006e84:	b085      	sub	sp, #20
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d046      	beq.n	8006f18 <acc_detector_distance_peak_create+0x98>
 8006e8a:	2262      	movs	r2, #98	; 0x62
 8006e8c:	4925      	ldr	r1, [pc, #148]	; (8006f24 <acc_detector_distance_peak_create+0xa4>)
 8006e8e:	203c      	movs	r0, #60	; 0x3c
 8006e90:	f003 f94a 	bl	800a128 <acc_integration_mem_alloc_debug>
 8006e94:	4604      	mov	r4, r0
 8006e96:	b378      	cbz	r0, 8006ef8 <acc_detector_distance_peak_create+0x78>
 8006e98:	463e      	mov	r6, r7
 8006e9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006e9c:	4625      	mov	r5, r4
 8006e9e:	f8df c090 	ldr.w	ip, [pc, #144]	; 8006f30 <acc_detector_distance_peak_create+0xb0>
 8006ea2:	f845 cb04 	str.w	ip, [r5], #4
 8006ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ea8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006eac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006eb0:	6978      	ldr	r0, [r7, #20]
 8006eb2:	f002 f9db 	bl	800926c <acc_alg_distance_peak_detect_get_detector_reference>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2301      	movs	r3, #1
 8006eba:	61a0      	str	r0, [r4, #24]
 8006ebc:	6322      	str	r2, [r4, #48]	; 0x30
 8006ebe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	603c      	str	r4, [r7, #0]
 8006ec6:	f000 fe67 	bl	8007b98 <acc_service_create>
 8006eca:	4605      	mov	r5, r0
 8006ecc:	6220      	str	r0, [r4, #32]
 8006ece:	b1d0      	cbz	r0, 8006f06 <acc_detector_distance_peak_create+0x86>
 8006ed0:	4669      	mov	r1, sp
 8006ed2:	f000 fd39 	bl	8007948 <acc_service_envelope_get_metadata>
 8006ed6:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8006eda:	9a00      	ldr	r2, [sp, #0]
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	6262      	str	r2, [r4, #36]	; 0x24
 8006ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ee2:	0040      	lsls	r0, r0, #1
 8006ee4:	2284      	movs	r2, #132	; 0x84
 8006ee6:	490f      	ldr	r1, [pc, #60]	; (8006f24 <acc_detector_distance_peak_create+0xa4>)
 8006ee8:	f003 f91e 	bl	800a128 <acc_integration_mem_alloc_debug>
 8006eec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	8723      	strh	r3, [r4, #56]	; 0x38
 8006ef6:	b110      	cbz	r0, 8006efe <acc_detector_distance_peak_create+0x7e>
 8006ef8:	4620      	mov	r0, r4
 8006efa:	b005      	add	sp, #20
 8006efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efe:	f104 0020 	add.w	r0, r4, #32
 8006f02:	f000 fe63 	bl	8007bcc <acc_service_destroy>
 8006f06:	f104 0018 	add.w	r0, r4, #24
 8006f0a:	f002 f9b5 	bl	8009278 <acc_alg_distance_peak_detect_destroy_detector>
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f003 f944 	bl	800a19c <acc_integration_mem_free>
 8006f14:	462c      	mov	r4, r5
 8006f16:	e7ef      	b.n	8006ef8 <acc_detector_distance_peak_create+0x78>
 8006f18:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <acc_detector_distance_peak_create+0xa8>)
 8006f1a:	4904      	ldr	r1, [pc, #16]	; (8006f2c <acc_detector_distance_peak_create+0xac>)
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	f003 f94f 	bl	800a1c0 <acc_log_rss>
 8006f22:	e7e9      	b.n	8006ef8 <acc_detector_distance_peak_create+0x78>
 8006f24:	080164a0 	.word	0x080164a0
 8006f28:	08016468 	.word	0x08016468
 8006f2c:	08016484 	.word	0x08016484
 8006f30:	acc12123 	.word	0xacc12123

08006f34 <acc_detector_distance_peak_activate>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	b120      	cbz	r0, 8006f42 <acc_detector_distance_peak_activate+0xe>
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <acc_detector_distance_peak_activate+0x44>)
 8006f3a:	6802      	ldr	r2, [r0, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	4604      	mov	r4, r0
 8006f40:	d006      	beq.n	8006f50 <acc_detector_distance_peak_activate+0x1c>
 8006f42:	2000      	movs	r0, #0
 8006f44:	4a0d      	ldr	r2, [pc, #52]	; (8006f7c <acc_detector_distance_peak_activate+0x48>)
 8006f46:	490e      	ldr	r1, [pc, #56]	; (8006f80 <acc_detector_distance_peak_activate+0x4c>)
 8006f48:	f003 f93a 	bl	800a1c0 <acc_log_rss>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006f54:	b143      	cbz	r3, 8006f68 <acc_detector_distance_peak_activate+0x34>
 8006f56:	6a00      	ldr	r0, [r0, #32]
 8006f58:	f000 fa14 	bl	8007384 <acc_service_activate>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d0f6      	beq.n	8006f4e <acc_detector_distance_peak_activate+0x1a>
 8006f60:	2300      	movs	r3, #0
 8006f62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006f66:	bd10      	pop	{r4, pc}
 8006f68:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <acc_detector_distance_peak_activate+0x50>)
 8006f6a:	4905      	ldr	r1, [pc, #20]	; (8006f80 <acc_detector_distance_peak_activate+0x4c>)
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	f003 f927 	bl	800a1c0 <acc_log_rss>
 8006f72:	2001      	movs	r0, #1
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	bf00      	nop
 8006f78:	acc12123 	.word	0xacc12123
 8006f7c:	0801642c 	.word	0x0801642c
 8006f80:	08016484 	.word	0x08016484
 8006f84:	0801644c 	.word	0x0801644c

08006f88 <acc_detector_distance_peak_deactivate>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	b120      	cbz	r0, 8006f96 <acc_detector_distance_peak_deactivate+0xe>
 8006f8c:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <acc_detector_distance_peak_deactivate+0x50>)
 8006f8e:	6802      	ldr	r2, [r0, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	4604      	mov	r4, r0
 8006f94:	d007      	beq.n	8006fa6 <acc_detector_distance_peak_deactivate+0x1e>
 8006f96:	4a11      	ldr	r2, [pc, #68]	; (8006fdc <acc_detector_distance_peak_deactivate+0x54>)
 8006f98:	4911      	ldr	r1, [pc, #68]	; (8006fe0 <acc_detector_distance_peak_deactivate+0x58>)
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f003 f910 	bl	800a1c0 <acc_log_rss>
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
 8006fa6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8006faa:	2d01      	cmp	r5, #1
 8006fac:	d00e      	beq.n	8006fcc <acc_detector_distance_peak_deactivate+0x44>
 8006fae:	6a00      	ldr	r0, [r0, #32]
 8006fb0:	f000 fa18 	bl	80073e4 <acc_service_deactivate>
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	b120      	cbz	r0, 8006fc2 <acc_detector_distance_peak_deactivate+0x3a>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	4a08      	ldr	r2, [pc, #32]	; (8006fe4 <acc_detector_distance_peak_deactivate+0x5c>)
 8006fc4:	4906      	ldr	r1, [pc, #24]	; (8006fe0 <acc_detector_distance_peak_deactivate+0x58>)
 8006fc6:	f003 f8fb 	bl	800a1c0 <acc_log_rss>
 8006fca:	e7ea      	b.n	8006fa2 <acc_detector_distance_peak_deactivate+0x1a>
 8006fcc:	4a06      	ldr	r2, [pc, #24]	; (8006fe8 <acc_detector_distance_peak_deactivate+0x60>)
 8006fce:	4904      	ldr	r1, [pc, #16]	; (8006fe0 <acc_detector_distance_peak_deactivate+0x58>)
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f003 f8f5 	bl	800a1c0 <acc_log_rss>
 8006fd6:	e7e4      	b.n	8006fa2 <acc_detector_distance_peak_deactivate+0x1a>
 8006fd8:	acc12123 	.word	0xacc12123
 8006fdc:	0801642c 	.word	0x0801642c
 8006fe0:	08016484 	.word	0x08016484
 8006fe4:	080164e0 	.word	0x080164e0
 8006fe8:	080164c0 	.word	0x080164c0

08006fec <acc_detector_distance_peak_destroy>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	b1f0      	cbz	r0, 8007030 <acc_detector_distance_peak_destroy+0x44>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	6800      	ldr	r0, [r0, #0]
 8006ff6:	b1d8      	cbz	r0, 8007030 <acc_detector_distance_peak_destroy+0x44>
 8006ff8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006ffc:	b1a3      	cbz	r3, 8007028 <acc_detector_distance_peak_destroy+0x3c>
 8006ffe:	6a03      	ldr	r3, [r0, #32]
 8007000:	a802      	add	r0, sp, #8
 8007002:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007006:	f000 fde1 	bl	8007bcc <acc_service_destroy>
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	3018      	adds	r0, #24
 800700e:	f002 f933 	bl	8009278 <acc_alg_distance_peak_detect_destroy_detector>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007016:	f003 f8c1 	bl	800a19c <acc_integration_mem_free>
 800701a:	6820      	ldr	r0, [r4, #0]
 800701c:	f003 f8be 	bl	800a19c <acc_integration_mem_free>
 8007020:	2300      	movs	r3, #0
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	b002      	add	sp, #8
 8007026:	bd10      	pop	{r4, pc}
 8007028:	f7ff ffae 	bl	8006f88 <acc_detector_distance_peak_deactivate>
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	e7e6      	b.n	8006ffe <acc_detector_distance_peak_destroy+0x12>
 8007030:	4a03      	ldr	r2, [pc, #12]	; (8007040 <acc_detector_distance_peak_destroy+0x54>)
 8007032:	4904      	ldr	r1, [pc, #16]	; (8007044 <acc_detector_distance_peak_destroy+0x58>)
 8007034:	2000      	movs	r0, #0
 8007036:	f003 f8c3 	bl	800a1c0 <acc_log_rss>
 800703a:	b002      	add	sp, #8
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	08016508 	.word	0x08016508
 8007044:	08016484 	.word	0x08016484

08007048 <acc_detector_distance_peak_get_base_configuration>:
 8007048:	b510      	push	{r4, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	b120      	cbz	r0, 8007058 <acc_detector_distance_peak_get_base_configuration+0x10>
 800704e:	6840      	ldr	r0, [r0, #4]
 8007050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007054:	f000 b986 	b.w	8007364 <acc_service_get_base_configuration>
 8007058:	4a02      	ldr	r2, [pc, #8]	; (8007064 <acc_detector_distance_peak_get_base_configuration+0x1c>)
 800705a:	4903      	ldr	r1, [pc, #12]	; (8007068 <acc_detector_distance_peak_get_base_configuration+0x20>)
 800705c:	f003 f8b0 	bl	800a1c0 <acc_log_rss>
 8007060:	4620      	mov	r0, r4
 8007062:	bd10      	pop	{r4, pc}
 8007064:	08016520 	.word	0x08016520
 8007068:	08016484 	.word	0x08016484

0800706c <acc_detector_distance_peak_service_profile_set>:
 800706c:	b1d8      	cbz	r0, 80070a6 <acc_detector_distance_peak_service_profile_set+0x3a>
 800706e:	b570      	push	{r4, r5, r6, lr}
 8007070:	4605      	mov	r5, r0
 8007072:	6840      	ldr	r0, [r0, #4]
 8007074:	460c      	mov	r4, r1
 8007076:	f000 f975 	bl	8007364 <acc_service_get_base_configuration>
 800707a:	4606      	mov	r6, r0
 800707c:	b1d8      	cbz	r0, 80070b6 <acc_detector_distance_peak_service_profile_set+0x4a>
 800707e:	6868      	ldr	r0, [r5, #4]
 8007080:	4621      	mov	r1, r4
 8007082:	f000 faf1 	bl	8007668 <acc_service_profile_set>
 8007086:	2c01      	cmp	r4, #1
 8007088:	d011      	beq.n	80070ae <acc_detector_distance_peak_service_profile_set+0x42>
 800708a:	d313      	bcc.n	80070b4 <acc_detector_distance_peak_service_profile_set+0x48>
 800708c:	2c05      	cmp	r4, #5
 800708e:	d811      	bhi.n	80070b4 <acc_detector_distance_peak_service_profile_set+0x48>
 8007090:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80070c4 <acc_detector_distance_peak_service_profile_set+0x58>
 8007094:	4630      	mov	r0, r6
 8007096:	f002 fd1d 	bl	8009ad4 <acc_base_configuration_receiver_gain_set>
 800709a:	4630      	mov	r0, r6
 800709c:	2107      	movs	r1, #7
 800709e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070a2:	f002 bd75 	b.w	8009b90 <acc_base_configuration_hw_accelerated_average_samples_set>
 80070a6:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <acc_detector_distance_peak_service_profile_set+0x5c>)
 80070a8:	4908      	ldr	r1, [pc, #32]	; (80070cc <acc_detector_distance_peak_service_profile_set+0x60>)
 80070aa:	f003 b889 	b.w	800a1c0 <acc_log_rss>
 80070ae:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80070d0 <acc_detector_distance_peak_service_profile_set+0x64>
 80070b2:	e7ef      	b.n	8007094 <acc_detector_distance_peak_service_profile_set+0x28>
 80070b4:	bd70      	pop	{r4, r5, r6, pc}
 80070b6:	4a07      	ldr	r2, [pc, #28]	; (80070d4 <acc_detector_distance_peak_service_profile_set+0x68>)
 80070b8:	4904      	ldr	r1, [pc, #16]	; (80070cc <acc_detector_distance_peak_service_profile_set+0x60>)
 80070ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070be:	f003 b87f 	b.w	800a1c0 <acc_log_rss>
 80070c2:	bf00      	nop
 80070c4:	3f51eb85 	.word	0x3f51eb85
 80070c8:	08016594 	.word	0x08016594
 80070cc:	08016484 	.word	0x08016484
 80070d0:	3ee66666 	.word	0x3ee66666
 80070d4:	080165ac 	.word	0x080165ac

080070d8 <acc_detector_distance_peak_configuration_create>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4a10      	ldr	r2, [pc, #64]	; (800711c <acc_detector_distance_peak_configuration_create+0x44>)
 80070dc:	2331      	movs	r3, #49	; 0x31
 80070de:	211c      	movs	r1, #28
 80070e0:	2001      	movs	r0, #1
 80070e2:	f003 f837 	bl	800a154 <acc_integration_mem_calloc_debug>
 80070e6:	4604      	mov	r4, r0
 80070e8:	b170      	cbz	r0, 8007108 <acc_detector_distance_peak_configuration_create+0x30>
 80070ea:	f000 fb4d 	bl	8007788 <acc_service_envelope_configuration_create>
 80070ee:	2300      	movs	r3, #0
 80070f0:	e9c4 0301 	strd	r0, r3, [r4, #4]
 80070f4:	60e3      	str	r3, [r4, #12]
 80070f6:	2101      	movs	r1, #1
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff ffb7 	bl	800706c <acc_detector_distance_peak_service_profile_set>
 80070fe:	f002 f887 	bl	8009210 <acc_alg_distance_peak_detect_create_detector>
 8007102:	4605      	mov	r5, r0
 8007104:	6160      	str	r0, [r4, #20]
 8007106:	b108      	cbz	r0, 800710c <acc_detector_distance_peak_configuration_create+0x34>
 8007108:	4620      	mov	r0, r4
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	1d20      	adds	r0, r4, #4
 800710e:	f000 fbc3 	bl	8007898 <acc_service_envelope_configuration_destroy>
 8007112:	4620      	mov	r0, r4
 8007114:	f003 f842 	bl	800a19c <acc_integration_mem_free>
 8007118:	462c      	mov	r4, r5
 800711a:	e7f5      	b.n	8007108 <acc_detector_distance_peak_configuration_create+0x30>
 800711c:	080164a0 	.word	0x080164a0

08007120 <acc_detector_distance_peak_running_average_factor_set>:
 8007120:	6840      	ldr	r0, [r0, #4]
 8007122:	f000 bbe1 	b.w	80078e8 <acc_service_envelope_running_average_factor_set>
 8007126:	bf00      	nop

08007128 <acc_detector_distance_peak_downsampling_factor_set>:
 8007128:	6840      	ldr	r0, [r0, #4]
 800712a:	f000 bbcd 	b.w	80078c8 <acc_service_envelope_downsampling_factor_set>
 800712e:	bf00      	nop

08007130 <acc_detector_distance_peak_get_next>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	b119      	cbz	r1, 8007142 <acc_detector_distance_peak_get_next+0x12>
 800713a:	4699      	mov	r9, r3
 800713c:	8813      	ldrh	r3, [r2, #0]
 800713e:	4690      	mov	r8, r2
 8007140:	b953      	cbnz	r3, 8007158 <acc_detector_distance_peak_get_next+0x28>
 8007142:	4a3f      	ldr	r2, [pc, #252]	; (8007240 <acc_detector_distance_peak_get_next+0x110>)
 8007144:	493f      	ldr	r1, [pc, #252]	; (8007244 <acc_detector_distance_peak_get_next+0x114>)
 8007146:	2001      	movs	r0, #1
 8007148:	f003 f83a 	bl	800a1c0 <acc_log_rss>
 800714c:	2500      	movs	r5, #0
 800714e:	4628      	mov	r0, r5
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007158:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800715a:	4604      	mov	r4, r0
 800715c:	460e      	mov	r6, r1
 800715e:	f107 0308 	add.w	r3, r7, #8
 8007162:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007164:	e9d0 a007 	ldrd	sl, r0, [r0, #28]
 8007168:	f000 fbfa 	bl	8007960 <acc_service_envelope_get_next>
 800716c:	4605      	mov	r5, r0
 800716e:	b360      	cbz	r0, 80071ca <acc_detector_distance_peak_get_next+0x9a>
 8007170:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007172:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007174:	f1ba 0f00 	cmp.w	sl, #0
 8007178:	d003      	beq.n	8007182 <acc_detector_distance_peak_get_next+0x52>
 800717a:	4611      	mov	r1, r2
 800717c:	47d0      	blx	sl
 800717e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007180:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007182:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8007186:	edd4 0a0a 	vldr	s1, [r4, #40]	; 0x28
 800718a:	f8d4 a018 	ldr.w	sl, [r4, #24]
 800718e:	f107 0310 	add.w	r3, r7, #16
 8007192:	2100      	movs	r1, #0
 8007194:	f843 1d04 	str.w	r1, [r3, #-4]!
 8007198:	ee70 0a20 	vadd.f32	s1, s0, s1
 800719c:	4601      	mov	r1, r0
 800719e:	4650      	mov	r0, sl
 80071a0:	f001 fffc 	bl	800919c <acc_alg_distance_peak_detect_get_number_of_reflections>
 80071a4:	4605      	mov	r5, r0
 80071a6:	b1e8      	cbz	r0, 80071e4 <acc_detector_distance_peak_get_next+0xb4>
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	bb31      	cbnz	r1, 80071fa <acc_detector_distance_peak_get_next+0xca>
 80071ac:	f8a8 1000 	strh.w	r1, [r8]
 80071b0:	7d23      	ldrb	r3, [r4, #20]
 80071b2:	b97b      	cbnz	r3, 80071d4 <acc_detector_distance_peak_get_next+0xa4>
 80071b4:	7a3a      	ldrb	r2, [r7, #8]
 80071b6:	7abb      	ldrb	r3, [r7, #10]
 80071b8:	f889 2000 	strb.w	r2, [r9]
 80071bc:	4628      	mov	r0, r5
 80071be:	3714      	adds	r7, #20
 80071c0:	f889 3001 	strb.w	r3, [r9, #1]
 80071c4:	46bd      	mov	sp, r7
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	4a1f      	ldr	r2, [pc, #124]	; (8007248 <acc_detector_distance_peak_get_next+0x118>)
 80071cc:	491d      	ldr	r1, [pc, #116]	; (8007244 <acc_detector_distance_peak_get_next+0x114>)
 80071ce:	f002 fff7 	bl	800a1c0 <acc_log_rss>
 80071d2:	e7bc      	b.n	800714e <acc_detector_distance_peak_get_next+0x1e>
 80071d4:	f8b8 1000 	ldrh.w	r1, [r8]
 80071d8:	4b1c      	ldr	r3, [pc, #112]	; (800724c <acc_detector_distance_peak_get_next+0x11c>)
 80071da:	4630      	mov	r0, r6
 80071dc:	2208      	movs	r2, #8
 80071de:	f009 fb49 	bl	8010874 <qsort>
 80071e2:	e7e7      	b.n	80071b4 <acc_detector_distance_peak_get_next+0x84>
 80071e4:	4a1a      	ldr	r2, [pc, #104]	; (8007250 <acc_detector_distance_peak_get_next+0x120>)
 80071e6:	4917      	ldr	r1, [pc, #92]	; (8007244 <acc_detector_distance_peak_get_next+0x114>)
 80071e8:	f002 ffea 	bl	800a1c0 <acc_log_rss>
 80071ec:	4a19      	ldr	r2, [pc, #100]	; (8007254 <acc_detector_distance_peak_get_next+0x124>)
 80071ee:	4915      	ldr	r1, [pc, #84]	; (8007244 <acc_detector_distance_peak_get_next+0x114>)
 80071f0:	2000      	movs	r0, #0
 80071f2:	f002 ffe5 	bl	800a1c0 <acc_log_rss>
 80071f6:	2500      	movs	r5, #0
 80071f8:	e7a9      	b.n	800714e <acc_detector_distance_peak_get_next+0x1e>
 80071fa:	00cb      	lsls	r3, r1, #3
 80071fc:	3308      	adds	r3, #8
 80071fe:	46eb      	mov	fp, sp
 8007200:	ebad 0d03 	sub.w	sp, sp, r3
 8007204:	466b      	mov	r3, sp
 8007206:	461a      	mov	r2, r3
 8007208:	4650      	mov	r0, sl
 800720a:	b289      	uxth	r1, r1
 800720c:	607b      	str	r3, [r7, #4]
 800720e:	f001 ff33 	bl	8009078 <acc_alg_distance_peak_detect_get_reflections>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	b170      	cbz	r0, 8007234 <acc_detector_distance_peak_get_next+0x104>
 8007216:	f8b8 2000 	ldrh.w	r2, [r8]
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	428a      	cmp	r2, r1
 800721e:	bf84      	itt	hi
 8007220:	b28a      	uxthhi	r2, r1
 8007222:	f8a8 1000 	strhhi.w	r1, [r8]
 8007226:	00d2      	lsls	r2, r2, #3
 8007228:	4619      	mov	r1, r3
 800722a:	4630      	mov	r0, r6
 800722c:	f008 ff36 	bl	801009c <memcpy>
 8007230:	46dd      	mov	sp, fp
 8007232:	e7bd      	b.n	80071b0 <acc_detector_distance_peak_get_next+0x80>
 8007234:	4a06      	ldr	r2, [pc, #24]	; (8007250 <acc_detector_distance_peak_get_next+0x120>)
 8007236:	4903      	ldr	r1, [pc, #12]	; (8007244 <acc_detector_distance_peak_get_next+0x114>)
 8007238:	f002 ffc2 	bl	800a1c0 <acc_log_rss>
 800723c:	46dd      	mov	sp, fp
 800723e:	e7d5      	b.n	80071ec <acc_detector_distance_peak_get_next+0xbc>
 8007240:	08016468 	.word	0x08016468
 8007244:	08016484 	.word	0x08016484
 8007248:	08016538 	.word	0x08016538
 800724c:	08006e49 	.word	0x08006e49
 8007250:	08016558 	.word	0x08016558
 8007254:	08016574 	.word	0x08016574

08007258 <acc_detector_distance_peak_set_threshold_mode_fixed>:
 8007258:	b118      	cbz	r0, 8007262 <acc_detector_distance_peak_set_threshold_mode_fixed+0xa>
 800725a:	6940      	ldr	r0, [r0, #20]
 800725c:	b108      	cbz	r0, 8007262 <acc_detector_distance_peak_set_threshold_mode_fixed+0xa>
 800725e:	f001 bf8f 	b.w	8009180 <acc_alg_distance_peak_detect_set_threshold_mode_fixed>
 8007262:	b508      	push	{r3, lr}
 8007264:	4a03      	ldr	r2, [pc, #12]	; (8007274 <acc_detector_distance_peak_set_threshold_mode_fixed+0x1c>)
 8007266:	4904      	ldr	r1, [pc, #16]	; (8007278 <acc_detector_distance_peak_set_threshold_mode_fixed+0x20>)
 8007268:	2000      	movs	r0, #0
 800726a:	f002 ffa9 	bl	800a1c0 <acc_log_rss>
 800726e:	2000      	movs	r0, #0
 8007270:	bd08      	pop	{r3, pc}
 8007272:	bf00      	nop
 8007274:	08016468 	.word	0x08016468
 8007278:	08016484 	.word	0x08016484

0800727c <acc_detector_distance_peak_set_absolute_amplitude>:
 800727c:	b118      	cbz	r0, 8007286 <acc_detector_distance_peak_set_absolute_amplitude+0xa>
 800727e:	6940      	ldr	r0, [r0, #20]
 8007280:	b108      	cbz	r0, 8007286 <acc_detector_distance_peak_set_absolute_amplitude+0xa>
 8007282:	f001 bf87 	b.w	8009194 <acc_alg_distance_peak_detect_set_absolute_amplitude>
 8007286:	b508      	push	{r3, lr}
 8007288:	4a03      	ldr	r2, [pc, #12]	; (8007298 <acc_detector_distance_peak_set_absolute_amplitude+0x1c>)
 800728a:	4904      	ldr	r1, [pc, #16]	; (800729c <acc_detector_distance_peak_set_absolute_amplitude+0x20>)
 800728c:	2000      	movs	r0, #0
 800728e:	f002 ff97 	bl	800a1c0 <acc_log_rss>
 8007292:	2000      	movs	r0, #0
 8007294:	bd08      	pop	{r3, pc}
 8007296:	bf00      	nop
 8007298:	08016468 	.word	0x08016468
 800729c:	08016484 	.word	0x08016484

080072a0 <acc_detector_distance_peak_set_sort_by_amplitude>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	b110      	cbz	r0, 80072ac <acc_detector_distance_peak_set_sort_by_amplitude+0xc>
 80072a6:	7401      	strb	r1, [r0, #16]
 80072a8:	2001      	movs	r0, #1
 80072aa:	bd10      	pop	{r4, pc}
 80072ac:	4a02      	ldr	r2, [pc, #8]	; (80072b8 <acc_detector_distance_peak_set_sort_by_amplitude+0x18>)
 80072ae:	4903      	ldr	r1, [pc, #12]	; (80072bc <acc_detector_distance_peak_set_sort_by_amplitude+0x1c>)
 80072b0:	f002 ff86 	bl	800a1c0 <acc_log_rss>
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd10      	pop	{r4, pc}
 80072b8:	08016468 	.word	0x08016468
 80072bc:	08016484 	.word	0x08016484

080072c0 <acc_rss_activate>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d15      	ldr	r5, [pc, #84]	; (8007318 <acc_rss_activate+0x58>)
 80072c4:	782c      	ldrb	r4, [r5, #0]
 80072c6:	b92c      	cbnz	r4, 80072d4 <acc_rss_activate+0x14>
 80072c8:	b110      	cbz	r0, 80072d0 <acc_rss_activate+0x10>
 80072ca:	f002 fec5 	bl	800a058 <acc_integration_register>
 80072ce:	b948      	cbnz	r0, 80072e4 <acc_rss_activate+0x24>
 80072d0:	4620      	mov	r0, r4
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	4a11      	ldr	r2, [pc, #68]	; (800731c <acc_rss_activate+0x5c>)
 80072d6:	4912      	ldr	r1, [pc, #72]	; (8007320 <acc_rss_activate+0x60>)
 80072d8:	2002      	movs	r0, #2
 80072da:	f002 ff71 	bl	800a1c0 <acc_log_rss>
 80072de:	782c      	ldrb	r4, [r5, #0]
 80072e0:	4620      	mov	r0, r4
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	f000 fc36 	bl	8007b54 <acc_service_manager_activate>
 80072e8:	b930      	cbnz	r0, 80072f8 <acc_rss_activate+0x38>
 80072ea:	7828      	ldrb	r0, [r5, #0]
 80072ec:	b970      	cbnz	r0, 800730c <acc_rss_activate+0x4c>
 80072ee:	4a0d      	ldr	r2, [pc, #52]	; (8007324 <acc_rss_activate+0x64>)
 80072f0:	490b      	ldr	r1, [pc, #44]	; (8007320 <acc_rss_activate+0x60>)
 80072f2:	f002 ff65 	bl	800a1c0 <acc_log_rss>
 80072f6:	e7f2      	b.n	80072de <acc_rss_activate+0x1e>
 80072f8:	f000 fd7c 	bl	8007df4 <acc_session_manager_activate>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d0f4      	beq.n	80072ea <acc_rss_activate+0x2a>
 8007300:	f000 ff52 	bl	80081a8 <acc_sensor_manager_activate>
 8007304:	2800      	cmp	r0, #0
 8007306:	d0f0      	beq.n	80072ea <acc_rss_activate+0x2a>
 8007308:	2301      	movs	r3, #1
 800730a:	702b      	strb	r3, [r5, #0]
 800730c:	4a06      	ldr	r2, [pc, #24]	; (8007328 <acc_rss_activate+0x68>)
 800730e:	4904      	ldr	r1, [pc, #16]	; (8007320 <acc_rss_activate+0x60>)
 8007310:	2002      	movs	r0, #2
 8007312:	f002 ff55 	bl	800a1c0 <acc_log_rss>
 8007316:	e7e2      	b.n	80072de <acc_rss_activate+0x1e>
 8007318:	200003d2 	.word	0x200003d2
 800731c:	0801660c 	.word	0x0801660c
 8007320:	080165f0 	.word	0x080165f0
 8007324:	080165f4 	.word	0x080165f4
 8007328:	080165d0 	.word	0x080165d0

0800732c <acc_rss_deactivate>:
 800732c:	b510      	push	{r4, lr}
 800732e:	4c0a      	ldr	r4, [pc, #40]	; (8007358 <acc_rss_deactivate+0x2c>)
 8007330:	7823      	ldrb	r3, [r4, #0]
 8007332:	b903      	cbnz	r3, 8007336 <acc_rss_deactivate+0xa>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	f000 fc23 	bl	8007b80 <acc_service_manager_deactivate>
 800733a:	f000 fd65 	bl	8007e08 <acc_session_manager_deactivate>
 800733e:	f000 ff7d 	bl	800823c <acc_sensor_manager_deactivate>
 8007342:	4a06      	ldr	r2, [pc, #24]	; (800735c <acc_rss_deactivate+0x30>)
 8007344:	4906      	ldr	r1, [pc, #24]	; (8007360 <acc_rss_deactivate+0x34>)
 8007346:	2002      	movs	r0, #2
 8007348:	f002 ff3a 	bl	800a1c0 <acc_log_rss>
 800734c:	f002 feba 	bl	800a0c4 <acc_integration_unregister>
 8007350:	2300      	movs	r3, #0
 8007352:	7023      	strb	r3, [r4, #0]
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	200003d2 	.word	0x200003d2
 800735c:	08016634 	.word	0x08016634
 8007360:	080165f0 	.word	0x080165f0

08007364 <acc_service_get_base_configuration>:
 8007364:	b108      	cbz	r0, 800736a <acc_service_get_base_configuration+0x6>
 8007366:	6980      	ldr	r0, [r0, #24]
 8007368:	4770      	bx	lr
 800736a:	b510      	push	{r4, lr}
 800736c:	4a03      	ldr	r2, [pc, #12]	; (800737c <acc_service_get_base_configuration+0x18>)
 800736e:	4904      	ldr	r1, [pc, #16]	; (8007380 <acc_service_get_base_configuration+0x1c>)
 8007370:	4604      	mov	r4, r0
 8007372:	2001      	movs	r0, #1
 8007374:	f002 ff24 	bl	800a1c0 <acc_log_rss>
 8007378:	4620      	mov	r0, r4
 800737a:	bd10      	pop	{r4, pc}
 800737c:	08016710 	.word	0x08016710
 8007380:	0801672c 	.word	0x0801672c

08007384 <acc_service_activate>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4b11      	ldr	r3, [pc, #68]	; (80073cc <acc_service_activate+0x48>)
 8007388:	781c      	ldrb	r4, [r3, #0]
 800738a:	b1bc      	cbz	r4, 80073bc <acc_service_activate+0x38>
 800738c:	4605      	mov	r5, r0
 800738e:	b118      	cbz	r0, 8007398 <acc_service_activate+0x14>
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <acc_service_activate+0x4c>)
 8007392:	6802      	ldr	r2, [r0, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d007      	beq.n	80073a8 <acc_service_activate+0x24>
 8007398:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <acc_service_activate+0x50>)
 800739a:	490f      	ldr	r1, [pc, #60]	; (80073d8 <acc_service_activate+0x54>)
 800739c:	2000      	movs	r0, #0
 800739e:	f002 ff0f 	bl	800a1c0 <acc_log_rss>
 80073a2:	2400      	movs	r4, #0
 80073a4:	4620      	mov	r0, r4
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	7b03      	ldrb	r3, [r0, #12]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d1fa      	bne.n	80073a4 <acc_service_activate+0x20>
 80073ae:	69c0      	ldr	r0, [r0, #28]
 80073b0:	b108      	cbz	r0, 80073b6 <acc_service_activate+0x32>
 80073b2:	f000 fe05 	bl	8007fc0 <acc_session_sweep_and_processing_activate>
 80073b6:	2300      	movs	r3, #0
 80073b8:	732b      	strb	r3, [r5, #12]
 80073ba:	e7f3      	b.n	80073a4 <acc_service_activate+0x20>
 80073bc:	4620      	mov	r0, r4
 80073be:	4b07      	ldr	r3, [pc, #28]	; (80073dc <acc_service_activate+0x58>)
 80073c0:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <acc_service_activate+0x5c>)
 80073c2:	4905      	ldr	r1, [pc, #20]	; (80073d8 <acc_service_activate+0x54>)
 80073c4:	f002 fefc 	bl	800a1c0 <acc_log_rss>
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	200003d3 	.word	0x200003d3
 80073d0:	acc09ee8 	.word	0xacc09ee8
 80073d4:	08016688 	.word	0x08016688
 80073d8:	0801672c 	.word	0x0801672c
 80073dc:	08016658 	.word	0x08016658
 80073e0:	080166a8 	.word	0x080166a8

080073e4 <acc_service_deactivate>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <acc_service_deactivate+0x50>)
 80073e8:	781c      	ldrb	r4, [r3, #0]
 80073ea:	b1d4      	cbz	r4, 8007422 <acc_service_deactivate+0x3e>
 80073ec:	4605      	mov	r5, r0
 80073ee:	b118      	cbz	r0, 80073f8 <acc_service_deactivate+0x14>
 80073f0:	4b11      	ldr	r3, [pc, #68]	; (8007438 <acc_service_deactivate+0x54>)
 80073f2:	6802      	ldr	r2, [r0, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d007      	beq.n	8007408 <acc_service_deactivate+0x24>
 80073f8:	4a10      	ldr	r2, [pc, #64]	; (800743c <acc_service_deactivate+0x58>)
 80073fa:	4911      	ldr	r1, [pc, #68]	; (8007440 <acc_service_deactivate+0x5c>)
 80073fc:	2000      	movs	r0, #0
 80073fe:	f002 fedf 	bl	800a1c0 <acc_log_rss>
 8007402:	2400      	movs	r4, #0
 8007404:	4620      	mov	r0, r4
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	7b03      	ldrb	r3, [r0, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1fa      	bne.n	8007404 <acc_service_deactivate+0x20>
 800740e:	69c0      	ldr	r0, [r0, #28]
 8007410:	2301      	movs	r3, #1
 8007412:	732b      	strb	r3, [r5, #12]
 8007414:	b108      	cbz	r0, 800741a <acc_service_deactivate+0x36>
 8007416:	f000 fe0f 	bl	8008038 <acc_session_sweep_and_processing_deactivate>
 800741a:	2302      	movs	r3, #2
 800741c:	732b      	strb	r3, [r5, #12]
 800741e:	4620      	mov	r0, r4
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	4b08      	ldr	r3, [pc, #32]	; (8007444 <acc_service_deactivate+0x60>)
 8007424:	4a08      	ldr	r2, [pc, #32]	; (8007448 <acc_service_deactivate+0x64>)
 8007426:	4906      	ldr	r1, [pc, #24]	; (8007440 <acc_service_deactivate+0x5c>)
 8007428:	2001      	movs	r0, #1
 800742a:	f002 fec9 	bl	800a1c0 <acc_log_rss>
 800742e:	4620      	mov	r0, r4
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	200003d3 	.word	0x200003d3
 8007438:	acc09ee8 	.word	0xacc09ee8
 800743c:	08016688 	.word	0x08016688
 8007440:	0801672c 	.word	0x0801672c
 8007444:	08016670 	.word	0x08016670
 8007448:	080166a8 	.word	0x080166a8

0800744c <acc_service_create_sweep_session>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	460d      	mov	r5, r1
 8007450:	4604      	mov	r4, r0
 8007452:	4611      	mov	r1, r2
 8007454:	4628      	mov	r0, r5
 8007456:	461a      	mov	r2, r3
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	f000 fd75 	bl	8007f48 <acc_session_sweep_and_processing_create>
 800745e:	61e0      	str	r0, [r4, #28]
 8007460:	3000      	adds	r0, #0
 8007462:	bf18      	it	ne
 8007464:	2001      	movne	r0, #1
 8007466:	bd38      	pop	{r3, r4, r5, pc}

08007468 <acc_service_get_configuration_output>:
 8007468:	69c0      	ldr	r0, [r0, #28]
 800746a:	f000 be45 	b.w	80080f8 <acc_session_sweep_and_processing_get_configuration_output>
 800746e:	bf00      	nop

08007470 <acc_service_destroy_sweep_session>:
 8007470:	69c3      	ldr	r3, [r0, #28]
 8007472:	b113      	cbz	r3, 800747a <acc_service_destroy_sweep_session+0xa>
 8007474:	301c      	adds	r0, #28
 8007476:	f000 be0f 	b.w	8008098 <acc_session_sweep_and_processing_destroy>
 800747a:	4770      	bx	lr

0800747c <acc_service_get_next>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	460d      	mov	r5, r1
 8007480:	b082      	sub	sp, #8
 8007482:	4604      	mov	r4, r0
 8007484:	b118      	cbz	r0, 800748e <acc_service_get_next+0x12>
 8007486:	4b35      	ldr	r3, [pc, #212]	; (800755c <acc_service_get_next+0xe0>)
 8007488:	6802      	ldr	r2, [r0, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d013      	beq.n	80074b6 <acc_service_get_next+0x3a>
 800748e:	4a34      	ldr	r2, [pc, #208]	; (8007560 <acc_service_get_next+0xe4>)
 8007490:	4934      	ldr	r1, [pc, #208]	; (8007564 <acc_service_get_next+0xe8>)
 8007492:	2000      	movs	r0, #0
 8007494:	f002 fe94 	bl	800a1c0 <acc_log_rss>
 8007498:	686b      	ldr	r3, [r5, #4]
 800749a:	b183      	cbz	r3, 80074be <acc_service_get_next+0x42>
 800749c:	68ab      	ldr	r3, [r5, #8]
 800749e:	b173      	cbz	r3, 80074be <acc_service_get_next+0x42>
 80074a0:	7b23      	ldrb	r3, [r4, #12]
 80074a2:	b123      	cbz	r3, 80074ae <acc_service_get_next+0x32>
 80074a4:	4a30      	ldr	r2, [pc, #192]	; (8007568 <acc_service_get_next+0xec>)
 80074a6:	492f      	ldr	r1, [pc, #188]	; (8007564 <acc_service_get_next+0xe8>)
 80074a8:	2000      	movs	r0, #0
 80074aa:	f002 fe89 	bl	800a1c0 <acc_log_rss>
 80074ae:	2500      	movs	r5, #0
 80074b0:	4628      	mov	r0, r5
 80074b2:	b002      	add	sp, #8
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	684b      	ldr	r3, [r1, #4]
 80074b8:	b10b      	cbz	r3, 80074be <acc_service_get_next+0x42>
 80074ba:	688b      	ldr	r3, [r1, #8]
 80074bc:	b92b      	cbnz	r3, 80074ca <acc_service_get_next+0x4e>
 80074be:	4a2b      	ldr	r2, [pc, #172]	; (800756c <acc_service_get_next+0xf0>)
 80074c0:	4928      	ldr	r1, [pc, #160]	; (8007564 <acc_service_get_next+0xe8>)
 80074c2:	2000      	movs	r0, #0
 80074c4:	f002 fe7c 	bl	800a1c0 <acc_log_rss>
 80074c8:	e7ea      	b.n	80074a0 <acc_service_get_next+0x24>
 80074ca:	6883      	ldr	r3, [r0, #8]
 80074cc:	780a      	ldrb	r2, [r1, #0]
 80074ce:	791b      	ldrb	r3, [r3, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d006      	beq.n	80074e2 <acc_service_get_next+0x66>
 80074d4:	9200      	str	r2, [sp, #0]
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <acc_service_get_next+0xf4>)
 80074d8:	4922      	ldr	r1, [pc, #136]	; (8007564 <acc_service_get_next+0xe8>)
 80074da:	2000      	movs	r0, #0
 80074dc:	f002 fe70 	bl	800a1c0 <acc_log_rss>
 80074e0:	e7de      	b.n	80074a0 <acc_service_get_next+0x24>
 80074e2:	69c0      	ldr	r0, [r0, #28]
 80074e4:	784e      	ldrb	r6, [r1, #1]
 80074e6:	f000 fe0b 	bl	8008100 <acc_session_sweep_and_processing_get_output_type>
 80074ea:	4286      	cmp	r6, r0
 80074ec:	d006      	beq.n	80074fc <acc_service_get_next+0x80>
 80074ee:	69e0      	ldr	r0, [r4, #28]
 80074f0:	f000 fe06 	bl	8008100 <acc_session_sweep_and_processing_get_output_type>
 80074f4:	9600      	str	r6, [sp, #0]
 80074f6:	4603      	mov	r3, r0
 80074f8:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <acc_service_get_next+0xf8>)
 80074fa:	e7ed      	b.n	80074d8 <acc_service_get_next+0x5c>
 80074fc:	7d2e      	ldrb	r6, [r5, #20]
 80074fe:	b9e6      	cbnz	r6, 800753a <acc_service_get_next+0xbe>
 8007500:	7b23      	ldrb	r3, [r4, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1ce      	bne.n	80074a4 <acc_service_get_next+0x28>
 8007506:	2301      	movs	r3, #1
 8007508:	6225      	str	r5, [r4, #32]
 800750a:	7363      	strb	r3, [r4, #13]
 800750c:	69e0      	ldr	r0, [r4, #28]
 800750e:	f000 fd09 	bl	8007f24 <acc_session_sweep_and_processing_run>
 8007512:	7b63      	ldrb	r3, [r4, #13]
 8007514:	2b02      	cmp	r3, #2
 8007516:	bf08      	it	eq
 8007518:	7d6d      	ldrbeq	r5, [r5, #21]
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	bf0c      	ite	eq
 8007520:	f085 0501 	eoreq.w	r5, r5, #1
 8007524:	2500      	movne	r5, #0
 8007526:	7363      	strb	r3, [r4, #13]
 8007528:	6223      	str	r3, [r4, #32]
 800752a:	2e00      	cmp	r6, #0
 800752c:	d0c0      	beq.n	80074b0 <acc_service_get_next+0x34>
 800752e:	4620      	mov	r0, r4
 8007530:	f7ff ff58 	bl	80073e4 <acc_service_deactivate>
 8007534:	4628      	mov	r0, r5
 8007536:	b002      	add	sp, #8
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	4620      	mov	r0, r4
 800753c:	f7ff ff22 	bl	8007384 <acc_service_activate>
 8007540:	7b23      	ldrb	r3, [r4, #12]
 8007542:	4606      	mov	r6, r0
 8007544:	b913      	cbnz	r3, 800754c <acc_service_get_next+0xd0>
 8007546:	2e00      	cmp	r6, #0
 8007548:	d1dd      	bne.n	8007506 <acc_service_get_next+0x8a>
 800754a:	e7b0      	b.n	80074ae <acc_service_get_next+0x32>
 800754c:	4a06      	ldr	r2, [pc, #24]	; (8007568 <acc_service_get_next+0xec>)
 800754e:	4905      	ldr	r1, [pc, #20]	; (8007564 <acc_service_get_next+0xe8>)
 8007550:	2000      	movs	r0, #0
 8007552:	f002 fe35 	bl	800a1c0 <acc_log_rss>
 8007556:	2500      	movs	r5, #0
 8007558:	e7e7      	b.n	800752a <acc_service_get_next+0xae>
 800755a:	bf00      	nop
 800755c:	acc09ee8 	.word	0xacc09ee8
 8007560:	08016688 	.word	0x08016688
 8007564:	0801672c 	.word	0x0801672c
 8007568:	080167c4 	.word	0x080167c4
 800756c:	08016734 	.word	0x08016734
 8007570:	08016760 	.word	0x08016760
 8007574:	0801678c 	.word	0x0801678c

08007578 <acc_service_send_data>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	6a04      	ldr	r4, [r0, #32]
 800757c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8007580:	4605      	mov	r5, r0
 8007582:	6860      	ldr	r0, [r4, #4]
 8007584:	461f      	mov	r7, r3
 8007586:	b188      	cbz	r0, 80075ac <acc_service_send_data+0x34>
 8007588:	b14e      	cbz	r6, 800759e <acc_service_send_data+0x26>
 800758a:	68e0      	ldr	r0, [r4, #12]
 800758c:	7566      	strb	r6, [r4, #21]
 800758e:	b118      	cbz	r0, 8007598 <acc_service_send_data+0x20>
 8007590:	6922      	ldr	r2, [r4, #16]
 8007592:	4639      	mov	r1, r7
 8007594:	f008 fd82 	bl	801009c <memcpy>
 8007598:	2302      	movs	r3, #2
 800759a:	736b      	strb	r3, [r5, #13]
 800759c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759e:	68a3      	ldr	r3, [r4, #8]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	bf28      	it	cs
 80075a4:	461a      	movcs	r2, r3
 80075a6:	f008 fd79 	bl	801009c <memcpy>
 80075aa:	e7ee      	b.n	800758a <acc_service_send_data+0x12>
 80075ac:	4a02      	ldr	r2, [pc, #8]	; (80075b8 <acc_service_send_data+0x40>)
 80075ae:	4903      	ldr	r1, [pc, #12]	; (80075bc <acc_service_send_data+0x44>)
 80075b0:	2003      	movs	r0, #3
 80075b2:	f002 fe05 	bl	800a1c0 <acc_log_rss>
 80075b6:	e7e8      	b.n	800758a <acc_service_send_data+0x12>
 80075b8:	080167ec 	.word	0x080167ec
 80075bc:	0801672c 	.word	0x0801672c

080075c0 <acc_service_set_module_active>:
 80075c0:	4b01      	ldr	r3, [pc, #4]	; (80075c8 <acc_service_set_module_active+0x8>)
 80075c2:	7018      	strb	r0, [r3, #0]
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	200003d3 	.word	0x200003d3

080075cc <acc_service_handle_valid>:
 80075cc:	b508      	push	{r3, lr}
 80075ce:	b118      	cbz	r0, 80075d8 <acc_service_handle_valid+0xc>
 80075d0:	6802      	ldr	r2, [r0, #0]
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <acc_service_handle_valid+0x20>)
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d006      	beq.n	80075e6 <acc_service_handle_valid+0x1a>
 80075d8:	4a05      	ldr	r2, [pc, #20]	; (80075f0 <acc_service_handle_valid+0x24>)
 80075da:	4906      	ldr	r1, [pc, #24]	; (80075f4 <acc_service_handle_valid+0x28>)
 80075dc:	2000      	movs	r0, #0
 80075de:	f002 fdef 	bl	800a1c0 <acc_log_rss>
 80075e2:	2000      	movs	r0, #0
 80075e4:	bd08      	pop	{r3, pc}
 80075e6:	2001      	movs	r0, #1
 80075e8:	bd08      	pop	{r3, pc}
 80075ea:	bf00      	nop
 80075ec:	acc09ee8 	.word	0xacc09ee8
 80075f0:	08016688 	.word	0x08016688
 80075f4:	0801672c 	.word	0x0801672c

080075f8 <acc_service_configuration_valid>:
 80075f8:	b508      	push	{r3, lr}
 80075fa:	b118      	cbz	r0, 8007604 <acc_service_configuration_valid+0xc>
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <acc_service_configuration_valid+0x20>)
 8007600:	429a      	cmp	r2, r3
 8007602:	d006      	beq.n	8007612 <acc_service_configuration_valid+0x1a>
 8007604:	4a05      	ldr	r2, [pc, #20]	; (800761c <acc_service_configuration_valid+0x24>)
 8007606:	4906      	ldr	r1, [pc, #24]	; (8007620 <acc_service_configuration_valid+0x28>)
 8007608:	2000      	movs	r0, #0
 800760a:	f002 fdd9 	bl	800a1c0 <acc_log_rss>
 800760e:	2000      	movs	r0, #0
 8007610:	bd08      	pop	{r3, pc}
 8007612:	2001      	movs	r0, #1
 8007614:	bd08      	pop	{r3, pc}
 8007616:	bf00      	nop
 8007618:	acc09dd7 	.word	0xacc09dd7
 800761c:	080166e8 	.word	0x080166e8
 8007620:	0801672c 	.word	0x0801672c

08007624 <acc_service_configuration_check>:
 8007624:	b508      	push	{r3, lr}
 8007626:	b118      	cbz	r0, 8007630 <acc_service_configuration_check+0xc>
 8007628:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <acc_service_configuration_check+0x34>)
 800762a:	6802      	ldr	r2, [r0, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d006      	beq.n	800763e <acc_service_configuration_check+0x1a>
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <acc_service_configuration_check+0x38>)
 8007632:	490b      	ldr	r1, [pc, #44]	; (8007660 <acc_service_configuration_check+0x3c>)
 8007634:	2000      	movs	r0, #0
 8007636:	f002 fdc3 	bl	800a1c0 <acc_log_rss>
 800763a:	2000      	movs	r0, #0
 800763c:	bd08      	pop	{r3, pc}
 800763e:	68c3      	ldr	r3, [r0, #12]
 8007640:	3b01      	subs	r3, #1
 8007642:	2b04      	cmp	r3, #4
 8007644:	d801      	bhi.n	800764a <acc_service_configuration_check+0x26>
 8007646:	2001      	movs	r0, #1
 8007648:	bd08      	pop	{r3, pc}
 800764a:	4a06      	ldr	r2, [pc, #24]	; (8007664 <acc_service_configuration_check+0x40>)
 800764c:	4904      	ldr	r1, [pc, #16]	; (8007660 <acc_service_configuration_check+0x3c>)
 800764e:	2000      	movs	r0, #0
 8007650:	f002 fdb6 	bl	800a1c0 <acc_log_rss>
 8007654:	2000      	movs	r0, #0
 8007656:	bd08      	pop	{r3, pc}
 8007658:	acc09dd7 	.word	0xacc09dd7
 800765c:	080166e8 	.word	0x080166e8
 8007660:	0801672c 	.word	0x0801672c
 8007664:	080166c0 	.word	0x080166c0

08007668 <acc_service_profile_set>:
 8007668:	b138      	cbz	r0, 800767a <acc_service_profile_set+0x12>
 800766a:	6902      	ldr	r2, [r0, #16]
 800766c:	4603      	mov	r3, r0
 800766e:	b122      	cbz	r2, 800767a <acc_service_profile_set+0x12>
 8007670:	b410      	push	{r4}
 8007672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007676:	60d9      	str	r1, [r3, #12]
 8007678:	4710      	bx	r2
 800767a:	4a02      	ldr	r2, [pc, #8]	; (8007684 <acc_service_profile_set+0x1c>)
 800767c:	4902      	ldr	r1, [pc, #8]	; (8007688 <acc_service_profile_set+0x20>)
 800767e:	2001      	movs	r0, #1
 8007680:	f002 bd9e 	b.w	800a1c0 <acc_log_rss>
 8007684:	08016710 	.word	0x08016710
 8007688:	0801672c 	.word	0x0801672c

0800768c <acc_service_initialize_service_configuration>:
 800768c:	b430      	push	{r4, r5}
 800768e:	9d02      	ldr	r5, [sp, #8]
 8007690:	7101      	strb	r1, [r0, #4]
 8007692:	6103      	str	r3, [r0, #16]
 8007694:	4904      	ldr	r1, [pc, #16]	; (80076a8 <acc_service_initialize_service_configuration+0x1c>)
 8007696:	6001      	str	r1, [r0, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	4629      	mov	r1, r5
 800769c:	6182      	str	r2, [r0, #24]
 800769e:	6083      	str	r3, [r0, #8]
 80076a0:	bc30      	pop	{r4, r5}
 80076a2:	f7ff bfe1 	b.w	8007668 <acc_service_profile_set>
 80076a6:	bf00      	nop
 80076a8:	acc09dd7 	.word	0xacc09dd7

080076ac <sweep_session_send_data>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	794c      	ldrb	r4, [r1, #5]
 80076b2:	f88d 400d 	strb.w	r4, [sp, #13]
 80076b6:	460b      	mov	r3, r1
 80076b8:	4615      	mov	r5, r2
 80076ba:	68ca      	ldr	r2, [r1, #12]
 80076bc:	9400      	str	r4, [sp, #0]
 80076be:	791e      	ldrb	r6, [r3, #4]
 80076c0:	f88d 600e 	strb.w	r6, [sp, #14]
 80076c4:	4601      	mov	r1, r0
 80076c6:	4628      	mov	r0, r5
 80076c8:	799d      	ldrb	r5, [r3, #6]
 80076ca:	f88d 500c 	strb.w	r5, [sp, #12]
 80076ce:	ab03      	add	r3, sp, #12
 80076d0:	f7ff ff52 	bl	8007578 <acc_service_send_data>
 80076d4:	b004      	add	sp, #16
 80076d6:	bd70      	pop	{r4, r5, r6, pc}

080076d8 <get_envelope_configuration.part.1>:
 80076d8:	b508      	push	{r3, lr}
 80076da:	4a03      	ldr	r2, [pc, #12]	; (80076e8 <get_envelope_configuration.part.1+0x10>)
 80076dc:	4903      	ldr	r1, [pc, #12]	; (80076ec <get_envelope_configuration.part.1+0x14>)
 80076de:	2001      	movs	r0, #1
 80076e0:	f002 fd6e 	bl	800a1c0 <acc_log_rss>
 80076e4:	2000      	movs	r0, #0
 80076e6:	bd08      	pop	{r3, pc}
 80076e8:	080166e8 	.word	0x080166e8
 80076ec:	080168f0 	.word	0x080168f0

080076f0 <set_configuration_for_profile>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	460d      	mov	r5, r1
 80076f4:	b160      	cbz	r0, 8007710 <set_configuration_for_profile+0x20>
 80076f6:	7903      	ldrb	r3, [r0, #4]
 80076f8:	4604      	mov	r4, r0
 80076fa:	b94b      	cbnz	r3, 8007710 <set_configuration_for_profile+0x20>
 80076fc:	1e69      	subs	r1, r5, #1
 80076fe:	f104 051c 	add.w	r5, r4, #28
 8007702:	2904      	cmp	r1, #4
 8007704:	d809      	bhi.n	800771a <set_configuration_for_profile+0x2a>
 8007706:	e8df f001 	tbb	[pc, r1]
 800770a:	2718      	.short	0x2718
 800770c:	3836      	.short	0x3836
 800770e:	09          	.byte	0x09
 800770f:	00          	.byte	0x00
 8007710:	f7ff ffe2 	bl	80076d8 <get_envelope_configuration.part.1>
 8007714:	4604      	mov	r4, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	d1f0      	bne.n	80076fc <set_configuration_for_profile+0xc>
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	2110      	movs	r1, #16
 800771e:	4628      	mov	r0, r5
 8007720:	f002 faec 	bl	8009cfc <acc_base_configuration_wg_duration_set>
 8007724:	2106      	movs	r1, #6
 8007726:	4628      	mov	r0, r5
 8007728:	f002 fad0 	bl	8009ccc <acc_base_configuration_integrator_set>
 800772c:	4628      	mov	r0, r5
 800772e:	2101      	movs	r1, #1
 8007730:	f002 fafc 	bl	8009d2c <acc_base_configuration_integrator_ramp_up_set>
 8007734:	4b12      	ldr	r3, [pc, #72]	; (8007780 <set_configuration_for_profile+0x90>)
 8007736:	67a3      	str	r3, [r4, #120]	; 0x78
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	2100      	movs	r1, #0
 800773c:	4628      	mov	r0, r5
 800773e:	f002 fadd 	bl	8009cfc <acc_base_configuration_wg_duration_set>
 8007742:	2100      	movs	r1, #0
 8007744:	4628      	mov	r0, r5
 8007746:	f002 fac1 	bl	8009ccc <acc_base_configuration_integrator_set>
 800774a:	4628      	mov	r0, r5
 800774c:	2103      	movs	r1, #3
 800774e:	f002 faed 	bl	8009d2c <acc_base_configuration_integrator_ramp_up_set>
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <set_configuration_for_profile+0x94>)
 8007754:	67a3      	str	r3, [r4, #120]	; 0x78
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	2107      	movs	r1, #7
 800775a:	4628      	mov	r0, r5
 800775c:	f002 face 	bl	8009cfc <acc_base_configuration_wg_duration_set>
 8007760:	2106      	movs	r1, #6
 8007762:	4628      	mov	r0, r5
 8007764:	f002 fab2 	bl	8009ccc <acc_base_configuration_integrator_set>
 8007768:	4628      	mov	r0, r5
 800776a:	2109      	movs	r1, #9
 800776c:	f002 fade 	bl	8009d2c <acc_base_configuration_integrator_ramp_up_set>
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <set_configuration_for_profile+0x90>)
 8007772:	67a3      	str	r3, [r4, #120]	; 0x78
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	2109      	movs	r1, #9
 8007778:	e7ef      	b.n	800775a <set_configuration_for_profile+0x6a>
 800777a:	210c      	movs	r1, #12
 800777c:	e7cf      	b.n	800771e <set_configuration_for_profile+0x2e>
 800777e:	bf00      	nop
 8007780:	3b843809 	.word	0x3b843809
 8007784:	3c8461fa 	.word	0x3c8461fa

08007788 <acc_service_envelope_configuration_create>:
 8007788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800778a:	234d      	movs	r3, #77	; 0x4d
 800778c:	b083      	sub	sp, #12
 800778e:	4a37      	ldr	r2, [pc, #220]	; (800786c <acc_service_envelope_configuration_create+0xe4>)
 8007790:	217c      	movs	r1, #124	; 0x7c
 8007792:	2001      	movs	r0, #1
 8007794:	f002 fcde 	bl	800a154 <acc_integration_mem_calloc_debug>
 8007798:	4605      	mov	r5, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	d05d      	beq.n	800785a <acc_service_envelope_configuration_create+0xd2>
 800779e:	f100 041c 	add.w	r4, r0, #28
 80077a2:	2702      	movs	r7, #2
 80077a4:	2100      	movs	r1, #0
 80077a6:	4622      	mov	r2, r4
 80077a8:	9700      	str	r7, [sp, #0]
 80077aa:	4b31      	ldr	r3, [pc, #196]	; (8007870 <acc_service_envelope_configuration_create+0xe8>)
 80077ac:	f7ff ff6e 	bl	800768c <acc_service_initialize_service_configuration>
 80077b0:	2601      	movs	r6, #1
 80077b2:	4a30      	ldr	r2, [pc, #192]	; (8007874 <acc_service_envelope_configuration_create+0xec>)
 80077b4:	4b30      	ldr	r3, [pc, #192]	; (8007878 <acc_service_envelope_configuration_create+0xf0>)
 80077b6:	666a      	str	r2, [r5, #100]	; 0x64
 80077b8:	66ab      	str	r3, [r5, #104]	; 0x68
 80077ba:	4620      	mov	r0, r4
 80077bc:	f885 606c 	strb.w	r6, [r5, #108]	; 0x6c
 80077c0:	f885 6070 	strb.w	r6, [r5, #112]	; 0x70
 80077c4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800787c <acc_service_envelope_configuration_create+0xf4>
 80077c8:	f002 f92c 	bl	8009a24 <acc_base_configuration_requested_start_set>
 80077cc:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007880 <acc_service_envelope_configuration_create+0xf8>
 80077d0:	4620      	mov	r0, r4
 80077d2:	f002 f949 	bl	8009a68 <acc_base_configuration_requested_length_set>
 80077d6:	4620      	mov	r0, r4
 80077d8:	210a      	movs	r1, #10
 80077da:	f002 f9d9 	bl	8009b90 <acc_base_configuration_hw_accelerated_average_samples_set>
 80077de:	4631      	mov	r1, r6
 80077e0:	4620      	mov	r0, r4
 80077e2:	f002 fa43 	bl	8009c6c <acc_base_configuration_sweep_average_set>
 80077e6:	4631      	mov	r1, r6
 80077e8:	4620      	mov	r0, r4
 80077ea:	f002 f8fd 	bl	80099e8 <acc_base_configuration_sensor_set>
 80077ee:	4620      	mov	r0, r4
 80077f0:	f002 f94c 	bl	8009a8c <acc_base_configuration_repetition_mode_on_demand_set>
 80077f4:	4639      	mov	r1, r7
 80077f6:	4620      	mov	r0, r4
 80077f8:	f002 f95e 	bl	8009ab8 <acc_base_configuration_power_save_mode_set>
 80077fc:	4620      	mov	r0, r4
 80077fe:	2100      	movs	r1, #0
 8007800:	f002 fabe 	bl	8009d80 <acc_base_configuration_use_point_range_set>
 8007804:	4620      	mov	r0, r4
 8007806:	2100      	movs	r1, #0
 8007808:	f002 fa9e 	bl	8009d48 <acc_base_configuration_sweep_type_debug_set>
 800780c:	4620      	mov	r0, r4
 800780e:	2100      	movs	r1, #0
 8007810:	f002 f986 	bl	8009b20 <acc_base_configuration_tx_disable_set>
 8007814:	4620      	mov	r0, r4
 8007816:	2100      	movs	r1, #0
 8007818:	f002 f99e 	bl	8009b58 <acc_base_configuration_decrease_tx_emission_set>
 800781c:	4620      	mov	r0, r4
 800781e:	21ff      	movs	r1, #255	; 0xff
 8007820:	f002 fada 	bl	8009dd8 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8007824:	4620      	mov	r0, r4
 8007826:	2100      	movs	r1, #0
 8007828:	f002 fac6 	bl	8009db8 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 800782c:	4631      	mov	r1, r6
 800782e:	4620      	mov	r0, r4
 8007830:	f002 faec 	bl	8009e0c <acc_base_configuration_downsampling_factor_set>
 8007834:	4620      	mov	r0, r4
 8007836:	210b      	movs	r1, #11
 8007838:	f002 fa30 	bl	8009c9c <acc_base_configuration_gain_set>
 800783c:	4631      	mov	r1, r6
 800783e:	4620      	mov	r0, r4
 8007840:	f002 fb00 	bl	8009e44 <acc_base_configuration_noise_level_normalization_set>
 8007844:	4620      	mov	r0, r4
 8007846:	490f      	ldr	r1, [pc, #60]	; (8007884 <acc_service_envelope_configuration_create+0xfc>)
 8007848:	f002 f9b0 	bl	8009bac <acc_base_configuration_radar_engine_creation_set>
 800784c:	4620      	mov	r0, r4
 800784e:	490e      	ldr	r1, [pc, #56]	; (8007888 <acc_service_envelope_configuration_create+0x100>)
 8007850:	f002 f9ba 	bl	8009bc8 <acc_base_configuration_pipeline_assembly_set>
 8007854:	4628      	mov	r0, r5
 8007856:	b003      	add	sp, #12
 8007858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <acc_service_envelope_configuration_create+0x104>)
 800785c:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <acc_service_envelope_configuration_create+0x108>)
 800785e:	490d      	ldr	r1, [pc, #52]	; (8007894 <acc_service_envelope_configuration_create+0x10c>)
 8007860:	f002 fcae 	bl	800a1c0 <acc_log_rss>
 8007864:	4628      	mov	r0, r5
 8007866:	b003      	add	sp, #12
 8007868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800786a:	bf00      	nop
 800786c:	08016840 	.word	0x08016840
 8007870:	080076f1 	.word	0x080076f1
 8007874:	3dcccccd 	.word	0x3dcccccd
 8007878:	3e99999a 	.word	0x3e99999a
 800787c:	3e4ccccd 	.word	0x3e4ccccd
 8007880:	3ecccccd 	.word	0x3ecccccd
 8007884:	0800a29d 	.word	0x0800a29d
 8007888:	0800a2a1 	.word	0x0800a2a1
 800788c:	08016814 	.word	0x08016814
 8007890:	08016858 	.word	0x08016858
 8007894:	080168f0 	.word	0x080168f0

08007898 <acc_service_envelope_configuration_destroy>:
 8007898:	b170      	cbz	r0, 80078b8 <acc_service_envelope_configuration_destroy+0x20>
 800789a:	b510      	push	{r4, lr}
 800789c:	4604      	mov	r4, r0
 800789e:	6800      	ldr	r0, [r0, #0]
 80078a0:	f7ff feaa 	bl	80075f8 <acc_service_configuration_valid>
 80078a4:	b138      	cbz	r0, 80078b6 <acc_service_envelope_configuration_destroy+0x1e>
 80078a6:	6820      	ldr	r0, [r4, #0]
 80078a8:	b138      	cbz	r0, 80078ba <acc_service_envelope_configuration_destroy+0x22>
 80078aa:	7903      	ldrb	r3, [r0, #4]
 80078ac:	b92b      	cbnz	r3, 80078ba <acc_service_envelope_configuration_destroy+0x22>
 80078ae:	f002 fc75 	bl	800a19c <acc_integration_mem_free>
 80078b2:	2300      	movs	r3, #0
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd10      	pop	{r4, pc}
 80078b8:	4770      	bx	lr
 80078ba:	f7ff ff0d 	bl	80076d8 <get_envelope_configuration.part.1>
 80078be:	f002 fc6d 	bl	800a19c <acc_integration_mem_free>
 80078c2:	2300      	movs	r3, #0
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	e7f6      	b.n	80078b6 <acc_service_envelope_configuration_destroy+0x1e>

080078c8 <acc_service_envelope_downsampling_factor_set>:
 80078c8:	b160      	cbz	r0, 80078e4 <acc_service_envelope_downsampling_factor_set+0x1c>
 80078ca:	b538      	push	{r3, r4, r5, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	f7ff fe92 	bl	80075f8 <acc_service_configuration_valid>
 80078d4:	b900      	cbnz	r0, 80078d8 <acc_service_envelope_downsampling_factor_set+0x10>
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	4629      	mov	r1, r5
 80078da:	69a0      	ldr	r0, [r4, #24]
 80078dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078e0:	f002 ba94 	b.w	8009e0c <acc_base_configuration_downsampling_factor_set>
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <acc_service_envelope_running_average_factor_set>:
 80078e8:	b508      	push	{r3, lr}
 80078ea:	ed2d 8b02 	vpush	{d8}
 80078ee:	eeb0 8a40 	vmov.f32	s16, s0
 80078f2:	b1b0      	cbz	r0, 8007922 <acc_service_envelope_running_average_factor_set+0x3a>
 80078f4:	7903      	ldrb	r3, [r0, #4]
 80078f6:	b9a3      	cbnz	r3, 8007922 <acc_service_envelope_running_average_factor_set+0x3a>
 80078f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80078fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007900:	d406      	bmi.n	8007910 <acc_service_envelope_running_average_factor_set+0x28>
 8007902:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007906:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800790a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790e:	dd0f      	ble.n	8007930 <acc_service_envelope_running_average_factor_set+0x48>
 8007910:	ecbd 8b02 	vpop	{d8}
 8007914:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <acc_service_envelope_running_average_factor_set+0x58>)
 8007916:	490b      	ldr	r1, [pc, #44]	; (8007944 <acc_service_envelope_running_average_factor_set+0x5c>)
 8007918:	2001      	movs	r0, #1
 800791a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800791e:	f002 bc4f 	b.w	800a1c0 <acc_log_rss>
 8007922:	f7ff fed9 	bl	80076d8 <get_envelope_configuration.part.1>
 8007926:	2800      	cmp	r0, #0
 8007928:	d1e6      	bne.n	80078f8 <acc_service_envelope_running_average_factor_set+0x10>
 800792a:	ecbd 8b02 	vpop	{d8}
 800792e:	bd08      	pop	{r3, pc}
 8007930:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007934:	ecbd 8b02 	vpop	{d8}
 8007938:	ed80 0a1a 	vstr	s0, [r0, #104]	; 0x68
 800793c:	bd08      	pop	{r3, pc}
 800793e:	bf00      	nop
 8007940:	0801689c 	.word	0x0801689c
 8007944:	080168f0 	.word	0x080168f0

08007948 <acc_service_envelope_get_metadata>:
 8007948:	b148      	cbz	r0, 800795e <acc_service_envelope_get_metadata+0x16>
 800794a:	b410      	push	{r4}
 800794c:	460c      	mov	r4, r1
 800794e:	b119      	cbz	r1, 8007958 <acc_service_envelope_get_metadata+0x10>
 8007950:	30a0      	adds	r0, #160	; 0xa0
 8007952:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8007954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	4770      	bx	lr

08007960 <acc_service_envelope_get_next>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	2400      	movs	r4, #0
 8007966:	9101      	str	r1, [sp, #4]
 8007968:	0052      	lsls	r2, r2, #1
 800796a:	2602      	movs	r6, #2
 800796c:	2503      	movs	r5, #3
 800796e:	4669      	mov	r1, sp
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	f88d 4000 	strb.w	r4, [sp]
 8007978:	f88d 4014 	strb.w	r4, [sp, #20]
 800797c:	f88d 4015 	strb.w	r4, [sp, #21]
 8007980:	f88d 6001 	strb.w	r6, [sp, #1]
 8007984:	9504      	str	r5, [sp, #16]
 8007986:	f7ff fd79 	bl	800747c <acc_service_get_next>
 800798a:	b006      	add	sp, #24
 800798c:	bd70      	pop	{r4, r5, r6, pc}
 800798e:	bf00      	nop

08007990 <acc_service_envelope_create>:
 8007990:	b530      	push	{r4, r5, lr}
 8007992:	f100 0540 	add.w	r5, r0, #64	; 0x40
 8007996:	4604      	mov	r4, r0
 8007998:	b089      	sub	sp, #36	; 0x24
 800799a:	4628      	mov	r0, r5
 800799c:	f002 fa2a 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 80079a0:	ee07 0a10 	vmov	s14, r0
 80079a4:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 80079a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80079ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079b4:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
 80079b8:	f7ff fe34 	bl	8007624 <acc_service_configuration_check>
 80079bc:	b918      	cbnz	r0, 80079c6 <acc_service_envelope_create+0x36>
 80079be:	2500      	movs	r5, #0
 80079c0:	4628      	mov	r0, r5
 80079c2:	b009      	add	sp, #36	; 0x24
 80079c4:	bd30      	pop	{r4, r5, pc}
 80079c6:	4628      	mov	r0, r5
 80079c8:	f002 fb08 	bl	8009fdc <acc_base_configuration_check>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d0f6      	beq.n	80079be <acc_service_envelope_create+0x2e>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f002 fa0f 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 80079d6:	1e43      	subs	r3, r0, #1
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d907      	bls.n	80079ee <acc_service_envelope_create+0x5e>
 80079de:	2804      	cmp	r0, #4
 80079e0:	d005      	beq.n	80079ee <acc_service_envelope_create+0x5e>
 80079e2:	4a14      	ldr	r2, [pc, #80]	; (8007a34 <acc_service_envelope_create+0xa4>)
 80079e4:	4914      	ldr	r1, [pc, #80]	; (8007a38 <acc_service_envelope_create+0xa8>)
 80079e6:	2000      	movs	r0, #0
 80079e8:	f002 fbea 	bl	800a1c0 <acc_log_rss>
 80079ec:	e7e7      	b.n	80079be <acc_service_envelope_create+0x2e>
 80079ee:	4629      	mov	r1, r5
 80079f0:	9400      	str	r4, [sp, #0]
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <acc_service_envelope_create+0xac>)
 80079f4:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7ff fd27 	bl	800744c <acc_service_create_sweep_session>
 80079fe:	4605      	mov	r5, r0
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d0dc      	beq.n	80079be <acc_service_envelope_create+0x2e>
 8007a04:	a903      	add	r1, sp, #12
 8007a06:	4620      	mov	r0, r4
 8007a08:	f7ff fd2e 	bl	8007468 <acc_service_get_configuration_output>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	9804      	ldr	r0, [sp, #16]
 8007a10:	9907      	ldr	r1, [sp, #28]
 8007a12:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8007a16:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8007a1a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007a1e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
 8007a28:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
 8007a2c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
 8007a30:	b009      	add	sp, #36	; 0x24
 8007a32:	bd30      	pop	{r4, r5, pc}
 8007a34:	0801686c 	.word	0x0801686c
 8007a38:	080168f0 	.word	0x080168f0
 8007a3c:	080076ad 	.word	0x080076ad

08007a40 <acc_service_envelope_destroy>:
 8007a40:	f7ff bd16 	b.w	8007470 <acc_service_destroy_sweep_session>

08007a44 <sweep_session_send_data>:
 8007a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	b089      	sub	sp, #36	; 0x24
 8007a4a:	688d      	ldr	r5, [r1, #8]
 8007a4c:	79a3      	ldrb	r3, [r4, #6]
 8007a4e:	7909      	ldrb	r1, [r1, #4]
 8007a50:	f894 c005 	ldrb.w	ip, [r4, #5]
 8007a54:	6827      	ldr	r7, [r4, #0]
 8007a56:	9504      	str	r5, [sp, #16]
 8007a58:	4606      	mov	r6, r0
 8007a5a:	200f      	movs	r0, #15
 8007a5c:	4615      	mov	r5, r2
 8007a5e:	f88d 100e 	strb.w	r1, [sp, #14]
 8007a62:	f88d 300c 	strb.w	r3, [sp, #12]
 8007a66:	a903      	add	r1, sp, #12
 8007a68:	2307      	movs	r3, #7
 8007a6a:	9005      	str	r0, [sp, #20]
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	a805      	add	r0, sp, #20
 8007a70:	f88d c00d 	strb.w	ip, [sp, #13]
 8007a74:	9307      	str	r3, [sp, #28]
 8007a76:	9706      	str	r7, [sp, #24]
 8007a78:	f002 fbcc 	bl	800a214 <acc_probes_execute>
 8007a7c:	7963      	ldrb	r3, [r4, #5]
 8007a7e:	68e2      	ldr	r2, [r4, #12]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	4631      	mov	r1, r6
 8007a84:	ab03      	add	r3, sp, #12
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7ff fd76 	bl	8007578 <acc_service_send_data>
 8007a8c:	b009      	add	sp, #36	; 0x24
 8007a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a90 <acc_service_iq_create>:
 8007a90:	b530      	push	{r4, r5, lr}
 8007a92:	4604      	mov	r4, r0
 8007a94:	b089      	sub	sp, #36	; 0x24
 8007a96:	3024      	adds	r0, #36	; 0x24
 8007a98:	f7ff fdc4 	bl	8007624 <acc_service_configuration_check>
 8007a9c:	b918      	cbnz	r0, 8007aa6 <acc_service_iq_create+0x16>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	b009      	add	sp, #36	; 0x24
 8007aa4:	bd30      	pop	{r4, r5, pc}
 8007aa6:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f002 fa96 	bl	8009fdc <acc_base_configuration_check>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d0f4      	beq.n	8007a9e <acc_service_iq_create+0xe>
 8007ab4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8007ab8:	1e5a      	subs	r2, r3, #1
 8007aba:	2a01      	cmp	r2, #1
 8007abc:	d907      	bls.n	8007ace <acc_service_iq_create+0x3e>
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d005      	beq.n	8007ace <acc_service_iq_create+0x3e>
 8007ac2:	4a20      	ldr	r2, [pc, #128]	; (8007b44 <acc_service_iq_create+0xb4>)
 8007ac4:	4920      	ldr	r1, [pc, #128]	; (8007b48 <acc_service_iq_create+0xb8>)
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f002 fb7a 	bl	800a1c0 <acc_log_rss>
 8007acc:	e7e7      	b.n	8007a9e <acc_service_iq_create+0xe>
 8007ace:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
 8007ad2:	eef4 7a67 	vcmp.f32	s15, s15
 8007ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ada:	bf78      	it	vc
 8007adc:	edc4 7a26 	vstrvc	s15, [r4, #152]	; 0x98
 8007ae0:	d622      	bvs.n	8007b28 <acc_service_iq_create+0x98>
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	9400      	str	r4, [sp, #0]
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <acc_service_iq_create+0xbc>)
 8007ae8:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8007aec:	4620      	mov	r0, r4
 8007aee:	f7ff fcad 	bl	800744c <acc_service_create_sweep_session>
 8007af2:	4605      	mov	r5, r0
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d0d2      	beq.n	8007a9e <acc_service_iq_create+0xe>
 8007af8:	a903      	add	r1, sp, #12
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff fcb4 	bl	8007468 <acc_service_get_configuration_output>
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	9804      	ldr	r0, [sp, #16]
 8007b04:	9907      	ldr	r1, [sp, #28]
 8007b06:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8007b0a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8007b0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007b12:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8007b16:	4628      	mov	r0, r5
 8007b18:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
 8007b1c:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
 8007b20:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8007b24:	b009      	add	sp, #36	; 0x24
 8007b26:	bd30      	pop	{r4, r5, pc}
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f002 f963 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 8007b2e:	ee07 0a10 	vmov	s14, r0
 8007b32:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8007b36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b3e:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
 8007b42:	e7ce      	b.n	8007ae2 <acc_service_iq_create+0x52>
 8007b44:	08016904 	.word	0x08016904
 8007b48:	08016930 	.word	0x08016930
 8007b4c:	08007a45 	.word	0x08007a45

08007b50 <acc_service_iq_destroy>:
 8007b50:	f7ff bc8e 	b.w	8007470 <acc_service_destroy_sweep_session>

08007b54 <acc_service_manager_activate>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d09      	ldr	r5, [pc, #36]	; (8007b7c <acc_service_manager_activate+0x28>)
 8007b58:	782c      	ldrb	r4, [r5, #0]
 8007b5a:	b10c      	cbz	r4, 8007b60 <acc_service_manager_activate+0xc>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	f002 fc30 	bl	800a3c4 <acc_service_factory_activate>
 8007b64:	4604      	mov	r4, r0
 8007b66:	b910      	cbnz	r0, 8007b6e <acc_service_manager_activate+0x1a>
 8007b68:	782c      	ldrb	r4, [r5, #0]
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f7ff fd26 	bl	80075c0 <acc_service_set_module_active>
 8007b74:	2301      	movs	r3, #1
 8007b76:	702b      	strb	r3, [r5, #0]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	200003d4 	.word	0x200003d4

08007b80 <acc_service_manager_deactivate>:
 8007b80:	b508      	push	{r3, lr}
 8007b82:	f002 fc31 	bl	800a3e8 <acc_service_factory_deactivate>
 8007b86:	2000      	movs	r0, #0
 8007b88:	f7ff fd1a 	bl	80075c0 <acc_service_set_module_active>
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <acc_service_manager_deactivate+0x14>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	bd08      	pop	{r3, pc}
 8007b94:	200003d4 	.word	0x200003d4

08007b98 <acc_service_create>:
 8007b98:	4b08      	ldr	r3, [pc, #32]	; (8007bbc <acc_service_create+0x24>)
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	781c      	ldrb	r4, [r3, #0]
 8007b9e:	b12c      	cbz	r4, 8007bac <acc_service_create+0x14>
 8007ba0:	f002 fc8e 	bl	800a4c0 <acc_service_factory_create_service>
 8007ba4:	b108      	cbz	r0, 8007baa <acc_service_create+0x12>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	7303      	strb	r3, [r0, #12]
 8007baa:	bd10      	pop	{r4, pc}
 8007bac:	4620      	mov	r0, r4
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <acc_service_create+0x28>)
 8007bb0:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <acc_service_create+0x2c>)
 8007bb2:	4905      	ldr	r1, [pc, #20]	; (8007bc8 <acc_service_create+0x30>)
 8007bb4:	f002 fb04 	bl	800a1c0 <acc_log_rss>
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bd10      	pop	{r4, pc}
 8007bbc:	200003d4 	.word	0x200003d4
 8007bc0:	0801693c 	.word	0x0801693c
 8007bc4:	080166a8 	.word	0x080166a8
 8007bc8:	08016964 	.word	0x08016964

08007bcc <acc_service_destroy>:
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <acc_service_destroy+0x38>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	b143      	cbz	r3, 8007be4 <acc_service_destroy+0x18>
 8007bd2:	b130      	cbz	r0, 8007be2 <acc_service_destroy+0x16>
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	6800      	ldr	r0, [r0, #0]
 8007bda:	f7ff fcf7 	bl	80075cc <acc_service_handle_valid>
 8007bde:	b938      	cbnz	r0, 8007bf0 <acc_service_destroy+0x24>
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	4770      	bx	lr
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <acc_service_destroy+0x3c>)
 8007be6:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <acc_service_destroy+0x40>)
 8007be8:	4909      	ldr	r1, [pc, #36]	; (8007c10 <acc_service_destroy+0x44>)
 8007bea:	2001      	movs	r0, #1
 8007bec:	f002 bae8 	b.w	800a1c0 <acc_log_rss>
 8007bf0:	6820      	ldr	r0, [r4, #0]
 8007bf2:	f7ff fbf7 	bl	80073e4 <acc_service_deactivate>
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	f002 fc1a 	bl	800a430 <acc_service_factory_destroy_service>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	200003d4 	.word	0x200003d4
 8007c08:	08016950 	.word	0x08016950
 8007c0c:	080166a8 	.word	0x080166a8
 8007c10:	08016964 	.word	0x08016964

08007c14 <sweep_session_send_data>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	794c      	ldrb	r4, [r1, #5]
 8007c1a:	f88d 400d 	strb.w	r4, [sp, #13]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4615      	mov	r5, r2
 8007c22:	68ca      	ldr	r2, [r1, #12]
 8007c24:	9400      	str	r4, [sp, #0]
 8007c26:	791e      	ldrb	r6, [r3, #4]
 8007c28:	f88d 600e 	strb.w	r6, [sp, #14]
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	4628      	mov	r0, r5
 8007c30:	799d      	ldrb	r5, [r3, #6]
 8007c32:	f88d 500c 	strb.w	r5, [sp, #12]
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	f7ff fc9e 	bl	8007578 <acc_service_send_data>
 8007c3c:	b004      	add	sp, #16
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}

08007c40 <acc_service_power_bins_create>:
 8007c40:	b530      	push	{r4, r5, lr}
 8007c42:	4604      	mov	r4, r0
 8007c44:	b089      	sub	sp, #36	; 0x24
 8007c46:	3024      	adds	r0, #36	; 0x24
 8007c48:	f7ff fcec 	bl	8007624 <acc_service_configuration_check>
 8007c4c:	b918      	cbnz	r0, 8007c56 <acc_service_power_bins_create+0x16>
 8007c4e:	2500      	movs	r5, #0
 8007c50:	4628      	mov	r0, r5
 8007c52:	b009      	add	sp, #36	; 0x24
 8007c54:	bd30      	pop	{r4, r5, pc}
 8007c56:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f002 f9be 	bl	8009fdc <acc_base_configuration_check>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0f4      	beq.n	8007c4e <acc_service_power_bins_create+0xe>
 8007c64:	4628      	mov	r0, r5
 8007c66:	f002 f8c5 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 8007c6a:	1e43      	subs	r3, r0, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d901      	bls.n	8007c76 <acc_service_power_bins_create+0x36>
 8007c72:	2804      	cmp	r0, #4
 8007c74:	d134      	bne.n	8007ce0 <acc_service_power_bins_create+0xa0>
 8007c76:	4628      	mov	r0, r5
 8007c78:	f001 fee6 	bl	8009a48 <acc_base_configuration_requested_length_get>
 8007c7c:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 8007c80:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007d04 <acc_service_power_bins_create+0xc4>
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c8c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007c90:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c98:	d428      	bmi.n	8007cec <acc_service_power_bins_create+0xac>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	9400      	str	r4, [sp, #0]
 8007c9e:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <acc_service_power_bins_create+0xc8>)
 8007ca0:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f7ff fbd1 	bl	800744c <acc_service_create_sweep_session>
 8007caa:	4605      	mov	r5, r0
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0ce      	beq.n	8007c4e <acc_service_power_bins_create+0xe>
 8007cb0:	a903      	add	r1, sp, #12
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff fbd8 	bl	8007468 <acc_service_get_configuration_output>
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	9804      	ldr	r0, [sp, #16]
 8007cbc:	9907      	ldr	r1, [sp, #28]
 8007cbe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8007cc2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8007cc6:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 8007cca:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 8007cd4:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 8007cd8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8007cdc:	b009      	add	sp, #36	; 0x24
 8007cde:	bd30      	pop	{r4, r5, pc}
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <acc_service_power_bins_create+0xcc>)
 8007ce2:	490b      	ldr	r1, [pc, #44]	; (8007d10 <acc_service_power_bins_create+0xd0>)
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f002 fa6b 	bl	800a1c0 <acc_log_rss>
 8007cea:	e7b0      	b.n	8007c4e <acc_service_power_bins_create+0xe>
 8007cec:	2000      	movs	r0, #0
 8007cee:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8007cf2:	e9cd 0300 	strd	r0, r3, [sp]
 8007cf6:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <acc_service_power_bins_create+0xd4>)
 8007cf8:	4905      	ldr	r1, [pc, #20]	; (8007d10 <acc_service_power_bins_create+0xd0>)
 8007cfa:	2320      	movs	r3, #32
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	f002 fa5f 	bl	800a1c0 <acc_log_rss>
 8007d02:	e7a5      	b.n	8007c50 <acc_service_power_bins_create+0x10>
 8007d04:	3c83126f 	.word	0x3c83126f
 8007d08:	08007c15 	.word	0x08007c15
 8007d0c:	08016974 	.word	0x08016974
 8007d10:	080169b8 	.word	0x080169b8
 8007d14:	08016994 	.word	0x08016994

08007d18 <acc_service_power_bins_destroy>:
 8007d18:	f7ff bbaa 	b.w	8007470 <acc_service_destroy_sweep_session>

08007d1c <sweep_session_send_data>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	794c      	ldrb	r4, [r1, #5]
 8007d22:	f88d 400c 	strb.w	r4, [sp, #12]
 8007d26:	460b      	mov	r3, r1
 8007d28:	4615      	mov	r5, r2
 8007d2a:	68ca      	ldr	r2, [r1, #12]
 8007d2c:	9400      	str	r4, [sp, #0]
 8007d2e:	791e      	ldrb	r6, [r3, #4]
 8007d30:	f88d 600d 	strb.w	r6, [sp, #13]
 8007d34:	4601      	mov	r1, r0
 8007d36:	4628      	mov	r0, r5
 8007d38:	799d      	ldrb	r5, [r3, #6]
 8007d3a:	f88d 500e 	strb.w	r5, [sp, #14]
 8007d3e:	ab03      	add	r3, sp, #12
 8007d40:	f7ff fc1a 	bl	8007578 <acc_service_send_data>
 8007d44:	b004      	add	sp, #16
 8007d46:	bd70      	pop	{r4, r5, r6, pc}

08007d48 <acc_service_sparse_create>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b088      	sub	sp, #32
 8007d4e:	3024      	adds	r0, #36	; 0x24
 8007d50:	f7ff fc68 	bl	8007624 <acc_service_configuration_check>
 8007d54:	b918      	cbnz	r0, 8007d5e <acc_service_sparse_create+0x16>
 8007d56:	2500      	movs	r5, #0
 8007d58:	4628      	mov	r0, r5
 8007d5a:	b008      	add	sp, #32
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8007d62:	4630      	mov	r0, r6
 8007d64:	f002 f93a 	bl	8009fdc <acc_base_configuration_check>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0f4      	beq.n	8007d56 <acc_service_sparse_create+0xe>
 8007d6c:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8007d70:	b32d      	cbz	r5, 8007dbe <acc_service_sparse_create+0x76>
 8007d72:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d027      	beq.n	8007dca <acc_service_sparse_create+0x82>
 8007d7a:	9400      	str	r4, [sp, #0]
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <acc_service_sparse_create+0x98>)
 8007d80:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8007d84:	4620      	mov	r0, r4
 8007d86:	f7ff fb61 	bl	800744c <acc_service_create_sweep_session>
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d0e2      	beq.n	8007d56 <acc_service_sparse_create+0xe>
 8007d90:	a903      	add	r1, sp, #12
 8007d92:	4620      	mov	r0, r4
 8007d94:	f7ff fb68 	bl	8007468 <acc_service_get_configuration_output>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	9804      	ldr	r0, [sp, #16]
 8007d9c:	9906      	ldr	r1, [sp, #24]
 8007d9e:	9a07      	ldr	r2, [sp, #28]
 8007da0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8007da4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007da8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8007dac:	4628      	mov	r0, r5
 8007dae:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 8007db2:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 8007db6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8007dba:	b008      	add	sp, #32
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <acc_service_sparse_create+0x9c>)
 8007dc0:	4909      	ldr	r1, [pc, #36]	; (8007de8 <acc_service_sparse_create+0xa0>)
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f002 f9fc 	bl	800a1c0 <acc_log_rss>
 8007dc8:	e7c6      	b.n	8007d58 <acc_service_sparse_create+0x10>
 8007dca:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d9d3      	bls.n	8007d7a <acc_service_sparse_create+0x32>
 8007dd2:	4a06      	ldr	r2, [pc, #24]	; (8007dec <acc_service_sparse_create+0xa4>)
 8007dd4:	4904      	ldr	r1, [pc, #16]	; (8007de8 <acc_service_sparse_create+0xa0>)
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f002 f9f2 	bl	800a1c0 <acc_log_rss>
 8007ddc:	e7bb      	b.n	8007d56 <acc_service_sparse_create+0xe>
 8007dde:	bf00      	nop
 8007de0:	08007d1d 	.word	0x08007d1d
 8007de4:	080169cc 	.word	0x080169cc
 8007de8:	08016a48 	.word	0x08016a48
 8007dec:	08016a0c 	.word	0x08016a0c

08007df0 <acc_service_sparse_destroy>:
 8007df0:	f7ff bb3e 	b.w	8007470 <acc_service_destroy_sweep_session>

08007df4 <acc_session_manager_activate>:
 8007df4:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <acc_session_manager_activate+0x10>)
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	b90a      	cbnz	r2, 8007dfe <acc_session_manager_activate+0xa>
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	2001      	movs	r0, #1
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	200003d5 	.word	0x200003d5

08007e08 <acc_session_manager_deactivate>:
 8007e08:	4b01      	ldr	r3, [pc, #4]	; (8007e10 <acc_session_manager_deactivate+0x8>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	4770      	bx	lr
 8007e10:	200003d5 	.word	0x200003d5

08007e14 <state_done>:
 8007e14:	2306      	movs	r3, #6
 8007e16:	7143      	strb	r3, [r0, #5]
 8007e18:	2000      	movs	r0, #0
 8007e1a:	4770      	bx	lr

08007e1c <destroy_session>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	6880      	ldr	r0, [r0, #8]
 8007e22:	b118      	cbz	r0, 8007e2c <destroy_session+0x10>
 8007e24:	6903      	ldr	r3, [r0, #16]
 8007e26:	4798      	blx	r3
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e32:	f002 b9b3 	b.w	800a19c <acc_integration_mem_free>
 8007e36:	bf00      	nop

08007e38 <state_null>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	7903      	ldrb	r3, [r0, #4]
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	b173      	cbz	r3, 8007e5e <state_null+0x26>
 8007e40:	2100      	movs	r1, #0
 8007e42:	2b06      	cmp	r3, #6
 8007e44:	4604      	mov	r4, r0
 8007e46:	7101      	strb	r1, [r0, #4]
 8007e48:	d809      	bhi.n	8007e5e <state_null+0x26>
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	f013 0f5d 	tst.w	r3, #93	; 0x5d
 8007e54:	d10e      	bne.n	8007e74 <state_null+0x3c>
 8007e56:	069a      	lsls	r2, r3, #26
 8007e58:	d409      	bmi.n	8007e6e <state_null+0x36>
 8007e5a:	079b      	lsls	r3, r3, #30
 8007e5c:	d413      	bmi.n	8007e86 <state_null+0x4e>
 8007e5e:	2003      	movs	r0, #3
 8007e60:	4a0d      	ldr	r2, [pc, #52]	; (8007e98 <state_null+0x60>)
 8007e62:	490e      	ldr	r1, [pc, #56]	; (8007e9c <state_null+0x64>)
 8007e64:	f002 f9ac 	bl	800a1c0 <acc_log_rss>
 8007e68:	480d      	ldr	r0, [pc, #52]	; (8007ea0 <state_null+0x68>)
 8007e6a:	b002      	add	sp, #8
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <state_null+0x6c>)
 8007e70:	b002      	add	sp, #8
 8007e72:	bd10      	pop	{r4, pc}
 8007e74:	9100      	str	r1, [sp, #0]
 8007e76:	2003      	movs	r0, #3
 8007e78:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <state_null+0x70>)
 8007e7a:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <state_null+0x74>)
 8007e7c:	4907      	ldr	r1, [pc, #28]	; (8007e9c <state_null+0x64>)
 8007e7e:	f002 f99f 	bl	800a1c0 <acc_log_rss>
 8007e82:	4807      	ldr	r0, [pc, #28]	; (8007ea0 <state_null+0x68>)
 8007e84:	e7f1      	b.n	8007e6a <state_null+0x32>
 8007e86:	2002      	movs	r0, #2
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <state_null+0x78>)
 8007e8a:	4904      	ldr	r1, [pc, #16]	; (8007e9c <state_null+0x64>)
 8007e8c:	f002 f998 	bl	800a1c0 <acc_log_rss>
 8007e90:	2302      	movs	r3, #2
 8007e92:	7163      	strb	r3, [r4, #5]
 8007e94:	4807      	ldr	r0, [pc, #28]	; (8007eb4 <state_null+0x7c>)
 8007e96:	e7e8      	b.n	8007e6a <state_null+0x32>
 8007e98:	08016bfc 	.word	0x08016bfc
 8007e9c:	08016bc0 	.word	0x08016bc0
 8007ea0:	08007e39 	.word	0x08007e39
 8007ea4:	08007e15 	.word	0x08007e15
 8007ea8:	08016adc 	.word	0x08016adc
 8007eac:	08016be0 	.word	0x08016be0
 8007eb0:	08016bac 	.word	0x08016bac
 8007eb4:	08007eb9 	.word	0x08007eb9

08007eb8 <state_busy>:
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	7903      	ldrb	r3, [r0, #4]
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	b933      	cbnz	r3, 8007ed0 <state_busy+0x18>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	e9d3 0200 	ldrd	r0, r2, [r3]
 8007ec8:	4790      	blx	r2
 8007eca:	4810      	ldr	r0, [pc, #64]	; (8007f0c <state_busy+0x54>)
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd10      	pop	{r4, pc}
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	2b06      	cmp	r3, #6
 8007ed4:	7101      	strb	r1, [r0, #4]
 8007ed6:	d8f4      	bhi.n	8007ec2 <state_busy+0xa>
 8007ed8:	2201      	movs	r2, #1
 8007eda:	fa02 f303 	lsl.w	r3, r2, r3
 8007ede:	f013 0f77 	tst.w	r3, #119	; 0x77
 8007ee2:	d10a      	bne.n	8007efa <state_busy+0x42>
 8007ee4:	071b      	lsls	r3, r3, #28
 8007ee6:	d5ec      	bpl.n	8007ec2 <state_busy+0xa>
 8007ee8:	2002      	movs	r0, #2
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <state_busy+0x58>)
 8007eec:	4909      	ldr	r1, [pc, #36]	; (8007f14 <state_busy+0x5c>)
 8007eee:	f002 f967 	bl	800a1c0 <acc_log_rss>
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	7163      	strb	r3, [r4, #5]
 8007ef6:	4808      	ldr	r0, [pc, #32]	; (8007f18 <state_busy+0x60>)
 8007ef8:	e7e8      	b.n	8007ecc <state_busy+0x14>
 8007efa:	9100      	str	r1, [sp, #0]
 8007efc:	2003      	movs	r0, #3
 8007efe:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <state_busy+0x64>)
 8007f00:	4a07      	ldr	r2, [pc, #28]	; (8007f20 <state_busy+0x68>)
 8007f02:	4904      	ldr	r1, [pc, #16]	; (8007f14 <state_busy+0x5c>)
 8007f04:	f002 f95c 	bl	800a1c0 <acc_log_rss>
 8007f08:	4803      	ldr	r0, [pc, #12]	; (8007f18 <state_busy+0x60>)
 8007f0a:	e7df      	b.n	8007ecc <state_busy+0x14>
 8007f0c:	08007eb9 	.word	0x08007eb9
 8007f10:	08016b98 	.word	0x08016b98
 8007f14:	08016bc0 	.word	0x08016bc0
 8007f18:	08007e39 	.word	0x08007e39
 8007f1c:	08016ae8 	.word	0x08016ae8
 8007f20:	08016be0 	.word	0x08016be0

08007f24 <acc_session_sweep_and_processing_run>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	68c3      	ldr	r3, [r0, #12]
 8007f28:	4604      	mov	r4, r0
 8007f2a:	4798      	blx	r3
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <acc_session_sweep_and_processing_run+0x1c>)
 8007f2e:	60e0      	str	r0, [r4, #12]
 8007f30:	4298      	cmp	r0, r3
 8007f32:	d000      	beq.n	8007f36 <acc_session_sweep_and_processing_run+0x12>
 8007f34:	bd10      	pop	{r4, pc}
 8007f36:	2206      	movs	r2, #6
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <acc_session_sweep_and_processing_run+0x20>)
 8007f3a:	7162      	strb	r2, [r4, #5]
 8007f3c:	60e3      	str	r3, [r4, #12]
 8007f3e:	bd10      	pop	{r4, pc}
 8007f40:	08007e15 	.word	0x08007e15
 8007f44:	08007e39 	.word	0x08007e39

08007f48 <acc_session_sweep_and_processing_create>:
 8007f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460e      	mov	r6, r1
 8007f50:	4617      	mov	r7, r2
 8007f52:	4698      	mov	r8, r3
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <acc_session_sweep_and_processing_create+0x64>)
 8007f56:	f240 1397 	movw	r3, #407	; 0x197
 8007f5a:	2110      	movs	r1, #16
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	f002 f8f9 	bl	800a154 <acc_integration_mem_calloc_debug>
 8007f62:	4604      	mov	r4, r0
 8007f64:	b1a0      	cbz	r0, 8007f90 <acc_session_sweep_and_processing_create+0x48>
 8007f66:	2000      	movs	r0, #0
 8007f68:	f8df c050 	ldr.w	ip, [pc, #80]	; 8007fbc <acc_session_sweep_and_processing_create+0x74>
 8007f6c:	6025      	str	r5, [r4, #0]
 8007f6e:	4631      	mov	r1, r6
 8007f70:	60a0      	str	r0, [r4, #8]
 8007f72:	7160      	strb	r0, [r4, #5]
 8007f74:	7120      	strb	r0, [r4, #4]
 8007f76:	686e      	ldr	r6, [r5, #4]
 8007f78:	f8c4 c00c 	str.w	ip, [r4, #12]
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	4643      	mov	r3, r8
 8007f80:	463a      	mov	r2, r7
 8007f82:	47b0      	blx	r6
 8007f84:	4605      	mov	r5, r0
 8007f86:	60a0      	str	r0, [r4, #8]
 8007f88:	b150      	cbz	r0, 8007fa0 <acc_session_sweep_and_processing_create+0x58>
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <acc_session_sweep_and_processing_create+0x68>)
 8007f92:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <acc_session_sweep_and_processing_create+0x6c>)
 8007f94:	4908      	ldr	r1, [pc, #32]	; (8007fb8 <acc_session_sweep_and_processing_create+0x70>)
 8007f96:	f002 f913 	bl	800a1c0 <acc_log_rss>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f7ff ff3b 	bl	8007e1c <destroy_session>
 8007fa6:	462c      	mov	r4, r5
 8007fa8:	e7ef      	b.n	8007f8a <acc_session_sweep_and_processing_create+0x42>
 8007faa:	bf00      	nop
 8007fac:	08016b40 	.word	0x08016b40
 8007fb0:	08016af4 	.word	0x08016af4
 8007fb4:	08016858 	.word	0x08016858
 8007fb8:	08016bc0 	.word	0x08016bc0
 8007fbc:	08007e39 	.word	0x08007e39

08007fc0 <acc_session_sweep_and_processing_activate>:
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	6803      	ldr	r3, [r0, #0]
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	4604      	mov	r4, r0
 8007fca:	6918      	ldr	r0, [r3, #16]
 8007fcc:	f000 f9bc 	bl	8008348 <acc_sensor_manager_start_measurement>
 8007fd0:	b300      	cbz	r0, 8008014 <acc_session_sweep_and_processing_activate+0x54>
 8007fd2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800802c <acc_session_sweep_and_processing_activate+0x6c>
 8007fd6:	4f13      	ldr	r7, [pc, #76]	; (8008024 <acc_session_sweep_and_processing_activate+0x64>)
 8007fd8:	4e13      	ldr	r6, [pc, #76]	; (8008028 <acc_session_sweep_and_processing_activate+0x68>)
 8007fda:	e003      	b.n	8007fe4 <acc_session_sweep_and_processing_activate+0x24>
 8007fdc:	7925      	ldrb	r5, [r4, #4]
 8007fde:	9500      	str	r5, [sp, #0]
 8007fe0:	f002 f8ee 	bl	800a1c0 <acc_log_rss>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	7123      	strb	r3, [r4, #4]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff ff9b 	bl	8007f24 <acc_session_sweep_and_processing_run>
 8007fee:	7965      	ldrb	r5, [r4, #5]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2d02      	cmp	r5, #2
 8007ff4:	7163      	strb	r3, [r4, #5]
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	4643      	mov	r3, r8
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	f04f 0003 	mov.w	r0, #3
 8008000:	d1ec      	bne.n	8007fdc <acc_session_sweep_and_processing_activate+0x1c>
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <acc_session_sweep_and_processing_activate+0x6c>)
 8008004:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <acc_session_sweep_and_processing_activate+0x70>)
 8008006:	4908      	ldr	r1, [pc, #32]	; (8008028 <acc_session_sweep_and_processing_activate+0x68>)
 8008008:	4628      	mov	r0, r5
 800800a:	b002      	add	sp, #8
 800800c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	f002 b8d6 	b.w	800a1c0 <acc_log_rss>
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <acc_session_sweep_and_processing_activate+0x6c>)
 8008016:	4a07      	ldr	r2, [pc, #28]	; (8008034 <acc_session_sweep_and_processing_activate+0x74>)
 8008018:	4903      	ldr	r1, [pc, #12]	; (8008028 <acc_session_sweep_and_processing_activate+0x68>)
 800801a:	b002      	add	sp, #8
 800801c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	f002 b8ce 	b.w	800a1c0 <acc_log_rss>
 8008024:	08016be0 	.word	0x08016be0
 8008028:	08016bc0 	.word	0x08016bc0
 800802c:	08016a58 	.word	0x08016a58
 8008030:	08016b24 	.word	0x08016b24
 8008034:	08016b04 	.word	0x08016b04

08008038 <acc_session_sweep_and_processing_deactivate>:
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	4604      	mov	r4, r0
 800803e:	b082      	sub	sp, #8
 8008040:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8008090 <acc_session_sweep_and_processing_deactivate+0x58>
 8008044:	4f10      	ldr	r7, [pc, #64]	; (8008088 <acc_session_sweep_and_processing_deactivate+0x50>)
 8008046:	4e11      	ldr	r6, [pc, #68]	; (800808c <acc_session_sweep_and_processing_deactivate+0x54>)
 8008048:	e003      	b.n	8008052 <acc_session_sweep_and_processing_deactivate+0x1a>
 800804a:	7925      	ldrb	r5, [r4, #4]
 800804c:	9500      	str	r5, [sp, #0]
 800804e:	f002 f8b7 	bl	800a1c0 <acc_log_rss>
 8008052:	2503      	movs	r5, #3
 8008054:	4620      	mov	r0, r4
 8008056:	7125      	strb	r5, [r4, #4]
 8008058:	f7ff ff64 	bl	8007f24 <acc_session_sweep_and_processing_run>
 800805c:	7963      	ldrb	r3, [r4, #5]
 800805e:	2200      	movs	r2, #0
 8008060:	2b04      	cmp	r3, #4
 8008062:	7162      	strb	r2, [r4, #5]
 8008064:	4643      	mov	r3, r8
 8008066:	463a      	mov	r2, r7
 8008068:	4631      	mov	r1, r6
 800806a:	4628      	mov	r0, r5
 800806c:	d1ed      	bne.n	800804a <acc_session_sweep_and_processing_deactivate+0x12>
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <acc_session_sweep_and_processing_deactivate+0x58>)
 8008070:	4a08      	ldr	r2, [pc, #32]	; (8008094 <acc_session_sweep_and_processing_deactivate+0x5c>)
 8008072:	4906      	ldr	r1, [pc, #24]	; (800808c <acc_session_sweep_and_processing_deactivate+0x54>)
 8008074:	2002      	movs	r0, #2
 8008076:	f002 f8a3 	bl	800a1c0 <acc_log_rss>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	6918      	ldr	r0, [r3, #16]
 800807e:	b002      	add	sp, #8
 8008080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008084:	f000 b98a 	b.w	800839c <acc_sensor_manager_stop_measurement>
 8008088:	08016be0 	.word	0x08016be0
 800808c:	08016bc0 	.word	0x08016bc0
 8008090:	08016a84 	.word	0x08016a84
 8008094:	08016b64 	.word	0x08016b64

08008098 <acc_session_sweep_and_processing_destroy>:
 8008098:	b1d8      	cbz	r0, 80080d2 <acc_session_sweep_and_processing_destroy+0x3a>
 800809a:	b530      	push	{r4, r5, lr}
 800809c:	6805      	ldr	r5, [r0, #0]
 800809e:	b083      	sub	sp, #12
 80080a0:	b1ad      	cbz	r5, 80080ce <acc_session_sweep_and_processing_destroy+0x36>
 80080a2:	2305      	movs	r3, #5
 80080a4:	712b      	strb	r3, [r5, #4]
 80080a6:	4604      	mov	r4, r0
 80080a8:	4628      	mov	r0, r5
 80080aa:	f7ff ff3b 	bl	8007f24 <acc_session_sweep_and_processing_run>
 80080ae:	796b      	ldrb	r3, [r5, #5]
 80080b0:	2200      	movs	r2, #0
 80080b2:	2b06      	cmp	r3, #6
 80080b4:	716a      	strb	r2, [r5, #5]
 80080b6:	d10d      	bne.n	80080d4 <acc_session_sweep_and_processing_destroy+0x3c>
 80080b8:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <acc_session_sweep_and_processing_destroy+0x50>)
 80080ba:	4a0c      	ldr	r2, [pc, #48]	; (80080ec <acc_session_sweep_and_processing_destroy+0x54>)
 80080bc:	490c      	ldr	r1, [pc, #48]	; (80080f0 <acc_session_sweep_and_processing_destroy+0x58>)
 80080be:	2002      	movs	r0, #2
 80080c0:	f002 f87e 	bl	800a1c0 <acc_log_rss>
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff fea9 	bl	8007e1c <destroy_session>
 80080ca:	2300      	movs	r3, #0
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	b003      	add	sp, #12
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	4770      	bx	lr
 80080d4:	792b      	ldrb	r3, [r5, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	4a06      	ldr	r2, [pc, #24]	; (80080f4 <acc_session_sweep_and_processing_destroy+0x5c>)
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <acc_session_sweep_and_processing_destroy+0x50>)
 80080dc:	4904      	ldr	r1, [pc, #16]	; (80080f0 <acc_session_sweep_and_processing_destroy+0x58>)
 80080de:	2003      	movs	r0, #3
 80080e0:	f002 f86e 	bl	800a1c0 <acc_log_rss>
 80080e4:	e7ee      	b.n	80080c4 <acc_session_sweep_and_processing_destroy+0x2c>
 80080e6:	bf00      	nop
 80080e8:	08016ab0 	.word	0x08016ab0
 80080ec:	08016b80 	.word	0x08016b80
 80080f0:	08016bc0 	.word	0x08016bc0
 80080f4:	08016be0 	.word	0x08016be0

080080f8 <acc_session_sweep_and_processing_get_configuration_output>:
 80080f8:	6803      	ldr	r3, [r0, #0]
 80080fa:	6918      	ldr	r0, [r3, #16]
 80080fc:	f000 ba02 	b.w	8008504 <acc_sensor_manager_get_configuration_output>

08008100 <acc_session_sweep_and_processing_get_output_type>:
 8008100:	6883      	ldr	r3, [r0, #8]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	4710      	bx	r2

08008108 <calibrate_sensor>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	4e21      	ldr	r6, [pc, #132]	; (8008194 <calibrate_sensor+0x8c>)
 800810e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8008112:	6833      	ldr	r3, [r6, #0]
 8008114:	0164      	lsls	r4, r4, #5
 8008116:	3c60      	subs	r4, #96	; 0x60
 8008118:	4423      	add	r3, r4
 800811a:	2200      	movs	r2, #0
 800811c:	b082      	sub	sp, #8
 800811e:	4605      	mov	r5, r0
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008124:	4688      	mov	r8, r1
 8008126:	f001 ffe7 	bl	800a0f8 <acc_integration_sensor_device_power_on>
 800812a:	4628      	mov	r0, r5
 800812c:	f000 fac6 	bl	80086bc <acc_sweep_manager_is_sensor_connected>
 8008130:	b1d0      	cbz	r0, 8008168 <calibrate_sensor+0x60>
 8008132:	4629      	mov	r1, r5
 8008134:	2009      	movs	r0, #9
 8008136:	f002 f89b 	bl	800a270 <acc_probes_execute_primitive_probe>
 800813a:	6831      	ldr	r1, [r6, #0]
 800813c:	4640      	mov	r0, r8
 800813e:	4421      	add	r1, r4
 8008140:	f000 fabe 	bl	80086c0 <acc_sweep_manager_calibrate>
 8008144:	4607      	mov	r7, r0
 8008146:	b1e8      	cbz	r0, 8008184 <calibrate_sensor+0x7c>
 8008148:	6833      	ldr	r3, [r6, #0]
 800814a:	441c      	add	r4, r3
 800814c:	2301      	movs	r3, #1
 800814e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008152:	4629      	mov	r1, r5
 8008154:	200a      	movs	r0, #10
 8008156:	f002 f88b 	bl	800a270 <acc_probes_execute_primitive_probe>
 800815a:	4628      	mov	r0, r5
 800815c:	f001 ffd2 	bl	800a104 <acc_integration_sensor_device_power_off>
 8008160:	4638      	mov	r0, r7
 8008162:	b002      	add	sp, #8
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <calibrate_sensor+0x90>)
 800816a:	4a0c      	ldr	r2, [pc, #48]	; (800819c <calibrate_sensor+0x94>)
 800816c:	490c      	ldr	r1, [pc, #48]	; (80081a0 <calibrate_sensor+0x98>)
 800816e:	9500      	str	r5, [sp, #0]
 8008170:	4607      	mov	r7, r0
 8008172:	f002 f825 	bl	800a1c0 <acc_log_rss>
 8008176:	4628      	mov	r0, r5
 8008178:	f001 ffc4 	bl	800a104 <acc_integration_sensor_device_power_off>
 800817c:	4638      	mov	r0, r7
 800817e:	b002      	add	sp, #8
 8008180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008184:	9500      	str	r5, [sp, #0]
 8008186:	4b04      	ldr	r3, [pc, #16]	; (8008198 <calibrate_sensor+0x90>)
 8008188:	4a06      	ldr	r2, [pc, #24]	; (80081a4 <calibrate_sensor+0x9c>)
 800818a:	4905      	ldr	r1, [pc, #20]	; (80081a0 <calibrate_sensor+0x98>)
 800818c:	f002 f818 	bl	800a1c0 <acc_log_rss>
 8008190:	e7df      	b.n	8008152 <calibrate_sensor+0x4a>
 8008192:	bf00      	nop
 8008194:	200003d8 	.word	0x200003d8
 8008198:	08016c1c 	.word	0x08016c1c
 800819c:	08016d98 	.word	0x08016d98
 80081a0:	08016de4 	.word	0x08016de4
 80081a4:	08016df4 	.word	0x08016df4

080081a8 <acc_sensor_manager_activate>:
 80081a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	4e1d      	ldr	r6, [pc, #116]	; (8008224 <acc_sensor_manager_activate+0x7c>)
 80081ae:	7834      	ldrb	r4, [r6, #0]
 80081b0:	b114      	cbz	r4, 80081b8 <acc_sensor_manager_activate+0x10>
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	f000 f9b0 	bl	800851c <acc_sweep_manager_activate>
 80081bc:	4680      	mov	r8, r0
 80081be:	2800      	cmp	r0, #0
 80081c0:	d0f7      	beq.n	80081b2 <acc_sensor_manager_activate+0xa>
 80081c2:	f001 ff87 	bl	800a0d4 <acc_integration_get_sensor_count>
 80081c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80081ca:	0140      	lsls	r0, r0, #5
 80081cc:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 80081d0:	4915      	ldr	r1, [pc, #84]	; (8008228 <acc_sensor_manager_activate+0x80>)
 80081d2:	4f16      	ldr	r7, [pc, #88]	; (800822c <acc_sensor_manager_activate+0x84>)
 80081d4:	f001 ffa8 	bl	800a128 <acc_integration_mem_alloc_debug>
 80081d8:	6038      	str	r0, [r7, #0]
 80081da:	b1e0      	cbz	r0, 8008216 <acc_sensor_manager_activate+0x6e>
 80081dc:	4625      	mov	r5, r4
 80081de:	e00e      	b.n	80081fe <acc_sensor_manager_activate+0x56>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80081e6:	3401      	adds	r4, #1
 80081e8:	659d      	str	r5, [r3, #88]	; 0x58
 80081ea:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
 80081ee:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
 80081f2:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
 80081f6:	f883 504d 	strb.w	r5, [r3, #77]	; 0x4d
 80081fa:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 80081fe:	f001 ff69 	bl	800a0d4 <acc_integration_get_sensor_count>
 8008202:	42a0      	cmp	r0, r4
 8008204:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008208:	d8ea      	bhi.n	80081e0 <acc_sensor_manager_activate+0x38>
 800820a:	2301      	movs	r3, #1
 800820c:	4644      	mov	r4, r8
 800820e:	7033      	strb	r3, [r6, #0]
 8008210:	4620      	mov	r0, r4
 8008212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <acc_sensor_manager_activate+0x88>)
 8008218:	4a06      	ldr	r2, [pc, #24]	; (8008234 <acc_sensor_manager_activate+0x8c>)
 800821a:	4907      	ldr	r1, [pc, #28]	; (8008238 <acc_sensor_manager_activate+0x90>)
 800821c:	f001 ffd0 	bl	800a1c0 <acc_log_rss>
 8008220:	e7c7      	b.n	80081b2 <acc_sensor_manager_activate+0xa>
 8008222:	bf00      	nop
 8008224:	200003d6 	.word	0x200003d6
 8008228:	08016c94 	.word	0x08016c94
 800822c:	200003d8 	.word	0x200003d8
 8008230:	08016c54 	.word	0x08016c54
 8008234:	08016858 	.word	0x08016858
 8008238:	08016de4 	.word	0x08016de4

0800823c <acc_sensor_manager_deactivate>:
 800823c:	b510      	push	{r4, lr}
 800823e:	4c06      	ldr	r4, [pc, #24]	; (8008258 <acc_sensor_manager_deactivate+0x1c>)
 8008240:	7823      	ldrb	r3, [r4, #0]
 8008242:	b903      	cbnz	r3, 8008246 <acc_sensor_manager_deactivate+0xa>
 8008244:	bd10      	pop	{r4, pc}
 8008246:	f000 f995 	bl	8008574 <acc_sweep_manager_deactivate>
 800824a:	4b04      	ldr	r3, [pc, #16]	; (800825c <acc_sensor_manager_deactivate+0x20>)
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	f001 ffa5 	bl	800a19c <acc_integration_mem_free>
 8008252:	2300      	movs	r3, #0
 8008254:	7023      	strb	r3, [r4, #0]
 8008256:	bd10      	pop	{r4, pc}
 8008258:	200003d6 	.word	0x200003d6
 800825c:	200003d8 	.word	0x200003d8

08008260 <acc_sensor_manager_prepare_measurement>:
 8008260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008264:	4689      	mov	r9, r1
 8008266:	4607      	mov	r7, r0
 8008268:	f001 fbb4 	bl	80099d4 <acc_base_configuration_sensor_get>
 800826c:	4d34      	ldr	r5, [pc, #208]	; (8008340 <acc_sensor_manager_prepare_measurement+0xe0>)
 800826e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	0164      	lsls	r4, r4, #5
 8008276:	3c60      	subs	r4, #96	; 0x60
 8008278:	4680      	mov	r8, r0
 800827a:	4638      	mov	r0, r7
 800827c:	191e      	adds	r6, r3, r4
 800827e:	f000 f98b 	bl	8008598 <acc_sweep_manager_prepare>
 8008282:	682b      	ldr	r3, [r5, #0]
 8008284:	65f0      	str	r0, [r6, #92]	; 0x5c
 8008286:	4423      	add	r3, r4
 8008288:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800828a:	2900      	cmp	r1, #0
 800828c:	d056      	beq.n	800833c <acc_sensor_manager_prepare_measurement+0xdc>
 800828e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008292:	b92b      	cbnz	r3, 80082a0 <acc_sensor_manager_prepare_measurement+0x40>
 8008294:	4640      	mov	r0, r8
 8008296:	f7ff ff37 	bl	8008108 <calibrate_sensor>
 800829a:	4606      	mov	r6, r0
 800829c:	2800      	cmp	r0, #0
 800829e:	d046      	beq.n	800832e <acc_sensor_manager_prepare_measurement+0xce>
 80082a0:	4638      	mov	r0, r7
 80082a2:	f001 fdc3 	bl	8009e2c <acc_base_configuration_noise_level_normalization_get>
 80082a6:	bb88      	cbnz	r0, 800830c <acc_sensor_manager_prepare_measurement+0xac>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	4423      	add	r3, r4
 80082ac:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80082ae:	f000 fa01 	bl	80086b4 <acc_sweep_manager_get_metadata>
 80082b2:	2244      	movs	r2, #68	; 0x44
 80082b4:	4601      	mov	r1, r0
 80082b6:	4648      	mov	r0, r9
 80082b8:	f007 fef0 	bl	801009c <memcpy>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	4423      	add	r3, r4
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80082c6:	4638      	mov	r0, r7
 80082c8:	f001 fbec 	bl	8009aa4 <acc_base_configuration_power_save_mode_get>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	fab0 f280 	clz	r2, r0
 80082d2:	4423      	add	r3, r4
 80082d4:	0952      	lsrs	r2, r2, #5
 80082d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80082da:	4638      	mov	r0, r7
 80082dc:	f001 fc96 	bl	8009c0c <acc_base_configuration_repetition_mode_get>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	fab0 f080 	clz	r0, r0
 80082e6:	4423      	add	r3, r4
 80082e8:	0940      	lsrs	r0, r0, #5
 80082ea:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
 80082ee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80082f0:	f000 f9e2 	bl	80086b8 <acc_sweep_manager_get_data_reference>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80082fa:	441c      	add	r4, r3
 80082fc:	4620      	mov	r0, r4
 80082fe:	2300      	movs	r3, #0
 8008300:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
 8008304:	f800 3f50 	strb.w	r3, [r0, #80]!
 8008308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	4423      	add	r3, r4
 8008310:	4640      	mov	r0, r8
 8008312:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 8008314:	f001 fef0 	bl	800a0f8 <acc_integration_sensor_device_power_on>
 8008318:	6829      	ldr	r1, [r5, #0]
 800831a:	4630      	mov	r0, r6
 800831c:	4421      	add	r1, r4
 800831e:	f000 f9d3 	bl	80086c8 <acc_sweep_manager_measure_noise>
 8008322:	4606      	mov	r6, r0
 8008324:	4640      	mov	r0, r8
 8008326:	f001 feed 	bl	800a104 <acc_integration_sensor_device_power_off>
 800832a:	2e00      	cmp	r6, #0
 800832c:	d1bc      	bne.n	80082a8 <acc_sensor_manager_prepare_measurement+0x48>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	441c      	add	r4, r3
 8008332:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008334:	f000 f9b2 	bl	800869c <acc_sweep_manager_release>
 8008338:	4630      	mov	r0, r6
 800833a:	e7e5      	b.n	8008308 <acc_sensor_manager_prepare_measurement+0xa8>
 800833c:	4608      	mov	r0, r1
 800833e:	e7e3      	b.n	8008308 <acc_sensor_manager_prepare_measurement+0xa8>
 8008340:	200003d8 	.word	0x200003d8

08008344 <acc_sensor_manager_prepare_metadata_only>:
 8008344:	f000 b996 	b.w	8008674 <acc_sweep_manager_prepare_metadata_only>

08008348 <acc_sensor_manager_start_measurement>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	4e13      	ldr	r6, [pc, #76]	; (8008398 <acc_sensor_manager_start_measurement+0x50>)
 800834c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8008350:	0164      	lsls	r4, r4, #5
 8008352:	6832      	ldr	r2, [r6, #0]
 8008354:	3c60      	subs	r4, #96	; 0x60
 8008356:	4422      	add	r2, r4
 8008358:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 800835c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8008360:	2a01      	cmp	r2, #1
 8008362:	d002      	beq.n	800836a <acc_sensor_manager_start_measurement+0x22>
 8008364:	2700      	movs	r7, #0
 8008366:	4638      	mov	r0, r7
 8008368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800836a:	4605      	mov	r5, r0
 800836c:	f001 fec4 	bl	800a0f8 <acc_integration_sensor_device_power_on>
 8008370:	6831      	ldr	r1, [r6, #0]
 8008372:	4421      	add	r1, r4
 8008374:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 8008376:	f000 f9d3 	bl	8008720 <acc_sweep_manager_start>
 800837a:	4607      	mov	r7, r0
 800837c:	b130      	cbz	r0, 800838c <acc_sensor_manager_start_measurement+0x44>
 800837e:	6833      	ldr	r3, [r6, #0]
 8008380:	441c      	add	r4, r3
 8008382:	2302      	movs	r3, #2
 8008384:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8008388:	4638      	mov	r0, r7
 800838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838c:	4628      	mov	r0, r5
 800838e:	f001 feb9 	bl	800a104 <acc_integration_sensor_device_power_off>
 8008392:	4638      	mov	r0, r7
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008396:	bf00      	nop
 8008398:	200003d8 	.word	0x200003d8

0800839c <acc_sensor_manager_stop_measurement>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	4e13      	ldr	r6, [pc, #76]	; (80083ec <acc_sensor_manager_stop_measurement+0x50>)
 80083a0:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80083a4:	0164      	lsls	r4, r4, #5
 80083a6:	6833      	ldr	r3, [r6, #0]
 80083a8:	3c60      	subs	r4, #96	; 0x60
 80083aa:	4423      	add	r3, r4
 80083ac:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80083b0:	2a02      	cmp	r2, #2
 80083b2:	d000      	beq.n	80083b6 <acc_sensor_manager_stop_measurement+0x1a>
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	4605      	mov	r5, r0
 80083b8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80083ba:	f000 fa4b 	bl	8008854 <acc_sweep_manager_stop>
 80083be:	b170      	cbz	r0, 80083de <acc_sensor_manager_stop_measurement+0x42>
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <acc_sensor_manager_stop_measurement+0x54>)
 80083c2:	4a0c      	ldr	r2, [pc, #48]	; (80083f4 <acc_sensor_manager_stop_measurement+0x58>)
 80083c4:	490c      	ldr	r1, [pc, #48]	; (80083f8 <acc_sensor_manager_stop_measurement+0x5c>)
 80083c6:	2004      	movs	r0, #4
 80083c8:	f001 fefa 	bl	800a1c0 <acc_log_rss>
 80083cc:	4628      	mov	r0, r5
 80083ce:	f001 fe99 	bl	800a104 <acc_integration_sensor_device_power_off>
 80083d2:	6833      	ldr	r3, [r6, #0]
 80083d4:	441c      	add	r4, r3
 80083d6:	2303      	movs	r3, #3
 80083d8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80083dc:	bd70      	pop	{r4, r5, r6, pc}
 80083de:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <acc_sensor_manager_stop_measurement+0x54>)
 80083e0:	4a06      	ldr	r2, [pc, #24]	; (80083fc <acc_sensor_manager_stop_measurement+0x60>)
 80083e2:	4905      	ldr	r1, [pc, #20]	; (80083f8 <acc_sensor_manager_stop_measurement+0x5c>)
 80083e4:	2001      	movs	r0, #1
 80083e6:	f001 feeb 	bl	800a1c0 <acc_log_rss>
 80083ea:	e7e9      	b.n	80083c0 <acc_sensor_manager_stop_measurement+0x24>
 80083ec:	200003d8 	.word	0x200003d8
 80083f0:	08016c70 	.word	0x08016c70
 80083f4:	08016ce8 	.word	0x08016ce8
 80083f8:	08016de4 	.word	0x08016de4
 80083fc:	08016cac 	.word	0x08016cac

08008400 <acc_sensor_manager_wait_for_adc_output>:
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80084dc <acc_sensor_manager_wait_for_adc_output+0xdc>
 8008408:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 800840c:	0164      	lsls	r4, r4, #5
 800840e:	f8d8 5000 	ldr.w	r5, [r8]
 8008412:	3c60      	subs	r4, #96	; 0x60
 8008414:	4425      	add	r5, r4
 8008416:	f895 204e 	ldrb.w	r2, [r5, #78]	; 0x4e
 800841a:	b11a      	cbz	r2, 8008424 <acc_sensor_manager_wait_for_adc_output+0x24>
 800841c:	2601      	movs	r6, #1
 800841e:	4630      	mov	r0, r6
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8008428:	4607      	mov	r7, r0
 800842a:	bba3      	cbnz	r3, 8008496 <acc_sensor_manager_wait_for_adc_output+0x96>
 800842c:	f8d5 905c 	ldr.w	r9, [r5, #92]	; 0x5c
 8008430:	4648      	mov	r0, r9
 8008432:	f000 f941 	bl	80086b8 <acc_sweep_manager_get_data_reference>
 8008436:	4682      	mov	sl, r0
 8008438:	4648      	mov	r0, r9
 800843a:	f000 f983 	bl	8008744 <acc_sweep_manager_wait_for_data>
 800843e:	4606      	mov	r6, r0
 8008440:	b308      	cbz	r0, 8008486 <acc_sensor_manager_wait_for_adc_output+0x86>
 8008442:	4648      	mov	r0, r9
 8008444:	f000 f9e4 	bl	8008810 <acc_sweep_manager_transfer_data>
 8008448:	4606      	mov	r6, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d036      	beq.n	80084bc <acc_sensor_manager_wait_for_adc_output+0xbc>
 800844e:	f8d8 3000 	ldr.w	r3, [r8]
 8008452:	f89a 2000 	ldrb.w	r2, [sl]
 8008456:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
 800845a:	441c      	add	r4, r3
 800845c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008460:	f894 604c 	ldrb.w	r6, [r4, #76]	; 0x4c
 8008464:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008468:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
 800846c:	bb16      	cbnz	r6, 80084b4 <acc_sensor_manager_wait_for_adc_output+0xb4>
 800846e:	4648      	mov	r0, r9
 8008470:	f000 f9e6 	bl	8008840 <acc_sweep_manager_update_data>
 8008474:	4606      	mov	r6, r0
 8008476:	2800      	cmp	r0, #0
 8008478:	d1d0      	bne.n	800841c <acc_sensor_manager_wait_for_adc_output+0x1c>
 800847a:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <acc_sensor_manager_wait_for_adc_output+0xc8>)
 800847c:	4a13      	ldr	r2, [pc, #76]	; (80084cc <acc_sensor_manager_wait_for_adc_output+0xcc>)
 800847e:	4914      	ldr	r1, [pc, #80]	; (80084d0 <acc_sensor_manager_wait_for_adc_output+0xd0>)
 8008480:	f001 fe9e 	bl	800a1c0 <acc_log_rss>
 8008484:	e7cb      	b.n	800841e <acc_sensor_manager_wait_for_adc_output+0x1e>
 8008486:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <acc_sensor_manager_wait_for_adc_output+0xc8>)
 8008488:	4a12      	ldr	r2, [pc, #72]	; (80084d4 <acc_sensor_manager_wait_for_adc_output+0xd4>)
 800848a:	4911      	ldr	r1, [pc, #68]	; (80084d0 <acc_sensor_manager_wait_for_adc_output+0xd0>)
 800848c:	f001 fe98 	bl	800a1c0 <acc_log_rss>
 8008490:	4630      	mov	r0, r6
 8008492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008496:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 800849a:	2b03      	cmp	r3, #3
 800849c:	d1c6      	bne.n	800842c <acc_sensor_manager_wait_for_adc_output+0x2c>
 800849e:	f7ff ff53 	bl	8008348 <acc_sensor_manager_start_measurement>
 80084a2:	f8d8 5000 	ldr.w	r5, [r8]
 80084a6:	4425      	add	r5, r4
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d0bf      	beq.n	800842c <acc_sensor_manager_wait_for_adc_output+0x2c>
 80084ac:	2302      	movs	r3, #2
 80084ae:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 80084b2:	e7bb      	b.n	800842c <acc_sensor_manager_wait_for_adc_output+0x2c>
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff ff71 	bl	800839c <acc_sensor_manager_stop_measurement>
 80084ba:	e7b0      	b.n	800841e <acc_sensor_manager_wait_for_adc_output+0x1e>
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <acc_sensor_manager_wait_for_adc_output+0xc8>)
 80084be:	4a06      	ldr	r2, [pc, #24]	; (80084d8 <acc_sensor_manager_wait_for_adc_output+0xd8>)
 80084c0:	4903      	ldr	r1, [pc, #12]	; (80084d0 <acc_sensor_manager_wait_for_adc_output+0xd0>)
 80084c2:	f001 fe7d 	bl	800a1c0 <acc_log_rss>
 80084c6:	e7aa      	b.n	800841e <acc_sensor_manager_wait_for_adc_output+0x1e>
 80084c8:	08016c30 	.word	0x08016c30
 80084cc:	08016d78 	.word	0x08016d78
 80084d0:	08016de4 	.word	0x08016de4
 80084d4:	08016d1c 	.word	0x08016d1c
 80084d8:	08016d4c 	.word	0x08016d4c
 80084dc:	200003d8 	.word	0x200003d8

080084e0 <acc_sensor_manager_release_measurement>:
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <acc_sensor_manager_release_measurement+0x20>)
 80084e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	0140      	lsls	r0, r0, #5
 80084ea:	3860      	subs	r0, #96	; 0x60
 80084ec:	4418      	add	r0, r3
 80084ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80084f2:	b90b      	cbnz	r3, 80084f8 <acc_sensor_manager_release_measurement+0x18>
 80084f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80084f8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80084fa:	f000 b8cf 	b.w	800869c <acc_sweep_manager_release>
 80084fe:	bf00      	nop
 8008500:	200003d8 	.word	0x200003d8

08008504 <acc_sensor_manager_get_configuration_output>:
 8008504:	4b04      	ldr	r3, [pc, #16]	; (8008518 <acc_sensor_manager_get_configuration_output+0x14>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800850c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8008510:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008514:	f000 b8e8 	b.w	80086e8 <acc_sweep_manager_get_configuration_output>
 8008518:	200003d8 	.word	0x200003d8

0800851c <acc_sweep_manager_activate>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4d0f      	ldr	r5, [pc, #60]	; (800855c <acc_sweep_manager_activate+0x40>)
 8008520:	782c      	ldrb	r4, [r5, #0]
 8008522:	b10c      	cbz	r4, 8008528 <acc_sweep_manager_activate+0xc>
 8008524:	4620      	mov	r0, r4
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	f003 fa58 	bl	800b9dc <acc_sensor_activate>
 800852c:	4606      	mov	r6, r0
 800852e:	2800      	cmp	r0, #0
 8008530:	d0f8      	beq.n	8008524 <acc_sweep_manager_activate+0x8>
 8008532:	f001 fdcf 	bl	800a0d4 <acc_integration_get_sensor_count>
 8008536:	2368      	movs	r3, #104	; 0x68
 8008538:	4a09      	ldr	r2, [pc, #36]	; (8008560 <acc_sweep_manager_activate+0x44>)
 800853a:	4619      	mov	r1, r3
 800853c:	f001 fe0a 	bl	800a154 <acc_integration_mem_calloc_debug>
 8008540:	4a08      	ldr	r2, [pc, #32]	; (8008564 <acc_sweep_manager_activate+0x48>)
 8008542:	6010      	str	r0, [r2, #0]
 8008544:	b120      	cbz	r0, 8008550 <acc_sweep_manager_activate+0x34>
 8008546:	2301      	movs	r3, #1
 8008548:	4634      	mov	r4, r6
 800854a:	702b      	strb	r3, [r5, #0]
 800854c:	4620      	mov	r0, r4
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <acc_sweep_manager_activate+0x4c>)
 8008552:	4a06      	ldr	r2, [pc, #24]	; (800856c <acc_sweep_manager_activate+0x50>)
 8008554:	4906      	ldr	r1, [pc, #24]	; (8008570 <acc_sweep_manager_activate+0x54>)
 8008556:	f001 fe33 	bl	800a1c0 <acc_log_rss>
 800855a:	e7e3      	b.n	8008524 <acc_sweep_manager_activate+0x8>
 800855c:	200003dc 	.word	0x200003dc
 8008560:	08016e6c 	.word	0x08016e6c
 8008564:	200003e0 	.word	0x200003e0
 8008568:	08016e2c 	.word	0x08016e2c
 800856c:	08016858 	.word	0x08016858
 8008570:	08016e80 	.word	0x08016e80

08008574 <acc_sweep_manager_deactivate>:
 8008574:	b510      	push	{r4, lr}
 8008576:	4c06      	ldr	r4, [pc, #24]	; (8008590 <acc_sweep_manager_deactivate+0x1c>)
 8008578:	7823      	ldrb	r3, [r4, #0]
 800857a:	b903      	cbnz	r3, 800857e <acc_sweep_manager_deactivate+0xa>
 800857c:	bd10      	pop	{r4, pc}
 800857e:	f003 fa75 	bl	800ba6c <acc_sensor_deactivate>
 8008582:	4b04      	ldr	r3, [pc, #16]	; (8008594 <acc_sweep_manager_deactivate+0x20>)
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f001 fe09 	bl	800a19c <acc_integration_mem_free>
 800858a:	2300      	movs	r3, #0
 800858c:	7023      	strb	r3, [r4, #0]
 800858e:	bd10      	pop	{r4, pc}
 8008590:	200003dc 	.word	0x200003dc
 8008594:	200003e0 	.word	0x200003e0

08008598 <acc_sweep_manager_prepare>:
 8008598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800859c:	b085      	sub	sp, #20
 800859e:	4604      	mov	r4, r0
 80085a0:	f001 fa18 	bl	80099d4 <acc_base_configuration_sensor_get>
 80085a4:	2668      	movs	r6, #104	; 0x68
 80085a6:	4b30      	ldr	r3, [pc, #192]	; (8008668 <acc_sweep_manager_prepare+0xd0>)
 80085a8:	4680      	mov	r8, r0
 80085aa:	fb06 f600 	mul.w	r6, r6, r0
 80085ae:	4620      	mov	r0, r4
 80085b0:	f8d3 9000 	ldr.w	r9, [r3]
 80085b4:	f001 fb98 	bl	8009ce8 <acc_base_configuration_wg_duration_get>
 80085b8:	f8ad 0008 	strh.w	r0, [sp, #8]
 80085bc:	4620      	mov	r0, r4
 80085be:	f001 fb7b 	bl	8009cb8 <acc_base_configuration_integrator_get>
 80085c2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80085c6:	4620      	mov	r0, r4
 80085c8:	f001 fba6 	bl	8009d18 <acc_base_configuration_integrator_ramp_up_get>
 80085cc:	4641      	mov	r1, r8
 80085ce:	f8ad 000c 	strh.w	r0, [sp, #12]
 80085d2:	2303      	movs	r3, #3
 80085d4:	aa02      	add	r2, sp, #8
 80085d6:	200e      	movs	r0, #14
 80085d8:	f001 fe32 	bl	800a240 <acc_probes_execute_uint16>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	4620      	mov	r0, r4
 80085e0:	4798      	blx	r3
 80085e2:	3e68      	subs	r6, #104	; 0x68
 80085e4:	eb09 0506 	add.w	r5, r9, r6
 80085e8:	4607      	mov	r7, r0
 80085ea:	6668      	str	r0, [r5, #100]	; 0x64
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d039      	beq.n	8008664 <acc_sweep_manager_prepare+0xcc>
 80085f0:	e9d0 0300 	ldrd	r0, r3, [r0]
 80085f4:	f105 0214 	add.w	r2, r5, #20
 80085f8:	4621      	mov	r1, r4
 80085fa:	4798      	blx	r3
 80085fc:	4603      	mov	r3, r0
 80085fe:	b938      	cbnz	r0, 8008610 <acc_sweep_manager_prepare+0x78>
 8008600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008602:	4638      	mov	r0, r7
 8008604:	461d      	mov	r5, r3
 8008606:	4790      	blx	r2
 8008608:	4628      	mov	r0, r5
 800860a:	b005      	add	sp, #20
 800860c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008610:	2300      	movs	r3, #0
 8008612:	f849 8006 	str.w	r8, [r9, r6]
 8008616:	4620      	mov	r0, r4
 8008618:	60eb      	str	r3, [r5, #12]
 800861a:	742b      	strb	r3, [r5, #16]
 800861c:	f001 faf6 	bl	8009c0c <acc_base_configuration_repetition_mode_get>
 8008620:	2801      	cmp	r0, #1
 8008622:	d01d      	beq.n	8008660 <acc_sweep_manager_prepare+0xc8>
 8008624:	4620      	mov	r0, r4
 8008626:	f001 fafb 	bl	8009c20 <acc_base_configuration_update_rate_get>
 800862a:	eddf 7a10 	vldr	s15, [pc, #64]	; 800866c <acc_sweep_manager_prepare+0xd4>
 800862e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008632:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008636:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800863a:	ee17 3a90 	vmov	r3, s15
 800863e:	60ab      	str	r3, [r5, #8]
 8008640:	f859 0006 	ldr.w	r0, [r9, r6]
 8008644:	2200      	movs	r2, #0
 8008646:	a901      	add	r1, sp, #4
 8008648:	f003 ff26 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	662b      	str	r3, [r5, #96]	; 0x60
 8008650:	4628      	mov	r0, r5
 8008652:	2300      	movs	r3, #0
 8008654:	65eb      	str	r3, [r5, #92]	; 0x5c
 8008656:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
 800865a:	b005      	add	sp, #20
 800865c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <acc_sweep_manager_prepare+0xd8>)
 8008662:	e7ec      	b.n	800863e <acc_sweep_manager_prepare+0xa6>
 8008664:	4605      	mov	r5, r0
 8008666:	e7cf      	b.n	8008608 <acc_sweep_manager_prepare+0x70>
 8008668:	200003e0 	.word	0x200003e0
 800866c:	49f42400 	.word	0x49f42400
 8008670:	001e8480 	.word	0x001e8480

08008674 <acc_sweep_manager_prepare_metadata_only>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	6803      	ldr	r3, [r0, #0]
 8008678:	4605      	mov	r5, r0
 800867a:	460e      	mov	r6, r1
 800867c:	4798      	blx	r3
 800867e:	4604      	mov	r4, r0
 8008680:	b150      	cbz	r0, 8008698 <acc_sweep_manager_prepare_metadata_only+0x24>
 8008682:	4629      	mov	r1, r5
 8008684:	e9d0 0300 	ldrd	r0, r3, [r0]
 8008688:	4632      	mov	r2, r6
 800868a:	4798      	blx	r3
 800868c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868e:	4605      	mov	r5, r0
 8008690:	4620      	mov	r0, r4
 8008692:	4798      	blx	r3
 8008694:	4628      	mov	r0, r5
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	4605      	mov	r5, r0
 800869a:	e7fb      	b.n	8008694 <acc_sweep_manager_prepare_metadata_only+0x20>

0800869c <acc_sweep_manager_release>:
 800869c:	b148      	cbz	r0, 80086b2 <acc_sweep_manager_release+0x16>
 800869e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80086a0:	b13b      	cbz	r3, 80086b2 <acc_sweep_manager_release+0x16>
 80086a2:	b510      	push	{r4, lr}
 80086a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086a6:	4604      	mov	r4, r0
 80086a8:	4618      	mov	r0, r3
 80086aa:	4790      	blx	r2
 80086ac:	2300      	movs	r3, #0
 80086ae:	6663      	str	r3, [r4, #100]	; 0x64
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	4770      	bx	lr

080086b4 <acc_sweep_manager_get_metadata>:
 80086b4:	3014      	adds	r0, #20
 80086b6:	4770      	bx	lr

080086b8 <acc_sweep_manager_get_data_reference>:
 80086b8:	3058      	adds	r0, #88	; 0x58
 80086ba:	4770      	bx	lr

080086bc <acc_sweep_manager_is_sensor_connected>:
 80086bc:	f003 bec8 	b.w	800c450 <acc_sensor_protocol_check_asic_id>

080086c0 <acc_sweep_manager_calibrate>:
 80086c0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	4710      	bx	r2

080086c8 <acc_sweep_manager_measure_noise>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80086cc:	4605      	mov	r5, r0
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	4798      	blx	r3
 80086d4:	b130      	cbz	r0, 80086e4 <acc_sweep_manager_measure_noise+0x1c>
 80086d6:	f105 0114 	add.w	r1, r5, #20
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	6820      	ldr	r0, [r4, #0]
 80086de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086e2:	4718      	bx	r3
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	bf00      	nop

080086e8 <acc_sweep_manager_get_configuration_output>:
 80086e8:	edd0 7a08 	vldr	s15, [r0, #32]
 80086ec:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800871c <acc_sweep_manager_get_configuration_output+0x34>
 80086f0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80086f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80086f4:	b430      	push	{r4, r5}
 80086f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80086fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008702:	6945      	ldr	r5, [r0, #20]
 8008704:	6984      	ldr	r4, [r0, #24]
 8008706:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8008708:	8108      	strh	r0, [r1, #8]
 800870a:	3b01      	subs	r3, #1
 800870c:	600d      	str	r5, [r1, #0]
 800870e:	604c      	str	r4, [r1, #4]
 8008710:	814b      	strh	r3, [r1, #10]
 8008712:	60ca      	str	r2, [r1, #12]
 8008714:	edc1 7a04 	vstr	s15, [r1, #16]
 8008718:	bc30      	pop	{r4, r5}
 800871a:	4770      	bx	lr
 800871c:	4d8ef3c2 	.word	0x4d8ef3c2

08008720 <acc_sweep_manager_start>:
 8008720:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008722:	b510      	push	{r4, lr}
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	4604      	mov	r4, r0
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	4790      	blx	r2
 800872c:	b138      	cbz	r0, 800873e <acc_sweep_manager_start+0x1e>
 800872e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	4790      	blx	r2
 8008736:	b110      	cbz	r0, 800873e <acc_sweep_manager_start+0x1e>
 8008738:	2301      	movs	r3, #1
 800873a:	7423      	strb	r3, [r4, #16]
 800873c:	bd10      	pop	{r4, pc}
 800873e:	2000      	movs	r0, #0
 8008740:	bd10      	pop	{r4, pc}
 8008742:	bf00      	nop

08008744 <acc_sweep_manager_wait_for_data>:
 8008744:	b530      	push	{r4, r5, lr}
 8008746:	b085      	sub	sp, #20
 8008748:	6881      	ldr	r1, [r0, #8]
 800874a:	4605      	mov	r5, r0
 800874c:	aa02      	add	r2, sp, #8
 800874e:	6800      	ldr	r0, [r0, #0]
 8008750:	f003 ff52 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 8008754:	4604      	mov	r4, r0
 8008756:	b178      	cbz	r0, 8008778 <acc_sweep_manager_wait_for_data+0x34>
 8008758:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d00e      	beq.n	800877e <acc_sweep_manager_wait_for_data+0x3a>
 8008760:	2b06      	cmp	r3, #6
 8008762:	d023      	beq.n	80087ac <acc_sweep_manager_wait_for_data+0x68>
 8008764:	2b01      	cmp	r3, #1
 8008766:	d013      	beq.n	8008790 <acc_sweep_manager_wait_for_data+0x4c>
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	4a20      	ldr	r2, [pc, #128]	; (80087ec <acc_sweep_manager_wait_for_data+0xa8>)
 800876c:	4b20      	ldr	r3, [pc, #128]	; (80087f0 <acc_sweep_manager_wait_for_data+0xac>)
 800876e:	4921      	ldr	r1, [pc, #132]	; (80087f4 <acc_sweep_manager_wait_for_data+0xb0>)
 8008770:	2000      	movs	r0, #0
 8008772:	f001 fd25 	bl	800a1c0 <acc_log_rss>
 8008776:	2400      	movs	r4, #0
 8008778:	4620      	mov	r0, r4
 800877a:	b005      	add	sp, #20
 800877c:	bd30      	pop	{r4, r5, pc}
 800877e:	4a1e      	ldr	r2, [pc, #120]	; (80087f8 <acc_sweep_manager_wait_for_data+0xb4>)
 8008780:	491c      	ldr	r1, [pc, #112]	; (80087f4 <acc_sweep_manager_wait_for_data+0xb0>)
 8008782:	2000      	movs	r0, #0
 8008784:	f001 fd1c 	bl	800a1c0 <acc_log_rss>
 8008788:	2400      	movs	r4, #0
 800878a:	4620      	mov	r0, r4
 800878c:	b005      	add	sp, #20
 800878e:	bd30      	pop	{r4, r5, pc}
 8008790:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8008794:	f004 f93c 	bl	800ca10 <acc_sensor_protocol_get_error_message>
 8008798:	4a18      	ldr	r2, [pc, #96]	; (80087fc <acc_sweep_manager_wait_for_data+0xb8>)
 800879a:	4916      	ldr	r1, [pc, #88]	; (80087f4 <acc_sweep_manager_wait_for_data+0xb0>)
 800879c:	4603      	mov	r3, r0
 800879e:	2000      	movs	r0, #0
 80087a0:	f001 fd0e 	bl	800a1c0 <acc_log_rss>
 80087a4:	2400      	movs	r4, #0
 80087a6:	4620      	mov	r0, r4
 80087a8:	b005      	add	sp, #20
 80087aa:	bd30      	pop	{r4, r5, pc}
 80087ac:	4a14      	ldr	r2, [pc, #80]	; (8008800 <acc_sweep_manager_wait_for_data+0xbc>)
 80087ae:	4911      	ldr	r1, [pc, #68]	; (80087f4 <acc_sweep_manager_wait_for_data+0xb0>)
 80087b0:	2004      	movs	r0, #4
 80087b2:	f001 fd05 	bl	800a1c0 <acc_log_rss>
 80087b6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80087ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80087be:	f885 2058 	strb.w	r2, [r5, #88]	; 0x58
 80087c2:	b95b      	cbnz	r3, 80087dc <acc_sweep_manager_wait_for_data+0x98>
 80087c4:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	d0d5      	beq.n	8008778 <acc_sweep_manager_wait_for_data+0x34>
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <acc_sweep_manager_wait_for_data+0xc0>)
 80087ce:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <acc_sweep_manager_wait_for_data+0xc4>)
 80087d0:	4908      	ldr	r1, [pc, #32]	; (80087f4 <acc_sweep_manager_wait_for_data+0xb0>)
 80087d2:	2004      	movs	r0, #4
 80087d4:	462c      	mov	r4, r5
 80087d6:	f001 fcf3 	bl	800a1c0 <acc_log_rss>
 80087da:	e7cd      	b.n	8008778 <acc_sweep_manager_wait_for_data+0x34>
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <acc_sweep_manager_wait_for_data+0xc0>)
 80087de:	4a0b      	ldr	r2, [pc, #44]	; (800880c <acc_sweep_manager_wait_for_data+0xc8>)
 80087e0:	4904      	ldr	r1, [pc, #16]	; (80087f4 <acc_sweep_manager_wait_for_data+0xb0>)
 80087e2:	2004      	movs	r0, #4
 80087e4:	f001 fcec 	bl	800a1c0 <acc_log_rss>
 80087e8:	e7ec      	b.n	80087c4 <acc_sweep_manager_wait_for_data+0x80>
 80087ea:	bf00      	nop
 80087ec:	08016f78 	.word	0x08016f78
 80087f0:	08016e48 	.word	0x08016e48
 80087f4:	08016e80 	.word	0x08016e80
 80087f8:	08016f48 	.word	0x08016f48
 80087fc:	08016f28 	.word	0x08016f28
 8008800:	08016eb4 	.word	0x08016eb4
 8008804:	08016e5c 	.word	0x08016e5c
 8008808:	08016f0c 	.word	0x08016f0c
 800880c:	08016eec 	.word	0x08016eec

08008810 <acc_sweep_manager_transfer_data>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008814:	4605      	mov	r5, r0
 8008816:	699a      	ldr	r2, [r3, #24]
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	4790      	blx	r2
 800881c:	65e8      	str	r0, [r5, #92]	; 0x5c
 800881e:	b118      	cbz	r0, 8008828 <acc_sweep_manager_transfer_data+0x18>
 8008820:	2300      	movs	r3, #0
 8008822:	742b      	strb	r3, [r5, #16]
 8008824:	2001      	movs	r0, #1
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	4604      	mov	r4, r0
 800882a:	4a03      	ldr	r2, [pc, #12]	; (8008838 <acc_sweep_manager_transfer_data+0x28>)
 800882c:	4903      	ldr	r1, [pc, #12]	; (800883c <acc_sweep_manager_transfer_data+0x2c>)
 800882e:	f001 fcc7 	bl	800a1c0 <acc_log_rss>
 8008832:	4620      	mov	r0, r4
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	08016e90 	.word	0x08016e90
 800883c:	08016e80 	.word	0x08016e80

08008840 <acc_sweep_manager_update_data>:
 8008840:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008842:	b510      	push	{r4, lr}
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	4604      	mov	r4, r0
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	4790      	blx	r2
 800884c:	b108      	cbz	r0, 8008852 <acc_sweep_manager_update_data+0x12>
 800884e:	2301      	movs	r3, #1
 8008850:	7423      	strb	r3, [r4, #16]
 8008852:	bd10      	pop	{r4, pc}

08008854 <acc_sweep_manager_stop>:
 8008854:	b510      	push	{r4, lr}
 8008856:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008858:	7c01      	ldrb	r1, [r0, #16]
 800885a:	6a1a      	ldr	r2, [r3, #32]
 800885c:	4604      	mov	r4, r0
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	4790      	blx	r2
 8008862:	2300      	movs	r3, #0
 8008864:	7423      	strb	r3, [r4, #16]
 8008866:	bd10      	pop	{r4, pc}

08008868 <acc_alg_basic_math_q3_12_complex_mul>:
 8008868:	b322      	cbz	r2, 80088b4 <acc_alg_basic_math_q3_12_complex_mul+0x4c>
 800886a:	b4f0      	push	{r4, r5, r6, r7}
 800886c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008870:	3102      	adds	r1, #2
 8008872:	1c86      	adds	r6, r0, #2
 8008874:	f936 7c02 	ldrsh.w	r7, [r6, #-2]
 8008878:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 800887c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8008880:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008884:	fb13 f307 	smulbb	r3, r3, r7
 8008888:	fb04 3315 	mls	r3, r4, r5, r3
 800888c:	131b      	asrs	r3, r3, #12
 800888e:	f826 3c02 	strh.w	r3, [r6, #-2]
 8008892:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 8008896:	fb05 f507 	mul.w	r5, r5, r7
 800889a:	fb14 5403 	smlabb	r4, r4, r3, r5
 800889e:	1324      	asrs	r4, r4, #12
 80088a0:	8044      	strh	r4, [r0, #2]
 80088a2:	3004      	adds	r0, #4
 80088a4:	4282      	cmp	r2, r0
 80088a6:	f106 0604 	add.w	r6, r6, #4
 80088aa:	f101 0104 	add.w	r1, r1, #4
 80088ae:	d1e1      	bne.n	8008874 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 80088b0:	bcf0      	pop	{r4, r5, r6, r7}
 80088b2:	4770      	bx	lr
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 80088b8:	b203      	sxth	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	ea4f 4020 	mov.w	r0, r0, asr #16
 80088c0:	bfb8      	it	lt
 80088c2:	425b      	neglt	r3, r3
 80088c4:	2800      	cmp	r0, #0
 80088c6:	bfb8      	it	lt
 80088c8:	4240      	neglt	r0, r0
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	b200      	sxth	r0, r0
 80088ce:	4283      	cmp	r3, r0
 80088d0:	b082      	sub	sp, #8
 80088d2:	db02      	blt.n	80088da <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 80088d4:	4602      	mov	r2, r0
 80088d6:	4618      	mov	r0, r3
 80088d8:	4613      	mov	r3, r2
 80088da:	f240 62a1 	movw	r2, #1697	; 0x6a1
 80088de:	fb10 f202 	smulbb	r2, r0, r2
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	bfb8      	it	lt
 80088e6:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 80088ea:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 80088ee:	db0b      	blt.n	8008908 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 80088f0:	f640 02fa 	movw	r2, #2298	; 0x8fa
 80088f4:	fb13 f302 	smulbb	r3, r3, r2
 80088f8:	f640 5271 	movw	r2, #3441	; 0xd71
 80088fc:	fb10 3002 	smlabb	r0, r0, r2, r3
 8008900:	f340 300f 	sbfx	r0, r0, #12, #16
 8008904:	b002      	add	sp, #8
 8008906:	4770      	bx	lr
 8008908:	f240 3227 	movw	r2, #807	; 0x327
 800890c:	fb13 f302 	smulbb	r3, r3, r2
 8008910:	f640 72d7 	movw	r2, #4055	; 0xfd7
 8008914:	fb10 3002 	smlabb	r0, r0, r2, r3
 8008918:	f340 300f 	sbfx	r0, r0, #12, #16
 800891c:	b002      	add	sp, #8
 800891e:	4770      	bx	lr

08008920 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 8008920:	2900      	cmp	r1, #0
 8008922:	d055      	beq.n	80089d0 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xb0>
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800892c:	1c85      	adds	r5, r0, #2
 800892e:	f240 66a1 	movw	r6, #1697	; 0x6a1
 8008932:	f640 08fa 	movw	r8, #2298	; 0x8fa
 8008936:	f640 5e71 	movw	lr, #3441	; 0xd71
 800893a:	f240 3c27 	movw	ip, #807	; 0x327
 800893e:	f640 77d7 	movw	r7, #4055	; 0xfd7
 8008942:	e008      	b.n	8008956 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x36>
 8008944:	f825 3c02 	strh.w	r3, [r5, #-2]
 8008948:	3004      	adds	r0, #4
 800894a:	f820 3c02 	strh.w	r3, [r0, #-2]
 800894e:	4281      	cmp	r1, r0
 8008950:	f105 0504 	add.w	r5, r5, #4
 8008954:	d03a      	beq.n	80089cc <acc_alg_basic_math_q3_12_complex_conj_normalize+0xac>
 8008956:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 800895a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800895e:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 8008962:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 8008966:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 800896a:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 800896e:	b212      	sxth	r2, r2
 8008970:	b21b      	sxth	r3, r3
 8008972:	429a      	cmp	r2, r3
 8008974:	db02      	blt.n	800897c <acc_alg_basic_math_q3_12_complex_conj_normalize+0x5c>
 8008976:	469a      	mov	sl, r3
 8008978:	4613      	mov	r3, r2
 800897a:	4652      	mov	r2, sl
 800897c:	fb13 fa06 	smulbb	sl, r3, r6
 8008980:	f1ba 0f00 	cmp.w	sl, #0
 8008984:	bfb8      	it	lt
 8008986:	f60a 7aff 	addwlt	sl, sl, #4095	; 0xfff
 800898a:	ebb2 3f2a 	cmp.w	r2, sl, asr #12
 800898e:	bfb5      	itete	lt
 8008990:	fb12 f20c 	smulbblt	r2, r2, ip
 8008994:	fb12 f208 	smulbbge	r2, r2, r8
 8008998:	fb13 2307 	smlabblt	r3, r3, r7, r2
 800899c:	fb13 230e 	smlabbge	r3, r3, lr, r2
 80089a0:	f343 330f 	sbfx	r3, r3, #12, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d0cd      	beq.n	8008944 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x24>
 80089a8:	ebc4 5404 	rsb	r4, r4, r4, lsl #20
 80089ac:	0324      	lsls	r4, r4, #12
 80089ae:	ea4f 3909 	mov.w	r9, r9, lsl #12
 80089b2:	fb94 f4f3 	sdiv	r4, r4, r3
 80089b6:	3004      	adds	r0, #4
 80089b8:	fb99 f3f3 	sdiv	r3, r9, r3
 80089bc:	f825 3c02 	strh.w	r3, [r5, #-2]
 80089c0:	f820 4c02 	strh.w	r4, [r0, #-2]
 80089c4:	4281      	cmp	r1, r0
 80089c6:	f105 0504 	add.w	r5, r5, #4
 80089ca:	d1c4      	bne.n	8008956 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x36>
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <acc_alg_basic_math_q3_12_sin>:
 80089d4:	0043      	lsls	r3, r0, #1
 80089d6:	bf4c      	ite	mi
 80089d8:	43c3      	mvnmi	r3, r0
 80089da:	4603      	movpl	r3, r0
 80089dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80089e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089e4:	0d9b      	lsrs	r3, r3, #22
 80089e6:	4904      	ldr	r1, [pc, #16]	; (80089f8 <acc_alg_basic_math_q3_12_sin+0x24>)
 80089e8:	4602      	mov	r2, r0
 80089ea:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	bfbc      	itt	lt
 80089f2:	4240      	neglt	r0, r0
 80089f4:	b200      	sxthlt	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	08016f98 	.word	0x08016f98

080089fc <acc_alg_basic_math_q3_12_cos>:
 80089fc:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8008a00:	0053      	lsls	r3, r2, #1
 8008a02:	bf4c      	ite	mi
 8008a04:	43d3      	mvnmi	r3, r2
 8008a06:	4613      	movpl	r3, r2
 8008a08:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008a0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008a10:	0d9b      	lsrs	r3, r3, #22
 8008a12:	4904      	ldr	r1, [pc, #16]	; (8008a24 <acc_alg_basic_math_q3_12_cos+0x28>)
 8008a14:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	bfbc      	itt	lt
 8008a1c:	4240      	neglt	r0, r0
 8008a1e:	b200      	sxthlt	r0, r0
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	08016f98 	.word	0x08016f98

08008a28 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 8008a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8008d10 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2e8>
 8008a30:	eeb0 0ac0 	vabs.f32	s0, s0
 8008a34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3c:	ed2d 8b02 	vpush	{d8}
 8008a40:	4607      	mov	r7, r0
 8008a42:	4689      	mov	r9, r1
 8008a44:	4616      	mov	r6, r2
 8008a46:	4698      	mov	r8, r3
 8008a48:	dc74      	bgt.n	8008b34 <acc_alg_biquad_q3_12_lowpass_coeffs+0x10c>
 8008a4a:	eddf 7ab2 	vldr	s15, [pc, #712]	; 8008d14 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 8008a4e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a52:	f008 fe75 	bl	8011740 <roundf>
 8008a56:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8008d18 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f0>
 8008a5a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8008d1c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f4>
 8008a5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a62:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008a66:	f008 fe91 	bl	801178c <tanf>
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	d067      	beq.n	8008b3e <acc_alg_biquad_q3_12_lowpass_coeffs+0x116>
 8008a6e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8008d20 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f8>
 8008a72:	eddf 7aac 	vldr	s15, [pc, #688]	; 8008d24 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 8008a76:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7e:	ee30 7a27 	vadd.f32	s14, s0, s15
 8008a82:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008a86:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008a8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a8e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008a92:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8008a96:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008a9a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008a9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	eef1 5ac7 	vsqrt.f32	s11, s14
 8008aaa:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 8008aae:	f100 8105 	bmi.w	8008cbc <acc_alg_biquad_q3_12_lowpass_coeffs+0x294>
 8008ab2:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8008d28 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 8008ab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008aba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aca:	ee17 3a90 	vmov	r3, s15
 8008ace:	fb03 f203 	mul.w	r2, r3, r3
 8008ad2:	f1c2 6280 	rsb	r2, r2, #67108864	; 0x4000000
 8008ad6:	ee07 2a90 	vmov	s15, r2
 8008ada:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ade:	eef1 7ac7 	vsqrt.f32	s15, s14
 8008ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aee:	ee17 4a90 	vmov	r4, s15
 8008af2:	2c00      	cmp	r4, #0
 8008af4:	d161      	bne.n	8008bba <acc_alg_biquad_q3_12_lowpass_coeffs+0x192>
 8008af6:	f1b9 0f00 	cmp.w	r9, #0
 8008afa:	d00b      	beq.n	8008b14 <acc_alg_biquad_q3_12_lowpass_coeffs+0xec>
 8008afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b00:	f8a9 4002 	strh.w	r4, [r9, #2]
 8008b04:	f8a9 4004 	strh.w	r4, [r9, #4]
 8008b08:	f8a9 4006 	strh.w	r4, [r9, #6]
 8008b0c:	f8a9 4008 	strh.w	r4, [r9, #8]
 8008b10:	f8a9 3000 	strh.w	r3, [r9]
 8008b14:	b116      	cbz	r6, 8008b1c <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 8008b16:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8008b1a:	6033      	str	r3, [r6, #0]
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	f1b8 0f00 	cmp.w	r8, #0
 8008b22:	d003      	beq.n	8008b2c <acc_alg_biquad_q3_12_lowpass_coeffs+0x104>
 8008b24:	2300      	movs	r3, #0
 8008b26:	2000      	movs	r0, #0
 8008b28:	f8c8 3000 	str.w	r3, [r8]
 8008b2c:	ecbd 8b02 	vpop	{d8}
 8008b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f040 80d5 	bne.w	8008ce4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2bc>
 8008b3a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8008d2c <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 8008b3e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8008d24 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 8008b42:	ee30 7a27 	vadd.f32	s14, s0, s15
 8008b46:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008b52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008b56:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8008b5a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8008b5e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b62:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008b66:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6e:	eef1 5ac7 	vsqrt.f32	s11, s14
 8008b72:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 8008b76:	d59c      	bpl.n	8008ab2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x8a>
 8008b78:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008d30 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 8008b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008b84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b8c:	ee17 4a90 	vmov	r4, s15
 8008b90:	00a5      	lsls	r5, r4, #2
 8008b92:	fb04 f505 	mul.w	r5, r4, r5
 8008b96:	f1c5 6580 	rsb	r5, r5, #67108864	; 0x4000000
 8008b9a:	ee07 5a90 	vmov	s15, r5
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008ba6:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8008baa:	ee77 7a26 	vadd.f32	s15, s14, s13
 8008bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bb2:	ee17 3a90 	vmov	r3, s15
 8008bb6:	2c00      	cmp	r4, #0
 8008bb8:	d09d      	beq.n	8008af6 <acc_alg_biquad_q3_12_lowpass_coeffs+0xce>
 8008bba:	f1b9 0f00 	cmp.w	r9, #0
 8008bbe:	d018      	beq.n	8008bf2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1ca>
 8008bc0:	b2a2      	uxth	r2, r4
 8008bc2:	f5c2 5080 	rsb	r0, r2, #4096	; 0x1000
 8008bc6:	b280      	uxth	r0, r0
 8008bc8:	b205      	sxth	r5, r0
 8008bca:	b299      	uxth	r1, r3
 8008bcc:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 8008bd0:	f8a9 5000 	strh.w	r5, [r9]
 8008bd4:	f8a9 5004 	strh.w	r5, [r9, #4]
 8008bd8:	f5c4 55c0 	rsb	r5, r4, #6144	; 0x1800
 8008bdc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008be0:	0040      	lsls	r0, r0, #1
 8008be2:	ebc1 0145 	rsb	r1, r1, r5, lsl #1
 8008be6:	f8a9 0002 	strh.w	r0, [r9, #2]
 8008bea:	f8a9 2006 	strh.w	r2, [r9, #6]
 8008bee:	f8a9 1008 	strh.w	r1, [r9, #8]
 8008bf2:	b923      	cbnz	r3, 8008bfe <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d6>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	d091      	beq.n	8008b1c <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6033      	str	r3, [r6, #0]
 8008bfc:	e78e      	b.n	8008b1c <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d073      	beq.n	8008cea <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c2>
 8008c02:	00a2      	lsls	r2, r4, #2
 8008c04:	fb03 f103 	mul.w	r1, r3, r3
 8008c08:	fb04 1202 	mla	r2, r4, r2, r1
 8008c0c:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
 8008c10:	f102 427c 	add.w	r2, r2, #4227858432	; 0xfc000000
 8008c14:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8008c18:	0052      	lsls	r2, r2, #1
 8008c1a:	fb04 f404 	mul.w	r4, r4, r4
 8008c1e:	1aa4      	subs	r4, r4, r2
 8008c20:	ee07 4a90 	vmov	s15, r4
 8008c24:	ee07 2a10 	vmov	s14, r2
 8008c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c30:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8008c34:	b356      	cbz	r6, 8008c8c <acc_alg_biquad_q3_12_lowpass_coeffs+0x264>
 8008c36:	2f00      	cmp	r7, #0
 8008c38:	d05c      	beq.n	8008cf4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2cc>
 8008c3a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008d34 <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 8008c3e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8008d24 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 8008c42:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8008d38 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 8008c46:	ee78 6a26 	vadd.f32	s13, s16, s13
 8008c4a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008c4e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008c52:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c56:	eef1 6ac7 	vsqrt.f32	s13, s14
 8008c5a:	f5c3 5100 	rsb	r1, r3, #8192	; 0x2000
 8008c5e:	0049      	lsls	r1, r1, #1
 8008c60:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8008c64:	ee07 1a90 	vmov	s15, r1
 8008c68:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c70:	eef1 6ac7 	vsqrt.f32	s13, s14
 8008c74:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8008c78:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008c7c:	f008 fc84 	bl	8011588 <atanf>
 8008c80:	eddf 7a26 	vldr	s15, [pc, #152]	; 8008d1c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f4>
 8008c84:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8008c88:	ed86 0a00 	vstr	s0, [r6]
 8008c8c:	f1b8 0f00 	cmp.w	r8, #0
 8008c90:	d02e      	beq.n	8008cf0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c8>
 8008c92:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8008d3c <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 8008c96:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008d40 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 8008c9a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8008c9e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008ca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	ee28 8a67 	vnmul.f32	s16, s16, s15
 8008cac:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8008cb0:	ecbd 8b02 	vpop	{d8}
 8008cb4:	edc8 7a00 	vstr	s15, [r8]
 8008cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cbc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc4:	f77f af58 	ble.w	8008b78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x150>
 8008cc8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008d44 <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 8008ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cdc:	ee17 3a90 	vmov	r3, s15
 8008ce0:	005c      	lsls	r4, r3, #1
 8008ce2:	e755      	b.n	8008b90 <acc_alg_biquad_q3_12_lowpass_coeffs+0x168>
 8008ce4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008d48 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 8008ce8:	e746      	b.n	8008b78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x150>
 8008cea:	f1b8 0f00 	cmp.w	r8, #0
 8008cee:	d188      	bne.n	8008c02 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1da>
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e71b      	b.n	8008b2c <acc_alg_biquad_q3_12_lowpass_coeffs+0x104>
 8008cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cf8:	ee78 6a07 	vadd.f32	s13, s16, s14
 8008cfc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008d00:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8008d04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008d08:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008d0c:	e7a3      	b.n	8008c56 <acc_alg_biquad_q3_12_lowpass_coeffs+0x22e>
 8008d0e:	bf00      	nop
 8008d10:	3effffde 	.word	0x3effffde
 8008d14:	48800000 	.word	0x48800000
 8008d18:	36800000 	.word	0x36800000
 8008d1c:	40490fdb 	.word	0x40490fdb
 8008d20:	3f9f8d77 	.word	0x3f9f8d77
 8008d24:	3fb504f3 	.word	0x3fb504f3
 8008d28:	46000000 	.word	0x46000000
 8008d2c:	cbae8a4a 	.word	0xcbae8a4a
 8008d30:	45800000 	.word	0x45800000
 8008d34:	3f15f61a 	.word	0x3f15f61a
 8008d38:	3f95f61a 	.word	0x3f95f61a
 8008d3c:	4113c6ef 	.word	0x4113c6ef
 8008d40:	42a646e1 	.word	0x42a646e1
 8008d44:	45000000 	.word	0x45000000
 8008d48:	3354ff7f 	.word	0x3354ff7f

08008d4c <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt>:
 8008d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4e:	2400      	movs	r4, #0
 8008d50:	b083      	sub	sp, #12
 8008d52:	4623      	mov	r3, r4
 8008d54:	4605      	mov	r5, r0
 8008d56:	460e      	mov	r6, r1
 8008d58:	4617      	mov	r7, r2
 8008d5a:	9401      	str	r4, [sp, #4]
 8008d5c:	f7f7 fa3c 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	463a      	mov	r2, r7
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	b003      	add	sp, #12
 8008d6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008d6e:	f7f7 ba2f 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 8008d72:	bf00      	nop

08008d74 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	2300      	movs	r3, #0
 8008d78:	b082      	sub	sp, #8
 8008d7a:	4615      	mov	r5, r2
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	4606      	mov	r6, r0
 8008d80:	f7f7 fa2a 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 8008d84:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008d8e:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 8008d92:	8852      	ldrh	r2, [r2, #2]
 8008d94:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008d98:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008d9c:	9b01      	ldr	r3, [sp, #4]
 8008d9e:	4630      	mov	r0, r6
 8008da0:	462a      	mov	r2, r5
 8008da2:	4621      	mov	r1, r4
 8008da4:	b002      	add	sp, #8
 8008da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008daa:	f7f7 ba11 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 8008dae:	bf00      	nop

08008db0 <allocate_threshold.isra.0>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	680b      	ldr	r3, [r1, #0]
 8008db4:	b133      	cbz	r3, 8008dc4 <allocate_threshold.isra.0+0x14>
 8008db6:	4a0e      	ldr	r2, [pc, #56]	; (8008df0 <allocate_threshold.isra.0+0x40>)
 8008db8:	490e      	ldr	r1, [pc, #56]	; (8008df4 <allocate_threshold.isra.0+0x44>)
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f001 fa00 	bl	800a1c0 <acc_log_rss>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	4607      	mov	r7, r0
 8008dca:	f240 2219 	movw	r2, #537	; 0x219
 8008dce:	490a      	ldr	r1, [pc, #40]	; (8008df8 <allocate_threshold.isra.0+0x48>)
 8008dd0:	0070      	lsls	r0, r6, #1
 8008dd2:	f001 f9a9 	bl	800a128 <acc_integration_mem_alloc_debug>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	6028      	str	r0, [r5, #0]
 8008dda:	b110      	cbz	r0, 8008de2 <allocate_threshold.isra.0+0x32>
 8008ddc:	803e      	strh	r6, [r7, #0]
 8008dde:	2001      	movs	r0, #1
 8008de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de2:	4a06      	ldr	r2, [pc, #24]	; (8008dfc <allocate_threshold.isra.0+0x4c>)
 8008de4:	4903      	ldr	r1, [pc, #12]	; (8008df4 <allocate_threshold.isra.0+0x44>)
 8008de6:	f001 f9eb 	bl	800a1c0 <acc_log_rss>
 8008dea:	4620      	mov	r0, r4
 8008dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dee:	bf00      	nop
 8008df0:	08017314 	.word	0x08017314
 8008df4:	08017330 	.word	0x08017330
 8008df8:	08017350 	.word	0x08017350
 8008dfc:	08017370 	.word	0x08017370

08008e00 <threshold_estimation_create_threshold>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8008e08:	b082      	sub	sp, #8
 8008e0a:	b97c      	cbnz	r4, 8008e2c <threshold_estimation_create_threshold+0x2c>
 8008e0c:	6a06      	ldr	r6, [r0, #32]
 8008e0e:	4605      	mov	r5, r0
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	d04c      	beq.n	8008eae <threshold_estimation_create_threshold+0xae>
 8008e14:	8882      	ldrh	r2, [r0, #4]
 8008e16:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8008e1a:	3004      	adds	r0, #4
 8008e1c:	f7ff ffc8 	bl	8008db0 <allocate_threshold.isra.0>
 8008e20:	4606      	mov	r6, r0
 8008e22:	b968      	cbnz	r0, 8008e40 <threshold_estimation_create_threshold+0x40>
 8008e24:	4630      	mov	r0, r6
 8008e26:	b002      	add	sp, #8
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2c:	4a27      	ldr	r2, [pc, #156]	; (8008ecc <threshold_estimation_create_threshold+0xcc>)
 8008e2e:	4928      	ldr	r1, [pc, #160]	; (8008ed0 <threshold_estimation_create_threshold+0xd0>)
 8008e30:	2000      	movs	r0, #0
 8008e32:	f001 f9c5 	bl	800a1c0 <acc_log_rss>
 8008e36:	2600      	movs	r6, #0
 8008e38:	4630      	mov	r0, r6
 8008e3a:	b002      	add	sp, #8
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e40:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008ed4 <threshold_estimation_create_threshold+0xd4>
 8008e44:	ed95 0a0b 	vldr	s0, [r5, #44]	; 0x2c
 8008e48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e4c:	f008 fd9c 	bl	8011988 <logf>
 8008e50:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008ed8 <threshold_estimation_create_threshold+0xd8>
 8008e54:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008edc <threshold_estimation_create_threshold+0xdc>
 8008e58:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008ee0 <threshold_estimation_create_threshold+0xe0>
 8008e5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008e5e:	6a28      	ldr	r0, [r5, #32]
 8008e60:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008e64:	2101      	movs	r1, #1
 8008e66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008e6a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008e6e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008e72:	f000 fa2d 	bl	80092d0 <acc_alg_estimate_threshold_get>
 8008e76:	88ab      	ldrh	r3, [r5, #4]
 8008e78:	4606      	mov	r6, r0
 8008e7a:	b183      	cbz	r3, 8008e9e <threshold_estimation_create_threshold+0x9e>
 8008e7c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8008eec <threshold_estimation_create_threshold+0xec>
 8008e80:	4f13      	ldr	r7, [pc, #76]	; (8008ed0 <threshold_estimation_create_threshold+0xd0>)
 8008e82:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008e84:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	4623      	mov	r3, r4
 8008e8e:	4639      	mov	r1, r7
 8008e90:	2004      	movs	r0, #4
 8008e92:	f001 f995 	bl	800a1c0 <acc_log_rss>
 8008e96:	88ab      	ldrh	r3, [r5, #4]
 8008e98:	3401      	adds	r4, #1
 8008e9a:	429c      	cmp	r4, r3
 8008e9c:	d3f1      	bcc.n	8008e82 <threshold_estimation_create_threshold+0x82>
 8008e9e:	b17e      	cbz	r6, 8008ec0 <threshold_estimation_create_threshold+0xc0>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8008ea8:	b002      	add	sp, #8
 8008eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eae:	4630      	mov	r0, r6
 8008eb0:	4a0c      	ldr	r2, [pc, #48]	; (8008ee4 <threshold_estimation_create_threshold+0xe4>)
 8008eb2:	4907      	ldr	r1, [pc, #28]	; (8008ed0 <threshold_estimation_create_threshold+0xd0>)
 8008eb4:	f001 f984 	bl	800a1c0 <acc_log_rss>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	b002      	add	sp, #8
 8008ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec0:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <threshold_estimation_create_threshold+0xe8>)
 8008ec2:	4903      	ldr	r1, [pc, #12]	; (8008ed0 <threshold_estimation_create_threshold+0xd0>)
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f001 f97b 	bl	800a1c0 <acc_log_rss>
 8008eca:	e7ab      	b.n	8008e24 <threshold_estimation_create_threshold+0x24>
 8008ecc:	08017394 	.word	0x08017394
 8008ed0:	08017330 	.word	0x08017330
 8008ed4:	0da24260 	.word	0x0da24260
 8008ed8:	41787ae1 	.word	0x41787ae1
 8008edc:	4107fbe7 	.word	0x4107fbe7
 8008ee0:	3ff4dd2f 	.word	0x3ff4dd2f
 8008ee4:	080173dc 	.word	0x080173dc
 8008ee8:	08017414 	.word	0x08017414
 8008eec:	08017400 	.word	0x08017400

08008ef0 <acc_alg_distance_peak_detect_detection_prepare>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008ef4:	b08a      	sub	sp, #40	; 0x28
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	460e      	mov	r6, r1
 8008efa:	b1fc      	cbz	r4, 8008f3c <acc_alg_distance_peak_detect_detection_prepare+0x4c>
 8008efc:	88ab      	ldrh	r3, [r5, #4]
 8008efe:	42b3      	cmp	r3, r6
 8008f00:	d114      	bne.n	8008f2c <acc_alg_distance_peak_detect_detection_prepare+0x3c>
 8008f02:	edd5 7a02 	vldr	s15, [r5, #8]
 8008f06:	eef4 7a40 	vcmp.f32	s15, s0
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	d10d      	bne.n	8008f2c <acc_alg_distance_peak_detect_detection_prepare+0x3c>
 8008f10:	edd5 7a03 	vldr	s15, [r5, #12]
 8008f14:	eef4 7a60 	vcmp.f32	s15, s1
 8008f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1c:	d106      	bne.n	8008f2c <acc_alg_distance_peak_detect_detection_prepare+0x3c>
 8008f1e:	69ab      	ldr	r3, [r5, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8095 	beq.w	8009050 <acc_alg_distance_peak_detect_detection_prepare+0x160>
 8008f26:	2001      	movs	r0, #1
 8008f28:	b00a      	add	sp, #40	; 0x28
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	4a4d      	ldr	r2, [pc, #308]	; (8009064 <acc_alg_distance_peak_detect_detection_prepare+0x174>)
 8008f2e:	494e      	ldr	r1, [pc, #312]	; (8009068 <acc_alg_distance_peak_detect_detection_prepare+0x178>)
 8008f30:	2000      	movs	r0, #0
 8008f32:	f001 f945 	bl	800a1c0 <acc_log_rss>
 8008f36:	2000      	movs	r0, #0
 8008f38:	b00a      	add	sp, #40	; 0x28
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d010      	beq.n	8008f66 <acc_alg_distance_peak_detect_detection_prepare+0x76>
 8008f44:	d302      	bcc.n	8008f4c <acc_alg_distance_peak_detect_detection_prepare+0x5c>
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d0f5      	beq.n	8008f36 <acc_alg_distance_peak_detect_detection_prepare+0x46>
 8008f4a:	e7d7      	b.n	8008efc <acc_alg_distance_peak_detect_detection_prepare+0xc>
 8008f4c:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 8008f50:	ed8d 0a08 	vstr	s0, [sp, #32]
 8008f54:	f7ff ff54 	bl	8008e00 <threshold_estimation_create_threshold>
 8008f58:	ed9d 0a08 	vldr	s0, [sp, #32]
 8008f5c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d0e8      	beq.n	8008f36 <acc_alg_distance_peak_detect_detection_prepare+0x46>
 8008f64:	e7ca      	b.n	8008efc <acc_alg_distance_peak_detect_detection_prepare+0xc>
 8008f66:	460a      	mov	r2, r1
 8008f68:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8008f6c:	3004      	adds	r0, #4
 8008f6e:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 8008f72:	ed8d 0a08 	vstr	s0, [sp, #32]
 8008f76:	f7ff ff1b 	bl	8008db0 <allocate_threshold.isra.0>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0db      	beq.n	8008f36 <acc_alg_distance_peak_detect_detection_prepare+0x46>
 8008f7e:	ed9d 0a08 	vldr	s0, [sp, #32]
 8008f82:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8008f86:	88ab      	ldrh	r3, [r5, #4]
 8008f88:	ed85 0a02 	vstr	s0, [r5, #8]
 8008f8c:	edc5 0a03 	vstr	s1, [r5, #12]
 8008f90:	b143      	cbz	r3, 8008fa4 <acc_alg_distance_peak_detect_detection_prepare+0xb4>
 8008f92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008f94:	3b02      	subs	r3, #2
 8008f96:	8a2a      	ldrh	r2, [r5, #16]
 8008f98:	f823 2f02 	strh.w	r2, [r3, #2]!
 8008f9c:	88aa      	ldrh	r2, [r5, #4]
 8008f9e:	3401      	adds	r4, #1
 8008fa0:	42a2      	cmp	r2, r4
 8008fa2:	d8f8      	bhi.n	8008f96 <acc_alg_distance_peak_detect_detection_prepare+0xa6>
 8008fa4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800906c <acc_alg_distance_peak_detect_detection_prepare+0x17c>
 8008fb0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009070 <acc_alg_distance_peak_detect_detection_prepare+0x180>
 8008fb4:	8a2a      	ldrh	r2, [r5, #16]
 8008fb6:	9200      	str	r2, [sp, #0]
 8008fb8:	bf4c      	ite	mi
 8008fba:	eef1 7a40 	vnegmi.f32	s15, s0
 8008fbe:	eef0 7a40 	vmovpl.f32	s15, s0
 8008fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8008fca:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8008fce:	bf48      	it	mi
 8008fd0:	212d      	movmi	r1, #45	; 0x2d
 8008fd2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8008fd6:	bf58      	it	pl
 8008fd8:	2120      	movpl	r1, #32
 8008fda:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fe6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800906c <acc_alg_distance_peak_detect_detection_prepare+0x17c>
 8008fea:	edcd 6a02 	vstr	s13, [sp, #8]
 8008fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff2:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8009070 <acc_alg_distance_peak_detect_detection_prepare+0x180>
 8008ff6:	9101      	str	r1, [sp, #4]
 8008ff8:	ee17 3a90 	vmov	r3, s15
 8008ffc:	bf4c      	ite	mi
 8008ffe:	eef1 7a60 	vnegmi.f32	s15, s1
 8009002:	eef0 7a60 	vmovpl.f32	s15, s1
 8009006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800900a:	bf48      	it	mi
 800900c:	202d      	movmi	r0, #45	; 0x2d
 800900e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009012:	bf58      	it	pl
 8009014:	2020      	movpl	r0, #32
 8009016:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800901a:	9004      	str	r0, [sp, #16]
 800901c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009026:	ed8d 7a05 	vstr	s14, [sp, #20]
 800902a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902e:	4633      	mov	r3, r6
 8009030:	edcd 7a06 	vstr	s15, [sp, #24]
 8009034:	4a0f      	ldr	r2, [pc, #60]	; (8009074 <acc_alg_distance_peak_detect_detection_prepare+0x184>)
 8009036:	490c      	ldr	r1, [pc, #48]	; (8009068 <acc_alg_distance_peak_detect_detection_prepare+0x178>)
 8009038:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 800903c:	2004      	movs	r0, #4
 800903e:	ed8d 0a08 	vstr	s0, [sp, #32]
 8009042:	f001 f8bd 	bl	800a1c0 <acc_log_rss>
 8009046:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800904a:	ed9d 0a08 	vldr	s0, [sp, #32]
 800904e:	e755      	b.n	8008efc <acc_alg_distance_peak_detect_detection_prepare+0xc>
 8009050:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
 8009054:	78a8      	ldrb	r0, [r5, #2]
 8009056:	f000 fb39 	bl	80096cc <acc_alg_reflection_detection_allocate>
 800905a:	61a8      	str	r0, [r5, #24]
 800905c:	3000      	adds	r0, #0
 800905e:	bf18      	it	ne
 8009060:	2001      	movne	r0, #1
 8009062:	e769      	b.n	8008f38 <acc_alg_distance_peak_detect_detection_prepare+0x48>
 8009064:	0801721c 	.word	0x0801721c
 8009068:	08017330 	.word	0x08017330
 800906c:	350637bd 	.word	0x350637bd
 8009070:	49742400 	.word	0x49742400
 8009074:	080171bc 	.word	0x080171bc

08009078 <acc_alg_distance_peak_detect_get_reflections>:
 8009078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	6986      	ldr	r6, [r0, #24]
 800907e:	b082      	sub	sp, #8
 8009080:	2e00      	cmp	r6, #0
 8009082:	d061      	beq.n	8009148 <acc_alg_distance_peak_detect_get_reflections+0xd0>
 8009084:	4604      	mov	r4, r0
 8009086:	6940      	ldr	r0, [r0, #20]
 8009088:	2800      	cmp	r0, #0
 800908a:	d037      	beq.n	80090fc <acc_alg_distance_peak_detect_get_reflections+0x84>
 800908c:	4288      	cmp	r0, r1
 800908e:	d83a      	bhi.n	8009106 <acc_alg_distance_peak_detect_get_reflections+0x8e>
 8009090:	4934      	ldr	r1, [pc, #208]	; (8009164 <acc_alg_distance_peak_detect_get_reflections+0xec>)
 8009092:	4615      	mov	r5, r2
 8009094:	0040      	lsls	r0, r0, #1
 8009096:	22dd      	movs	r2, #221	; 0xdd
 8009098:	f001 f846 	bl	800a128 <acc_integration_mem_alloc_debug>
 800909c:	4607      	mov	r7, r0
 800909e:	6960      	ldr	r0, [r4, #20]
 80090a0:	4930      	ldr	r1, [pc, #192]	; (8009164 <acc_alg_distance_peak_detect_get_reflections+0xec>)
 80090a2:	0080      	lsls	r0, r0, #2
 80090a4:	22de      	movs	r2, #222	; 0xde
 80090a6:	f001 f83f 	bl	800a128 <acc_integration_mem_alloc_debug>
 80090aa:	4680      	mov	r8, r0
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	d03b      	beq.n	8009128 <acc_alg_distance_peak_detect_get_reflections+0xb0>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d039      	beq.n	8009128 <acc_alg_distance_peak_detect_get_reflections+0xb0>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4639      	mov	r1, r7
 80090b8:	69a0      	ldr	r0, [r4, #24]
 80090ba:	f000 fc41 	bl	8009940 <acc_alg_reflection_detection_result>
 80090be:	4606      	mov	r6, r0
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d04a      	beq.n	800915a <acc_alg_distance_peak_detect_get_reflections+0xe2>
 80090c4:	6963      	ldr	r3, [r4, #20]
 80090c6:	b17b      	cbz	r3, 80090e8 <acc_alg_distance_peak_detect_get_reflections+0x70>
 80090c8:	eb07 0c43 	add.w	ip, r7, r3, lsl #1
 80090cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80090d0:	462a      	mov	r2, r5
 80090d2:	1ebb      	subs	r3, r7, #2
 80090d4:	4641      	mov	r1, r8
 80090d6:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 80090da:	f851 0b04 	ldr.w	r0, [r1], #4
 80090de:	8094      	strh	r4, [r2, #4]
 80090e0:	4563      	cmp	r3, ip
 80090e2:	f842 0b08 	str.w	r0, [r2], #8
 80090e6:	d1f6      	bne.n	80090d6 <acc_alg_distance_peak_detect_get_reflections+0x5e>
 80090e8:	4638      	mov	r0, r7
 80090ea:	f001 f857 	bl	800a19c <acc_integration_mem_free>
 80090ee:	4640      	mov	r0, r8
 80090f0:	f001 f854 	bl	800a19c <acc_integration_mem_free>
 80090f4:	4630      	mov	r0, r6
 80090f6:	b002      	add	sp, #8
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	2601      	movs	r6, #1
 80090fe:	4630      	mov	r0, r6
 8009100:	b002      	add	sp, #8
 8009102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009106:	460b      	mov	r3, r1
 8009108:	9000      	str	r0, [sp, #0]
 800910a:	4a17      	ldr	r2, [pc, #92]	; (8009168 <acc_alg_distance_peak_detect_get_reflections+0xf0>)
 800910c:	4917      	ldr	r1, [pc, #92]	; (800916c <acc_alg_distance_peak_detect_get_reflections+0xf4>)
 800910e:	2000      	movs	r0, #0
 8009110:	f001 f856 	bl	800a1c0 <acc_log_rss>
 8009114:	4a16      	ldr	r2, [pc, #88]	; (8009170 <acc_alg_distance_peak_detect_get_reflections+0xf8>)
 8009116:	4915      	ldr	r1, [pc, #84]	; (800916c <acc_alg_distance_peak_detect_get_reflections+0xf4>)
 8009118:	2000      	movs	r0, #0
 800911a:	f001 f851 	bl	800a1c0 <acc_log_rss>
 800911e:	2600      	movs	r6, #0
 8009120:	4630      	mov	r0, r6
 8009122:	b002      	add	sp, #8
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	4638      	mov	r0, r7
 800912a:	f001 f837 	bl	800a19c <acc_integration_mem_free>
 800912e:	4640      	mov	r0, r8
 8009130:	f001 f834 	bl	800a19c <acc_integration_mem_free>
 8009134:	4a0f      	ldr	r2, [pc, #60]	; (8009174 <acc_alg_distance_peak_detect_get_reflections+0xfc>)
 8009136:	490d      	ldr	r1, [pc, #52]	; (800916c <acc_alg_distance_peak_detect_get_reflections+0xf4>)
 8009138:	2000      	movs	r0, #0
 800913a:	f001 f841 	bl	800a1c0 <acc_log_rss>
 800913e:	2600      	movs	r6, #0
 8009140:	4630      	mov	r0, r6
 8009142:	b002      	add	sp, #8
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009148:	4630      	mov	r0, r6
 800914a:	4a0b      	ldr	r2, [pc, #44]	; (8009178 <acc_alg_distance_peak_detect_get_reflections+0x100>)
 800914c:	4907      	ldr	r1, [pc, #28]	; (800916c <acc_alg_distance_peak_detect_get_reflections+0xf4>)
 800914e:	f001 f837 	bl	800a1c0 <acc_log_rss>
 8009152:	4630      	mov	r0, r6
 8009154:	b002      	add	sp, #8
 8009156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <acc_alg_distance_peak_detect_get_reflections+0x104>)
 800915c:	4903      	ldr	r1, [pc, #12]	; (800916c <acc_alg_distance_peak_detect_get_reflections+0xf4>)
 800915e:	f001 f82f 	bl	800a1c0 <acc_log_rss>
 8009162:	e7c1      	b.n	80090e8 <acc_alg_distance_peak_detect_get_reflections+0x70>
 8009164:	08017350 	.word	0x08017350
 8009168:	08017278 	.word	0x08017278
 800916c:	08017330 	.word	0x08017330
 8009170:	080172b4 	.word	0x080172b4
 8009174:	0801685c 	.word	0x0801685c
 8009178:	08017264 	.word	0x08017264
 800917c:	080172e4 	.word	0x080172e4

08009180 <acc_alg_distance_peak_detect_set_threshold_mode_fixed>:
 8009180:	4603      	mov	r3, r0
 8009182:	2200      	movs	r2, #0
 8009184:	2001      	movs	r0, #1
 8009186:	8219      	strh	r1, [r3, #16]
 8009188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800918c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop

08009194 <acc_alg_distance_peak_detect_set_absolute_amplitude>:
 8009194:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8009198:	2001      	movs	r0, #1
 800919a:	4770      	bx	lr

0800919c <acc_alg_distance_peak_detect_get_number_of_reflections>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	ed2d 8b02 	vpush	{d8}
 80091a2:	460e      	mov	r6, r1
 80091a4:	b083      	sub	sp, #12
 80091a6:	4611      	mov	r1, r2
 80091a8:	461f      	mov	r7, r3
 80091aa:	4605      	mov	r5, r0
 80091ac:	eeb0 8a40 	vmov.f32	s16, s0
 80091b0:	eef0 8a60 	vmov.f32	s17, s1
 80091b4:	f7ff fe9c 	bl	8008ef0 <acc_alg_distance_peak_detect_detection_prepare>
 80091b8:	4604      	mov	r4, r0
 80091ba:	b920      	cbnz	r0, 80091c6 <acc_alg_distance_peak_detect_get_number_of_reflections+0x2a>
 80091bc:	4620      	mov	r0, r4
 80091be:	b003      	add	sp, #12
 80091c0:	ecbd 8b02 	vpop	{d8}
 80091c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c6:	f105 0414 	add.w	r4, r5, #20
 80091ca:	ed95 1a07 	vldr	s2, [r5, #28]
 80091ce:	88ab      	ldrh	r3, [r5, #4]
 80091d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80091d2:	69a8      	ldr	r0, [r5, #24]
 80091d4:	9400      	str	r4, [sp, #0]
 80091d6:	eef0 0a68 	vmov.f32	s1, s17
 80091da:	eeb0 0a48 	vmov.f32	s0, s16
 80091de:	4631      	mov	r1, r6
 80091e0:	f000 faa2 	bl	8009728 <acc_alg_reflection_detection_size>
 80091e4:	4604      	mov	r4, r0
 80091e6:	b130      	cbz	r0, 80091f6 <acc_alg_distance_peak_detect_get_number_of_reflections+0x5a>
 80091e8:	696b      	ldr	r3, [r5, #20]
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	4620      	mov	r0, r4
 80091ee:	b003      	add	sp, #12
 80091f0:	ecbd 8b02 	vpop	{d8}
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f6:	4a04      	ldr	r2, [pc, #16]	; (8009208 <acc_alg_distance_peak_detect_get_number_of_reflections+0x6c>)
 80091f8:	4904      	ldr	r1, [pc, #16]	; (800920c <acc_alg_distance_peak_detect_get_number_of_reflections+0x70>)
 80091fa:	f000 ffe1 	bl	800a1c0 <acc_log_rss>
 80091fe:	4620      	mov	r0, r4
 8009200:	b003      	add	sp, #12
 8009202:	ecbd 8b02 	vpop	{d8}
 8009206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009208:	08017238 	.word	0x08017238
 800920c:	08017330 	.word	0x08017330

08009210 <acc_alg_distance_peak_detect_create_detector>:
 8009210:	b510      	push	{r4, lr}
 8009212:	f240 1289 	movw	r2, #393	; 0x189
 8009216:	4910      	ldr	r1, [pc, #64]	; (8009258 <acc_alg_distance_peak_detect_create_detector+0x48>)
 8009218:	2034      	movs	r0, #52	; 0x34
 800921a:	f000 ff85 	bl	800a128 <acc_integration_mem_alloc_debug>
 800921e:	4604      	mov	r4, r0
 8009220:	b198      	cbz	r0, 800924a <acc_alg_distance_peak_detect_create_detector+0x3a>
 8009222:	4b0e      	ldr	r3, [pc, #56]	; (800925c <acc_alg_distance_peak_detect_create_detector+0x4c>)
 8009224:	61c3      	str	r3, [r0, #28]
 8009226:	2201      	movs	r2, #1
 8009228:	2300      	movs	r3, #0
 800922a:	490d      	ldr	r1, [pc, #52]	; (8009260 <acc_alg_distance_peak_detect_create_detector+0x50>)
 800922c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800922e:	7083      	strb	r3, [r0, #2]
 8009230:	8083      	strh	r3, [r0, #4]
 8009232:	8203      	strh	r3, [r0, #16]
 8009234:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8009238:	6203      	str	r3, [r0, #32]
 800923a:	6283      	str	r3, [r0, #40]	; 0x28
 800923c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8009240:	8002      	strh	r2, [r0, #0]
 8009242:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8009246:	4620      	mov	r0, r4
 8009248:	bd10      	pop	{r4, pc}
 800924a:	4a06      	ldr	r2, [pc, #24]	; (8009264 <acc_alg_distance_peak_detect_create_detector+0x54>)
 800924c:	4906      	ldr	r1, [pc, #24]	; (8009268 <acc_alg_distance_peak_detect_create_detector+0x58>)
 800924e:	f000 ffb7 	bl	800a1c0 <acc_log_rss>
 8009252:	4620      	mov	r0, r4
 8009254:	bd10      	pop	{r4, pc}
 8009256:	bf00      	nop
 8009258:	08017350 	.word	0x08017350
 800925c:	3ba3d70a 	.word	0x3ba3d70a
 8009260:	3e851eb8 	.word	0x3e851eb8
 8009264:	0801719c 	.word	0x0801719c
 8009268:	08017330 	.word	0x08017330

0800926c <acc_alg_distance_peak_detect_get_detector_reference>:
 800926c:	b110      	cbz	r0, 8009274 <acc_alg_distance_peak_detect_get_detector_reference+0x8>
 800926e:	8803      	ldrh	r3, [r0, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	8003      	strh	r3, [r0, #0]
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop

08009278 <acc_alg_distance_peak_detect_destroy_detector>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	6804      	ldr	r4, [r0, #0]
 800927c:	b13c      	cbz	r4, 800928e <acc_alg_distance_peak_detect_destroy_detector+0x16>
 800927e:	8823      	ldrh	r3, [r4, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	b29b      	uxth	r3, r3
 8009284:	4605      	mov	r5, r0
 8009286:	8023      	strh	r3, [r4, #0]
 8009288:	b113      	cbz	r3, 8009290 <acc_alg_distance_peak_detect_destroy_detector+0x18>
 800928a:	2300      	movs	r3, #0
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	6a20      	ldr	r0, [r4, #32]
 8009292:	f000 f80d 	bl	80092b0 <acc_alg_estimate_threshold_free>
 8009296:	69a0      	ldr	r0, [r4, #24]
 8009298:	f000 fa36 	bl	8009708 <acc_alg_reflection_detection_free>
 800929c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800929e:	f000 ff7d 	bl	800a19c <acc_integration_mem_free>
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 ff7a 	bl	800a19c <acc_integration_mem_free>
 80092a8:	2300      	movs	r3, #0
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	e7ef      	b.n	800928e <acc_alg_distance_peak_detect_destroy_detector+0x16>
 80092ae:	bf00      	nop

080092b0 <acc_alg_estimate_threshold_free>:
 80092b0:	b160      	cbz	r0, 80092cc <acc_alg_estimate_threshold_free+0x1c>
 80092b2:	b510      	push	{r4, lr}
 80092b4:	4604      	mov	r4, r0
 80092b6:	6800      	ldr	r0, [r0, #0]
 80092b8:	f003 fbb8 	bl	800ca2c <acc_alg_basic_online_variance_f32_free>
 80092bc:	6860      	ldr	r0, [r4, #4]
 80092be:	f000 ff6d 	bl	800a19c <acc_integration_mem_free>
 80092c2:	4620      	mov	r0, r4
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	f000 bf68 	b.w	800a19c <acc_integration_mem_free>
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop

080092d0 <acc_alg_estimate_threshold_get>:
 80092d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092d4:	ed2d 8b02 	vpush	{d8}
 80092d8:	b083      	sub	sp, #12
 80092da:	2800      	cmp	r0, #0
 80092dc:	d069      	beq.n	80093b2 <acc_alg_estimate_threshold_get+0xe2>
 80092de:	4604      	mov	r4, r0
 80092e0:	460e      	mov	r6, r1
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	a901      	add	r1, sp, #4
 80092e6:	eeb0 8a40 	vmov.f32	s16, s0
 80092ea:	4617      	mov	r7, r2
 80092ec:	f003 fbae 	bl	800ca4c <acc_alg_basic_online_variance_f32_get_length>
 80092f0:	9801      	ldr	r0, [sp, #4]
 80092f2:	4933      	ldr	r1, [pc, #204]	; (80093c0 <acc_alg_estimate_threshold_get+0xf0>)
 80092f4:	227c      	movs	r2, #124	; 0x7c
 80092f6:	0080      	lsls	r0, r0, #2
 80092f8:	f000 ff16 	bl	800a128 <acc_integration_mem_alloc_debug>
 80092fc:	4680      	mov	r8, r0
 80092fe:	9801      	ldr	r0, [sp, #4]
 8009300:	492f      	ldr	r1, [pc, #188]	; (80093c0 <acc_alg_estimate_threshold_get+0xf0>)
 8009302:	0080      	lsls	r0, r0, #2
 8009304:	227d      	movs	r2, #125	; 0x7d
 8009306:	f000 ff0f 	bl	800a128 <acc_integration_mem_alloc_debug>
 800930a:	4681      	mov	r9, r0
 800930c:	f1b8 0f00 	cmp.w	r8, #0
 8009310:	d042      	beq.n	8009398 <acc_alg_estimate_threshold_get+0xc8>
 8009312:	2800      	cmp	r0, #0
 8009314:	d040      	beq.n	8009398 <acc_alg_estimate_threshold_get+0xc8>
 8009316:	4641      	mov	r1, r8
 8009318:	6820      	ldr	r0, [r4, #0]
 800931a:	f003 fbab 	bl	800ca74 <acc_alg_basic_online_variance_f32_get_average>
 800931e:	4605      	mov	r5, r0
 8009320:	b370      	cbz	r0, 8009380 <acc_alg_estimate_threshold_get+0xb0>
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	4649      	mov	r1, r9
 8009326:	f003 fbcf 	bl	800cac8 <acc_alg_basic_online_variance_f32_get_standard_deviation>
 800932a:	4605      	mov	r5, r0
 800932c:	b340      	cbz	r0, 8009380 <acc_alg_estimate_threshold_get+0xb0>
 800932e:	9c01      	ldr	r4, [sp, #4]
 8009330:	b334      	cbz	r4, 8009380 <acc_alg_estimate_threshold_get+0xb0>
 8009332:	ee07 6a90 	vmov	s15, r6
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	eddf 5a22 	vldr	s11, [pc, #136]	; 80093c4 <acc_alg_estimate_threshold_get+0xf4>
 800933e:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8009342:	1eba      	subs	r2, r7, #2
 8009344:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8009348:	4643      	mov	r3, r8
 800934a:	4648      	mov	r0, r9
 800934c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009350:	ecf0 6a01 	vldmia	r0!, {s13}
 8009354:	ecb3 7a01 	vldmia	r3!, {s14}
 8009358:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800935c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009364:	eef4 7ae5 	vcmpe.f32	s15, s11
 8009368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936c:	dc04      	bgt.n	8009378 <acc_alg_estimate_threshold_get+0xa8>
 800936e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009372:	ee17 1a90 	vmov	r1, s15
 8009376:	b289      	uxth	r1, r1
 8009378:	42a3      	cmp	r3, r4
 800937a:	f822 1f02 	strh.w	r1, [r2, #2]!
 800937e:	d1e5      	bne.n	800934c <acc_alg_estimate_threshold_get+0x7c>
 8009380:	4640      	mov	r0, r8
 8009382:	f000 ff0b 	bl	800a19c <acc_integration_mem_free>
 8009386:	4648      	mov	r0, r9
 8009388:	f000 ff08 	bl	800a19c <acc_integration_mem_free>
 800938c:	4628      	mov	r0, r5
 800938e:	b003      	add	sp, #12
 8009390:	ecbd 8b02 	vpop	{d8}
 8009394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009398:	4640      	mov	r0, r8
 800939a:	f000 feff 	bl	800a19c <acc_integration_mem_free>
 800939e:	4648      	mov	r0, r9
 80093a0:	f000 fefc 	bl	800a19c <acc_integration_mem_free>
 80093a4:	2500      	movs	r5, #0
 80093a6:	4628      	mov	r0, r5
 80093a8:	b003      	add	sp, #12
 80093aa:	ecbd 8b02 	vpop	{d8}
 80093ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b2:	4605      	mov	r5, r0
 80093b4:	4628      	mov	r0, r5
 80093b6:	b003      	add	sp, #12
 80093b8:	ecbd 8b02 	vpop	{d8}
 80093bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c0:	08017440 	.word	0x08017440
 80093c4:	477fff00 	.word	0x477fff00

080093c8 <acc_alg_iq_demodulation_q3_12_real>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	ed2d 8b06 	vpush	{d8-d10}
 80093d0:	eeb0 aa40 	vmov.f32	s20, s0
 80093d4:	eef0 aa60 	vmov.f32	s21, s1
 80093d8:	ee20 0a01 	vmul.f32	s0, s0, s2
 80093dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80093e0:	4606      	mov	r6, r0
 80093e2:	460f      	mov	r7, r1
 80093e4:	4614      	mov	r4, r2
 80093e6:	f008 fa73 	bl	80118d0 <fmodf>
 80093ea:	ed9f 8a2d 	vldr	s16, [pc, #180]	; 80094a0 <acc_alg_iq_demodulation_q3_12_real+0xd8>
 80093ee:	eddf 9a2d 	vldr	s19, [pc, #180]	; 80094a4 <acc_alg_iq_demodulation_q3_12_real+0xdc>
 80093f2:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80093f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80093fe:	bfb4      	ite	lt
 8009400:	eeb0 7a68 	vmovlt.f32	s14, s17
 8009404:	eeb0 7a48 	vmovge.f32	s14, s16
 8009408:	ee30 7a07 	vadd.f32	s14, s0, s14
 800940c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8009410:	ee27 7a29 	vmul.f32	s14, s14, s19
 8009414:	ee2a 0a2a 	vmul.f32	s0, s20, s21
 8009418:	ee37 7a09 	vadd.f32	s14, s14, s18
 800941c:	eef0 0a68 	vmov.f32	s1, s17
 8009420:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009424:	ee17 5a90 	vmov	r5, s15
 8009428:	f008 fa52 	bl	80118d0 <fmodf>
 800942c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8009430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009434:	bfb4      	ite	lt
 8009436:	eef0 7a68 	vmovlt.f32	s15, s17
 800943a:	eef0 7a48 	vmovge.f32	s15, s16
 800943e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009442:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009446:	ee77 7a89 	vadd.f32	s15, s15, s18
 800944a:	b324      	cbz	r4, 8009496 <acc_alg_iq_demodulation_q3_12_real+0xce>
 800944c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009450:	3e02      	subs	r6, #2
 8009452:	ee17 8a90 	vmov	r8, s15
 8009456:	eb06 0944 	add.w	r9, r6, r4, lsl #1
 800945a:	3702      	adds	r7, #2
 800945c:	4628      	mov	r0, r5
 800945e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
 8009462:	f7ff facb 	bl	80089fc <acc_alg_basic_math_q3_12_cos>
 8009466:	fb04 f300 	mul.w	r3, r4, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfb8      	it	lt
 800946e:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8009472:	131b      	asrs	r3, r3, #12
 8009474:	4628      	mov	r0, r5
 8009476:	f827 3c02 	strh.w	r3, [r7, #-2]
 800947a:	f7ff faab 	bl	80089d4 <acc_alg_basic_math_q3_12_sin>
 800947e:	fb04 f000 	mul.w	r0, r4, r0
 8009482:	2800      	cmp	r0, #0
 8009484:	bfb8      	it	lt
 8009486:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800948a:	1300      	asrs	r0, r0, #12
 800948c:	45b1      	cmp	r9, r6
 800948e:	4445      	add	r5, r8
 8009490:	f827 0b04 	strh.w	r0, [r7], #4
 8009494:	d1e2      	bne.n	800945c <acc_alg_iq_demodulation_q3_12_real+0x94>
 8009496:	ecbd 8b06 	vpop	{d8-d10}
 800949a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949e:	bf00      	nop
 80094a0:	00000000 	.word	0x00000000
 80094a4:	4f800000 	.word	0x4f800000

080094a8 <acc_alg_iq_demodulation_q3_12>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	ed2d 8b06 	vpush	{d8-d10}
 80094b0:	eeb0 aa40 	vmov.f32	s20, s0
 80094b4:	eef0 aa60 	vmov.f32	s21, s1
 80094b8:	ee20 0a01 	vmul.f32	s0, s0, s2
 80094bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80094c0:	4680      	mov	r8, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	f008 fa04 	bl	80118d0 <fmodf>
 80094c8:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 800957c <acc_alg_iq_demodulation_q3_12+0xd4>
 80094cc:	eddf 9a2c 	vldr	s19, [pc, #176]	; 8009580 <acc_alg_iq_demodulation_q3_12+0xd8>
 80094d0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80094d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80094dc:	bfb4      	ite	lt
 80094de:	eef0 7a68 	vmovlt.f32	s15, s17
 80094e2:	eef0 7a48 	vmovge.f32	s15, s16
 80094e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80094ea:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80094ee:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80094f2:	ee2a 0a2a 	vmul.f32	s0, s20, s21
 80094f6:	ee77 7a89 	vadd.f32	s15, s15, s18
 80094fa:	eef0 0a68 	vmov.f32	s1, s17
 80094fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009502:	ee17 5a90 	vmov	r5, s15
 8009506:	f008 f9e3 	bl	80118d0 <fmodf>
 800950a:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800950e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009512:	bfb4      	ite	lt
 8009514:	eef0 7a68 	vmovlt.f32	s15, s17
 8009518:	eef0 7a48 	vmovge.f32	s15, s16
 800951c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009520:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009524:	ee77 7a89 	vadd.f32	s15, s15, s18
 8009528:	b327      	cbz	r7, 8009574 <acc_alg_iq_demodulation_q3_12+0xcc>
 800952a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800952e:	f108 0802 	add.w	r8, r8, #2
 8009532:	ee17 6a90 	vmov	r6, s15
 8009536:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 800953a:	4628      	mov	r0, r5
 800953c:	f938 4c02 	ldrsh.w	r4, [r8, #-2]
 8009540:	f7ff fa5c 	bl	80089fc <acc_alg_basic_math_q3_12_cos>
 8009544:	fb04 f300 	mul.w	r3, r4, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfb8      	it	lt
 800954c:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8009550:	131b      	asrs	r3, r3, #12
 8009552:	4628      	mov	r0, r5
 8009554:	f828 3c02 	strh.w	r3, [r8, #-2]
 8009558:	f7ff fa3c 	bl	80089d4 <acc_alg_basic_math_q3_12_sin>
 800955c:	fb04 f000 	mul.w	r0, r4, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	bfb8      	it	lt
 8009564:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 8009568:	1300      	asrs	r0, r0, #12
 800956a:	f828 0b04 	strh.w	r0, [r8], #4
 800956e:	4547      	cmp	r7, r8
 8009570:	4435      	add	r5, r6
 8009572:	d1e2      	bne.n	800953a <acc_alg_iq_demodulation_q3_12+0x92>
 8009574:	ecbd 8b06 	vpop	{d8-d10}
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	00000000 	.word	0x00000000
 8009580:	4f800000 	.word	0x4f800000

08009584 <acc_alg_iq_demodulation_q3_12_complex>:
 8009584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	ed2d 8b06 	vpush	{d8-d10}
 800958c:	eeb0 aa40 	vmov.f32	s20, s0
 8009590:	eef0 aa60 	vmov.f32	s21, s1
 8009594:	ee20 0a01 	vmul.f32	s0, s0, s2
 8009598:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800959c:	4607      	mov	r7, r0
 800959e:	460e      	mov	r6, r1
 80095a0:	f008 f996 	bl	80118d0 <fmodf>
 80095a4:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8009684 <acc_alg_iq_demodulation_q3_12_complex+0x100>
 80095a8:	eddf 9a37 	vldr	s19, [pc, #220]	; 8009688 <acc_alg_iq_demodulation_q3_12_complex+0x104>
 80095ac:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80095b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80095b8:	bfb4      	ite	lt
 80095ba:	eeb0 7a68 	vmovlt.f32	s14, s17
 80095be:	eeb0 7a48 	vmovge.f32	s14, s16
 80095c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80095c6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80095ca:	ee27 7a29 	vmul.f32	s14, s14, s19
 80095ce:	ee2a 0a2a 	vmul.f32	s0, s20, s21
 80095d2:	ee37 7a09 	vadd.f32	s14, s14, s18
 80095d6:	eef0 0a68 	vmov.f32	s1, s17
 80095da:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80095de:	ee17 8a90 	vmov	r8, s15
 80095e2:	f008 f975 	bl	80118d0 <fmodf>
 80095e6:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80095ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ee:	bfb4      	ite	lt
 80095f0:	eef0 7a68 	vmovlt.f32	s15, s17
 80095f4:	eef0 7a48 	vmovge.f32	s15, s16
 80095f8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80095fc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009600:	ee77 7a89 	vadd.f32	s15, s15, s18
 8009604:	b3d6      	cbz	r6, 800967c <acc_alg_iq_demodulation_q3_12_complex+0xf8>
 8009606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800960a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 800960e:	ee17 5a90 	vmov	r5, s15
 8009612:	f107 0902 	add.w	r9, r7, #2
 8009616:	4640      	mov	r0, r8
 8009618:	f9b7 b002 	ldrsh.w	fp, [r7, #2]
 800961c:	f939 ac02 	ldrsh.w	sl, [r9, #-2]
 8009620:	f7ff f9ec 	bl	80089fc <acc_alg_basic_math_q3_12_cos>
 8009624:	4604      	mov	r4, r0
 8009626:	4640      	mov	r0, r8
 8009628:	f7ff f9d4 	bl	80089d4 <acc_alg_basic_math_q3_12_sin>
 800962c:	fb0a f204 	mul.w	r2, sl, r4
 8009630:	fb0b f100 	mul.w	r1, fp, r0
 8009634:	2a00      	cmp	r2, #0
 8009636:	fb04 f30b 	mul.w	r3, r4, fp
 800963a:	bfb8      	it	lt
 800963c:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 8009640:	2900      	cmp	r1, #0
 8009642:	fb0a f000 	mul.w	r0, sl, r0
 8009646:	bfb8      	it	lt
 8009648:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfb8      	it	lt
 8009650:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8009654:	2800      	cmp	r0, #0
 8009656:	bfb8      	it	lt
 8009658:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800965c:	1312      	asrs	r2, r2, #12
 800965e:	131b      	asrs	r3, r3, #12
 8009660:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 8009664:	eb03 3320 	add.w	r3, r3, r0, asr #12
 8009668:	f829 2c02 	strh.w	r2, [r9, #-2]
 800966c:	3704      	adds	r7, #4
 800966e:	f827 3c02 	strh.w	r3, [r7, #-2]
 8009672:	42be      	cmp	r6, r7
 8009674:	44a8      	add	r8, r5
 8009676:	f109 0904 	add.w	r9, r9, #4
 800967a:	d1cc      	bne.n	8009616 <acc_alg_iq_demodulation_q3_12_complex+0x92>
 800967c:	ecbd 8b06 	vpop	{d8-d10}
 8009680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	00000000 	.word	0x00000000
 8009688:	4f800000 	.word	0x4f800000

0800968c <acc_alg_path_loss_r_f32>:
 800968c:	2901      	cmp	r1, #1
 800968e:	d91c      	bls.n	80096ca <acc_alg_path_loss_r_f32+0x3e>
 8009690:	1e4b      	subs	r3, r1, #1
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	ee30 7ac0 	vsub.f32	s14, s1, s0
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	2300      	movs	r3, #0
 80096a0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096ac:	edd0 6a00 	vldr	s13, [r0]
 80096b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80096b4:	3301      	adds	r3, #1
 80096b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80096ba:	4299      	cmp	r1, r3
 80096bc:	ee87 7aa0 	vdiv.f32	s14, s15, s1
 80096c0:	ee67 7a26 	vmul.f32	s15, s14, s13
 80096c4:	ece0 7a01 	vstmia	r0!, {s15}
 80096c8:	d1ec      	bne.n	80096a4 <acc_alg_path_loss_r_f32+0x18>
 80096ca:	4770      	bx	lr

080096cc <acc_alg_reflection_detection_allocate>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	2222      	movs	r2, #34	; 0x22
 80096d0:	4606      	mov	r6, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	2018      	movs	r0, #24
 80096d6:	4909      	ldr	r1, [pc, #36]	; (80096fc <acc_alg_reflection_detection_allocate+0x30>)
 80096d8:	f000 fd26 	bl	800a128 <acc_integration_mem_alloc_debug>
 80096dc:	4604      	mov	r4, r0
 80096de:	b138      	cbz	r0, 80096f0 <acc_alg_reflection_detection_allocate+0x24>
 80096e0:	2300      	movs	r3, #0
 80096e2:	7506      	strb	r6, [r0, #20]
 80096e4:	7545      	strb	r5, [r0, #21]
 80096e6:	e9c0 3300 	strd	r3, r3, [r0]
 80096ea:	6083      	str	r3, [r0, #8]
 80096ec:	4620      	mov	r0, r4
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	4a03      	ldr	r2, [pc, #12]	; (8009700 <acc_alg_reflection_detection_allocate+0x34>)
 80096f2:	4904      	ldr	r1, [pc, #16]	; (8009704 <acc_alg_reflection_detection_allocate+0x38>)
 80096f4:	f000 fd64 	bl	800a1c0 <acc_log_rss>
 80096f8:	4620      	mov	r0, r4
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	080174a8 	.word	0x080174a8
 8009700:	080174c8 	.word	0x080174c8
 8009704:	080174e4 	.word	0x080174e4

08009708 <acc_alg_reflection_detection_free>:
 8009708:	b160      	cbz	r0, 8009724 <acc_alg_reflection_detection_free+0x1c>
 800970a:	b510      	push	{r4, lr}
 800970c:	4604      	mov	r4, r0
 800970e:	6800      	ldr	r0, [r0, #0]
 8009710:	f000 fd44 	bl	800a19c <acc_integration_mem_free>
 8009714:	6860      	ldr	r0, [r4, #4]
 8009716:	f000 fd41 	bl	800a19c <acc_integration_mem_free>
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009720:	f000 bd3c 	b.w	800a19c <acc_integration_mem_free>
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop

08009728 <acc_alg_reflection_detection_size>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	ed2d 8b04 	vpush	{d8-d9}
 8009730:	4604      	mov	r4, r0
 8009732:	b085      	sub	sp, #20
 8009734:	2800      	cmp	r0, #0
 8009736:	f000 80db 	beq.w	80098f0 <acc_alg_reflection_detection_size+0x1c8>
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	4688      	mov	r8, r1
 800973e:	4691      	mov	r9, r2
 8009740:	461f      	mov	r7, r3
 8009742:	eef0 8a40 	vmov.f32	s17, s0
 8009746:	eeb0 8a60 	vmov.f32	s16, s1
 800974a:	eeb0 9a41 	vmov.f32	s18, s2
 800974e:	b118      	cbz	r0, 8009758 <acc_alg_reflection_detection_size+0x30>
 8009750:	f000 fd24 	bl	800a19c <acc_integration_mem_free>
 8009754:	2300      	movs	r3, #0
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	6860      	ldr	r0, [r4, #4]
 800975a:	b118      	cbz	r0, 8009764 <acc_alg_reflection_detection_size+0x3c>
 800975c:	f000 fd1e 	bl	800a19c <acc_integration_mem_free>
 8009760:	2300      	movs	r3, #0
 8009762:	6063      	str	r3, [r4, #4]
 8009764:	7d23      	ldrb	r3, [r4, #20]
 8009766:	b3a3      	cbz	r3, 80097d2 <acc_alg_reflection_detection_size+0xaa>
 8009768:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800976c:	4650      	mov	r0, sl
 800976e:	2253      	movs	r2, #83	; 0x53
 8009770:	496f      	ldr	r1, [pc, #444]	; (8009930 <acc_alg_reflection_detection_size+0x208>)
 8009772:	f000 fcd9 	bl	800a128 <acc_integration_mem_alloc_debug>
 8009776:	4683      	mov	fp, r0
 8009778:	2800      	cmp	r0, #0
 800977a:	f000 80b3 	beq.w	80098e4 <acc_alg_reflection_detection_size+0x1bc>
 800977e:	2f00      	cmp	r7, #0
 8009780:	f000 80c8 	beq.w	8009914 <acc_alg_reflection_detection_size+0x1ec>
 8009784:	f1a8 0602 	sub.w	r6, r8, #2
 8009788:	eb06 0147 	add.w	r1, r6, r7, lsl #1
 800978c:	4633      	mov	r3, r6
 800978e:	4605      	mov	r5, r0
 8009790:	4602      	mov	r2, r0
 8009792:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 8009796:	ee07 0a90 	vmov	s15, r0
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	428b      	cmp	r3, r1
 80097a0:	ece2 7a01 	vstmia	r2!, {s15}
 80097a4:	d1f5      	bne.n	8009792 <acc_alg_reflection_detection_size+0x6a>
 80097a6:	4639      	mov	r1, r7
 80097a8:	4658      	mov	r0, fp
 80097aa:	eef0 0a48 	vmov.f32	s1, s16
 80097ae:	eeb0 0a68 	vmov.f32	s0, s17
 80097b2:	f7ff ff6b 	bl	800968c <acc_alg_path_loss_r_f32>
 80097b6:	44da      	add	sl, fp
 80097b8:	ecf5 7a01 	vldmia	r5!, {s15}
 80097bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c0:	45aa      	cmp	sl, r5
 80097c2:	ee17 3a90 	vmov	r3, s15
 80097c6:	f826 3f02 	strh.w	r3, [r6, #2]!
 80097ca:	d1f5      	bne.n	80097b8 <acc_alg_reflection_detection_size+0x90>
 80097cc:	4658      	mov	r0, fp
 80097ce:	f000 fce5 	bl	800a19c <acc_integration_mem_free>
 80097d2:	463a      	mov	r2, r7
 80097d4:	4649      	mov	r1, r9
 80097d6:	4640      	mov	r0, r8
 80097d8:	f003 faec 	bl	800cdb4 <acc_alg_delay_sample_detection_size>
 80097dc:	4605      	mov	r5, r0
 80097de:	b938      	cbnz	r0, 80097f0 <acc_alg_reflection_detection_size+0xc8>
 80097e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097e2:	6018      	str	r0, [r3, #0]
 80097e4:	2001      	movs	r0, #1
 80097e6:	b005      	add	sp, #20
 80097e8:	ecbd 8b04 	vpop	{d8-d9}
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80097f4:	4650      	mov	r0, sl
 80097f6:	226f      	movs	r2, #111	; 0x6f
 80097f8:	494d      	ldr	r1, [pc, #308]	; (8009930 <acc_alg_reflection_detection_size+0x208>)
 80097fa:	f000 fc95 	bl	800a128 <acc_integration_mem_alloc_debug>
 80097fe:	4606      	mov	r6, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	d06f      	beq.n	80098e4 <acc_alg_reflection_detection_size+0x1bc>
 8009804:	4603      	mov	r3, r0
 8009806:	463a      	mov	r2, r7
 8009808:	4649      	mov	r1, r9
 800980a:	4640      	mov	r0, r8
 800980c:	f003 fae6 	bl	800cddc <acc_alg_delay_sample_detection>
 8009810:	7d63      	ldrb	r3, [r4, #21]
 8009812:	b97b      	cbnz	r3, 8009834 <acc_alg_reflection_detection_size+0x10c>
 8009814:	f1aa 0a02 	sub.w	sl, sl, #2
 8009818:	44b2      	add	sl, r6
 800981a:	1eb1      	subs	r1, r6, #2
 800981c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8009820:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8009824:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
 8009828:	458a      	cmp	sl, r1
 800982a:	eba2 0200 	sub.w	r2, r2, r0
 800982e:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
 8009832:	d1f3      	bne.n	800981c <acc_alg_reflection_detection_size+0xf4>
 8009834:	462a      	mov	r2, r5
 8009836:	4631      	mov	r1, r6
 8009838:	4640      	mov	r0, r8
 800983a:	f003 fae7 	bl	800ce0c <acc_alg_peak_detection_size>
 800983e:	4681      	mov	r9, r0
 8009840:	2800      	cmp	r0, #0
 8009842:	d060      	beq.n	8009906 <acc_alg_reflection_detection_size+0x1de>
 8009844:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8009848:	4658      	mov	r0, fp
 800984a:	2286      	movs	r2, #134	; 0x86
 800984c:	4938      	ldr	r1, [pc, #224]	; (8009930 <acc_alg_reflection_detection_size+0x208>)
 800984e:	f000 fc6b 	bl	800a128 <acc_integration_mem_alloc_debug>
 8009852:	4682      	mov	sl, r0
 8009854:	2800      	cmp	r0, #0
 8009856:	d065      	beq.n	8009924 <acc_alg_reflection_detection_size+0x1fc>
 8009858:	4603      	mov	r3, r0
 800985a:	462a      	mov	r2, r5
 800985c:	4631      	mov	r1, r6
 800985e:	4640      	mov	r0, r8
 8009860:	f003 faf8 	bl	800ce54 <acc_alg_peak_detection>
 8009864:	3f01      	subs	r7, #1
 8009866:	4630      	mov	r0, r6
 8009868:	f000 fc98 	bl	800a19c <acc_integration_mem_free>
 800986c:	ee07 7a90 	vmov	s15, r7
 8009870:	ee38 8a68 	vsub.f32	s16, s16, s17
 8009874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009878:	2295      	movs	r2, #149	; 0x95
 800987a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800987e:	492c      	ldr	r1, [pc, #176]	; (8009930 <acc_alg_reflection_detection_size+0x208>)
 8009880:	4658      	mov	r0, fp
 8009882:	edc4 8a04 	vstr	s17, [r4, #16]
 8009886:	ed84 7a03 	vstr	s14, [r4, #12]
 800988a:	f000 fc4d 	bl	800a128 <acc_integration_mem_alloc_debug>
 800988e:	2296      	movs	r2, #150	; 0x96
 8009890:	6020      	str	r0, [r4, #0]
 8009892:	4927      	ldr	r1, [pc, #156]	; (8009930 <acc_alg_reflection_detection_size+0x208>)
 8009894:	4658      	mov	r0, fp
 8009896:	f000 fc47 	bl	800a128 <acc_integration_mem_alloc_debug>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	6060      	str	r0, [r4, #4]
 800989e:	b1f3      	cbz	r3, 80098de <acc_alg_reflection_detection_size+0x1b6>
 80098a0:	b1e8      	cbz	r0, 80098de <acc_alg_reflection_detection_size+0x1b6>
 80098a2:	ed94 7a03 	vldr	s14, [r4, #12]
 80098a6:	9001      	str	r0, [sp, #4]
 80098a8:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80098ac:	f104 0108 	add.w	r1, r4, #8
 80098b0:	464a      	mov	r2, r9
 80098b2:	4640      	mov	r0, r8
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	9102      	str	r1, [sp, #8]
 80098b8:	4651      	mov	r1, sl
 80098ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80098be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098c6:	ee17 3a90 	vmov	r3, s15
 80098ca:	f003 f99d 	bl	800cc08 <acc_alg_data_merging>
 80098ce:	4650      	mov	r0, sl
 80098d0:	f000 fc64 	bl	800a19c <acc_integration_mem_free>
 80098d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	2001      	movs	r0, #1
 80098dc:	e783      	b.n	80097e6 <acc_alg_reflection_detection_size+0xbe>
 80098de:	4650      	mov	r0, sl
 80098e0:	f000 fc5c 	bl	800a19c <acc_integration_mem_free>
 80098e4:	2000      	movs	r0, #0
 80098e6:	b005      	add	sp, #20
 80098e8:	ecbd 8b04 	vpop	{d8-d9}
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <acc_alg_reflection_detection_size+0x20c>)
 80098f2:	4a11      	ldr	r2, [pc, #68]	; (8009938 <acc_alg_reflection_detection_size+0x210>)
 80098f4:	4911      	ldr	r1, [pc, #68]	; (800993c <acc_alg_reflection_detection_size+0x214>)
 80098f6:	f000 fc63 	bl	800a1c0 <acc_log_rss>
 80098fa:	4620      	mov	r0, r4
 80098fc:	b005      	add	sp, #20
 80098fe:	ecbd 8b04 	vpop	{d8-d9}
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009908:	6018      	str	r0, [r3, #0]
 800990a:	4630      	mov	r0, r6
 800990c:	f000 fc46 	bl	800a19c <acc_integration_mem_free>
 8009910:	2001      	movs	r0, #1
 8009912:	e768      	b.n	80097e6 <acc_alg_reflection_detection_size+0xbe>
 8009914:	4639      	mov	r1, r7
 8009916:	eef0 0a48 	vmov.f32	s1, s16
 800991a:	eeb0 0a68 	vmov.f32	s0, s17
 800991e:	f7ff feb5 	bl	800968c <acc_alg_path_loss_r_f32>
 8009922:	e753      	b.n	80097cc <acc_alg_reflection_detection_size+0xa4>
 8009924:	4630      	mov	r0, r6
 8009926:	f000 fc39 	bl	800a19c <acc_integration_mem_free>
 800992a:	4650      	mov	r0, sl
 800992c:	e75b      	b.n	80097e6 <acc_alg_reflection_detection_size+0xbe>
 800992e:	bf00      	nop
 8009930:	080174a8 	.word	0x080174a8
 8009934:	08017460 	.word	0x08017460
 8009938:	08017544 	.word	0x08017544
 800993c:	080174e4 	.word	0x080174e4

08009940 <acc_alg_reflection_detection_result>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4605      	mov	r5, r0
 8009944:	b310      	cbz	r0, 800998c <acc_alg_reflection_detection_result+0x4c>
 8009946:	6804      	ldr	r4, [r0, #0]
 8009948:	b33c      	cbz	r4, 800999a <acc_alg_reflection_detection_result+0x5a>
 800994a:	6886      	ldr	r6, [r0, #8]
 800994c:	b1e6      	cbz	r6, 8009988 <acc_alg_reflection_detection_result+0x48>
 800994e:	6840      	ldr	r0, [r0, #4]
 8009950:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8009954:	3e02      	subs	r6, #2
 8009956:	1ea3      	subs	r3, r4, #2
 8009958:	3902      	subs	r1, #2
 800995a:	3802      	subs	r0, #2
 800995c:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 8009960:	f821 4f02 	strh.w	r4, [r1, #2]!
 8009964:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 8009968:	edd5 6a03 	vldr	s13, [r5, #12]
 800996c:	ed95 7a04 	vldr	s14, [r5, #16]
 8009970:	ee07 4a90 	vmov	s15, r4
 8009974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009978:	42b3      	cmp	r3, r6
 800997a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800997e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009982:	ece2 7a01 	vstmia	r2!, {s15}
 8009986:	d1e9      	bne.n	800995c <acc_alg_reflection_detection_result+0x1c>
 8009988:	2001      	movs	r0, #1
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	4b07      	ldr	r3, [pc, #28]	; (80099ac <acc_alg_reflection_detection_result+0x6c>)
 800998e:	4a08      	ldr	r2, [pc, #32]	; (80099b0 <acc_alg_reflection_detection_result+0x70>)
 8009990:	4908      	ldr	r1, [pc, #32]	; (80099b4 <acc_alg_reflection_detection_result+0x74>)
 8009992:	f000 fc15 	bl	800a1c0 <acc_log_rss>
 8009996:	4628      	mov	r0, r5
 8009998:	bd70      	pop	{r4, r5, r6, pc}
 800999a:	4620      	mov	r0, r4
 800999c:	4b03      	ldr	r3, [pc, #12]	; (80099ac <acc_alg_reflection_detection_result+0x6c>)
 800999e:	4a06      	ldr	r2, [pc, #24]	; (80099b8 <acc_alg_reflection_detection_result+0x78>)
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <acc_alg_reflection_detection_result+0x74>)
 80099a2:	f000 fc0d 	bl	800a1c0 <acc_log_rss>
 80099a6:	4620      	mov	r0, r4
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	bf00      	nop
 80099ac:	08017484 	.word	0x08017484
 80099b0:	08017544 	.word	0x08017544
 80099b4:	080174e4 	.word	0x080174e4
 80099b8:	08017500 	.word	0x08017500

080099bc <configuration_is_valid.part.0>:
 80099bc:	b508      	push	{r3, lr}
 80099be:	4a03      	ldr	r2, [pc, #12]	; (80099cc <configuration_is_valid.part.0+0x10>)
 80099c0:	4903      	ldr	r1, [pc, #12]	; (80099d0 <configuration_is_valid.part.0+0x14>)
 80099c2:	2001      	movs	r0, #1
 80099c4:	f000 fbfc 	bl	800a1c0 <acc_log_rss>
 80099c8:	2000      	movs	r0, #0
 80099ca:	bd08      	pop	{r3, pc}
 80099cc:	080176dc 	.word	0x080176dc
 80099d0:	08017708 	.word	0x08017708

080099d4 <acc_base_configuration_sensor_get>:
 80099d4:	b510      	push	{r4, lr}
 80099d6:	4604      	mov	r4, r0
 80099d8:	b108      	cbz	r0, 80099de <acc_base_configuration_sensor_get+0xa>
 80099da:	6920      	ldr	r0, [r4, #16]
 80099dc:	bd10      	pop	{r4, pc}
 80099de:	f7ff ffed 	bl	80099bc <configuration_is_valid.part.0>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d1f9      	bne.n	80099da <acc_base_configuration_sensor_get+0x6>
 80099e6:	bd10      	pop	{r4, pc}

080099e8 <acc_base_configuration_sensor_set>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	4604      	mov	r4, r0
 80099ec:	b082      	sub	sp, #8
 80099ee:	b110      	cbz	r0, 80099f6 <acc_base_configuration_sensor_set+0xe>
 80099f0:	6121      	str	r1, [r4, #16]
 80099f2:	b002      	add	sp, #8
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	9101      	str	r1, [sp, #4]
 80099f8:	f7ff ffe0 	bl	80099bc <configuration_is_valid.part.0>
 80099fc:	9901      	ldr	r1, [sp, #4]
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1f6      	bne.n	80099f0 <acc_base_configuration_sensor_set+0x8>
 8009a02:	e7f6      	b.n	80099f2 <acc_base_configuration_sensor_set+0xa>

08009a04 <acc_base_configuration_requested_start_get>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	b110      	cbz	r0, 8009a10 <acc_base_configuration_requested_start_get+0xc>
 8009a0a:	ed94 0a05 	vldr	s0, [r4, #20]
 8009a0e:	bd10      	pop	{r4, pc}
 8009a10:	f7ff ffd4 	bl	80099bc <configuration_is_valid.part.0>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d1f8      	bne.n	8009a0a <acc_base_configuration_requested_start_get+0x6>
 8009a18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a20 <acc_base_configuration_requested_start_get+0x1c>
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	bf00      	nop
 8009a20:	00000000 	.word	0x00000000

08009a24 <acc_base_configuration_requested_start_set>:
 8009a24:	b510      	push	{r4, lr}
 8009a26:	4604      	mov	r4, r0
 8009a28:	b082      	sub	sp, #8
 8009a2a:	b118      	cbz	r0, 8009a34 <acc_base_configuration_requested_start_set+0x10>
 8009a2c:	ed84 0a05 	vstr	s0, [r4, #20]
 8009a30:	b002      	add	sp, #8
 8009a32:	bd10      	pop	{r4, pc}
 8009a34:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009a38:	f7ff ffc0 	bl	80099bc <configuration_is_valid.part.0>
 8009a3c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d1f3      	bne.n	8009a2c <acc_base_configuration_requested_start_set+0x8>
 8009a44:	e7f4      	b.n	8009a30 <acc_base_configuration_requested_start_set+0xc>
 8009a46:	bf00      	nop

08009a48 <acc_base_configuration_requested_length_get>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b110      	cbz	r0, 8009a54 <acc_base_configuration_requested_length_get+0xc>
 8009a4e:	ed94 0a06 	vldr	s0, [r4, #24]
 8009a52:	bd10      	pop	{r4, pc}
 8009a54:	f7ff ffb2 	bl	80099bc <configuration_is_valid.part.0>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d1f8      	bne.n	8009a4e <acc_base_configuration_requested_length_get+0x6>
 8009a5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a64 <acc_base_configuration_requested_length_get+0x1c>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop
 8009a64:	00000000 	.word	0x00000000

08009a68 <acc_base_configuration_requested_length_set>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	b118      	cbz	r0, 8009a78 <acc_base_configuration_requested_length_set+0x10>
 8009a70:	ed84 0a06 	vstr	s0, [r4, #24]
 8009a74:	b002      	add	sp, #8
 8009a76:	bd10      	pop	{r4, pc}
 8009a78:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009a7c:	f7ff ff9e 	bl	80099bc <configuration_is_valid.part.0>
 8009a80:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1f3      	bne.n	8009a70 <acc_base_configuration_requested_length_set+0x8>
 8009a88:	e7f4      	b.n	8009a74 <acc_base_configuration_requested_length_set+0xc>
 8009a8a:	bf00      	nop

08009a8c <acc_base_configuration_repetition_mode_on_demand_set>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	4604      	mov	r4, r0
 8009a90:	b110      	cbz	r0, 8009a98 <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 8009a92:	2301      	movs	r3, #1
 8009a94:	7223      	strb	r3, [r4, #8]
 8009a96:	bd10      	pop	{r4, pc}
 8009a98:	f7ff ff90 	bl	80099bc <configuration_is_valid.part.0>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1f8      	bne.n	8009a92 <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 8009aa0:	bd10      	pop	{r4, pc}
 8009aa2:	bf00      	nop

08009aa4 <acc_base_configuration_power_save_mode_get>:
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	b108      	cbz	r0, 8009aae <acc_base_configuration_power_save_mode_get+0xa>
 8009aaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	f7ff ff85 	bl	80099bc <configuration_is_valid.part.0>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d1f9      	bne.n	8009aaa <acc_base_configuration_power_save_mode_get+0x6>
 8009ab6:	bd10      	pop	{r4, pc}

08009ab8 <acc_base_configuration_power_save_mode_set>:
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	4604      	mov	r4, r0
 8009abc:	b082      	sub	sp, #8
 8009abe:	b110      	cbz	r0, 8009ac6 <acc_base_configuration_power_save_mode_set+0xe>
 8009ac0:	6261      	str	r1, [r4, #36]	; 0x24
 8009ac2:	b002      	add	sp, #8
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	9101      	str	r1, [sp, #4]
 8009ac8:	f7ff ff78 	bl	80099bc <configuration_is_valid.part.0>
 8009acc:	9901      	ldr	r1, [sp, #4]
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d1f6      	bne.n	8009ac0 <acc_base_configuration_power_save_mode_set+0x8>
 8009ad2:	e7f6      	b.n	8009ac2 <acc_base_configuration_power_save_mode_set+0xa>

08009ad4 <acc_base_configuration_receiver_gain_set>:
 8009ad4:	eef3 7a06 	vmov.f32	s15, #54	; 0x41b00000  22.0
 8009ad8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009adc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009ae0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009aea:	4605      	mov	r5, r0
 8009aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af0:	ee17 3a90 	vmov	r3, s15
 8009af4:	b29c      	uxth	r4, r3
 8009af6:	b108      	cbz	r0, 8009afc <acc_base_configuration_receiver_gain_set+0x28>
 8009af8:	85ac      	strh	r4, [r5, #44]	; 0x2c
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	f7ff ff5e 	bl	80099bc <configuration_is_valid.part.0>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d1f9      	bne.n	8009af8 <acc_base_configuration_receiver_gain_set+0x24>
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	bf00      	nop

08009b08 <acc_base_configuration_tx_disable_get>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	b110      	cbz	r0, 8009b14 <acc_base_configuration_tx_disable_get+0xc>
 8009b0e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	f7ff ff52 	bl	80099bc <configuration_is_valid.part.0>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d1f8      	bne.n	8009b0e <acc_base_configuration_tx_disable_get+0x6>
 8009b1c:	bd10      	pop	{r4, pc}
 8009b1e:	bf00      	nop

08009b20 <acc_base_configuration_tx_disable_set>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4604      	mov	r4, r0
 8009b24:	b082      	sub	sp, #8
 8009b26:	b118      	cbz	r0, 8009b30 <acc_base_configuration_tx_disable_set+0x10>
 8009b28:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
 8009b2c:	b002      	add	sp, #8
 8009b2e:	bd10      	pop	{r4, pc}
 8009b30:	9101      	str	r1, [sp, #4]
 8009b32:	f7ff ff43 	bl	80099bc <configuration_is_valid.part.0>
 8009b36:	9901      	ldr	r1, [sp, #4]
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1f5      	bne.n	8009b28 <acc_base_configuration_tx_disable_set+0x8>
 8009b3c:	e7f6      	b.n	8009b2c <acc_base_configuration_tx_disable_set+0xc>
 8009b3e:	bf00      	nop

08009b40 <acc_base_configuration_decrease_tx_emission_get>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	b110      	cbz	r0, 8009b4c <acc_base_configuration_decrease_tx_emission_get+0xc>
 8009b46:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 8009b4a:	bd10      	pop	{r4, pc}
 8009b4c:	f7ff ff36 	bl	80099bc <configuration_is_valid.part.0>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d1f8      	bne.n	8009b46 <acc_base_configuration_decrease_tx_emission_get+0x6>
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	bf00      	nop

08009b58 <acc_base_configuration_decrease_tx_emission_set>:
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	b118      	cbz	r0, 8009b68 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8009b60:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
 8009b64:	b002      	add	sp, #8
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	9101      	str	r1, [sp, #4]
 8009b6a:	f7ff ff27 	bl	80099bc <configuration_is_valid.part.0>
 8009b6e:	9901      	ldr	r1, [sp, #4]
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d1f5      	bne.n	8009b60 <acc_base_configuration_decrease_tx_emission_set+0x8>
 8009b74:	e7f6      	b.n	8009b64 <acc_base_configuration_decrease_tx_emission_set+0xc>
 8009b76:	bf00      	nop

08009b78 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	b110      	cbz	r0, 8009b84 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8009b7e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8009b82:	bd10      	pop	{r4, pc}
 8009b84:	f7ff ff1a 	bl	80099bc <configuration_is_valid.part.0>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1f8      	bne.n	8009b7e <acc_base_configuration_hw_accelerated_average_samples_get+0x6>
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	bf00      	nop

08009b90 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	4604      	mov	r4, r0
 8009b94:	b082      	sub	sp, #8
 8009b96:	b110      	cbz	r0, 8009b9e <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8009b98:	8521      	strh	r1, [r4, #40]	; 0x28
 8009b9a:	b002      	add	sp, #8
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	9101      	str	r1, [sp, #4]
 8009ba0:	f7ff ff0c 	bl	80099bc <configuration_is_valid.part.0>
 8009ba4:	9901      	ldr	r1, [sp, #4]
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d1f6      	bne.n	8009b98 <acc_base_configuration_hw_accelerated_average_samples_set+0x8>
 8009baa:	e7f6      	b.n	8009b9a <acc_base_configuration_hw_accelerated_average_samples_set+0xa>

08009bac <acc_base_configuration_radar_engine_creation_set>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	4604      	mov	r4, r0
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	b110      	cbz	r0, 8009bba <acc_base_configuration_radar_engine_creation_set+0xe>
 8009bb4:	6021      	str	r1, [r4, #0]
 8009bb6:	b002      	add	sp, #8
 8009bb8:	bd10      	pop	{r4, pc}
 8009bba:	9101      	str	r1, [sp, #4]
 8009bbc:	f7ff fefe 	bl	80099bc <configuration_is_valid.part.0>
 8009bc0:	9901      	ldr	r1, [sp, #4]
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d1f6      	bne.n	8009bb4 <acc_base_configuration_radar_engine_creation_set+0x8>
 8009bc6:	e7f6      	b.n	8009bb6 <acc_base_configuration_radar_engine_creation_set+0xa>

08009bc8 <acc_base_configuration_pipeline_assembly_set>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4604      	mov	r4, r0
 8009bcc:	b082      	sub	sp, #8
 8009bce:	b110      	cbz	r0, 8009bd6 <acc_base_configuration_pipeline_assembly_set+0xe>
 8009bd0:	6061      	str	r1, [r4, #4]
 8009bd2:	b002      	add	sp, #8
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	9101      	str	r1, [sp, #4]
 8009bd8:	f7ff fef0 	bl	80099bc <configuration_is_valid.part.0>
 8009bdc:	9901      	ldr	r1, [sp, #4]
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1f6      	bne.n	8009bd0 <acc_base_configuration_pipeline_assembly_set+0x8>
 8009be2:	e7f6      	b.n	8009bd2 <acc_base_configuration_pipeline_assembly_set+0xa>

08009be4 <acc_base_configuration_point_start_get>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	4604      	mov	r4, r0
 8009be8:	b108      	cbz	r0, 8009bee <acc_base_configuration_point_start_get+0xa>
 8009bea:	69e0      	ldr	r0, [r4, #28]
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	f7ff fee5 	bl	80099bc <configuration_is_valid.part.0>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d1f9      	bne.n	8009bea <acc_base_configuration_point_start_get+0x6>
 8009bf6:	bd10      	pop	{r4, pc}

08009bf8 <acc_base_configuration_point_length_get>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	b108      	cbz	r0, 8009c02 <acc_base_configuration_point_length_get+0xa>
 8009bfe:	6a20      	ldr	r0, [r4, #32]
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	f7ff fedb 	bl	80099bc <configuration_is_valid.part.0>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d1f9      	bne.n	8009bfe <acc_base_configuration_point_length_get+0x6>
 8009c0a:	bd10      	pop	{r4, pc}

08009c0c <acc_base_configuration_repetition_mode_get>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4604      	mov	r4, r0
 8009c10:	b108      	cbz	r0, 8009c16 <acc_base_configuration_repetition_mode_get+0xa>
 8009c12:	7a20      	ldrb	r0, [r4, #8]
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	f7ff fed1 	bl	80099bc <configuration_is_valid.part.0>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d1f9      	bne.n	8009c12 <acc_base_configuration_repetition_mode_get+0x6>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <acc_base_configuration_update_rate_get>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	b160      	cbz	r0, 8009c40 <acc_base_configuration_update_rate_get+0x20>
 8009c26:	7a23      	ldrb	r3, [r4, #8]
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d80d      	bhi.n	8009c48 <acc_base_configuration_update_rate_get+0x28>
 8009c2c:	e8df f003 	tbb	[pc, r3]
 8009c30:	02020505 	.word	0x02020505
 8009c34:	ed94 0a03 	vldr	s0, [r4, #12]
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8009c50 <acc_base_configuration_update_rate_get+0x30>
 8009c3e:	bd10      	pop	{r4, pc}
 8009c40:	f7ff febc 	bl	80099bc <configuration_is_valid.part.0>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d1ee      	bne.n	8009c26 <acc_base_configuration_update_rate_get+0x6>
 8009c48:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009c54 <acc_base_configuration_update_rate_get+0x34>
 8009c4c:	bd10      	pop	{r4, pc}
 8009c4e:	bf00      	nop
 8009c50:	7f800000 	.word	0x7f800000
 8009c54:	7fc00000 	.word	0x7fc00000

08009c58 <acc_base_configuration_sweep_average_get>:
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	b108      	cbz	r0, 8009c62 <acc_base_configuration_sweep_average_get+0xa>
 8009c5e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009c60:	bd10      	pop	{r4, pc}
 8009c62:	f7ff feab 	bl	80099bc <configuration_is_valid.part.0>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d1f9      	bne.n	8009c5e <acc_base_configuration_sweep_average_get+0x6>
 8009c6a:	bd10      	pop	{r4, pc}

08009c6c <acc_base_configuration_sweep_average_set>:
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	4604      	mov	r4, r0
 8009c70:	b082      	sub	sp, #8
 8009c72:	b110      	cbz	r0, 8009c7a <acc_base_configuration_sweep_average_set+0xe>
 8009c74:	8561      	strh	r1, [r4, #42]	; 0x2a
 8009c76:	b002      	add	sp, #8
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	9101      	str	r1, [sp, #4]
 8009c7c:	f7ff fe9e 	bl	80099bc <configuration_is_valid.part.0>
 8009c80:	9901      	ldr	r1, [sp, #4]
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d1f6      	bne.n	8009c74 <acc_base_configuration_sweep_average_set+0x8>
 8009c86:	e7f6      	b.n	8009c76 <acc_base_configuration_sweep_average_set+0xa>

08009c88 <acc_base_configuration_gain_get>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	b108      	cbz	r0, 8009c92 <acc_base_configuration_gain_get+0xa>
 8009c8e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	f7ff fe93 	bl	80099bc <configuration_is_valid.part.0>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d1f9      	bne.n	8009c8e <acc_base_configuration_gain_get+0x6>
 8009c9a:	bd10      	pop	{r4, pc}

08009c9c <acc_base_configuration_gain_set>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	b110      	cbz	r0, 8009caa <acc_base_configuration_gain_set+0xe>
 8009ca4:	85a1      	strh	r1, [r4, #44]	; 0x2c
 8009ca6:	b002      	add	sp, #8
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	9101      	str	r1, [sp, #4]
 8009cac:	f7ff fe86 	bl	80099bc <configuration_is_valid.part.0>
 8009cb0:	9901      	ldr	r1, [sp, #4]
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1f6      	bne.n	8009ca4 <acc_base_configuration_gain_set+0x8>
 8009cb6:	e7f6      	b.n	8009ca6 <acc_base_configuration_gain_set+0xa>

08009cb8 <acc_base_configuration_integrator_get>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	b108      	cbz	r0, 8009cc2 <acc_base_configuration_integrator_get+0xa>
 8009cbe:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	f7ff fe7b 	bl	80099bc <configuration_is_valid.part.0>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1f9      	bne.n	8009cbe <acc_base_configuration_integrator_get+0x6>
 8009cca:	bd10      	pop	{r4, pc}

08009ccc <acc_base_configuration_integrator_set>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4604      	mov	r4, r0
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	b110      	cbz	r0, 8009cda <acc_base_configuration_integrator_set+0xe>
 8009cd4:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8009cd6:	b002      	add	sp, #8
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	9101      	str	r1, [sp, #4]
 8009cdc:	f7ff fe6e 	bl	80099bc <configuration_is_valid.part.0>
 8009ce0:	9901      	ldr	r1, [sp, #4]
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1f6      	bne.n	8009cd4 <acc_base_configuration_integrator_set+0x8>
 8009ce6:	e7f6      	b.n	8009cd6 <acc_base_configuration_integrator_set+0xa>

08009ce8 <acc_base_configuration_wg_duration_get>:
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	4604      	mov	r4, r0
 8009cec:	b108      	cbz	r0, 8009cf2 <acc_base_configuration_wg_duration_get+0xa>
 8009cee:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	f7ff fe63 	bl	80099bc <configuration_is_valid.part.0>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d1f9      	bne.n	8009cee <acc_base_configuration_wg_duration_get+0x6>
 8009cfa:	bd10      	pop	{r4, pc}

08009cfc <acc_base_configuration_wg_duration_set>:
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	b082      	sub	sp, #8
 8009d02:	b110      	cbz	r0, 8009d0a <acc_base_configuration_wg_duration_set+0xe>
 8009d04:	8621      	strh	r1, [r4, #48]	; 0x30
 8009d06:	b002      	add	sp, #8
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	9101      	str	r1, [sp, #4]
 8009d0c:	f7ff fe56 	bl	80099bc <configuration_is_valid.part.0>
 8009d10:	9901      	ldr	r1, [sp, #4]
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d1f6      	bne.n	8009d04 <acc_base_configuration_wg_duration_set+0x8>
 8009d16:	e7f6      	b.n	8009d06 <acc_base_configuration_wg_duration_set+0xa>

08009d18 <acc_base_configuration_integrator_ramp_up_get>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	b108      	cbz	r0, 8009d22 <acc_base_configuration_integrator_ramp_up_get+0xa>
 8009d1e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	f7ff fe4b 	bl	80099bc <configuration_is_valid.part.0>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d1f9      	bne.n	8009d1e <acc_base_configuration_integrator_ramp_up_get+0x6>
 8009d2a:	bd10      	pop	{r4, pc}

08009d2c <acc_base_configuration_integrator_ramp_up_set>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	b082      	sub	sp, #8
 8009d32:	b110      	cbz	r0, 8009d3a <acc_base_configuration_integrator_ramp_up_set+0xe>
 8009d34:	8661      	strh	r1, [r4, #50]	; 0x32
 8009d36:	b002      	add	sp, #8
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	9101      	str	r1, [sp, #4]
 8009d3c:	f7ff fe3e 	bl	80099bc <configuration_is_valid.part.0>
 8009d40:	9901      	ldr	r1, [sp, #4]
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d1f6      	bne.n	8009d34 <acc_base_configuration_integrator_ramp_up_set+0x8>
 8009d46:	e7f6      	b.n	8009d36 <acc_base_configuration_integrator_ramp_up_set+0xa>

08009d48 <acc_base_configuration_sweep_type_debug_set>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	b118      	cbz	r0, 8009d58 <acc_base_configuration_sweep_type_debug_set+0x10>
 8009d50:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8009d54:	b002      	add	sp, #8
 8009d56:	bd10      	pop	{r4, pc}
 8009d58:	9101      	str	r1, [sp, #4]
 8009d5a:	f7ff fe2f 	bl	80099bc <configuration_is_valid.part.0>
 8009d5e:	9901      	ldr	r1, [sp, #4]
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d1f5      	bne.n	8009d50 <acc_base_configuration_sweep_type_debug_set+0x8>
 8009d64:	e7f6      	b.n	8009d54 <acc_base_configuration_sweep_type_debug_set+0xc>
 8009d66:	bf00      	nop

08009d68 <acc_base_configuration_sweep_type_debug_get>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	b110      	cbz	r0, 8009d74 <acc_base_configuration_sweep_type_debug_get+0xc>
 8009d6e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8009d72:	bd10      	pop	{r4, pc}
 8009d74:	f7ff fe22 	bl	80099bc <configuration_is_valid.part.0>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d1f8      	bne.n	8009d6e <acc_base_configuration_sweep_type_debug_get+0x6>
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	bf00      	nop

08009d80 <acc_base_configuration_use_point_range_set>:
 8009d80:	b510      	push	{r4, lr}
 8009d82:	4604      	mov	r4, r0
 8009d84:	b082      	sub	sp, #8
 8009d86:	b118      	cbz	r0, 8009d90 <acc_base_configuration_use_point_range_set+0x10>
 8009d88:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8009d8c:	b002      	add	sp, #8
 8009d8e:	bd10      	pop	{r4, pc}
 8009d90:	9101      	str	r1, [sp, #4]
 8009d92:	f7ff fe13 	bl	80099bc <configuration_is_valid.part.0>
 8009d96:	9901      	ldr	r1, [sp, #4]
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1f5      	bne.n	8009d88 <acc_base_configuration_use_point_range_set+0x8>
 8009d9c:	e7f6      	b.n	8009d8c <acc_base_configuration_use_point_range_set+0xc>
 8009d9e:	bf00      	nop

08009da0 <acc_base_configuration_use_point_range_get>:
 8009da0:	b510      	push	{r4, lr}
 8009da2:	4604      	mov	r4, r0
 8009da4:	b110      	cbz	r0, 8009dac <acc_base_configuration_use_point_range_get+0xc>
 8009da6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8009daa:	bd10      	pop	{r4, pc}
 8009dac:	f7ff fe06 	bl	80099bc <configuration_is_valid.part.0>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d1f8      	bne.n	8009da6 <acc_base_configuration_use_point_range_get+0x6>
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	bf00      	nop

08009db8 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8009db8:	b510      	push	{r4, lr}
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	b118      	cbz	r0, 8009dc8 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 8009dc0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8009dc4:	b002      	add	sp, #8
 8009dc6:	bd10      	pop	{r4, pc}
 8009dc8:	9101      	str	r1, [sp, #4]
 8009dca:	f7ff fdf7 	bl	80099bc <configuration_is_valid.part.0>
 8009dce:	9901      	ldr	r1, [sp, #4]
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d1f5      	bne.n	8009dc0 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x8>
 8009dd4:	e7f6      	b.n	8009dc4 <acc_base_configuration_use_fast_dll_refresh_routine_set+0xc>
 8009dd6:	bf00      	nop

08009dd8 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4604      	mov	r4, r0
 8009ddc:	b082      	sub	sp, #8
 8009dde:	b110      	cbz	r0, 8009de6 <acc_base_configuration_staggered_vga_stabilization_time_set+0xe>
 8009de0:	8761      	strh	r1, [r4, #58]	; 0x3a
 8009de2:	b002      	add	sp, #8
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	9101      	str	r1, [sp, #4]
 8009de8:	f7ff fde8 	bl	80099bc <configuration_is_valid.part.0>
 8009dec:	9901      	ldr	r1, [sp, #4]
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d1f6      	bne.n	8009de0 <acc_base_configuration_staggered_vga_stabilization_time_set+0x8>
 8009df2:	e7f6      	b.n	8009de2 <acc_base_configuration_staggered_vga_stabilization_time_set+0xa>

08009df4 <acc_base_configuration_downsampling_factor_get>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	4604      	mov	r4, r0
 8009df8:	b110      	cbz	r0, 8009e00 <acc_base_configuration_downsampling_factor_get+0xc>
 8009dfa:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8009dfe:	bd10      	pop	{r4, pc}
 8009e00:	f7ff fddc 	bl	80099bc <configuration_is_valid.part.0>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d1f8      	bne.n	8009dfa <acc_base_configuration_downsampling_factor_get+0x6>
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	bf00      	nop

08009e0c <acc_base_configuration_downsampling_factor_set>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	4604      	mov	r4, r0
 8009e10:	b082      	sub	sp, #8
 8009e12:	b118      	cbz	r0, 8009e1c <acc_base_configuration_downsampling_factor_set+0x10>
 8009e14:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
 8009e18:	b002      	add	sp, #8
 8009e1a:	bd10      	pop	{r4, pc}
 8009e1c:	9101      	str	r1, [sp, #4]
 8009e1e:	f7ff fdcd 	bl	80099bc <configuration_is_valid.part.0>
 8009e22:	9901      	ldr	r1, [sp, #4]
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1f5      	bne.n	8009e14 <acc_base_configuration_downsampling_factor_set+0x8>
 8009e28:	e7f6      	b.n	8009e18 <acc_base_configuration_downsampling_factor_set+0xc>
 8009e2a:	bf00      	nop

08009e2c <acc_base_configuration_noise_level_normalization_get>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4604      	mov	r4, r0
 8009e30:	b110      	cbz	r0, 8009e38 <acc_base_configuration_noise_level_normalization_get+0xc>
 8009e32:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8009e36:	bd10      	pop	{r4, pc}
 8009e38:	f7ff fdc0 	bl	80099bc <configuration_is_valid.part.0>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d1f8      	bne.n	8009e32 <acc_base_configuration_noise_level_normalization_get+0x6>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	bf00      	nop

08009e44 <acc_base_configuration_noise_level_normalization_set>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	4604      	mov	r4, r0
 8009e48:	b082      	sub	sp, #8
 8009e4a:	b118      	cbz	r0, 8009e54 <acc_base_configuration_noise_level_normalization_set+0x10>
 8009e4c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8009e50:	b002      	add	sp, #8
 8009e52:	bd10      	pop	{r4, pc}
 8009e54:	9101      	str	r1, [sp, #4]
 8009e56:	f7ff fdb1 	bl	80099bc <configuration_is_valid.part.0>
 8009e5a:	9901      	ldr	r1, [sp, #4]
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d1f5      	bne.n	8009e4c <acc_base_configuration_noise_level_normalization_set+0x8>
 8009e60:	e7f6      	b.n	8009e50 <acc_base_configuration_noise_level_normalization_set+0xc>
 8009e62:	bf00      	nop

08009e64 <acc_base_configuration_print>:
 8009e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	b08a      	sub	sp, #40	; 0x28
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d036      	beq.n	8009ede <acc_base_configuration_print+0x7a>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8009e76:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 8009e78:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
 8009e7a:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
 8009e7c:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8009e80:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
 8009e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e86:	f894 903c 	ldrb.w	r9, [r4, #60]	; 0x3c
 8009e8a:	2a03      	cmp	r2, #3
 8009e8c:	d91e      	bls.n	8009ecc <acc_base_configuration_print+0x68>
 8009e8e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8009fd4 <acc_base_configuration_print+0x170>
 8009e92:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 8009e96:	b300      	cbz	r0, 8009eda <acc_base_configuration_print+0x76>
 8009e98:	4a49      	ldr	r2, [pc, #292]	; (8009fc0 <acc_base_configuration_print+0x15c>)
 8009e9a:	f8df a138 	ldr.w	sl, [pc, #312]	; 8009fd4 <acc_base_configuration_print+0x170>
 8009e9e:	2801      	cmp	r0, #1
 8009ea0:	bf18      	it	ne
 8009ea2:	4652      	movne	r2, sl
 8009ea4:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8009ea8:	e9cd 2008 	strd	r2, r0, [sp, #32]
 8009eac:	e9cd 1500 	strd	r1, r5, [sp]
 8009eb0:	e9cd 9806 	strd	r9, r8, [sp, #24]
 8009eb4:	e9cd ce04 	strd	ip, lr, [sp, #16]
 8009eb8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009ebc:	4a41      	ldr	r2, [pc, #260]	; (8009fc4 <acc_base_configuration_print+0x160>)
 8009ebe:	4942      	ldr	r1, [pc, #264]	; (8009fc8 <acc_base_configuration_print+0x164>)
 8009ec0:	2002      	movs	r0, #2
 8009ec2:	f000 f97d 	bl	800a1c0 <acc_log_rss>
 8009ec6:	b00a      	add	sp, #40	; 0x28
 8009ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ecc:	483f      	ldr	r0, [pc, #252]	; (8009fcc <acc_base_configuration_print+0x168>)
 8009ece:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8009ed2:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d1de      	bne.n	8009e98 <acc_base_configuration_print+0x34>
 8009eda:	4a3d      	ldr	r2, [pc, #244]	; (8009fd0 <acc_base_configuration_print+0x16c>)
 8009edc:	e7e2      	b.n	8009ea4 <acc_base_configuration_print+0x40>
 8009ede:	f7ff fd6d 	bl	80099bc <configuration_is_valid.part.0>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d1c4      	bne.n	8009e70 <acc_base_configuration_print+0xc>
 8009ee6:	f7ff fd69 	bl	80099bc <configuration_is_valid.part.0>
 8009eea:	b108      	cbz	r0, 8009ef0 <acc_base_configuration_print+0x8c>
 8009eec:	4623      	mov	r3, r4
 8009eee:	e7c0      	b.n	8009e72 <acc_base_configuration_print+0xe>
 8009ef0:	f7ff fd64 	bl	80099bc <configuration_is_valid.part.0>
 8009ef4:	b110      	cbz	r0, 8009efc <acc_base_configuration_print+0x98>
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	4621      	mov	r1, r4
 8009efa:	e7bc      	b.n	8009e76 <acc_base_configuration_print+0x12>
 8009efc:	f7ff fd5e 	bl	80099bc <configuration_is_valid.part.0>
 8009f00:	b118      	cbz	r0, 8009f0a <acc_base_configuration_print+0xa6>
 8009f02:	4623      	mov	r3, r4
 8009f04:	4625      	mov	r5, r4
 8009f06:	4621      	mov	r1, r4
 8009f08:	e7b6      	b.n	8009e78 <acc_base_configuration_print+0x14>
 8009f0a:	f7ff fd57 	bl	80099bc <configuration_is_valid.part.0>
 8009f0e:	b120      	cbz	r0, 8009f1a <acc_base_configuration_print+0xb6>
 8009f10:	4623      	mov	r3, r4
 8009f12:	4626      	mov	r6, r4
 8009f14:	4625      	mov	r5, r4
 8009f16:	4621      	mov	r1, r4
 8009f18:	e7af      	b.n	8009e7a <acc_base_configuration_print+0x16>
 8009f1a:	f7ff fd4f 	bl	80099bc <configuration_is_valid.part.0>
 8009f1e:	b128      	cbz	r0, 8009f2c <acc_base_configuration_print+0xc8>
 8009f20:	4623      	mov	r3, r4
 8009f22:	4627      	mov	r7, r4
 8009f24:	4626      	mov	r6, r4
 8009f26:	4625      	mov	r5, r4
 8009f28:	4621      	mov	r1, r4
 8009f2a:	e7a7      	b.n	8009e7c <acc_base_configuration_print+0x18>
 8009f2c:	f7ff fd46 	bl	80099bc <configuration_is_valid.part.0>
 8009f30:	b130      	cbz	r0, 8009f40 <acc_base_configuration_print+0xdc>
 8009f32:	4623      	mov	r3, r4
 8009f34:	46a4      	mov	ip, r4
 8009f36:	4627      	mov	r7, r4
 8009f38:	4626      	mov	r6, r4
 8009f3a:	4625      	mov	r5, r4
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	e79f      	b.n	8009e80 <acc_base_configuration_print+0x1c>
 8009f40:	f7ff fd3c 	bl	80099bc <configuration_is_valid.part.0>
 8009f44:	b138      	cbz	r0, 8009f56 <acc_base_configuration_print+0xf2>
 8009f46:	4623      	mov	r3, r4
 8009f48:	46a6      	mov	lr, r4
 8009f4a:	46a4      	mov	ip, r4
 8009f4c:	4627      	mov	r7, r4
 8009f4e:	4626      	mov	r6, r4
 8009f50:	4625      	mov	r5, r4
 8009f52:	4621      	mov	r1, r4
 8009f54:	e796      	b.n	8009e84 <acc_base_configuration_print+0x20>
 8009f56:	f7ff fd31 	bl	80099bc <configuration_is_valid.part.0>
 8009f5a:	b9a8      	cbnz	r0, 8009f88 <acc_base_configuration_print+0x124>
 8009f5c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009fd8 <acc_base_configuration_print+0x174>
 8009f60:	f7ff fd2c 	bl	80099bc <configuration_is_valid.part.0>
 8009f64:	4605      	mov	r5, r0
 8009f66:	b118      	cbz	r0, 8009f70 <acc_base_configuration_print+0x10c>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009f6e:	deff      	udf	#255	; 0xff
 8009f70:	f7ff fd24 	bl	80099bc <configuration_is_valid.part.0>
 8009f74:	b180      	cbz	r0, 8009f98 <acc_base_configuration_print+0x134>
 8009f76:	462b      	mov	r3, r5
 8009f78:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <acc_base_configuration_print+0x16c>)
 8009f7a:	46a9      	mov	r9, r5
 8009f7c:	46ae      	mov	lr, r5
 8009f7e:	46ac      	mov	ip, r5
 8009f80:	462f      	mov	r7, r5
 8009f82:	462e      	mov	r6, r5
 8009f84:	4629      	mov	r1, r5
 8009f86:	e78d      	b.n	8009ea4 <acc_base_configuration_print+0x40>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f8c:	2a03      	cmp	r2, #3
 8009f8e:	d80d      	bhi.n	8009fac <acc_base_configuration_print+0x148>
 8009f90:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <acc_base_configuration_print+0x168>)
 8009f92:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8009f96:	e7e3      	b.n	8009f60 <acc_base_configuration_print+0xfc>
 8009f98:	4a0d      	ldr	r2, [pc, #52]	; (8009fd0 <acc_base_configuration_print+0x16c>)
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	4686      	mov	lr, r0
 8009fa0:	4684      	mov	ip, r0
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	4601      	mov	r1, r0
 8009faa:	e77d      	b.n	8009ea8 <acc_base_configuration_print+0x44>
 8009fac:	4699      	mov	r9, r3
 8009fae:	469e      	mov	lr, r3
 8009fb0:	469c      	mov	ip, r3
 8009fb2:	461f      	mov	r7, r3
 8009fb4:	461e      	mov	r6, r3
 8009fb6:	461d      	mov	r5, r3
 8009fb8:	4619      	mov	r1, r3
 8009fba:	f8df 8018 	ldr.w	r8, [pc, #24]	; 8009fd4 <acc_base_configuration_print+0x170>
 8009fbe:	e768      	b.n	8009e92 <acc_base_configuration_print+0x2e>
 8009fc0:	08016a44 	.word	0x08016a44
 8009fc4:	080176a4 	.word	0x080176a4
 8009fc8:	08017708 	.word	0x08017708
 8009fcc:	08017570 	.word	0x08017570
 8009fd0:	080176a0 	.word	0x080176a0
 8009fd4:	0801be94 	.word	0x0801be94
 8009fd8:	0801769c 	.word	0x0801769c

08009fdc <acc_base_configuration_check>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4605      	mov	r5, r0
 8009fe0:	b1e8      	cbz	r0, 800a01e <acc_base_configuration_check+0x42>
 8009fe2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009fe4:	2c03      	cmp	r4, #3
 8009fe6:	d80c      	bhi.n	800a002 <acc_base_configuration_check+0x26>
 8009fe8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009fea:	2b16      	cmp	r3, #22
 8009fec:	d810      	bhi.n	800a010 <acc_base_configuration_check+0x34>
 8009fee:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ff4:	d818      	bhi.n	800a028 <acc_base_configuration_check+0x4c>
 8009ff6:	b914      	cbnz	r4, 8009ffe <acc_base_configuration_check+0x22>
 8009ff8:	7a2b      	ldrb	r3, [r5, #8]
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d01b      	beq.n	800a036 <acc_base_configuration_check+0x5a>
 8009ffe:	2001      	movs	r0, #1
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	4a10      	ldr	r2, [pc, #64]	; (800a044 <acc_base_configuration_check+0x68>)
 800a004:	4910      	ldr	r1, [pc, #64]	; (800a048 <acc_base_configuration_check+0x6c>)
 800a006:	2000      	movs	r0, #0
 800a008:	f000 f8da 	bl	800a1c0 <acc_log_rss>
 800a00c:	2000      	movs	r0, #0
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	4a0e      	ldr	r2, [pc, #56]	; (800a04c <acc_base_configuration_check+0x70>)
 800a012:	490d      	ldr	r1, [pc, #52]	; (800a048 <acc_base_configuration_check+0x6c>)
 800a014:	2000      	movs	r0, #0
 800a016:	f000 f8d3 	bl	800a1c0 <acc_log_rss>
 800a01a:	2000      	movs	r0, #0
 800a01c:	bd38      	pop	{r3, r4, r5, pc}
 800a01e:	f7ff fccd 	bl	80099bc <configuration_is_valid.part.0>
 800a022:	2800      	cmp	r0, #0
 800a024:	d1dd      	bne.n	8009fe2 <acc_base_configuration_check+0x6>
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <acc_base_configuration_check+0x74>)
 800a02a:	4907      	ldr	r1, [pc, #28]	; (800a048 <acc_base_configuration_check+0x6c>)
 800a02c:	2000      	movs	r0, #0
 800a02e:	f000 f8c7 	bl	800a1c0 <acc_log_rss>
 800a032:	2000      	movs	r0, #0
 800a034:	bd38      	pop	{r3, r4, r5, pc}
 800a036:	4620      	mov	r0, r4
 800a038:	4a06      	ldr	r2, [pc, #24]	; (800a054 <acc_base_configuration_check+0x78>)
 800a03a:	4903      	ldr	r1, [pc, #12]	; (800a048 <acc_base_configuration_check+0x6c>)
 800a03c:	f000 f8c0 	bl	800a1c0 <acc_log_rss>
 800a040:	4620      	mov	r0, r4
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	08017580 	.word	0x08017580
 800a048:	08017708 	.word	0x08017708
 800a04c:	080175a8 	.word	0x080175a8
 800a050:	080175ec 	.word	0x080175ec
 800a054:	08017650 	.word	0x08017650

0800a058 <acc_integration_register>:
 800a058:	6942      	ldr	r2, [r0, #20]
 800a05a:	b538      	push	{r3, r4, r5, lr}
 800a05c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a05e:	b312      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a060:	6982      	ldr	r2, [r0, #24]
 800a062:	b302      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a064:	6a02      	ldr	r2, [r0, #32]
 800a066:	b1f2      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a068:	69c2      	ldr	r2, [r0, #28]
 800a06a:	b1e2      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a06c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a06e:	b1d2      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a070:	6882      	ldr	r2, [r0, #8]
 800a072:	b1c2      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a074:	68c2      	ldr	r2, [r0, #12]
 800a076:	b1b2      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a078:	6902      	ldr	r2, [r0, #16]
 800a07a:	b1a2      	cbz	r2, 800a0a6 <acc_integration_register+0x4e>
 800a07c:	b1cc      	cbz	r4, 800a0b2 <acc_integration_register+0x5a>
 800a07e:	6802      	ldr	r2, [r0, #0]
 800a080:	2a20      	cmp	r2, #32
 800a082:	d811      	bhi.n	800a0a8 <acc_integration_register+0x50>
 800a084:	6842      	ldr	r2, [r0, #4]
 800a086:	3a01      	subs	r2, #1
 800a088:	2a0e      	cmp	r2, #14
 800a08a:	d90d      	bls.n	800a0a8 <acc_integration_register+0x50>
 800a08c:	4604      	mov	r4, r0
 800a08e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a090:	4d09      	ldr	r5, [pc, #36]	; (800a0b8 <acc_integration_register+0x60>)
 800a092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a098:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a09c:	2401      	movs	r4, #1
 800a09e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	bd38      	pop	{r3, r4, r5, pc}
 800a0a6:	b124      	cbz	r4, 800a0b2 <acc_integration_register+0x5a>
 800a0a8:	4a04      	ldr	r2, [pc, #16]	; (800a0bc <acc_integration_register+0x64>)
 800a0aa:	4905      	ldr	r1, [pc, #20]	; (800a0c0 <acc_integration_register+0x68>)
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	47a0      	blx	r4
 800a0b0:	2400      	movs	r4, #0
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	bd38      	pop	{r3, r4, r5, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200003e4 	.word	0x200003e4
 800a0bc:	08017734 	.word	0x08017734
 800a0c0:	08017748 	.word	0x08017748

0800a0c4 <acc_integration_unregister>:
 800a0c4:	2230      	movs	r2, #48	; 0x30
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4801      	ldr	r0, [pc, #4]	; (800a0d0 <acc_integration_unregister+0xc>)
 800a0ca:	f006 b80b 	b.w	80100e4 <memset>
 800a0ce:	bf00      	nop
 800a0d0:	200003e4 	.word	0x200003e4

0800a0d4 <acc_integration_get_sensor_count>:
 800a0d4:	4b01      	ldr	r3, [pc, #4]	; (800a0dc <acc_integration_get_sensor_count+0x8>)
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	200003e4 	.word	0x200003e4

0800a0e0 <acc_integration_get_sensor_reference_frequency>:
 800a0e0:	4b01      	ldr	r3, [pc, #4]	; (800a0e8 <acc_integration_get_sensor_reference_frequency+0x8>)
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	4718      	bx	r3
 800a0e6:	bf00      	nop
 800a0e8:	200003e4 	.word	0x200003e4

0800a0ec <acc_integration_get_max_spi_transfer_size>:
 800a0ec:	4b01      	ldr	r3, [pc, #4]	; (800a0f4 <acc_integration_get_max_spi_transfer_size+0x8>)
 800a0ee:	6858      	ldr	r0, [r3, #4]
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	200003e4 	.word	0x200003e4

0800a0f8 <acc_integration_sensor_device_power_on>:
 800a0f8:	4b01      	ldr	r3, [pc, #4]	; (800a100 <acc_integration_sensor_device_power_on+0x8>)
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	4718      	bx	r3
 800a0fe:	bf00      	nop
 800a100:	200003e4 	.word	0x200003e4

0800a104 <acc_integration_sensor_device_power_off>:
 800a104:	4b01      	ldr	r3, [pc, #4]	; (800a10c <acc_integration_sensor_device_power_off+0x8>)
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	4718      	bx	r3
 800a10a:	bf00      	nop
 800a10c:	200003e4 	.word	0x200003e4

0800a110 <acc_integration_wait_for_sensor_interrupt>:
 800a110:	4b01      	ldr	r3, [pc, #4]	; (800a118 <acc_integration_wait_for_sensor_interrupt+0x8>)
 800a112:	69db      	ldr	r3, [r3, #28]
 800a114:	4718      	bx	r3
 800a116:	bf00      	nop
 800a118:	200003e4 	.word	0x200003e4

0800a11c <acc_integration_sensor_device_transfer>:
 800a11c:	4b01      	ldr	r3, [pc, #4]	; (800a124 <acc_integration_sensor_device_transfer+0x8>)
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	4718      	bx	r3
 800a122:	bf00      	nop
 800a124:	200003e4 	.word	0x200003e4

0800a128 <acc_integration_mem_alloc_debug>:
 800a128:	4b08      	ldr	r3, [pc, #32]	; (800a14c <acc_integration_mem_alloc_debug+0x24>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	b410      	push	{r4}
 800a12e:	4604      	mov	r4, r0
 800a130:	b92b      	cbnz	r3, 800a13e <acc_integration_mem_alloc_debug+0x16>
 800a132:	4b07      	ldr	r3, [pc, #28]	; (800a150 <acc_integration_mem_alloc_debug+0x28>)
 800a134:	4620      	mov	r0, r4
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a13c:	4718      	bx	r3
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d0f6      	beq.n	800a132 <acc_integration_mem_alloc_debug+0xa>
 800a144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a148:	4718      	bx	r3
 800a14a:	bf00      	nop
 800a14c:	20000414 	.word	0x20000414
 800a150:	200003e4 	.word	0x200003e4

0800a154 <acc_integration_mem_calloc_debug>:
 800a154:	b1e8      	cbz	r0, 800a192 <acc_integration_mem_calloc_debug+0x3e>
 800a156:	b570      	push	{r4, r5, r6, lr}
 800a158:	4615      	mov	r5, r2
 800a15a:	4a0e      	ldr	r2, [pc, #56]	; (800a194 <acc_integration_mem_calloc_debug+0x40>)
 800a15c:	6812      	ldr	r2, [r2, #0]
 800a15e:	fb01 f400 	mul.w	r4, r1, r0
 800a162:	b96a      	cbnz	r2, 800a180 <acc_integration_mem_calloc_debug+0x2c>
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <acc_integration_mem_calloc_debug+0x44>)
 800a166:	4620      	mov	r0, r4
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	4798      	blx	r3
 800a16c:	4603      	mov	r3, r0
 800a16e:	b12b      	cbz	r3, 800a17c <acc_integration_mem_calloc_debug+0x28>
 800a170:	4618      	mov	r0, r3
 800a172:	4622      	mov	r2, r4
 800a174:	2100      	movs	r1, #0
 800a176:	f005 ffb5 	bl	80100e4 <memset>
 800a17a:	4603      	mov	r3, r0
 800a17c:	4618      	mov	r0, r3
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	6816      	ldr	r6, [r2, #0]
 800a182:	2e00      	cmp	r6, #0
 800a184:	d0ee      	beq.n	800a164 <acc_integration_mem_calloc_debug+0x10>
 800a186:	461a      	mov	r2, r3
 800a188:	4629      	mov	r1, r5
 800a18a:	4620      	mov	r0, r4
 800a18c:	47b0      	blx	r6
 800a18e:	4603      	mov	r3, r0
 800a190:	e7ed      	b.n	800a16e <acc_integration_mem_calloc_debug+0x1a>
 800a192:	4770      	bx	lr
 800a194:	20000414 	.word	0x20000414
 800a198:	200003e4 	.word	0x200003e4

0800a19c <acc_integration_mem_free>:
 800a19c:	4b01      	ldr	r3, [pc, #4]	; (800a1a4 <acc_integration_mem_free+0x8>)
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	4718      	bx	r3
 800a1a2:	bf00      	nop
 800a1a4:	200003e4 	.word	0x200003e4

0800a1a8 <acc_integration_log_level>:
 800a1a8:	4b01      	ldr	r3, [pc, #4]	; (800a1b0 <acc_integration_log_level+0x8>)
 800a1aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	200003e4 	.word	0x200003e4

0800a1b4 <acc_integration_log>:
 800a1b4:	4b01      	ldr	r3, [pc, #4]	; (800a1bc <acc_integration_log+0x8>)
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	4718      	bx	r3
 800a1ba:	bf00      	nop
 800a1bc:	200003e4 	.word	0x200003e4

0800a1c0 <acc_log_rss>:
 800a1c0:	b40c      	push	{r2, r3}
 800a1c2:	b570      	push	{r4, r5, r6, lr}
 800a1c4:	b0a8      	sub	sp, #160	; 0xa0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	f7ff ffed 	bl	800a1a8 <acc_integration_log_level>
 800a1ce:	42a0      	cmp	r0, r4
 800a1d0:	d204      	bcs.n	800a1dc <acc_log_rss+0x1c>
 800a1d2:	b028      	add	sp, #160	; 0xa0
 800a1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1d8:	b002      	add	sp, #8
 800a1da:	4770      	bx	lr
 800a1dc:	ae2d      	add	r6, sp, #180	; 0xb4
 800a1de:	4633      	mov	r3, r6
 800a1e0:	a802      	add	r0, sp, #8
 800a1e2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a1e4:	9601      	str	r6, [sp, #4]
 800a1e6:	2196      	movs	r1, #150	; 0x96
 800a1e8:	f006 fca8 	bl	8010b3c <vsniprintf>
 800a1ec:	2895      	cmp	r0, #149	; 0x95
 800a1ee:	dd06      	ble.n	800a1fe <acc_log_rss+0x3e>
 800a1f0:	f642 622e 	movw	r2, #11822	; 0x2e2e
 800a1f4:	232e      	movs	r3, #46	; 0x2e
 800a1f6:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
 800a1fa:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 800a1fe:	aa02      	add	r2, sp, #8
 800a200:	4629      	mov	r1, r5
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff ffd6 	bl	800a1b4 <acc_integration_log>
 800a208:	b028      	add	sp, #160	; 0xa0
 800a20a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a20e:	b002      	add	sp, #8
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop

0800a214 <acc_probes_execute>:
 800a214:	b180      	cbz	r0, 800a238 <acc_probes_execute+0x24>
 800a216:	6803      	ldr	r3, [r0, #0]
 800a218:	b410      	push	{r4}
 800a21a:	4c08      	ldr	r4, [pc, #32]	; (800a23c <acc_probes_execute+0x28>)
 800a21c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a220:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a224:	685c      	ldr	r4, [r3, #4]
 800a226:	b124      	cbz	r4, 800a232 <acc_probes_execute+0x1e>
 800a228:	46a4      	mov	ip, r4
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a230:	4760      	bx	ip
 800a232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	2000014c 	.word	0x2000014c

0800a240 <acc_probes_execute_uint16>:
 800a240:	b530      	push	{r4, r5, lr}
 800a242:	b085      	sub	sp, #20
 800a244:	4c09      	ldr	r4, [pc, #36]	; (800a26c <acc_probes_execute_uint16+0x2c>)
 800a246:	9001      	str	r0, [sp, #4]
 800a248:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a24c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a250:	2501      	movs	r5, #1
 800a252:	6844      	ldr	r4, [r0, #4]
 800a254:	9102      	str	r1, [sp, #8]
 800a256:	9503      	str	r5, [sp, #12]
 800a258:	4611      	mov	r1, r2
 800a25a:	fa03 f205 	lsl.w	r2, r3, r5
 800a25e:	b114      	cbz	r4, 800a266 <acc_probes_execute_uint16+0x26>
 800a260:	6883      	ldr	r3, [r0, #8]
 800a262:	a801      	add	r0, sp, #4
 800a264:	47a0      	blx	r4
 800a266:	b005      	add	sp, #20
 800a268:	bd30      	pop	{r4, r5, pc}
 800a26a:	bf00      	nop
 800a26c:	2000014c 	.word	0x2000014c

0800a270 <acc_probes_execute_primitive_probe>:
 800a270:	b510      	push	{r4, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	4b08      	ldr	r3, [pc, #32]	; (800a298 <acc_probes_execute_primitive_probe+0x28>)
 800a276:	9001      	str	r0, [sp, #4]
 800a278:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a27c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a280:	2200      	movs	r2, #0
 800a282:	6844      	ldr	r4, [r0, #4]
 800a284:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a288:	b11c      	cbz	r4, 800a292 <acc_probes_execute_primitive_probe+0x22>
 800a28a:	6883      	ldr	r3, [r0, #8]
 800a28c:	4611      	mov	r1, r2
 800a28e:	a801      	add	r0, sp, #4
 800a290:	47a0      	blx	r4
 800a292:	b004      	add	sp, #16
 800a294:	bd10      	pop	{r4, pc}
 800a296:	bf00      	nop
 800a298:	2000014c 	.word	0x2000014c

0800a29c <acc_package_envelope_engine_create>:
 800a29c:	f000 beaa 	b.w	800aff4 <acc_radar_engine_linear_create>

0800a2a0 <acc_package_envelope_pipeline_assemble>:
 800a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	b087      	sub	sp, #28
 800a2a6:	6809      	ldr	r1, [r1, #0]
 800a2a8:	6867      	ldr	r7, [r4, #4]
 800a2aa:	9205      	str	r2, [sp, #20]
 800a2ac:	6926      	ldr	r6, [r4, #16]
 800a2ae:	9101      	str	r1, [sp, #4]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	7b25      	ldrb	r5, [r4, #12]
 800a2b6:	7a23      	ldrb	r3, [r4, #8]
 800a2b8:	9702      	str	r7, [sp, #8]
 800a2ba:	a801      	add	r0, sp, #4
 800a2bc:	9604      	str	r6, [sp, #16]
 800a2be:	f88d 500c 	strb.w	r5, [sp, #12]
 800a2c2:	f88d 300d 	strb.w	r3, [sp, #13]
 800a2c6:	f000 fa3b 	bl	800a740 <acc_pipeline_envelope_assemble>
 800a2ca:	b007      	add	sp, #28
 800a2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ce:	bf00      	nop

0800a2d0 <register_handle>:
 800a2d0:	b530      	push	{r4, r5, lr}
 800a2d2:	6883      	ldr	r3, [r0, #8]
 800a2d4:	699c      	ldr	r4, [r3, #24]
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	4605      	mov	r5, r0
 800a2da:	b104      	cbz	r4, 800a2de <register_handle+0xe>
 800a2dc:	6924      	ldr	r4, [r4, #16]
 800a2de:	686b      	ldr	r3, [r5, #4]
 800a2e0:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <register_handle+0x90>)
 800a2e2:	9400      	str	r4, [sp, #0]
 800a2e4:	491f      	ldr	r1, [pc, #124]	; (800a364 <register_handle+0x94>)
 800a2e6:	2004      	movs	r0, #4
 800a2e8:	f7ff ff6a 	bl	800a1c0 <acc_log_rss>
 800a2ec:	4a1e      	ldr	r2, [pc, #120]	; (800a368 <register_handle+0x98>)
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f852 1b04 	ldr.w	r1, [r2], #4
 800a2f4:	b119      	cbz	r1, 800a2fe <register_handle+0x2e>
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d1f9      	bne.n	800a2f0 <register_handle+0x20>
 800a2fc:	2305      	movs	r3, #5
 800a2fe:	2c20      	cmp	r4, #32
 800a300:	d813      	bhi.n	800a32a <register_handle+0x5a>
 800a302:	b944      	cbnz	r4, 800a316 <register_handle+0x46>
 800a304:	2b05      	cmp	r3, #5
 800a306:	d019      	beq.n	800a33c <register_handle+0x6c>
 800a308:	4a18      	ldr	r2, [pc, #96]	; (800a36c <register_handle+0x9c>)
 800a30a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a30e:	2001      	movs	r0, #1
 800a310:	605d      	str	r5, [r3, #4]
 800a312:	b003      	add	sp, #12
 800a314:	bd30      	pop	{r4, r5, pc}
 800a316:	4a15      	ldr	r2, [pc, #84]	; (800a36c <register_handle+0x9c>)
 800a318:	3c01      	subs	r4, #1
 800a31a:	4414      	add	r4, r2
 800a31c:	7d21      	ldrb	r1, [r4, #20]
 800a31e:	b9b1      	cbnz	r1, 800a34e <register_handle+0x7e>
 800a320:	2b05      	cmp	r3, #5
 800a322:	d00b      	beq.n	800a33c <register_handle+0x6c>
 800a324:	2101      	movs	r1, #1
 800a326:	7521      	strb	r1, [r4, #20]
 800a328:	e7ef      	b.n	800a30a <register_handle+0x3a>
 800a32a:	2320      	movs	r3, #32
 800a32c:	4a10      	ldr	r2, [pc, #64]	; (800a370 <register_handle+0xa0>)
 800a32e:	490d      	ldr	r1, [pc, #52]	; (800a364 <register_handle+0x94>)
 800a330:	2000      	movs	r0, #0
 800a332:	f7ff ff45 	bl	800a1c0 <acc_log_rss>
 800a336:	2000      	movs	r0, #0
 800a338:	b003      	add	sp, #12
 800a33a:	bd30      	pop	{r4, r5, pc}
 800a33c:	2304      	movs	r3, #4
 800a33e:	4a0d      	ldr	r2, [pc, #52]	; (800a374 <register_handle+0xa4>)
 800a340:	4908      	ldr	r1, [pc, #32]	; (800a364 <register_handle+0x94>)
 800a342:	2000      	movs	r0, #0
 800a344:	f7ff ff3c 	bl	800a1c0 <acc_log_rss>
 800a348:	2000      	movs	r0, #0
 800a34a:	b003      	add	sp, #12
 800a34c:	bd30      	pop	{r4, r5, pc}
 800a34e:	4a0a      	ldr	r2, [pc, #40]	; (800a378 <register_handle+0xa8>)
 800a350:	4904      	ldr	r1, [pc, #16]	; (800a364 <register_handle+0x94>)
 800a352:	2000      	movs	r0, #0
 800a354:	f7ff ff34 	bl	800a1c0 <acc_log_rss>
 800a358:	2000      	movs	r0, #0
 800a35a:	b003      	add	sp, #12
 800a35c:	bd30      	pop	{r4, r5, pc}
 800a35e:	bf00      	nop
 800a360:	0801788c 	.word	0x0801788c
 800a364:	080178b0 	.word	0x080178b0
 800a368:	20000210 	.word	0x20000210
 800a36c:	2000020c 	.word	0x2000020c
 800a370:	080178c0 	.word	0x080178c0
 800a374:	08017920 	.word	0x08017920
 800a378:	080178e8 	.word	0x080178e8

0800a37c <service_data_timeout_get>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	4604      	mov	r4, r0
 800a382:	f7ff fc43 	bl	8009c0c <acc_base_configuration_repetition_mode_get>
 800a386:	2801      	cmp	r0, #1
 800a388:	d011      	beq.n	800a3ae <service_data_timeout_get+0x32>
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7ff fc48 	bl	8009c20 <acc_base_configuration_update_rate_get>
 800a390:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800a3bc <service_data_timeout_get+0x40>
 800a394:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a3c0 <service_data_timeout_get+0x44>
 800a398:	ee87 0a00 	vdiv.f32	s0, s14, s0
 800a39c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a3a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800a3a4:	edcd 7a01 	vstr	s15, [sp, #4]
 800a3a8:	9801      	ldr	r0, [sp, #4]
 800a3aa:	b002      	add	sp, #8
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a3b2:	9301      	str	r3, [sp, #4]
 800a3b4:	9801      	ldr	r0, [sp, #4]
 800a3b6:	b002      	add	sp, #8
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	bf00      	nop
 800a3bc:	457a0000 	.word	0x457a0000
 800a3c0:	44fa0000 	.word	0x44fa0000

0800a3c4 <acc_service_factory_activate>:
 800a3c4:	4807      	ldr	r0, [pc, #28]	; (800a3e4 <acc_service_factory_activate+0x20>)
 800a3c6:	7802      	ldrb	r2, [r0, #0]
 800a3c8:	b94a      	cbnz	r2, 800a3de <acc_service_factory_activate+0x1a>
 800a3ca:	f100 0313 	add.w	r3, r0, #19
 800a3ce:	f100 0133 	add.w	r1, r0, #51	; 0x33
 800a3d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3d6:	428b      	cmp	r3, r1
 800a3d8:	d1fb      	bne.n	800a3d2 <acc_service_factory_activate+0xe>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	7003      	strb	r3, [r0, #0]
 800a3de:	2001      	movs	r0, #1
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	2000020c 	.word	0x2000020c

0800a3e8 <acc_service_factory_deactivate>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	4d0e      	ldr	r5, [pc, #56]	; (800a424 <acc_service_factory_deactivate+0x3c>)
 800a3ec:	782e      	ldrb	r6, [r5, #0]
 800a3ee:	b17e      	cbz	r6, 800a410 <acc_service_factory_deactivate+0x28>
 800a3f0:	462c      	mov	r4, r5
 800a3f2:	f105 0710 	add.w	r7, r5, #16
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800a3fc:	b11b      	cbz	r3, 800a406 <acc_service_factory_deactivate+0x1e>
 800a3fe:	4620      	mov	r0, r4
 800a400:	f7fd fbe4 	bl	8007bcc <acc_service_destroy>
 800a404:	4632      	mov	r2, r6
 800a406:	42bc      	cmp	r4, r7
 800a408:	d1f6      	bne.n	800a3f8 <acc_service_factory_deactivate+0x10>
 800a40a:	b912      	cbnz	r2, 800a412 <acc_service_factory_deactivate+0x2a>
 800a40c:	2300      	movs	r3, #0
 800a40e:	702b      	strb	r3, [r5, #0]
 800a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a412:	4a05      	ldr	r2, [pc, #20]	; (800a428 <acc_service_factory_deactivate+0x40>)
 800a414:	4905      	ldr	r1, [pc, #20]	; (800a42c <acc_service_factory_deactivate+0x44>)
 800a416:	2001      	movs	r0, #1
 800a418:	f7ff fed2 	bl	800a1c0 <acc_log_rss>
 800a41c:	2300      	movs	r3, #0
 800a41e:	702b      	strb	r3, [r5, #0]
 800a420:	e7f6      	b.n	800a410 <acc_service_factory_deactivate+0x28>
 800a422:	bf00      	nop
 800a424:	2000020c 	.word	0x2000020c
 800a428:	08017818 	.word	0x08017818
 800a42c:	080178b0 	.word	0x080178b0

0800a430 <acc_service_factory_destroy_service>:
 800a430:	2800      	cmp	r0, #0
 800a432:	d031      	beq.n	800a498 <acc_service_factory_destroy_service+0x68>
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	6983      	ldr	r3, [r0, #24]
 800a438:	b082      	sub	sp, #8
 800a43a:	4604      	mov	r4, r0
 800a43c:	b103      	cbz	r3, 800a440 <acc_service_factory_destroy_service+0x10>
 800a43e:	4798      	blx	r3
 800a440:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800a444:	6991      	ldr	r1, [r2, #24]
 800a446:	2600      	movs	r6, #0
 800a448:	6096      	str	r6, [r2, #8]
 800a44a:	b331      	cbz	r1, 800a49a <acc_service_factory_destroy_service+0x6a>
 800a44c:	690d      	ldr	r5, [r1, #16]
 800a44e:	9500      	str	r5, [sp, #0]
 800a450:	4a16      	ldr	r2, [pc, #88]	; (800a4ac <acc_service_factory_destroy_service+0x7c>)
 800a452:	4917      	ldr	r1, [pc, #92]	; (800a4b0 <acc_service_factory_destroy_service+0x80>)
 800a454:	2004      	movs	r0, #4
 800a456:	f7ff feb3 	bl	800a1c0 <acc_log_rss>
 800a45a:	b11d      	cbz	r5, 800a464 <acc_service_factory_destroy_service+0x34>
 800a45c:	4b15      	ldr	r3, [pc, #84]	; (800a4b4 <acc_service_factory_destroy_service+0x84>)
 800a45e:	441d      	add	r5, r3
 800a460:	7d2b      	ldrb	r3, [r5, #20]
 800a462:	bb0b      	cbnz	r3, 800a4a8 <acc_service_factory_destroy_service+0x78>
 800a464:	6860      	ldr	r0, [r4, #4]
 800a466:	4914      	ldr	r1, [pc, #80]	; (800a4b8 <acc_service_factory_destroy_service+0x88>)
 800a468:	2300      	movs	r3, #0
 800a46a:	f851 2b04 	ldr.w	r2, [r1], #4
 800a46e:	b112      	cbz	r2, 800a476 <acc_service_factory_destroy_service+0x46>
 800a470:	6852      	ldr	r2, [r2, #4]
 800a472:	4290      	cmp	r0, r2
 800a474:	d00a      	beq.n	800a48c <acc_service_factory_destroy_service+0x5c>
 800a476:	3301      	adds	r3, #1
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d1f6      	bne.n	800a46a <acc_service_factory_destroy_service+0x3a>
 800a47c:	2300      	movs	r3, #0
 800a47e:	4620      	mov	r0, r4
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	b002      	add	sp, #8
 800a484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a488:	f7ff be88 	b.w	800a19c <acc_integration_mem_free>
 800a48c:	4a0b      	ldr	r2, [pc, #44]	; (800a4bc <acc_service_factory_destroy_service+0x8c>)
 800a48e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a492:	2200      	movs	r2, #0
 800a494:	605a      	str	r2, [r3, #4]
 800a496:	e7f1      	b.n	800a47c <acc_service_factory_destroy_service+0x4c>
 800a498:	4770      	bx	lr
 800a49a:	9100      	str	r1, [sp, #0]
 800a49c:	4a03      	ldr	r2, [pc, #12]	; (800a4ac <acc_service_factory_destroy_service+0x7c>)
 800a49e:	4904      	ldr	r1, [pc, #16]	; (800a4b0 <acc_service_factory_destroy_service+0x80>)
 800a4a0:	2004      	movs	r0, #4
 800a4a2:	f7ff fe8d 	bl	800a1c0 <acc_log_rss>
 800a4a6:	e7dd      	b.n	800a464 <acc_service_factory_destroy_service+0x34>
 800a4a8:	752e      	strb	r6, [r5, #20]
 800a4aa:	e7db      	b.n	800a464 <acc_service_factory_destroy_service+0x34>
 800a4ac:	08017864 	.word	0x08017864
 800a4b0:	080178b0 	.word	0x080178b0
 800a4b4:	2000020b 	.word	0x2000020b
 800a4b8:	20000210 	.word	0x20000210
 800a4bc:	2000020c 	.word	0x2000020c

0800a4c0 <acc_service_factory_create_service>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	f7fd f898 	bl	80075f8 <acc_service_configuration_valid>
 800a4c8:	b160      	cbz	r0, 800a4e4 <acc_service_factory_create_service+0x24>
 800a4ca:	792b      	ldrb	r3, [r5, #4]
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d803      	bhi.n	800a4d8 <acc_service_factory_create_service+0x18>
 800a4d0:	e8df f003 	tbb	[pc, r3]
 800a4d4:	0b9f784e 	.word	0x0b9f784e
 800a4d8:	4b6f      	ldr	r3, [pc, #444]	; (800a698 <acc_service_factory_create_service+0x1d8>)
 800a4da:	4a70      	ldr	r2, [pc, #448]	; (800a69c <acc_service_factory_create_service+0x1dc>)
 800a4dc:	4970      	ldr	r1, [pc, #448]	; (800a6a0 <acc_service_factory_create_service+0x1e0>)
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7ff fe6e 	bl	800a1c0 <acc_log_rss>
 800a4e4:	2400      	movs	r4, #0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ea:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800a4ee:	4a6d      	ldr	r2, [pc, #436]	; (800a6a4 <acc_service_factory_create_service+0x1e4>)
 800a4f0:	21b0      	movs	r1, #176	; 0xb0
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	f7ff fe2e 	bl	800a154 <acc_integration_mem_calloc_debug>
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f000 80c0 	beq.w	800a680 <acc_service_factory_create_service+0x1c0>
 800a500:	f100 0624 	add.w	r6, r0, #36	; 0x24
 800a504:	2278      	movs	r2, #120	; 0x78
 800a506:	4629      	mov	r1, r5
 800a508:	4630      	mov	r0, r6
 800a50a:	f005 fdc7 	bl	801009c <memcpy>
 800a50e:	4a66      	ldr	r2, [pc, #408]	; (800a6a8 <acc_service_factory_create_service+0x1e8>)
 800a510:	4966      	ldr	r1, [pc, #408]	; (800a6ac <acc_service_factory_create_service+0x1ec>)
 800a512:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a514:	e9c4 1300 	strd	r1, r3, [r4]
 800a518:	3301      	adds	r3, #1
 800a51a:	bf08      	it	eq
 800a51c:	2301      	moveq	r3, #1
 800a51e:	6353      	str	r3, [r2, #52]	; 0x34
 800a520:	2300      	movs	r3, #0
 800a522:	7363      	strb	r3, [r4, #13]
 800a524:	6223      	str	r3, [r4, #32]
 800a526:	4a62      	ldr	r2, [pc, #392]	; (800a6b0 <acc_service_factory_create_service+0x1f0>)
 800a528:	4b62      	ldr	r3, [pc, #392]	; (800a6b4 <acc_service_factory_create_service+0x1f4>)
 800a52a:	60a6      	str	r6, [r4, #8]
 800a52c:	2703      	movs	r7, #3
 800a52e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a532:	62e4      	str	r4, [r4, #44]	; 0x2c
 800a534:	f105 001c 	add.w	r0, r5, #28
 800a538:	e9c4 2305 	strd	r2, r3, [r4, #20]
 800a53c:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 800a540:	63e1      	str	r1, [r4, #60]	; 0x3c
 800a542:	f7ff ff1b 	bl	800a37c <service_data_timeout_get>
 800a546:	6120      	str	r0, [r4, #16]
 800a548:	4620      	mov	r0, r4
 800a54a:	f7ff fec1 	bl	800a2d0 <register_handle>
 800a54e:	4605      	mov	r5, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	f000 8084 	beq.w	800a65e <acc_service_factory_create_service+0x19e>
 800a556:	6963      	ldr	r3, [r4, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0c4      	beq.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a55c:	4620      	mov	r0, r4
 800a55e:	4798      	blx	r3
 800a560:	4605      	mov	r5, r0
 800a562:	2800      	cmp	r0, #0
 800a564:	d1bf      	bne.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a566:	4620      	mov	r0, r4
 800a568:	f7ff ff62 	bl	800a430 <acc_service_factory_destroy_service>
 800a56c:	462c      	mov	r4, r5
 800a56e:	e7ba      	b.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a570:	23d8      	movs	r3, #216	; 0xd8
 800a572:	4a4c      	ldr	r2, [pc, #304]	; (800a6a4 <acc_service_factory_create_service+0x1e4>)
 800a574:	21b0      	movs	r1, #176	; 0xb0
 800a576:	2001      	movs	r0, #1
 800a578:	f7ff fdec 	bl	800a154 <acc_integration_mem_calloc_debug>
 800a57c:	4604      	mov	r4, r0
 800a57e:	2800      	cmp	r0, #0
 800a580:	d072      	beq.n	800a668 <acc_service_factory_create_service+0x1a8>
 800a582:	f100 0624 	add.w	r6, r0, #36	; 0x24
 800a586:	227c      	movs	r2, #124	; 0x7c
 800a588:	4629      	mov	r1, r5
 800a58a:	4630      	mov	r0, r6
 800a58c:	f005 fd86 	bl	801009c <memcpy>
 800a590:	4a45      	ldr	r2, [pc, #276]	; (800a6a8 <acc_service_factory_create_service+0x1e8>)
 800a592:	4946      	ldr	r1, [pc, #280]	; (800a6ac <acc_service_factory_create_service+0x1ec>)
 800a594:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a596:	e9c4 1300 	strd	r1, r3, [r4]
 800a59a:	3301      	adds	r3, #1
 800a59c:	bf08      	it	eq
 800a59e:	2301      	moveq	r3, #1
 800a5a0:	6353      	str	r3, [r2, #52]	; 0x34
 800a5a2:	4945      	ldr	r1, [pc, #276]	; (800a6b8 <acc_service_factory_create_service+0x1f8>)
 800a5a4:	4a45      	ldr	r2, [pc, #276]	; (800a6bc <acc_service_factory_create_service+0x1fc>)
 800a5a6:	60a6      	str	r6, [r4, #8]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f104 0740 	add.w	r7, r4, #64	; 0x40
 800a5ae:	62e4      	str	r4, [r4, #44]	; 0x2c
 800a5b0:	f105 001c 	add.w	r0, r5, #28
 800a5b4:	7363      	strb	r3, [r4, #13]
 800a5b6:	6223      	str	r3, [r4, #32]
 800a5b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a5bc:	63e7      	str	r7, [r4, #60]	; 0x3c
 800a5be:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800a5c2:	e7be      	b.n	800a542 <acc_service_factory_create_service+0x82>
 800a5c4:	f240 1319 	movw	r3, #281	; 0x119
 800a5c8:	4a36      	ldr	r2, [pc, #216]	; (800a6a4 <acc_service_factory_create_service+0x1e4>)
 800a5ca:	21b4      	movs	r1, #180	; 0xb4
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f7ff fdc1 	bl	800a154 <acc_integration_mem_calloc_debug>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d04d      	beq.n	800a674 <acc_service_factory_create_service+0x1b4>
 800a5d8:	f100 0624 	add.w	r6, r0, #36	; 0x24
 800a5dc:	2280      	movs	r2, #128	; 0x80
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f005 fd5b 	bl	801009c <memcpy>
 800a5e6:	4a30      	ldr	r2, [pc, #192]	; (800a6a8 <acc_service_factory_create_service+0x1e8>)
 800a5e8:	4930      	ldr	r1, [pc, #192]	; (800a6ac <acc_service_factory_create_service+0x1ec>)
 800a5ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a5ec:	e9c4 1300 	strd	r1, r3, [r4]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	bf08      	it	eq
 800a5f4:	2301      	moveq	r3, #1
 800a5f6:	6353      	str	r3, [r2, #52]	; 0x34
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	7363      	strb	r3, [r4, #13]
 800a5fc:	6223      	str	r3, [r4, #32]
 800a5fe:	2701      	movs	r7, #1
 800a600:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a604:	60a6      	str	r6, [r4, #8]
 800a606:	4a2e      	ldr	r2, [pc, #184]	; (800a6c0 <acc_service_factory_create_service+0x200>)
 800a608:	62e4      	str	r4, [r4, #44]	; 0x2c
 800a60a:	f105 001c 	add.w	r0, r5, #28
 800a60e:	4b2d      	ldr	r3, [pc, #180]	; (800a6c4 <acc_service_factory_create_service+0x204>)
 800a610:	e792      	b.n	800a538 <acc_service_factory_create_service+0x78>
 800a612:	23f8      	movs	r3, #248	; 0xf8
 800a614:	4a23      	ldr	r2, [pc, #140]	; (800a6a4 <acc_service_factory_create_service+0x1e4>)
 800a616:	21ac      	movs	r1, #172	; 0xac
 800a618:	2001      	movs	r0, #1
 800a61a:	f7ff fd9b 	bl	800a154 <acc_integration_mem_calloc_debug>
 800a61e:	4604      	mov	r4, r0
 800a620:	2800      	cmp	r0, #0
 800a622:	d033      	beq.n	800a68c <acc_service_factory_create_service+0x1cc>
 800a624:	f100 0624 	add.w	r6, r0, #36	; 0x24
 800a628:	2278      	movs	r2, #120	; 0x78
 800a62a:	4629      	mov	r1, r5
 800a62c:	4630      	mov	r0, r6
 800a62e:	f005 fd35 	bl	801009c <memcpy>
 800a632:	4a1d      	ldr	r2, [pc, #116]	; (800a6a8 <acc_service_factory_create_service+0x1e8>)
 800a634:	491d      	ldr	r1, [pc, #116]	; (800a6ac <acc_service_factory_create_service+0x1ec>)
 800a636:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a638:	e9c4 1300 	strd	r1, r3, [r4]
 800a63c:	3301      	adds	r3, #1
 800a63e:	bf08      	it	eq
 800a640:	2301      	moveq	r3, #1
 800a642:	6353      	str	r3, [r2, #52]	; 0x34
 800a644:	2300      	movs	r3, #0
 800a646:	7363      	strb	r3, [r4, #13]
 800a648:	6223      	str	r3, [r4, #32]
 800a64a:	2702      	movs	r7, #2
 800a64c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a650:	60a6      	str	r6, [r4, #8]
 800a652:	4a1d      	ldr	r2, [pc, #116]	; (800a6c8 <acc_service_factory_create_service+0x208>)
 800a654:	62e4      	str	r4, [r4, #44]	; 0x2c
 800a656:	f105 001c 	add.w	r0, r5, #28
 800a65a:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <acc_service_factory_create_service+0x20c>)
 800a65c:	e76c      	b.n	800a538 <acc_service_factory_create_service+0x78>
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff fd9c 	bl	800a19c <acc_integration_mem_free>
 800a664:	462c      	mov	r4, r5
 800a666:	e73e      	b.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a668:	4b19      	ldr	r3, [pc, #100]	; (800a6d0 <acc_service_factory_create_service+0x210>)
 800a66a:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <acc_service_factory_create_service+0x214>)
 800a66c:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <acc_service_factory_create_service+0x1e0>)
 800a66e:	f7ff fda7 	bl	800a1c0 <acc_log_rss>
 800a672:	e738      	b.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a674:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <acc_service_factory_create_service+0x218>)
 800a676:	4a17      	ldr	r2, [pc, #92]	; (800a6d4 <acc_service_factory_create_service+0x214>)
 800a678:	4909      	ldr	r1, [pc, #36]	; (800a6a0 <acc_service_factory_create_service+0x1e0>)
 800a67a:	f7ff fda1 	bl	800a1c0 <acc_log_rss>
 800a67e:	e732      	b.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a680:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <acc_service_factory_create_service+0x21c>)
 800a682:	4a14      	ldr	r2, [pc, #80]	; (800a6d4 <acc_service_factory_create_service+0x214>)
 800a684:	4906      	ldr	r1, [pc, #24]	; (800a6a0 <acc_service_factory_create_service+0x1e0>)
 800a686:	f7ff fd9b 	bl	800a1c0 <acc_log_rss>
 800a68a:	e72c      	b.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a68c:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <acc_service_factory_create_service+0x220>)
 800a68e:	4a11      	ldr	r2, [pc, #68]	; (800a6d4 <acc_service_factory_create_service+0x214>)
 800a690:	4903      	ldr	r1, [pc, #12]	; (800a6a0 <acc_service_factory_create_service+0x1e0>)
 800a692:	f7ff fd95 	bl	800a1c0 <acc_log_rss>
 800a696:	e726      	b.n	800a4e6 <acc_service_factory_create_service+0x26>
 800a698:	08017754 	.word	0x08017754
 800a69c:	080177f0 	.word	0x080177f0
 800a6a0:	080178b0 	.word	0x080178b0
 800a6a4:	080177d8 	.word	0x080177d8
 800a6a8:	2000020c 	.word	0x2000020c
 800a6ac:	acc09ee8 	.word	0xacc09ee8
 800a6b0:	08007d49 	.word	0x08007d49
 800a6b4:	08007df1 	.word	0x08007df1
 800a6b8:	08007991 	.word	0x08007991
 800a6bc:	08007a41 	.word	0x08007a41
 800a6c0:	08007a91 	.word	0x08007a91
 800a6c4:	08007b51 	.word	0x08007b51
 800a6c8:	08007c41 	.word	0x08007c41
 800a6cc:	08007d19 	.word	0x08007d19
 800a6d0:	08017778 	.word	0x08017778
 800a6d4:	08016858 	.word	0x08016858
 800a6d8:	080177ac 	.word	0x080177ac
 800a6dc:	080177c0 	.word	0x080177c0
 800a6e0:	08017790 	.word	0x08017790

0800a6e4 <output_type>:
 800a6e4:	f890 0358 	ldrb.w	r0, [r0, #856]	; 0x358
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop

0800a6ec <inject_data>:
 800a6ec:	f003 ba74 	b.w	800dbd8 <acc_element_source_adc_inject_data>

0800a6f0 <produce>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	f003 fa12 	bl	800db1c <acc_element_source_adc_produce>
 800a6f8:	b960      	cbnz	r0, 800a714 <produce+0x24>
 800a6fa:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
 800a6fe:	f8d4 2318 	ldr.w	r2, [r4, #792]	; 0x318
 800a702:	60d8      	str	r0, [r3, #12]
 800a704:	2101      	movs	r1, #1
 800a706:	7198      	strb	r0, [r3, #6]
 800a708:	7159      	strb	r1, [r3, #5]
 800a70a:	f504 7045 	add.w	r0, r4, #788	; 0x314
 800a70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a712:	4710      	bx	r2
 800a714:	bd10      	pop	{r4, pc}
 800a716:	bf00      	nop

0800a718 <disassemble>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	6804      	ldr	r4, [r0, #0]
 800a71c:	4605      	mov	r5, r0
 800a71e:	b14c      	cbz	r4, 800a734 <disassemble+0x1c>
 800a720:	4620      	mov	r0, r4
 800a722:	f003 f9ed 	bl	800db00 <acc_element_source_adc_release>
 800a726:	f8d4 03bc 	ldr.w	r0, [r4, #956]	; 0x3bc
 800a72a:	f7ff fd37 	bl	800a19c <acc_integration_mem_free>
 800a72e:	4620      	mov	r0, r4
 800a730:	f7ff fd34 	bl	800a19c <acc_integration_mem_free>
 800a734:	4628      	mov	r0, r5
 800a736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a73a:	f7ff bd2f 	b.w	800a19c <acc_integration_mem_free>
 800a73e:	bf00      	nop

0800a740 <acc_pipeline_envelope_assemble>:
 800a740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	4680      	mov	r8, r0
 800a746:	460d      	mov	r5, r1
 800a748:	4691      	mov	r9, r2
 800a74a:	49c8      	ldr	r1, [pc, #800]	; (800aa6c <acc_pipeline_envelope_assemble+0x32c>)
 800a74c:	22a0      	movs	r2, #160	; 0xa0
 800a74e:	2014      	movs	r0, #20
 800a750:	f7ff fcea 	bl	800a128 <acc_integration_mem_alloc_debug>
 800a754:	4607      	mov	r7, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	f000 817a 	beq.w	800aa50 <acc_pipeline_envelope_assemble+0x310>
 800a75c:	23fd      	movs	r3, #253	; 0xfd
 800a75e:	4ac3      	ldr	r2, [pc, #780]	; (800aa6c <acc_pipeline_envelope_assemble+0x32c>)
 800a760:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800a764:	2001      	movs	r0, #1
 800a766:	f7ff fcf5 	bl	800a154 <acc_integration_mem_calloc_debug>
 800a76a:	4604      	mov	r4, r0
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f000 8175 	beq.w	800aa5c <acc_pipeline_envelope_assemble+0x31c>
 800a772:	4629      	mov	r1, r5
 800a774:	f500 725e 	add.w	r2, r0, #888	; 0x378
 800a778:	f003 f9a2 	bl	800dac0 <acc_element_source_adc_init>
 800a77c:	4605      	mov	r5, r0
 800a77e:	2800      	cmp	r0, #0
 800a780:	f000 815d 	beq.w	800aa3e <acc_pipeline_envelope_assemble+0x2fe>
 800a784:	ed9f 0aba 	vldr	s0, [pc, #744]	; 800aa70 <acc_pipeline_envelope_assemble+0x330>
 800a788:	603c      	str	r4, [r7, #0]
 800a78a:	2104      	movs	r1, #4
 800a78c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800a790:	f003 f888 	bl	800d8a4 <acc_element_saturation_check_init>
 800a794:	2200      	movs	r2, #0
 800a796:	2104      	movs	r1, #4
 800a798:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800a79c:	f002 fd6a 	bl	800d274 <acc_element_centering_init>
 800a7a0:	f898 3009 	ldrb.w	r3, [r8, #9]
 800a7a4:	b143      	cbz	r3, 800a7b8 <acc_pipeline_envelope_assemble+0x78>
 800a7a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a7aa:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 800a7ae:	2104      	movs	r1, #4
 800a7b0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 800a7b4:	f002 ff2a 	bl	800d60c <acc_element_noise_level_normalization_init>
 800a7b8:	2207      	movs	r2, #7
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	f504 7082 	add.w	r0, r4, #260	; 0x104
 800a7c0:	f002 fe56 	bl	800d470 <acc_element_converter_init>
 800a7c4:	eddf 0aaa 	vldr	s1, [pc, #680]	; 800aa70 <acc_pipeline_envelope_assemble+0x330>
 800a7c8:	ed94 0ae1 	vldr	s0, [r4, #900]	; 0x384
 800a7cc:	2107      	movs	r1, #7
 800a7ce:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800a7d2:	f002 fc87 	bl	800d0e4 <acc_element_iq_mixer_init>
 800a7d6:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800a7da:	ed98 0a00 	vldr	s0, [r8]
 800a7de:	f8d4 239c 	ldr.w	r2, [r4, #924]	; 0x39c
 800a7e2:	2107      	movs	r1, #7
 800a7e4:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 800a7e8:	f002 ffb2 	bl	800d750 <acc_element_phase_compensation_init>
 800a7ec:	f8d4 23a8 	ldr.w	r2, [r4, #936]	; 0x3a8
 800a7f0:	f504 70e6 	add.w	r0, r4, #460	; 0x1cc
 800a7f4:	2107      	movs	r1, #7
 800a7f6:	f002 fead 	bl	800d554 <acc_element_crop_init>
 800a7fa:	f898 2008 	ldrb.w	r2, [r8, #8]
 800a7fe:	ed98 0a03 	vldr	s0, [r8, #12]
 800a802:	2107      	movs	r1, #7
 800a804:	f504 7002 	add.w	r0, r4, #520	; 0x208
 800a808:	f002 fbae 	bl	800cf68 <acc_element_depth_domain_low_pass_filter_init>
 800a80c:	ed98 0a01 	vldr	s0, [r8, #4]
 800a810:	2107      	movs	r1, #7
 800a812:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 800a816:	f003 f8e9 	bl	800d9ec <acc_element_time_domain_low_pass_filter_init>
 800a81a:	2107      	movs	r1, #7
 800a81c:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 800a820:	f002 fcd0 	bl	800d1c4 <acc_element_abs_init>
 800a824:	2202      	movs	r2, #2
 800a826:	2103      	movs	r1, #3
 800a828:	f504 7036 	add.w	r0, r4, #728	; 0x2d8
 800a82c:	f002 fe20 	bl	800d470 <acc_element_converter_init>
 800a830:	f504 7045 	add.w	r0, r4, #788	; 0x314
 800a834:	2202      	movs	r2, #2
 800a836:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a83a:	f003 f92f 	bl	800da9c <acc_element_sink_callback_init>
 800a83e:	683c      	ldr	r4, [r7, #0]
 800a840:	2007      	movs	r0, #7
 800a842:	f8d4 53a0 	ldr.w	r5, [r4, #928]	; 0x3a0
 800a846:	f003 f9d5 	bl	800dbf4 <acc_element_sizeof>
 800a84a:	fb00 f005 	mul.w	r0, r0, r5
 800a84e:	1d41      	adds	r1, r0, #5
 800a850:	0049      	lsls	r1, r1, #1
 800a852:	f240 1349 	movw	r3, #329	; 0x149
 800a856:	4a85      	ldr	r2, [pc, #532]	; (800aa6c <acc_pipeline_envelope_assemble+0x32c>)
 800a858:	2001      	movs	r0, #1
 800a85a:	f7ff fc7b 	bl	800a154 <acc_integration_mem_calloc_debug>
 800a85e:	4605      	mov	r5, r0
 800a860:	f8c4 03bc 	str.w	r0, [r4, #956]	; 0x3bc
 800a864:	2800      	cmp	r0, #0
 800a866:	f000 80d5 	beq.w	800aa14 <acc_pipeline_envelope_assemble+0x2d4>
 800a86a:	2007      	movs	r0, #7
 800a86c:	f8d4 63a4 	ldr.w	r6, [r4, #932]	; 0x3a4
 800a870:	f003 f9c0 	bl	800dbf4 <acc_element_sizeof>
 800a874:	fb00 fa06 	mul.w	sl, r0, r6
 800a878:	2007      	movs	r0, #7
 800a87a:	f8d4 b3a0 	ldr.w	fp, [r4, #928]	; 0x3a0
 800a87e:	f204 366a 	addw	r6, r4, #874	; 0x36a
 800a882:	f003 f9b7 	bl	800dbf4 <acc_element_sizeof>
 800a886:	f898 2009 	ldrb.w	r2, [r8, #9]
 800a88a:	6326      	str	r6, [r4, #48]	; 0x30
 800a88c:	f504 7157 	add.w	r1, r4, #860	; 0x35c
 800a890:	f504 7658 	add.w	r6, r4, #864	; 0x360
 800a894:	f504 735c 	add.w	r3, r4, #880	; 0x370
 800a898:	f504 7c5b 	add.w	ip, r4, #876	; 0x36c
 800a89c:	62a1      	str	r1, [r4, #40]	; 0x28
 800a89e:	62e6      	str	r6, [r4, #44]	; 0x2c
 800a8a0:	f504 7159 	add.w	r1, r4, #868	; 0x364
 800a8a4:	f504 765a 	add.w	r6, r4, #872	; 0x368
 800a8a8:	6165      	str	r5, [r4, #20]
 800a8aa:	fb00 500b 	mla	r0, r0, fp, r5
 800a8ae:	6565      	str	r5, [r4, #84]	; 0x54
 800a8b0:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
 800a8b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a8b6:	66a3      	str	r3, [r4, #104]	; 0x68
 800a8b8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800a8bc:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
 800a8c0:	6221      	str	r1, [r4, #32]
 800a8c2:	65a6      	str	r6, [r4, #88]	; 0x58
 800a8c4:	b11a      	cbz	r2, 800a8ce <acc_pipeline_envelope_assemble+0x18e>
 800a8c6:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
 800a8ca:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800a8ce:	683e      	ldr	r6, [r7, #0]
 800a8d0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800a8d4:	eb05 020a 	add.w	r2, r5, sl
 800a8d8:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
 800a8dc:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
 800a8e0:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 800a8e4:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
 800a8e8:	f106 0a44 	add.w	sl, r6, #68	; 0x44
 800a8ec:	1d02      	adds	r2, r0, #4
 800a8ee:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
 800a8f2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
 800a8f6:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 800a8fa:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
 800a8fe:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800a902:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
 800a906:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 800a90a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800a90e:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800a912:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 800a916:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800a91a:	f8c4 c174 	str.w	ip, [r4, #372]	; 0x174
 800a91e:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
 800a922:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
 800a926:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
 800a92a:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
 800a92e:	f8c4 2270 	str.w	r2, [r4, #624]	; 0x270
 800a932:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
 800a936:	f8c4 52b0 	str.w	r5, [r4, #688]	; 0x2b0
 800a93a:	f8c4 52e8 	str.w	r5, [r4, #744]	; 0x2e8
 800a93e:	f8c4 52ec 	str.w	r5, [r4, #748]	; 0x2ec
 800a942:	f8c4 5324 	str.w	r5, [r4, #804]	; 0x324
 800a946:	f8c4 134c 	str.w	r1, [r4, #844]	; 0x34c
 800a94a:	4630      	mov	r0, r6
 800a94c:	4651      	mov	r1, sl
 800a94e:	f106 0484 	add.w	r4, r6, #132	; 0x84
 800a952:	f003 f95b 	bl	800dc0c <acc_element_connect>
 800a956:	4650      	mov	r0, sl
 800a958:	4621      	mov	r1, r4
 800a95a:	f003 f957 	bl	800dc0c <acc_element_connect>
 800a95e:	f898 3009 	ldrb.w	r3, [r8, #9]
 800a962:	f506 7582 	add.w	r5, r6, #260	; 0x104
 800a966:	2b00      	cmp	r3, #0
 800a968:	d148      	bne.n	800a9fc <acc_pipeline_envelope_assemble+0x2bc>
 800a96a:	4620      	mov	r0, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	f003 f94d 	bl	800dc0c <acc_element_connect>
 800a972:	f506 74a0 	add.w	r4, r6, #320	; 0x140
 800a976:	4628      	mov	r0, r5
 800a978:	4621      	mov	r1, r4
 800a97a:	f506 75c2 	add.w	r5, r6, #388	; 0x184
 800a97e:	f003 f945 	bl	800dc0c <acc_element_connect>
 800a982:	4620      	mov	r0, r4
 800a984:	4629      	mov	r1, r5
 800a986:	f506 74e6 	add.w	r4, r6, #460	; 0x1cc
 800a98a:	f003 f93f 	bl	800dc0c <acc_element_connect>
 800a98e:	4628      	mov	r0, r5
 800a990:	4621      	mov	r1, r4
 800a992:	f506 7502 	add.w	r5, r6, #520	; 0x208
 800a996:	f003 f939 	bl	800dc0c <acc_element_connect>
 800a99a:	4620      	mov	r0, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	f506 7417 	add.w	r4, r6, #604	; 0x25c
 800a9a2:	f003 f933 	bl	800dc0c <acc_element_connect>
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f506 7527 	add.w	r5, r6, #668	; 0x29c
 800a9ae:	f003 f92d 	bl	800dc0c <acc_element_connect>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	f506 7436 	add.w	r4, r6, #728	; 0x2d8
 800a9ba:	f003 f927 	bl	800dc0c <acc_element_connect>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f003 f923 	bl	800dc0c <acc_element_connect>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f506 7145 	add.w	r1, r6, #788	; 0x314
 800a9cc:	f003 f91e 	bl	800dc0c <acc_element_connect>
 800a9d0:	6838      	ldr	r0, [r7, #0]
 800a9d2:	f003 f89f 	bl	800db14 <acc_element_source_adc_validate>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	b340      	cbz	r0, 800aa2c <acc_pipeline_envelope_assemble+0x2ec>
 800a9da:	6838      	ldr	r0, [r7, #0]
 800a9dc:	f003 f896 	bl	800db0c <acc_element_source_adc_reset>
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	4824      	ldr	r0, [pc, #144]	; (800aa74 <acc_pipeline_envelope_assemble+0x334>)
 800a9e4:	f8c3 9350 	str.w	r9, [r3, #848]	; 0x350
 800a9e8:	4923      	ldr	r1, [pc, #140]	; (800aa78 <acc_pipeline_envelope_assemble+0x338>)
 800a9ea:	4a24      	ldr	r2, [pc, #144]	; (800aa7c <acc_pipeline_envelope_assemble+0x33c>)
 800a9ec:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <acc_pipeline_envelope_assemble+0x340>)
 800a9ee:	e9c7 0101 	strd	r0, r1, [r7, #4]
 800a9f2:	e9c7 2303 	strd	r2, r3, [r7, #12]
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fc:	f106 03c4 	add.w	r3, r6, #196	; 0xc4
 800aa00:	4620      	mov	r0, r4
 800aa02:	4619      	mov	r1, r3
 800aa04:	461c      	mov	r4, r3
 800aa06:	f003 f901 	bl	800dc0c <acc_element_connect>
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f003 f8fd 	bl	800dc0c <acc_element_connect>
 800aa12:	e7ae      	b.n	800a972 <acc_pipeline_envelope_assemble+0x232>
 800aa14:	4b1b      	ldr	r3, [pc, #108]	; (800aa84 <acc_pipeline_envelope_assemble+0x344>)
 800aa16:	4a1c      	ldr	r2, [pc, #112]	; (800aa88 <acc_pipeline_envelope_assemble+0x348>)
 800aa18:	491c      	ldr	r1, [pc, #112]	; (800aa8c <acc_pipeline_envelope_assemble+0x34c>)
 800aa1a:	f7ff fbd1 	bl	800a1c0 <acc_log_rss>
 800aa1e:	4638      	mov	r0, r7
 800aa20:	462f      	mov	r7, r5
 800aa22:	f7ff fe79 	bl	800a718 <disassemble>
 800aa26:	4638      	mov	r0, r7
 800aa28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	4a18      	ldr	r2, [pc, #96]	; (800aa90 <acc_pipeline_envelope_assemble+0x350>)
 800aa2e:	4917      	ldr	r1, [pc, #92]	; (800aa8c <acc_pipeline_envelope_assemble+0x34c>)
 800aa30:	f7ff fbc6 	bl	800a1c0 <acc_log_rss>
 800aa34:	4638      	mov	r0, r7
 800aa36:	f7ff fe6f 	bl	800a718 <disassemble>
 800aa3a:	4627      	mov	r7, r4
 800aa3c:	e7db      	b.n	800a9f6 <acc_pipeline_envelope_assemble+0x2b6>
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff fbac 	bl	800a19c <acc_integration_mem_free>
 800aa44:	603d      	str	r5, [r7, #0]
 800aa46:	4638      	mov	r0, r7
 800aa48:	f7ff fba8 	bl	800a19c <acc_integration_mem_free>
 800aa4c:	2700      	movs	r7, #0
 800aa4e:	e7d2      	b.n	800a9f6 <acc_pipeline_envelope_assemble+0x2b6>
 800aa50:	4b10      	ldr	r3, [pc, #64]	; (800aa94 <acc_pipeline_envelope_assemble+0x354>)
 800aa52:	4a0d      	ldr	r2, [pc, #52]	; (800aa88 <acc_pipeline_envelope_assemble+0x348>)
 800aa54:	490d      	ldr	r1, [pc, #52]	; (800aa8c <acc_pipeline_envelope_assemble+0x34c>)
 800aa56:	f7ff fbb3 	bl	800a1c0 <acc_log_rss>
 800aa5a:	e7cc      	b.n	800a9f6 <acc_pipeline_envelope_assemble+0x2b6>
 800aa5c:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <acc_pipeline_envelope_assemble+0x358>)
 800aa5e:	4a0a      	ldr	r2, [pc, #40]	; (800aa88 <acc_pipeline_envelope_assemble+0x348>)
 800aa60:	490a      	ldr	r1, [pc, #40]	; (800aa8c <acc_pipeline_envelope_assemble+0x34c>)
 800aa62:	f7ff fbad 	bl	800a1c0 <acc_log_rss>
 800aa66:	603c      	str	r4, [r7, #0]
 800aa68:	e7ed      	b.n	800aa46 <acc_pipeline_envelope_assemble+0x306>
 800aa6a:	bf00      	nop
 800aa6c:	0801798c 	.word	0x0801798c
 800aa70:	00000000 	.word	0x00000000
 800aa74:	0800a6f1 	.word	0x0800a6f1
 800aa78:	0800a6ed 	.word	0x0800a6ed
 800aa7c:	0800a6e5 	.word	0x0800a6e5
 800aa80:	0800a719 	.word	0x0800a719
 800aa84:	08017978 	.word	0x08017978
 800aa88:	08016858 	.word	0x08016858
 800aa8c:	080179a4 	.word	0x080179a4
 800aa90:	080179b8 	.word	0x080179b8
 800aa94:	08017944 	.word	0x08017944
 800aa98:	08017964 	.word	0x08017964

0800aa9c <destroy>:
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	6800      	ldr	r0, [r0, #0]
 800aaa2:	f7ff fb7b 	bl	800a19c <acc_integration_mem_free>
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaac:	f7ff bb76 	b.w	800a19c <acc_integration_mem_free>

0800aab0 <measure_noise>:
 800aab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	f8d0 a0a8 	ldr.w	sl, [r0, #168]	; 0xa8
 800aab8:	b0ae      	sub	sp, #184	; 0xb8
 800aaba:	4604      	mov	r4, r0
 800aabc:	2200      	movs	r2, #0
 800aabe:	4650      	mov	r0, sl
 800aac0:	460d      	mov	r5, r1
 800aac2:	a901      	add	r1, sp, #4
 800aac4:	f001 fce8 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800aac8:	4621      	mov	r1, r4
 800aaca:	22a8      	movs	r2, #168	; 0xa8
 800aacc:	a804      	add	r0, sp, #16
 800aace:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aad2:	f005 fae3 	bl	801009c <memcpy>
 800aad6:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800aad8:	f8b4 80fc 	ldrh.w	r8, [r4, #252]	; 0xfc
 800aadc:	00bf      	lsls	r7, r7, #2
 800aade:	1e7b      	subs	r3, r7, #1
 800aae0:	2202      	movs	r2, #2
 800aae2:	a904      	add	r1, sp, #16
 800aae4:	2400      	movs	r4, #0
 800aae6:	932a      	str	r3, [sp, #168]	; 0xa8
 800aae8:	4650      	mov	r0, sl
 800aaea:	2301      	movs	r3, #1
 800aaec:	922b      	str	r2, [sp, #172]	; 0xac
 800aaee:	9318      	str	r3, [sp, #96]	; 0x60
 800aaf0:	941d      	str	r4, [sp, #116]	; 0x74
 800aaf2:	9417      	str	r4, [sp, #92]	; 0x5c
 800aaf4:	f003 fc1c 	bl	800e330 <acc_cpd_linear_sweep_load_program>
 800aaf8:	4650      	mov	r0, sl
 800aafa:	f003 fe23 	bl	800e744 <acc_cpd_linear_sweep_run_program>
 800aafe:	4650      	mov	r0, sl
 800ab00:	aa02      	add	r2, sp, #8
 800ab02:	f644 6120 	movw	r1, #20000	; 0x4e20
 800ab06:	f001 fd77 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	b918      	cbnz	r0, 800ab16 <measure_noise+0x66>
 800ab0e:	4630      	mov	r0, r6
 800ab10:	b02e      	add	sp, #184	; 0xb8
 800ab12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab16:	217c      	movs	r1, #124	; 0x7c
 800ab18:	fbb1 f8f8 	udiv	r8, r1, r8
 800ab1c:	fb07 f808 	mul.w	r8, r7, r8
 800ab20:	4641      	mov	r1, r8
 800ab22:	4650      	mov	r0, sl
 800ab24:	f003 fe52 	bl	800e7cc <acc_cpd_linear_sweep_transfer_data>
 800ab28:	4650      	mov	r0, sl
 800ab2a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800ab2e:	f003 fe6d 	bl	800e80c <acc_cpd_linear_sweep_low_power_stop>
 800ab32:	f1b8 0f0e 	cmp.w	r8, #14
 800ab36:	f1a8 0c0e 	sub.w	ip, r8, #14
 800ab3a:	d921      	bls.n	800ab80 <measure_noise+0xd0>
 800ab3c:	f109 071a 	add.w	r7, r9, #26
 800ab40:	f1a9 0102 	sub.w	r1, r9, #2
 800ab44:	4623      	mov	r3, r4
 800ab46:	eb01 0148 	add.w	r1, r1, r8, lsl #1
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800ab50:	4281      	cmp	r1, r0
 800ab52:	4413      	add	r3, r2
 800ab54:	d1fa      	bne.n	800ab4c <measure_noise+0x9c>
 800ab56:	fbb3 f2fc 	udiv	r2, r3, ip
 800ab5a:	2400      	movs	r4, #0
 800ab5c:	b292      	uxth	r2, r2
 800ab5e:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bfb8      	it	lt
 800ab68:	425b      	neglt	r3, r3
 800ab6a:	42b8      	cmp	r0, r7
 800ab6c:	441c      	add	r4, r3
 800ab6e:	d1f6      	bne.n	800ab5e <measure_noise+0xae>
 800ab70:	fbb4 f4fc 	udiv	r4, r4, ip
 800ab74:	b2a3      	uxth	r3, r4
 800ab76:	4630      	mov	r0, r6
 800ab78:	82ab      	strh	r3, [r5, #20]
 800ab7a:	b02e      	add	sp, #184	; 0xb8
 800ab7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab80:	4623      	mov	r3, r4
 800ab82:	e7f8      	b.n	800ab76 <measure_noise+0xc6>

0800ab84 <calibrate>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	b094      	sub	sp, #80	; 0x50
 800ab88:	460d      	mov	r5, r1
 800ab8a:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 800ab8e:	f7ff faa7 	bl	800a0e0 <acc_integration_get_sensor_reference_frequency>
 800ab92:	a80e      	add	r0, sp, #56	; 0x38
 800ab94:	a902      	add	r1, sp, #8
 800ab96:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
 800ab9a:	f003 fe39 	bl	800e810 <acc_cpd_pll_divisors_calculate>
 800ab9e:	b918      	cbnz	r0, 800aba8 <calibrate+0x24>
 800aba0:	2400      	movs	r4, #0
 800aba2:	4620      	mov	r0, r4
 800aba4:	b014      	add	sp, #80	; 0x50
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
 800aba8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800abac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800abb0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800abb4:	910b      	str	r1, [sp, #44]	; 0x2c
 800abb6:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 800abba:	a901      	add	r1, sp, #4
 800abbc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800abc0:	920c      	str	r2, [sp, #48]	; 0x30
 800abc2:	a809      	add	r0, sp, #36	; 0x24
 800abc4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800abc8:	f003 f856 	bl	800dc78 <acc_cpd_cbank_calibration>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d0e7      	beq.n	800aba0 <calibrate+0x1c>
 800abd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800abd4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800abd8:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 800abdc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800abe0:	930f      	str	r3, [sp, #60]	; 0x3c
 800abe2:	9110      	str	r1, [sp, #64]	; 0x40
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	940e      	str	r4, [sp, #56]	; 0x38
 800abe8:	a80e      	add	r0, sp, #56	; 0x38
 800abea:	a905      	add	r1, sp, #20
 800abec:	9611      	str	r6, [sp, #68]	; 0x44
 800abee:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 800abf2:	9313      	str	r3, [sp, #76]	; 0x4c
 800abf4:	f003 f912 	bl	800de1c <acc_cpd_dll_calibration>
 800abf8:	4604      	mov	r4, r0
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0d0      	beq.n	800aba0 <calibrate+0x1c>
 800abfe:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 800ac02:	9a01      	ldr	r2, [sp, #4]
 800ac04:	9907      	ldr	r1, [sp, #28]
 800ac06:	80aa      	strh	r2, [r5, #4]
 800ac08:	80eb      	strh	r3, [r5, #6]
 800ac0a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ac0e:	8128      	strh	r0, [r5, #8]
 800ac10:	2304      	movs	r3, #4
 800ac12:	8169      	strh	r1, [r5, #10]
 800ac14:	81aa      	strh	r2, [r5, #12]
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	4a03      	ldr	r2, [pc, #12]	; (800ac28 <calibrate+0xa4>)
 800ac1a:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <calibrate+0xa8>)
 800ac1c:	4904      	ldr	r1, [pc, #16]	; (800ac30 <calibrate+0xac>)
 800ac1e:	2002      	movs	r0, #2
 800ac20:	f7ff face 	bl	800a1c0 <acc_log_rss>
 800ac24:	e7bd      	b.n	800aba2 <calibrate+0x1e>
 800ac26:	bf00      	nop
 800ac28:	08017a30 	.word	0x08017a30
 800ac2c:	080179f8 	.word	0x080179f8
 800ac30:	08017a64 	.word	0x08017a64

0800ac34 <set_calibration_context>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	b08c      	sub	sp, #48	; 0x30
 800ac3c:	d00a      	beq.n	800ac54 <set_calibration_context+0x20>
 800ac3e:	2204      	movs	r2, #4
 800ac40:	9200      	str	r2, [sp, #0]
 800ac42:	4924      	ldr	r1, [pc, #144]	; (800acd4 <set_calibration_context+0xa0>)
 800ac44:	4a24      	ldr	r2, [pc, #144]	; (800acd8 <set_calibration_context+0xa4>)
 800ac46:	2000      	movs	r0, #0
 800ac48:	f7ff faba 	bl	800a1c0 <acc_log_rss>
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	4630      	mov	r0, r6
 800ac50:	b00c      	add	sp, #48	; 0x30
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	460d      	mov	r5, r1
 800ac56:	4604      	mov	r4, r0
 800ac58:	f7ff fa42 	bl	800a0e0 <acc_integration_get_sensor_reference_frequency>
 800ac5c:	a806      	add	r0, sp, #24
 800ac5e:	a903      	add	r1, sp, #12
 800ac60:	ed8d 0a06 	vstr	s0, [sp, #24]
 800ac64:	f003 fdd4 	bl	800e810 <acc_cpd_pll_divisors_calculate>
 800ac68:	4606      	mov	r6, r0
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0ef      	beq.n	800ac4e <set_calibration_context+0x1a>
 800ac6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ac72:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ac76:	6062      	str	r2, [r4, #4]
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800ac7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ac82:	6022      	str	r2, [r4, #0]
 800ac84:	88aa      	ldrh	r2, [r5, #4]
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	88eb      	ldrh	r3, [r5, #6]
 800ac8a:	6122      	str	r2, [r4, #16]
 800ac8c:	892a      	ldrh	r2, [r5, #8]
 800ac8e:	6163      	str	r3, [r4, #20]
 800ac90:	896b      	ldrh	r3, [r5, #10]
 800ac92:	61e3      	str	r3, [r4, #28]
 800ac94:	61a2      	str	r2, [r4, #24]
 800ac96:	a906      	add	r1, sp, #24
 800ac98:	89a8      	ldrh	r0, [r5, #12]
 800ac9a:	f002 ffb9 	bl	800dc10 <acc_cpd_area_calibration_calculate_area_settings>
 800ac9e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800aca2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800aca6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800acaa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800acae:	6220      	str	r0, [r4, #32]
 800acb0:	6261      	str	r1, [r4, #36]	; 0x24
 800acb2:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800acb6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800acba:	62a2      	str	r2, [r4, #40]	; 0x28
 800acbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acbe:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800acc2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800acc6:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 800acca:	4630      	mov	r0, r6
 800accc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 800acd0:	b00c      	add	sp, #48	; 0x30
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	08017a64 	.word	0x08017a64
 800acd8:	08017a80 	.word	0x08017a80

0800acdc <stop>:
 800acdc:	4603      	mov	r3, r0
 800acde:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800ace2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800ace6:	b911      	cbnz	r1, 800acee <stop+0x12>
 800ace8:	4619      	mov	r1, r3
 800acea:	f003 bd8f 	b.w	800e80c <acc_cpd_linear_sweep_low_power_stop>
 800acee:	4619      	mov	r1, r3
 800acf0:	f003 bd8a 	b.w	800e808 <acc_cpd_linear_sweep_stop>

0800acf4 <update_data>:
 800acf4:	b530      	push	{r4, r5, lr}
 800acf6:	4604      	mov	r4, r0
 800acf8:	b083      	sub	sp, #12
 800acfa:	30ac      	adds	r0, #172	; 0xac
 800acfc:	f000 fdb8 	bl	800b870 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 800ad00:	b388      	cbz	r0, 800ad66 <update_data+0x72>
 800ad02:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 800ad06:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800ad0a:	f003 fd7f 	bl	800e80c <acc_cpd_linear_sweep_low_power_stop>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	b388      	cbz	r0, 800ad76 <update_data+0x82>
 800ad12:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800ad16:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800ad1a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800ad1e:	1c51      	adds	r1, r2, #1
 800ad20:	fbb1 f2f3 	udiv	r2, r1, r3
 800ad24:	fb03 1212 	mls	r2, r3, r2, r1
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 800ad30:	eb00 1502 	add.w	r5, r0, r2, lsl #4
 800ad34:	d02d      	beq.n	800ad92 <update_data+0x9e>
 800ad36:	220f      	movs	r2, #15
 800ad38:	2310      	movs	r3, #16
 800ad3a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800ad3e:	4669      	mov	r1, sp
 800ad40:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800ad44:	e9cd 2500 	strd	r2, r5, [sp]
 800ad48:	f003 fd0a 	bl	800e760 <acc_cpd_linear_sweep_update_program>
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	b1c8      	cbz	r0, 800ad84 <update_data+0x90>
 800ad50:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800ad54:	f003 fcf6 	bl	800e744 <acc_cpd_linear_sweep_run_program>
 800ad58:	4605      	mov	r5, r0
 800ad5a:	b948      	cbnz	r0, 800ad70 <update_data+0x7c>
 800ad5c:	4a10      	ldr	r2, [pc, #64]	; (800ada0 <update_data+0xac>)
 800ad5e:	4911      	ldr	r1, [pc, #68]	; (800ada4 <update_data+0xb0>)
 800ad60:	f7ff fa2e 	bl	800a1c0 <acc_log_rss>
 800ad64:	e004      	b.n	800ad70 <update_data+0x7c>
 800ad66:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800ad6a:	f003 fd3b 	bl	800e7e4 <acc_cpd_linear_sweep_sensor_continue>
 800ad6e:	4605      	mov	r5, r0
 800ad70:	4628      	mov	r0, r5
 800ad72:	b003      	add	sp, #12
 800ad74:	bd30      	pop	{r4, r5, pc}
 800ad76:	4a0c      	ldr	r2, [pc, #48]	; (800ada8 <update_data+0xb4>)
 800ad78:	490a      	ldr	r1, [pc, #40]	; (800ada4 <update_data+0xb0>)
 800ad7a:	f7ff fa21 	bl	800a1c0 <acc_log_rss>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	b003      	add	sp, #12
 800ad82:	bd30      	pop	{r4, r5, pc}
 800ad84:	4a09      	ldr	r2, [pc, #36]	; (800adac <update_data+0xb8>)
 800ad86:	4907      	ldr	r1, [pc, #28]	; (800ada4 <update_data+0xb0>)
 800ad88:	f7ff fa1a 	bl	800a1c0 <acc_log_rss>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	b003      	add	sp, #12
 800ad90:	bd30      	pop	{r4, r5, pc}
 800ad92:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800ad96:	f013 030f 	ands.w	r3, r3, #15
 800ad9a:	d0cc      	beq.n	800ad36 <update_data+0x42>
 800ad9c:	1e5a      	subs	r2, r3, #1
 800ad9e:	e7cc      	b.n	800ad3a <update_data+0x46>
 800ada0:	08017b6c 	.word	0x08017b6c
 800ada4:	08017a64 	.word	0x08017a64
 800ada8:	08017b28 	.word	0x08017b28
 800adac:	08017b44 	.word	0x08017b44

0800adb0 <transfer_data>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	f8d0 40f4 	ldr.w	r4, [r0, #244]	; 0xf4
 800adb6:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
 800adba:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800adbe:	237c      	movs	r3, #124	; 0x7c
 800adc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800adc4:	fb04 f403 	mul.w	r4, r4, r3
 800adc8:	4621      	mov	r1, r4
 800adca:	f003 fcff 	bl	800e7cc <acc_cpd_linear_sweep_transfer_data>
 800adce:	b930      	cbnz	r0, 800adde <transfer_data+0x2e>
 800add0:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <transfer_data+0x34>)
 800add2:	4a05      	ldr	r2, [pc, #20]	; (800ade8 <transfer_data+0x38>)
 800add4:	4905      	ldr	r1, [pc, #20]	; (800adec <transfer_data+0x3c>)
 800add6:	4605      	mov	r5, r0
 800add8:	f7ff f9f2 	bl	800a1c0 <acc_log_rss>
 800addc:	462c      	mov	r4, r5
 800adde:	4620      	mov	r0, r4
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	bf00      	nop
 800ade4:	08017a04 	.word	0x08017a04
 800ade8:	08017af0 	.word	0x08017af0
 800adec:	08017a64 	.word	0x08017a64

0800adf0 <start>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4601      	mov	r1, r0
 800adf4:	4604      	mov	r4, r0
 800adf6:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800adfa:	f003 fa99 	bl	800e330 <acc_cpd_linear_sweep_load_program>
 800adfe:	b128      	cbz	r0, 800ae0c <start+0x1c>
 800ae00:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f003 bc9c 	b.w	800e744 <acc_cpd_linear_sweep_run_program>
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	4a03      	ldr	r2, [pc, #12]	; (800ae1c <start+0x2c>)
 800ae10:	4903      	ldr	r1, [pc, #12]	; (800ae20 <start+0x30>)
 800ae12:	f7ff f9d5 	bl	800a1c0 <acc_log_rss>
 800ae16:	4628      	mov	r0, r5
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	08017ad0 	.word	0x08017ad0
 800ae20:	08017a64 	.word	0x08017a64

0800ae24 <initialize>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	4b71      	ldr	r3, [pc, #452]	; (800aff0 <initialize+0x1cc>)
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4616      	mov	r6, r2
 800ae32:	4604      	mov	r4, r0
 800ae34:	ed93 0a00 	vldr	s0, [r3]
 800ae38:	edd3 0a01 	vldr	s1, [r3, #4]
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	2210      	movs	r2, #16
 800ae40:	f000 f954 	bl	800b0ec <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range>
 800ae44:	4607      	mov	r7, r0
 800ae46:	b918      	cbnz	r0, 800ae50 <initialize+0x2c>
 800ae48:	4638      	mov	r0, r7
 800ae4a:	b002      	add	sp, #8
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae52:	f8b4 00fc 	ldrh.w	r0, [r4, #252]	; 0xfc
 800ae56:	f44f 7161 	mov.w	r1, #900	; 0x384
 800ae5a:	227c      	movs	r2, #124	; 0x7c
 800ae5c:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 800ae60:	fbb2 f2f0 	udiv	r2, r2, r0
 800ae64:	fb03 f302 	mul.w	r3, r3, r2
 800ae68:	82b1      	strh	r1, [r6, #20]
 800ae6a:	61b3      	str	r3, [r6, #24]
 800ae6c:	4640      	mov	r0, r8
 800ae6e:	2244      	movs	r2, #68	; 0x44
 800ae70:	4631      	mov	r1, r6
 800ae72:	f005 f913 	bl	801009c <memcpy>
 800ae76:	4630      	mov	r0, r6
 800ae78:	f000 fcfa 	bl	800b870 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 800ae7c:	b9e0      	cbnz	r0, 800aeb8 <initialize+0x94>
 800ae7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae80:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800ae84:	4628      	mov	r0, r5
 800ae86:	f000 fcf9 	bl	800b87c <acc_radar_engine_common_get_timeout_us>
 800ae8a:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f7fe ff6a 	bl	8009d68 <acc_base_configuration_sweep_type_debug_get>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f000 80a6 	beq.w	800afe6 <initialize+0x1c2>
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 800aea2:	2300      	movs	r3, #0
 800aea4:	64a3      	str	r3, [r4, #72]	; 0x48
 800aea6:	4628      	mov	r0, r5
 800aea8:	f7fe feb0 	bl	8009c0c <acc_base_configuration_repetition_mode_get>
 800aeac:	2803      	cmp	r0, #3
 800aeae:	d813      	bhi.n	800aed8 <initialize+0xb4>
 800aeb0:	e8df f000 	tbb	[pc, r0]
 800aeb4:	04877a81 	.word	0x04877a81
 800aeb8:	2310      	movs	r3, #16
 800aeba:	e7e1      	b.n	800ae80 <initialize+0x5c>
 800aebc:	4628      	mov	r0, r5
 800aebe:	f7fe feaf 	bl	8009c20 <acc_base_configuration_update_rate_get>
 800aec2:	4669      	mov	r1, sp
 800aec4:	a801      	add	r0, sp, #4
 800aec6:	f000 fcf9 	bl	800b8bc <acc_radar_engine_common_frequency_to_main_clk>
 800aeca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aece:	2301      	movs	r3, #1
 800aed0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800aed4:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
 800aed8:	4628      	mov	r0, r5
 800aeda:	f7fe fde3 	bl	8009aa4 <acc_base_configuration_power_save_mode_get>
 800aede:	2803      	cmp	r0, #3
 800aee0:	d806      	bhi.n	800aef0 <initialize+0xcc>
 800aee2:	e8df f000 	tbb	[pc, r0]
 800aee6:	5858      	.short	0x5858
 800aee8:	025c      	.short	0x025c
 800aeea:	2300      	movs	r3, #0
 800aeec:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 800aef0:	4628      	mov	r0, r5
 800aef2:	f7fe fe09 	bl	8009b08 <acc_base_configuration_tx_disable_get>
 800aef6:	f080 0001 	eor.w	r0, r0, #1
 800aefa:	b2c0      	uxtb	r0, r0
 800aefc:	6660      	str	r0, [r4, #100]	; 0x64
 800aefe:	4628      	mov	r0, r5
 800af00:	f7fe fe1e 	bl	8009b40 <acc_base_configuration_decrease_tx_emission_get>
 800af04:	f080 0001 	eor.w	r0, r0, #1
 800af08:	2601      	movs	r6, #1
 800af0a:	b2c0      	uxtb	r0, r0
 800af0c:	e9c4 061a 	strd	r0, r6, [r4, #104]	; 0x68
 800af10:	4628      	mov	r0, r5
 800af12:	f7fe fe31 	bl	8009b78 <acc_base_configuration_hw_accelerated_average_samples_get>
 800af16:	3801      	subs	r0, #1
 800af18:	6720      	str	r0, [r4, #112]	; 0x70
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7fe feb4 	bl	8009c88 <acc_base_configuration_gain_get>
 800af20:	6760      	str	r0, [r4, #116]	; 0x74
 800af22:	4628      	mov	r0, r5
 800af24:	f7fe fec8 	bl	8009cb8 <acc_base_configuration_integrator_get>
 800af28:	67a0      	str	r0, [r4, #120]	; 0x78
 800af2a:	4628      	mov	r0, r5
 800af2c:	f7fe fef4 	bl	8009d18 <acc_base_configuration_integrator_ramp_up_get>
 800af30:	3801      	subs	r0, #1
 800af32:	67e0      	str	r0, [r4, #124]	; 0x7c
 800af34:	4628      	mov	r0, r5
 800af36:	f7fe fed7 	bl	8009ce8 <acc_base_configuration_wg_duration_get>
 800af3a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800af3e:	4628      	mov	r0, r5
 800af40:	f7fe ff58 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 800af44:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 800af48:	4628      	mov	r0, r5
 800af4a:	f7fe fe85 	bl	8009c58 <acc_base_configuration_sweep_average_get>
 800af4e:	42b0      	cmp	r0, r6
 800af50:	bf96      	itet	ls
 800af52:	2300      	movls	r3, #0
 800af54:	3802      	subhi	r0, #2
 800af56:	f8c4 3084 	strls.w	r3, [r4, #132]	; 0x84
 800af5a:	f04f 0100 	mov.w	r1, #0
 800af5e:	f04f 02bd 	mov.w	r2, #189	; 0xbd
 800af62:	f04f 035d 	mov.w	r3, #93	; 0x5d
 800af66:	bf88      	it	hi
 800af68:	e9c4 6021 	strdhi	r6, r0, [r4, #132]	; 0x84
 800af6c:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
 800af70:	4640      	mov	r0, r8
 800af72:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800af76:	f000 fc7b 	bl	800b870 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 800af7a:	bb90      	cbnz	r0, 800afe2 <initialize+0x1be>
 800af7c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800af80:	3b01      	subs	r3, #1
 800af82:	e9d4 2132 	ldrd	r2, r1, [r4, #200]	; 0xc8
 800af86:	4638      	mov	r0, r7
 800af88:	e9c4 3126 	strd	r3, r1, [r4, #152]	; 0x98
 800af8c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 800af90:	b002      	add	sp, #8
 800af92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af96:	2301      	movs	r3, #1
 800af98:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 800af9c:	e7a8      	b.n	800aef0 <initialize+0xcc>
 800af9e:	2201      	movs	r2, #1
 800afa0:	2300      	movs	r3, #0
 800afa2:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
 800afa6:	e7a3      	b.n	800aef0 <initialize+0xcc>
 800afa8:	2300      	movs	r3, #0
 800afaa:	2201      	movs	r2, #1
 800afac:	64e3      	str	r3, [r4, #76]	; 0x4c
 800afae:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 800afb2:	6522      	str	r2, [r4, #80]	; 0x50
 800afb4:	e790      	b.n	800aed8 <initialize+0xb4>
 800afb6:	2300      	movs	r3, #0
 800afb8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800afbc:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 800afc0:	e78a      	b.n	800aed8 <initialize+0xb4>
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7fe fe2c 	bl	8009c20 <acc_base_configuration_update_rate_get>
 800afc8:	4669      	mov	r1, sp
 800afca:	a801      	add	r0, sp, #4
 800afcc:	f000 fc76 	bl	800b8bc <acc_radar_engine_common_frequency_to_main_clk>
 800afd0:	2301      	movs	r3, #1
 800afd2:	9a00      	ldr	r2, [sp, #0]
 800afd4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800afd6:	2100      	movs	r1, #0
 800afd8:	9b01      	ldr	r3, [sp, #4]
 800afda:	65a3      	str	r3, [r4, #88]	; 0x58
 800afdc:	e9c4 1214 	strd	r1, r2, [r4, #80]	; 0x50
 800afe0:	e77a      	b.n	800aed8 <initialize+0xb4>
 800afe2:	230f      	movs	r3, #15
 800afe4:	e7cd      	b.n	800af82 <initialize+0x15e>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e9c4 0310 	strd	r0, r3, [r4, #64]	; 0x40
 800afec:	e759      	b.n	800aea2 <initialize+0x7e>
 800afee:	bf00      	nop
 800aff0:	08017a78 	.word	0x08017a78

0800aff4 <acc_radar_engine_linear_create>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	f240 1209 	movw	r2, #265	; 0x109
 800affa:	4606      	mov	r6, r0
 800affc:	491f      	ldr	r1, [pc, #124]	; (800b07c <acc_radar_engine_linear_create+0x88>)
 800affe:	202c      	movs	r0, #44	; 0x2c
 800b000:	f7ff f892 	bl	800a128 <acc_integration_mem_alloc_debug>
 800b004:	4604      	mov	r4, r0
 800b006:	b348      	cbz	r0, 800b05c <acc_radar_engine_linear_create+0x68>
 800b008:	f240 1311 	movw	r3, #273	; 0x111
 800b00c:	4a1b      	ldr	r2, [pc, #108]	; (800b07c <acc_radar_engine_linear_create+0x88>)
 800b00e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b012:	2001      	movs	r0, #1
 800b014:	f7ff f89e 	bl	800a154 <acc_integration_mem_calloc_debug>
 800b018:	4605      	mov	r5, r0
 800b01a:	6020      	str	r0, [r4, #0]
 800b01c:	b320      	cbz	r0, 800b068 <acc_radar_engine_linear_create+0x74>
 800b01e:	4630      	mov	r0, r6
 800b020:	f7fe fcd8 	bl	80099d4 <acc_base_configuration_sensor_get>
 800b024:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800b028:	4630      	mov	r0, r6
 800b02a:	6825      	ldr	r5, [r4, #0]
 800b02c:	4e14      	ldr	r6, [pc, #80]	; (800b080 <acc_radar_engine_linear_create+0x8c>)
 800b02e:	f7fe fee1 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 800b032:	4914      	ldr	r1, [pc, #80]	; (800b084 <acc_radar_engine_linear_create+0x90>)
 800b034:	4a14      	ldr	r2, [pc, #80]	; (800b088 <acc_radar_engine_linear_create+0x94>)
 800b036:	f8a5 00fc 	strh.w	r0, [r5, #252]	; 0xfc
 800b03a:	4d14      	ldr	r5, [pc, #80]	; (800b08c <acc_radar_engine_linear_create+0x98>)
 800b03c:	4814      	ldr	r0, [pc, #80]	; (800b090 <acc_radar_engine_linear_create+0x9c>)
 800b03e:	60a1      	str	r1, [r4, #8]
 800b040:	60e2      	str	r2, [r4, #12]
 800b042:	4914      	ldr	r1, [pc, #80]	; (800b094 <acc_radar_engine_linear_create+0xa0>)
 800b044:	4a14      	ldr	r2, [pc, #80]	; (800b098 <acc_radar_engine_linear_create+0xa4>)
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <acc_radar_engine_linear_create+0xa8>)
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	e9c4 5005 	strd	r5, r0, [r4, #20]
 800b04e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800b052:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <acc_radar_engine_linear_create+0xac>)
 800b054:	6066      	str	r6, [r4, #4]
 800b056:	6263      	str	r3, [r4, #36]	; 0x24
 800b058:	4620      	mov	r0, r4
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <acc_radar_engine_linear_create+0xb0>)
 800b05e:	4a12      	ldr	r2, [pc, #72]	; (800b0a8 <acc_radar_engine_linear_create+0xb4>)
 800b060:	4912      	ldr	r1, [pc, #72]	; (800b0ac <acc_radar_engine_linear_create+0xb8>)
 800b062:	f7ff f8ad 	bl	800a1c0 <acc_log_rss>
 800b066:	e7f7      	b.n	800b058 <acc_radar_engine_linear_create+0x64>
 800b068:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <acc_radar_engine_linear_create+0xb0>)
 800b06a:	4a0f      	ldr	r2, [pc, #60]	; (800b0a8 <acc_radar_engine_linear_create+0xb4>)
 800b06c:	490f      	ldr	r1, [pc, #60]	; (800b0ac <acc_radar_engine_linear_create+0xb8>)
 800b06e:	f7ff f8a7 	bl	800a1c0 <acc_log_rss>
 800b072:	4620      	mov	r0, r4
 800b074:	f7ff f892 	bl	800a19c <acc_integration_mem_free>
 800b078:	462c      	mov	r4, r5
 800b07a:	e7ed      	b.n	800b058 <acc_radar_engine_linear_create+0x64>
 800b07c:	08017a14 	.word	0x08017a14
 800b080:	0800ae25 	.word	0x0800ae25
 800b084:	0800ac35 	.word	0x0800ac35
 800b088:	0800ab85 	.word	0x0800ab85
 800b08c:	0800adf1 	.word	0x0800adf1
 800b090:	0800adb1 	.word	0x0800adb1
 800b094:	0800acf5 	.word	0x0800acf5
 800b098:	0800acdd 	.word	0x0800acdd
 800b09c:	0800aab1 	.word	0x0800aab1
 800b0a0:	0800aa9d 	.word	0x0800aa9d
 800b0a4:	080179d8 	.word	0x080179d8
 800b0a8:	08016858 	.word	0x08016858
 800b0ac:	08017a64 	.word	0x08017a64

0800b0b0 <get_dt>:
 800b0b0:	b508      	push	{r3, lr}
 800b0b2:	ed2d 8b02 	vpush	{d8}
 800b0b6:	f7ff f813 	bl	800a0e0 <acc_integration_get_sensor_reference_frequency>
 800b0ba:	eeb0 8a40 	vmov.f32	s16, s0
 800b0be:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800b0e4 <get_dt+0x34>
 800b0c2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800b0c6:	f006 fb3b 	bl	8011740 <roundf>
 800b0ca:	ee28 8a00 	vmul.f32	s16, s16, s0
 800b0ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b0d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b0d6:	ecbd 8b02 	vpop	{d8}
 800b0da:	eddf 7a03 	vldr	s15, [pc, #12]	; 800b0e8 <get_dt+0x38>
 800b0de:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800b0e2:	bd08      	pop	{r3, pc}
 800b0e4:	4f1502f9 	.word	0x4f1502f9
 800b0e8:	42f80000 	.word	0x42f80000

0800b0ec <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	ed2d 8b08 	vpush	{d8-d11}
 800b0f4:	b089      	sub	sp, #36	; 0x24
 800b0f6:	460e      	mov	r6, r1
 800b0f8:	eeb0 ba40 	vmov.f32	s22, s0
 800b0fc:	eef0 8a60 	vmov.f32	s17, s1
 800b100:	4690      	mov	r8, r2
 800b102:	4607      	mov	r7, r0
 800b104:	f7fe fe4c 	bl	8009da0 <acc_base_configuration_use_point_range_get>
 800b108:	2800      	cmp	r0, #0
 800b10a:	f040 8279 	bne.w	800b600 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x514>
 800b10e:	4638      	mov	r0, r7
 800b110:	f7fe fc78 	bl	8009a04 <acc_base_configuration_requested_start_get>
 800b114:	4638      	mov	r0, r7
 800b116:	eeb0 8a40 	vmov.f32	s16, s0
 800b11a:	f7fe fc95 	bl	8009a48 <acc_base_configuration_requested_length_get>
 800b11e:	ee78 9a00 	vadd.f32	s19, s16, s0
 800b122:	f7ff ffc5 	bl	800b0b0 <get_dt>
 800b126:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b12a:	ee38 7a08 	vadd.f32	s14, s16, s16
 800b12e:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b132:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b136:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13e:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b142:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800b146:	bf54      	ite	pl
 800b148:	eeb0 7a4a 	vmovpl.f32	s14, s20
 800b14c:	eeb0 7a48 	vmovmi.f32	s14, s16
 800b150:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b158:	ee17 4a90 	vmov	r4, s15
 800b15c:	f7ff ffa8 	bl	800b0b0 <get_dt>
 800b160:	ee39 7aa9 	vadd.f32	s14, s19, s19
 800b164:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b168:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800b16c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	bf58      	it	pl
 800b176:	eeb0 8a4a 	vmovpl.f32	s16, s20
 800b17a:	ee37 8a88 	vadd.f32	s16, s15, s16
 800b17e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b182:	ee17 5a90 	vmov	r5, s15
 800b186:	f7ff ff93 	bl	800b0b0 <get_dt>
 800b18a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b196:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800b19a:	bf54      	ite	pl
 800b19c:	eef0 ba4a 	vmovpl.f32	s23, s20
 800b1a0:	eef0 ba48 	vmovmi.f32	s23, s16
 800b1a4:	eef0 9a40 	vmov.f32	s19, s0
 800b1a8:	f7ff ff82 	bl	800b0b0 <get_dt>
 800b1ac:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	bf58      	it	pl
 800b1b8:	eeb0 8a4a 	vmovpl.f32	s16, s20
 800b1bc:	eef0 aa40 	vmov.f32	s21, s0
 800b1c0:	f7fe fe18 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 800b1c4:	2801      	cmp	r0, #1
 800b1c6:	4681      	mov	r9, r0
 800b1c8:	d90b      	bls.n	800b1e2 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xf6>
 800b1ca:	2802      	cmp	r0, #2
 800b1cc:	f000 820f 	beq.w	800b5ee <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x502>
 800b1d0:	1b2a      	subs	r2, r5, r4
 800b1d2:	fb92 f3f9 	sdiv	r3, r2, r9
 800b1d6:	fb09 2913 	mls	r9, r9, r3, r2
 800b1da:	f1b9 0f00 	cmp.w	r9, #0
 800b1de:	f300 80cd 	bgt.w	800b37c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x290>
 800b1e2:	42a5      	cmp	r5, r4
 800b1e4:	f2c0 80d4 	blt.w	800b390 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2a4>
 800b1e8:	ed9f aa74 	vldr	s20, [pc, #464]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b1ec:	ee7b 7a0b 	vadd.f32	s15, s22, s22
 800b1f0:	ee69 9a8a 	vmul.f32	s19, s19, s20
 800b1f4:	ee87 9aa9 	vdiv.f32	s18, s15, s19
 800b1f8:	ee39 9a2b 	vadd.f32	s18, s18, s23
 800b1fc:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 800b200:	ee19 3a10 	vmov	r3, s18
 800b204:	42a3      	cmp	r3, r4
 800b206:	f300 80df 	bgt.w	800b3c8 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2dc>
 800b20a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 800b20e:	ee6a aa8a 	vmul.f32	s21, s21, s20
 800b212:	ee88 0aaa 	vdiv.f32	s0, s17, s21
 800b216:	ee30 8a08 	vadd.f32	s16, s0, s16
 800b21a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800b21e:	ee18 3a10 	vmov	r3, s16
 800b222:	429d      	cmp	r5, r3
 800b224:	f300 81f9 	bgt.w	800b61a <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x52e>
 800b228:	4638      	mov	r0, r7
 800b22a:	f7fe fde3 	bl	8009df4 <acc_base_configuration_downsampling_factor_get>
 800b22e:	4681      	mov	r9, r0
 800b230:	f7ff ff3e 	bl	800b0b0 <get_dt>
 800b234:	fb94 f1f9 	sdiv	r1, r4, r9
 800b238:	0fe2      	lsrs	r2, r4, #31
 800b23a:	485b      	ldr	r0, [pc, #364]	; (800b3a8 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2bc>)
 800b23c:	eb02 0a04 	add.w	sl, r2, r4
 800b240:	0feb      	lsrs	r3, r5, #31
 800b242:	4696      	mov	lr, r2
 800b244:	fb80 c20a 	smull	ip, r2, r0, sl
 800b248:	469c      	mov	ip, r3
 800b24a:	18eb      	adds	r3, r5, r3
 800b24c:	eb02 0b0a 	add.w	fp, r2, sl
 800b250:	ee07 9a90 	vmov	s15, r9
 800b254:	ea4f 72ea 	mov.w	r2, sl, asr #31
 800b258:	fb80 a003 	smull	sl, r0, r0, r3
 800b25c:	4418      	add	r0, r3
 800b25e:	17db      	asrs	r3, r3, #31
 800b260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b264:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800b268:	ebc2 12ab 	rsb	r2, r2, fp, asr #6
 800b26c:	eba2 020e 	sub.w	r2, r2, lr
 800b270:	eba3 030c 	sub.w	r3, r3, ip
 800b274:	fb09 4111 	mls	r1, r9, r1, r4
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b27e:	4449      	add	r1, r9
 800b280:	3301      	adds	r3, #1
 800b282:	fb91 f0f9 	sdiv	r0, r1, r9
 800b286:	fb09 1110 	mls	r1, r9, r0, r1
 800b28a:	e9c6 2308 	strd	r2, r3, [r6, #32]
 800b28e:	ed86 0a03 	vstr	s0, [r6, #12]
 800b292:	61f1      	str	r1, [r6, #28]
 800b294:	4638      	mov	r0, r7
 800b296:	f7fe fc05 	bl	8009aa4 <acc_base_configuration_power_save_mode_get>
 800b29a:	4682      	mov	sl, r0
 800b29c:	4638      	mov	r0, r7
 800b29e:	f7fe fcb5 	bl	8009c0c <acc_base_configuration_repetition_mode_get>
 800b2a2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b2a4:	f1ba 0f00 	cmp.w	sl, #0
 800b2a8:	f040 81b3 	bne.w	800b612 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x526>
 800b2ac:	4590      	cmp	r8, r2
 800b2ae:	f0c0 82c7 	bcc.w	800b840 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x754>
 800b2b2:	fa1f f088 	uxth.w	r0, r8
 800b2b6:	b293      	uxth	r3, r2
 800b2b8:	fbb2 f1f0 	udiv	r1, r2, r0
 800b2bc:	fb00 2711 	mls	r7, r0, r1, r2
 800b2c0:	2f00      	cmp	r7, #0
 800b2c2:	bf18      	it	ne
 800b2c4:	3101      	addne	r1, #1
 800b2c6:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800b2ca:	4290      	cmp	r0, r2
 800b2cc:	bf28      	it	cs
 800b2ce:	e9c6 220e 	strdcs	r2, r2, [r6, #56]	; 0x38
 800b2d2:	6371      	str	r1, [r6, #52]	; 0x34
 800b2d4:	bf38      	it	cc
 800b2d6:	e9c6 070e 	strdcc	r0, r7, [r6, #56]	; 0x38
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	fb93 f3f9 	sdiv	r3, r3, r9
 800b2e0:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2e2:	237c      	movs	r3, #124	; 0x7c
 800b2e4:	fb93 f3f9 	sdiv	r3, r3, r9
 800b2e8:	6433      	str	r3, [r6, #64]	; 0x40
 800b2ea:	f7ff fee1 	bl	800b0b0 <get_dt>
 800b2ee:	ee07 4a90 	vmov	s15, r4
 800b2f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2f6:	eddf 8a31 	vldr	s17, [pc, #196]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b2fa:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b2fe:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b302:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b306:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b30a:	ed86 0a00 	vstr	s0, [r6]
 800b30e:	f7ff fecf 	bl	800b0b0 <get_dt>
 800b312:	ee07 5a90 	vmov	s15, r5
 800b316:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2bc>)
 800b318:	4824      	ldr	r0, [pc, #144]	; (800b3ac <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c0>)
 800b31a:	ed96 7a00 	vldr	s14, [r6]
 800b31e:	fb83 2304 	smull	r2, r3, r3, r4
 800b322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b326:	1919      	adds	r1, r3, r4
 800b328:	17e3      	asrs	r3, r4, #31
 800b32a:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 800b32e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b332:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800b336:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b33a:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 800b33e:	337c      	adds	r3, #124	; 0x7c
 800b340:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b344:	089a      	lsrs	r2, r3, #2
 800b346:	fba0 1202 	umull	r1, r2, r0, r2
 800b34a:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b34e:	0892      	lsrs	r2, r2, #2
 800b350:	1b2c      	subs	r4, r5, r4
 800b352:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 800b356:	fb94 f4f9 	sdiv	r4, r4, r9
 800b35a:	2001      	movs	r0, #1
 800b35c:	3401      	adds	r4, #1
 800b35e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800b362:	ed86 0a02 	vstr	s0, [r6, #8]
 800b366:	fb93 f3f9 	sdiv	r3, r3, r9
 800b36a:	6334      	str	r4, [r6, #48]	; 0x30
 800b36c:	ed86 7a01 	vstr	s14, [r6, #4]
 800b370:	62f3      	str	r3, [r6, #44]	; 0x2c
 800b372:	b009      	add	sp, #36	; 0x24
 800b374:	ecbd 8b08 	vpop	{d8-d11}
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	4a0c      	ldr	r2, [pc, #48]	; (800b3b0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c4>)
 800b37e:	490d      	ldr	r1, [pc, #52]	; (800b3b4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c8>)
 800b380:	2002      	movs	r0, #2
 800b382:	eba5 0509 	sub.w	r5, r5, r9
 800b386:	f7fe ff1b 	bl	800a1c0 <acc_log_rss>
 800b38a:	42a5      	cmp	r5, r4
 800b38c:	f6bf af2c 	bge.w	800b1e8 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xfc>
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2cc>)
 800b392:	4908      	ldr	r1, [pc, #32]	; (800b3b4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c8>)
 800b394:	2000      	movs	r0, #0
 800b396:	f7fe ff13 	bl	800a1c0 <acc_log_rss>
 800b39a:	2000      	movs	r0, #0
 800b39c:	b009      	add	sp, #36	; 0x24
 800b39e:	ecbd 8b08 	vpop	{d8-d11}
 800b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a6:	bf00      	nop
 800b3a8:	84210843 	.word	0x84210843
 800b3ac:	21084211 	.word	0x21084211
 800b3b0:	08017bf0 	.word	0x08017bf0
 800b3b4:	08017bd0 	.word	0x08017bd0
 800b3b8:	08017c34 	.word	0x08017c34
 800b3bc:	4d8ef3c2 	.word	0x4d8ef3c2
 800b3c0:	350637bd 	.word	0x350637bd
 800b3c4:	49742400 	.word	0x49742400
 800b3c8:	f7ff fe72 	bl	800b0b0 <get_dt>
 800b3cc:	ee07 4a90 	vmov	s15, r4
 800b3d0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800b3d4:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b3d8:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b3dc:	ed5f aa09 	vldr	s21, [pc, #-36]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b3e0:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b3e4:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b3e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f0:	bf4c      	ite	mi
 800b3f2:	272d      	movmi	r7, #45	; 0x2d
 800b3f4:	2720      	movpl	r7, #32
 800b3f6:	f7ff fe5b 	bl	800b0b0 <get_dt>
 800b3fa:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b3fe:	f7ff fe57 	bl	800b0b0 <get_dt>
 800b402:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b406:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800b40a:	ee20 aa0a 	vmul.f32	s20, s0, s20
 800b40e:	ee28 8a29 	vmul.f32	s16, s16, s19
 800b412:	ee2a aa29 	vmul.f32	s20, s20, s19
 800b416:	ed5f 7a16 	vldr	s15, [pc, #-88]	; 800b3c0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800b41a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800b41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b422:	bf48      	it	mi
 800b424:	eeb1 8a48 	vnegmi.f32	s16, s16
 800b428:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b42c:	ed1f aa1d 	vldr	s20, [pc, #-116]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b430:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800b434:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b438:	ee17 5a90 	vmov	r5, s15
 800b43c:	f7ff fe38 	bl	800b0b0 <get_dt>
 800b440:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b444:	f7ff fe34 	bl	800b0b0 <get_dt>
 800b448:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b44c:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800b450:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b454:	ee28 8a29 	vmul.f32	s16, s16, s19
 800b458:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b45c:	ed5f 7a28 	vldr	s15, [pc, #-160]	; 800b3c0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800b460:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b468:	bf48      	it	mi
 800b46a:	eeb1 8a48 	vnegmi.f32	s16, s16
 800b46e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b472:	f7ff fe1d 	bl	800b0b0 <get_dt>
 800b476:	ee68 9a80 	vmul.f32	s19, s17, s0
 800b47a:	f7ff fe19 	bl	800b0b0 <get_dt>
 800b47e:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b482:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800b486:	ee20 0a2a 	vmul.f32	s0, s0, s21
 800b48a:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800b48e:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b492:	ee69 9a8a 	vmul.f32	s19, s19, s20
 800b496:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b49a:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 800b3c0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800b49e:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 800b3c4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d8>
 800b4a2:	ed1f aa3a 	vldr	s20, [pc, #-232]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4aa:	bf48      	it	mi
 800b4ac:	eef1 9a69 	vnegmi.f32	s19, s19
 800b4b0:	ee79 9a87 	vadd.f32	s19, s19, s14
 800b4b4:	eef8 8ac9 	vcvt.f32.s32	s17, s18
 800b4b8:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 800b4bc:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800b4c0:	eef8 9a69 	vcvt.f32.u32	s19, s19
 800b4c4:	ee38 8a69 	vsub.f32	s16, s16, s19
 800b4c8:	ed5f 9a44 	vldr	s19, [pc, #-272]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b4cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b4d0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800b4d4:	ee17 4a90 	vmov	r4, s15
 800b4d8:	f7ff fdea 	bl	800b0b0 <get_dt>
 800b4dc:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b4e0:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b4e4:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b4e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f0:	bf4c      	ite	mi
 800b4f2:	f04f 082d 	movmi.w	r8, #45	; 0x2d
 800b4f6:	f04f 0820 	movpl.w	r8, #32
 800b4fa:	f7ff fdd9 	bl	800b0b0 <get_dt>
 800b4fe:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b502:	f7ff fdd5 	bl	800b0b0 <get_dt>
 800b506:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b50a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800b50e:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b512:	ee28 8a09 	vmul.f32	s16, s16, s18
 800b516:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b51a:	ed5f 7a57 	vldr	s15, [pc, #-348]	; 800b3c0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800b51e:	ed1f aa59 	vldr	s20, [pc, #-356]	; 800b3bc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800b522:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52a:	bf48      	it	mi
 800b52c:	eeb1 8a48 	vnegmi.f32	s16, s16
 800b530:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b534:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800b538:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800b53c:	ee17 6a90 	vmov	r6, s15
 800b540:	f7ff fdb6 	bl	800b0b0 <get_dt>
 800b544:	ee28 8a80 	vmul.f32	s16, s17, s0
 800b548:	f7ff fdb2 	bl	800b0b0 <get_dt>
 800b54c:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b550:	ee28 8a29 	vmul.f32	s16, s16, s19
 800b554:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b558:	ee28 8a09 	vmul.f32	s16, s16, s18
 800b55c:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b560:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 800b3c0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800b564:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b56c:	bf48      	it	mi
 800b56e:	eeb1 8a48 	vnegmi.f32	s16, s16
 800b572:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b576:	f7ff fd9b 	bl	800b0b0 <get_dt>
 800b57a:	ee28 9a80 	vmul.f32	s18, s17, s0
 800b57e:	f7ff fd97 	bl	800b0b0 <get_dt>
 800b582:	ee28 0a80 	vmul.f32	s0, s17, s0
 800b586:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b58a:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b58e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b592:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b596:	ee29 9a29 	vmul.f32	s18, s18, s19
 800b59a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a2:	ed1f 7a79 	vldr	s14, [pc, #-484]	; 800b3c0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800b5a6:	ed5f 7a79 	vldr	s15, [pc, #-484]	; 800b3c4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d8>
 800b5aa:	9603      	str	r6, [sp, #12]
 800b5ac:	bf48      	it	mi
 800b5ae:	eeb1 9a49 	vnegmi.f32	s18, s18
 800b5b2:	ee39 9a07 	vadd.f32	s18, s18, s14
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 800b5bc:	f8cd 8008 	str.w	r8, [sp, #8]
 800b5c0:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 800b5c4:	9401      	str	r4, [sp, #4]
 800b5c6:	ee38 8a49 	vsub.f32	s16, s16, s18
 800b5ca:	9500      	str	r5, [sp, #0]
 800b5cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b5d0:	463b      	mov	r3, r7
 800b5d2:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800b5d6:	4a9e      	ldr	r2, [pc, #632]	; (800b850 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x764>)
 800b5d8:	499e      	ldr	r1, [pc, #632]	; (800b854 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 800b5da:	ed8d 8a04 	vstr	s16, [sp, #16]
 800b5de:	f7fe fdef 	bl	800a1c0 <acc_log_rss>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	b009      	add	sp, #36	; 0x24
 800b5e6:	ecbd 8b08 	vpop	{d8-d11}
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	07e3      	lsls	r3, r4, #31
 800b5f0:	f53f adee 	bmi.w	800b1d0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xe4>
 800b5f4:	4a98      	ldr	r2, [pc, #608]	; (800b858 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x76c>)
 800b5f6:	4997      	ldr	r1, [pc, #604]	; (800b854 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 800b5f8:	f7fe fde2 	bl	800a1c0 <acc_log_rss>
 800b5fc:	3401      	adds	r4, #1
 800b5fe:	e5e7      	b.n	800b1d0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xe4>
 800b600:	4638      	mov	r0, r7
 800b602:	f7fe faef 	bl	8009be4 <acc_base_configuration_point_start_get>
 800b606:	4604      	mov	r4, r0
 800b608:	4638      	mov	r0, r7
 800b60a:	f7fe faf5 	bl	8009bf8 <acc_base_configuration_point_length_get>
 800b60e:	1825      	adds	r5, r4, r0
 800b610:	e5b9      	b.n	800b186 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x9a>
 800b612:	2801      	cmp	r0, #1
 800b614:	f47f ae4a 	bne.w	800b2ac <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x1c0>
 800b618:	e64b      	b.n	800b2b2 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x1c6>
 800b61a:	f7ff fd49 	bl	800b0b0 <get_dt>
 800b61e:	ee07 5a90 	vmov	s15, r5
 800b622:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800b626:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b62a:	ee29 0a00 	vmul.f32	s0, s18, s0
 800b62e:	eddf aa8b 	vldr	s21, [pc, #556]	; 800b85c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 800b632:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b636:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b63a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b642:	bf4c      	ite	mi
 800b644:	272d      	movmi	r7, #45	; 0x2d
 800b646:	2720      	movpl	r7, #32
 800b648:	f7ff fd32 	bl	800b0b0 <get_dt>
 800b64c:	ee69 8a00 	vmul.f32	s17, s18, s0
 800b650:	f7ff fd2e 	bl	800b0b0 <get_dt>
 800b654:	ee29 0a00 	vmul.f32	s0, s18, s0
 800b658:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800b65c:	ee20 aa0a 	vmul.f32	s20, s0, s20
 800b660:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800b664:	ee2a aa29 	vmul.f32	s20, s20, s19
 800b668:	eddf 7a7d 	vldr	s15, [pc, #500]	; 800b860 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800b66c:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800b670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b674:	bf48      	it	mi
 800b676:	eef1 8a68 	vnegmi.f32	s17, s17
 800b67a:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800b67e:	ed9f aa77 	vldr	s20, [pc, #476]	; 800b85c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 800b682:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800b686:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b68a:	ee17 5a90 	vmov	r5, s15
 800b68e:	f7ff fd0f 	bl	800b0b0 <get_dt>
 800b692:	ee69 8a00 	vmul.f32	s17, s18, s0
 800b696:	f7ff fd0b 	bl	800b0b0 <get_dt>
 800b69a:	ee29 0a00 	vmul.f32	s0, s18, s0
 800b69e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800b6a2:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b6a6:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800b6aa:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b6ae:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800b860 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800b6b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ba:	bf48      	it	mi
 800b6bc:	eef1 8a68 	vnegmi.f32	s17, s17
 800b6c0:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800b6c4:	f7ff fcf4 	bl	800b0b0 <get_dt>
 800b6c8:	ee69 9a00 	vmul.f32	s19, s18, s0
 800b6cc:	f7ff fcf0 	bl	800b0b0 <get_dt>
 800b6d0:	ee29 0a00 	vmul.f32	s0, s18, s0
 800b6d4:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800b6d8:	ee20 0a2a 	vmul.f32	s0, s0, s21
 800b6dc:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800b6e0:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b6e4:	ee69 9a8a 	vmul.f32	s19, s19, s20
 800b6e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b6ec:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800b860 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800b6f0:	eddf 7a5c 	vldr	s15, [pc, #368]	; 800b864 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x778>
 800b6f4:	ed9f 9a59 	vldr	s18, [pc, #356]	; 800b85c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	bf48      	it	mi
 800b6fe:	eef1 9a69 	vnegmi.f32	s19, s19
 800b702:	ee79 9a87 	vadd.f32	s19, s19, s14
 800b706:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800b70a:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 800b70e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800b712:	eef8 9a69 	vcvt.f32.u32	s19, s19
 800b716:	ee78 8ae9 	vsub.f32	s17, s17, s19
 800b71a:	eddf 9a50 	vldr	s19, [pc, #320]	; 800b85c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 800b71e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b722:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800b726:	ee17 4a90 	vmov	r4, s15
 800b72a:	f7ff fcc1 	bl	800b0b0 <get_dt>
 800b72e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b732:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b736:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b73a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b742:	bf4c      	ite	mi
 800b744:	f04f 082d 	movmi.w	r8, #45	; 0x2d
 800b748:	f04f 0820 	movpl.w	r8, #32
 800b74c:	f7ff fcb0 	bl	800b0b0 <get_dt>
 800b750:	ee68 8a00 	vmul.f32	s17, s16, s0
 800b754:	f7ff fcac 	bl	800b0b0 <get_dt>
 800b758:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b75c:	ee68 8a89 	vmul.f32	s17, s17, s18
 800b760:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b764:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800b768:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b76c:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800b860 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800b770:	ed9f aa3a 	vldr	s20, [pc, #232]	; 800b85c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 800b774:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	bf48      	it	mi
 800b77e:	eef1 8a68 	vnegmi.f32	s17, s17
 800b782:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800b786:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800b78a:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800b78e:	ee17 6a90 	vmov	r6, s15
 800b792:	f7ff fc8d 	bl	800b0b0 <get_dt>
 800b796:	ee68 8a00 	vmul.f32	s17, s16, s0
 800b79a:	f7ff fc89 	bl	800b0b0 <get_dt>
 800b79e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7a2:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800b7a6:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b7aa:	ee68 8a89 	vmul.f32	s17, s17, s18
 800b7ae:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b7b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b860 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800b7b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7be:	bf48      	it	mi
 800b7c0:	eef1 8a68 	vnegmi.f32	s17, s17
 800b7c4:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800b7c8:	f7ff fc72 	bl	800b0b0 <get_dt>
 800b7cc:	ee28 9a00 	vmul.f32	s18, s16, s0
 800b7d0:	f7ff fc6e 	bl	800b0b0 <get_dt>
 800b7d4:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7d8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800b7dc:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800b7e0:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b7e4:	ee20 0a29 	vmul.f32	s0, s0, s19
 800b7e8:	ee29 9a29 	vmul.f32	s18, s18, s19
 800b7ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b860 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800b7f8:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800b864 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x778>
 800b7fc:	9603      	str	r6, [sp, #12]
 800b7fe:	bf48      	it	mi
 800b800:	eeb1 9a49 	vnegmi.f32	s18, s18
 800b804:	ee39 9a07 	vadd.f32	s18, s18, s14
 800b808:	f8cd 8008 	str.w	r8, [sp, #8]
 800b80c:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 800b810:	9401      	str	r4, [sp, #4]
 800b812:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 800b816:	9500      	str	r5, [sp, #0]
 800b818:	ee78 8ac9 	vsub.f32	s17, s17, s18
 800b81c:	463b      	mov	r3, r7
 800b81e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b822:	4a11      	ldr	r2, [pc, #68]	; (800b868 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x77c>)
 800b824:	490b      	ldr	r1, [pc, #44]	; (800b854 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 800b826:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 800b82a:	2000      	movs	r0, #0
 800b82c:	edcd 8a04 	vstr	s17, [sp, #16]
 800b830:	f7fe fcc6 	bl	800a1c0 <acc_log_rss>
 800b834:	2000      	movs	r0, #0
 800b836:	b009      	add	sp, #36	; 0x24
 800b838:	ecbd 8b08 	vpop	{d8-d11}
 800b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b840:	2000      	movs	r0, #0
 800b842:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x780>)
 800b844:	4903      	ldr	r1, [pc, #12]	; (800b854 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 800b846:	f7fe fcbb 	bl	800a1c0 <acc_log_rss>
 800b84a:	2000      	movs	r0, #0
 800b84c:	e6ca      	b.n	800b5e4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x4f8>
 800b84e:	bf00      	nop
 800b850:	08017c74 	.word	0x08017c74
 800b854:	08017bd0 	.word	0x08017bd0
 800b858:	08017b8c 	.word	0x08017b8c
 800b85c:	4d8ef3c2 	.word	0x4d8ef3c2
 800b860:	350637bd 	.word	0x350637bd
 800b864:	49742400 	.word	0x49742400
 800b868:	08017cc0 	.word	0x08017cc0
 800b86c:	08017d0c 	.word	0x08017d0c

0800b870 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 800b870:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b872:	2801      	cmp	r0, #1
 800b874:	bf94      	ite	ls
 800b876:	2000      	movls	r0, #0
 800b878:	2001      	movhi	r0, #1
 800b87a:	4770      	bx	lr

0800b87c <acc_radar_engine_common_get_timeout_us>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	4604      	mov	r4, r0
 800b882:	f7fe f9c3 	bl	8009c0c <acc_base_configuration_repetition_mode_get>
 800b886:	2801      	cmp	r0, #1
 800b888:	d00f      	beq.n	800b8aa <acc_radar_engine_common_get_timeout_us+0x2e>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7fe f9c8 	bl	8009c20 <acc_base_configuration_update_rate_get>
 800b890:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b8b4 <acc_radar_engine_common_get_timeout_us+0x38>
 800b894:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b898:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b89c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b8a0:	edcd 7a01 	vstr	s15, [sp, #4]
 800b8a4:	9801      	ldr	r0, [sp, #4]
 800b8a6:	b002      	add	sp, #8
 800b8a8:	bd10      	pop	{r4, pc}
 800b8aa:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <acc_radar_engine_common_get_timeout_us+0x3c>)
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	9801      	ldr	r0, [sp, #4]
 800b8b0:	b002      	add	sp, #8
 800b8b2:	bd10      	pop	{r4, pc}
 800b8b4:	49f42400 	.word	0x49f42400
 800b8b8:	001e8480 	.word	0x001e8480

0800b8bc <acc_radar_engine_common_frequency_to_main_clk>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	ed2d 8b02 	vpush	{d8}
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	eeb0 8a40 	vmov.f32	s16, s0
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	f7fe fc09 	bl	800a0e0 <acc_integration_get_sensor_reference_frequency>
 800b8ce:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800b8d2:	ecbd 8b02 	vpop	{d8}
 800b8d6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b8da:	ee17 3a90 	vmov	r3, s15
 800b8de:	0c1a      	lsrs	r2, r3, #16
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	602a      	str	r2, [r5, #0]
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}

0800b8e8 <internal_reg_read>:
 800b8e8:	b530      	push	{r4, r5, lr}
 800b8ea:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	ba4b      	rev16	r3, r1
 800b8f2:	4615      	mov	r5, r2
 800b8f4:	2400      	movs	r4, #0
 800b8f6:	2206      	movs	r2, #6
 800b8f8:	4669      	mov	r1, sp
 800b8fa:	f8ad 3000 	strh.w	r3, [sp]
 800b8fe:	f8ad 4002 	strh.w	r4, [sp, #2]
 800b902:	f8ad 4004 	strh.w	r4, [sp, #4]
 800b906:	f7fe fc09 	bl	800a11c <acc_integration_sensor_device_transfer>
 800b90a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b90e:	ba5b      	rev16	r3, r3
 800b910:	802b      	strh	r3, [r5, #0]
 800b912:	b003      	add	sp, #12
 800b914:	bd30      	pop	{r4, r5, pc}
 800b916:	bf00      	nop

0800b918 <internal_buffer_processed_read>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	4682      	mov	sl, r0
 800b91e:	482e      	ldr	r0, [pc, #184]	; (800b9d8 <internal_buffer_processed_read+0xc0>)
 800b920:	f10a 4480 	add.w	r4, sl, #1073741824	; 0x40000000
 800b924:	b087      	sub	sp, #28
 800b926:	6800      	ldr	r0, [r0, #0]
 800b928:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800b92c:	9202      	str	r2, [sp, #8]
 800b92e:	3c01      	subs	r4, #1
 800b930:	461f      	mov	r7, r3
 800b932:	9403      	str	r4, [sp, #12]
 800b934:	460e      	mov	r6, r1
 800b936:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800b93a:	f7fe fbd7 	bl	800a0ec <acc_integration_get_max_spi_transfer_size>
 800b93e:	0843      	lsrs	r3, r0, #1
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	bf09      	itett	eq
 800b944:	1cfb      	addeq	r3, r7, #3
 800b946:	f1a3 0803 	subne.w	r8, r3, #3
 800b94a:	9301      	streq	r3, [sp, #4]
 800b94c:	46b8      	moveq	r8, r7
 800b94e:	2f00      	cmp	r7, #0
 800b950:	d037      	beq.n	800b9c2 <internal_buffer_processed_read+0xaa>
 800b952:	2d00      	cmp	r5, #0
 800b954:	bf14      	ite	ne
 800b956:	f44f 49e0 	movne.w	r9, #28672	; 0x7000
 800b95a:	f44f 4900 	moveq.w	r9, #32768	; 0x8000
 800b95e:	fa0f f989 	sxth.w	r9, r9
 800b962:	4547      	cmp	r7, r8
 800b964:	bf88      	it	hi
 800b966:	9d01      	ldrhi	r5, [sp, #4]
 800b968:	ea49 0106 	orr.w	r1, r9, r6
 800b96c:	f107 32ff 	add.w	r2, r7, #4294967295
 800b970:	bf98      	it	ls
 800b972:	1cfd      	addls	r5, r7, #3
 800b974:	f04f 0300 	mov.w	r3, #0
 800b978:	ba49      	rev16	r1, r1
 800b97a:	ba52      	rev16	r2, r2
 800b97c:	80a3      	strh	r3, [r4, #4]
 800b97e:	8021      	strh	r1, [r4, #0]
 800b980:	8062      	strh	r2, [r4, #2]
 800b982:	4621      	mov	r1, r4
 800b984:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800b988:	4650      	mov	r0, sl
 800b98a:	bf94      	ite	ls
 800b98c:	46bb      	movls	fp, r7
 800b98e:	46c3      	movhi	fp, r8
 800b990:	f7fe fbc4 	bl	800a11c <acc_integration_sensor_device_transfer>
 800b994:	4620      	mov	r0, r4
 800b996:	4629      	mov	r1, r5
 800b998:	f001 fa8a 	bl	800ceb0 <acc_utils_swap16_array>
 800b99c:	9804      	ldr	r0, [sp, #16]
 800b99e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800b9a2:	6020      	str	r0, [r4, #0]
 800b9a4:	80a2      	strh	r2, [r4, #4]
 800b9a6:	eb04 044b 	add.w	r4, r4, fp, lsl #1
 800b9aa:	1eeb      	subs	r3, r5, #3
 800b9ac:	f1c5 0503 	rsb	r5, r5, #3
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	88a2      	ldrh	r2, [r4, #4]
 800b9b4:	9004      	str	r0, [sp, #16]
 800b9b6:	441e      	add	r6, r3
 800b9b8:	197f      	adds	r7, r7, r5
 800b9ba:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b9be:	b2b6      	uxth	r6, r6
 800b9c0:	d1cf      	bne.n	800b962 <internal_buffer_processed_read+0x4a>
 800b9c2:	4b05      	ldr	r3, [pc, #20]	; (800b9d8 <internal_buffer_processed_read+0xc0>)
 800b9c4:	9a03      	ldr	r2, [sp, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9cc:	9a02      	ldr	r2, [sp, #8]
 800b9ce:	3306      	adds	r3, #6
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	b007      	add	sp, #28
 800b9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d8:	2000041c 	.word	0x2000041c

0800b9dc <acc_sensor_activate>:
 800b9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800ba68 <acc_sensor_activate+0x8c>
 800b9e4:	f899 7000 	ldrb.w	r7, [r9]
 800b9e8:	b117      	cbz	r7, 800b9f0 <acc_sensor_activate+0x14>
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f0:	f7fe fb70 	bl	800a0d4 <acc_integration_get_sensor_count>
 800b9f4:	f44f 728a 	mov.w	r2, #276	; 0x114
 800b9f8:	0080      	lsls	r0, r0, #2
 800b9fa:	4916      	ldr	r1, [pc, #88]	; (800ba54 <acc_sensor_activate+0x78>)
 800b9fc:	4d16      	ldr	r5, [pc, #88]	; (800ba58 <acc_sensor_activate+0x7c>)
 800b9fe:	f7fe fb93 	bl	800a128 <acc_integration_mem_alloc_debug>
 800ba02:	6028      	str	r0, [r5, #0]
 800ba04:	b1e0      	cbz	r0, 800ba40 <acc_sensor_activate+0x64>
 800ba06:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800ba54 <acc_sensor_activate+0x78>
 800ba0a:	463c      	mov	r4, r7
 800ba0c:	e009      	b.n	800ba22 <acc_sensor_activate+0x46>
 800ba0e:	682e      	ldr	r6, [r5, #0]
 800ba10:	f7fe fb8a 	bl	800a128 <acc_integration_mem_alloc_debug>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800ba1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba1e:	b17b      	cbz	r3, 800ba40 <acc_sensor_activate+0x64>
 800ba20:	3401      	adds	r4, #1
 800ba22:	f7fe fb57 	bl	800a0d4 <acc_integration_get_sensor_count>
 800ba26:	42a0      	cmp	r0, r4
 800ba28:	f240 121f 	movw	r2, #287	; 0x11f
 800ba2c:	4641      	mov	r1, r8
 800ba2e:	f241 0006 	movw	r0, #4102	; 0x1006
 800ba32:	d8ec      	bhi.n	800ba0e <acc_sensor_activate+0x32>
 800ba34:	2701      	movs	r7, #1
 800ba36:	f889 7000 	strb.w	r7, [r9]
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba40:	4b06      	ldr	r3, [pc, #24]	; (800ba5c <acc_sensor_activate+0x80>)
 800ba42:	4a07      	ldr	r2, [pc, #28]	; (800ba60 <acc_sensor_activate+0x84>)
 800ba44:	4907      	ldr	r1, [pc, #28]	; (800ba64 <acc_sensor_activate+0x88>)
 800ba46:	2000      	movs	r0, #0
 800ba48:	f7fe fbba 	bl	800a1c0 <acc_log_rss>
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba52:	bf00      	nop
 800ba54:	08017d5c 	.word	0x08017d5c
 800ba58:	2000041c 	.word	0x2000041c
 800ba5c:	08017d48 	.word	0x08017d48
 800ba60:	08016858 	.word	0x08016858
 800ba64:	08017d6c 	.word	0x08017d6c
 800ba68:	20000418 	.word	0x20000418

0800ba6c <acc_sensor_deactivate>:
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	4e0b      	ldr	r6, [pc, #44]	; (800ba9c <acc_sensor_deactivate+0x30>)
 800ba70:	7833      	ldrb	r3, [r6, #0]
 800ba72:	b18b      	cbz	r3, 800ba98 <acc_sensor_deactivate+0x2c>
 800ba74:	4d0a      	ldr	r5, [pc, #40]	; (800baa0 <acc_sensor_deactivate+0x34>)
 800ba76:	2400      	movs	r4, #0
 800ba78:	e005      	b.n	800ba86 <acc_sensor_deactivate+0x1a>
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ba80:	f7fe fb8c 	bl	800a19c <acc_integration_mem_free>
 800ba84:	3401      	adds	r4, #1
 800ba86:	f7fe fb25 	bl	800a0d4 <acc_integration_get_sensor_count>
 800ba8a:	42a0      	cmp	r0, r4
 800ba8c:	d8f5      	bhi.n	800ba7a <acc_sensor_deactivate+0xe>
 800ba8e:	6828      	ldr	r0, [r5, #0]
 800ba90:	f7fe fb84 	bl	800a19c <acc_integration_mem_free>
 800ba94:	2300      	movs	r3, #0
 800ba96:	7033      	strb	r3, [r6, #0]
 800ba98:	bd70      	pop	{r4, r5, r6, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000418 	.word	0x20000418
 800baa0:	2000041c 	.word	0x2000041c

0800baa4 <acc_sensor_reg_read>:
 800baa4:	f7ff bf20 	b.w	800b8e8 <internal_reg_read>

0800baa8 <acc_sensor_reg_write>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800baae:	b082      	sub	sp, #8
 800bab0:	ba4b      	rev16	r3, r1
 800bab2:	ba54      	rev16	r4, r2
 800bab4:	a901      	add	r1, sp, #4
 800bab6:	2204      	movs	r2, #4
 800bab8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800babc:	f8ad 4006 	strh.w	r4, [sp, #6]
 800bac0:	f7fe fb2c 	bl	800a11c <acc_integration_sensor_device_transfer>
 800bac4:	b002      	add	sp, #8
 800bac6:	bd10      	pop	{r4, pc}

0800bac8 <acc_sensor_reg_field_write>:
 800bac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	4688      	mov	r8, r1
 800bad0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800bad4:	4619      	mov	r1, r3
 800bad6:	4617      	mov	r7, r2
 800bad8:	f10d 0202 	add.w	r2, sp, #2
 800badc:	461d      	mov	r5, r3
 800bade:	4606      	mov	r6, r0
 800bae0:	f7ff ff02 	bl	800b8e8 <internal_reg_read>
 800bae4:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800bae8:	fa04 f208 	lsl.w	r2, r4, r8
 800baec:	4042      	eors	r2, r0
 800baee:	403a      	ands	r2, r7
 800baf0:	4042      	eors	r2, r0
 800baf2:	ba54      	rev16	r4, r2
 800baf4:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800baf8:	2204      	movs	r2, #4
 800bafa:	ba6d      	rev16	r5, r5
 800bafc:	4630      	mov	r0, r6
 800bafe:	eb0d 0102 	add.w	r1, sp, r2
 800bb02:	f8ad 5004 	strh.w	r5, [sp, #4]
 800bb06:	f8ad 4006 	strh.w	r4, [sp, #6]
 800bb0a:	f7fe fb07 	bl	800a11c <acc_integration_sensor_device_transfer>
 800bb0e:	b002      	add	sp, #8
 800bb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb14 <acc_sensor_conf_read>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	4698      	mov	r8, r3
 800bb1e:	6038      	str	r0, [r7, #0]
 800bb20:	460d      	mov	r5, r1
 800bb22:	4691      	mov	r9, r2
 800bb24:	f7fe fae2 	bl	800a0ec <acc_integration_get_max_spi_transfer_size>
 800bb28:	0880      	lsrs	r0, r0, #2
 800bb2a:	bf1a      	itte	ne
 800bb2c:	1e83      	subne	r3, r0, #2
 800bb2e:	607b      	strne	r3, [r7, #4]
 800bb30:	f8c7 8004 	streq.w	r8, [r7, #4]
 800bb34:	f1b8 0f00 	cmp.w	r8, #0
 800bb38:	d02c      	beq.n	800bb94 <acc_sensor_conf_read+0x80>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4543      	cmp	r3, r8
 800bb3e:	bf28      	it	cs
 800bb40:	4643      	movcs	r3, r8
 800bb42:	0059      	lsls	r1, r3, #1
 800bb44:	1cca      	adds	r2, r1, #3
 800bb46:	0052      	lsls	r2, r2, #1
 800bb48:	f102 0008 	add.w	r0, r2, #8
 800bb4c:	f020 0007 	bic.w	r0, r0, #7
 800bb50:	46eb      	mov	fp, sp
 800bb52:	ebad 0d00 	sub.w	sp, sp, r0
 800bb56:	466e      	mov	r6, sp
 800bb58:	f445 4020 	orr.w	r0, r5, #40960	; 0xa000
 800bb5c:	3901      	subs	r1, #1
 800bb5e:	ba49      	rev16	r1, r1
 800bb60:	ba40      	rev16	r0, r0
 800bb62:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800bb66:	8071      	strh	r1, [r6, #2]
 800bb68:	8030      	strh	r0, [r6, #0]
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	6838      	ldr	r0, [r7, #0]
 800bb6e:	461c      	mov	r4, r3
 800bb70:	f7fe fad4 	bl	800a11c <acc_integration_sensor_device_transfer>
 800bb74:	1db1      	adds	r1, r6, #6
 800bb76:	4652      	mov	r2, sl
 800bb78:	4648      	mov	r0, r9
 800bb7a:	f004 fa8f 	bl	801009c <memcpy>
 800bb7e:	4648      	mov	r0, r9
 800bb80:	4621      	mov	r1, r4
 800bb82:	f001 f99f 	bl	800cec4 <acc_utils_swap32_array>
 800bb86:	4425      	add	r5, r4
 800bb88:	ebb8 0804 	subs.w	r8, r8, r4
 800bb8c:	44d1      	add	r9, sl
 800bb8e:	b2ad      	uxth	r5, r5
 800bb90:	46dd      	mov	sp, fp
 800bb92:	d1d2      	bne.n	800bb3a <acc_sensor_conf_read+0x26>
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb9c <acc_sensor_conf_write_32bit>:
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	4698      	mov	r8, r3
 800bba6:	6038      	str	r0, [r7, #0]
 800bba8:	468b      	mov	fp, r1
 800bbaa:	4692      	mov	sl, r2
 800bbac:	f7fe fa9e 	bl	800a0ec <acc_integration_get_max_spi_transfer_size>
 800bbb0:	0880      	lsrs	r0, r0, #2
 800bbb2:	bf1a      	itte	ne
 800bbb4:	f100 33ff 	addne.w	r3, r0, #4294967295
 800bbb8:	607b      	strne	r3, [r7, #4]
 800bbba:	f8c7 8004 	streq.w	r8, [r7, #4]
 800bbbe:	f1b8 0f00 	cmp.w	r8, #0
 800bbc2:	d037      	beq.n	800bc34 <acc_sensor_conf_write_32bit+0x98>
 800bbc4:	4653      	mov	r3, sl
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	f8c7 d00c 	str.w	sp, [r7, #12]
 800bbcc:	4542      	cmp	r2, r8
 800bbce:	bf28      	it	cs
 800bbd0:	4642      	movcs	r2, r8
 800bbd2:	0095      	lsls	r5, r2, #2
 800bbd4:	f105 010a 	add.w	r1, r5, #10
 800bbd8:	f021 0107 	bic.w	r1, r1, #7
 800bbdc:	ebad 0d01 	sub.w	sp, sp, r1
 800bbe0:	46e9      	mov	r9, sp
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	ebad 0d01 	sub.w	sp, sp, r1
 800bbe8:	462a      	mov	r2, r5
 800bbea:	4619      	mov	r1, r3
 800bbec:	4648      	mov	r0, r9
 800bbee:	60bb      	str	r3, [r7, #8]
 800bbf0:	46ea      	mov	sl, sp
 800bbf2:	f004 fa53 	bl	801009c <memcpy>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4648      	mov	r0, r9
 800bbfa:	f001 f963 	bl	800cec4 <acc_utils_swap32_array>
 800bbfe:	4650      	mov	r0, sl
 800bc00:	f44b 42a0 	orr.w	r2, fp, #20480	; 0x5000
 800bc04:	ba52      	rev16	r2, r2
 800bc06:	462e      	mov	r6, r5
 800bc08:	f820 2b02 	strh.w	r2, [r0], #2
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	462a      	mov	r2, r5
 800bc10:	3602      	adds	r6, #2
 800bc12:	f004 fa43 	bl	801009c <memcpy>
 800bc16:	4632      	mov	r2, r6
 800bc18:	4651      	mov	r1, sl
 800bc1a:	6838      	ldr	r0, [r7, #0]
 800bc1c:	f7fe fa7e 	bl	800a11c <acc_integration_sensor_device_transfer>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f8d7 d00c 	ldr.w	sp, [r7, #12]
 800bc26:	44a3      	add	fp, r4
 800bc28:	ebb8 0804 	subs.w	r8, r8, r4
 800bc2c:	442b      	add	r3, r5
 800bc2e:	fa1f fb8b 	uxth.w	fp, fp
 800bc32:	d1c8      	bne.n	800bbc6 <acc_sensor_conf_write_32bit+0x2a>
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc3c <acc_sensor_conf_write_8bit>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	4681      	mov	r9, r0
 800bc42:	481c      	ldr	r0, [pc, #112]	; (800bcb4 <acc_sensor_conf_write_8bit+0x78>)
 800bc44:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	6800      	ldr	r0, [r0, #0]
 800bc4c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800bc50:	b083      	sub	sp, #12
 800bc52:	468b      	mov	fp, r1
 800bc54:	4616      	mov	r6, r2
 800bc56:	3404      	adds	r4, #4
 800bc58:	f7fe fa48 	bl	800a0ec <acc_integration_get_max_spi_transfer_size>
 800bc5c:	b340      	cbz	r0, 800bcb0 <acc_sensor_conf_write_8bit+0x74>
 800bc5e:	1e87      	subs	r7, r0, #2
 800bc60:	f027 0703 	bic.w	r7, r7, #3
 800bc64:	b30e      	cbz	r6, 800bcaa <acc_sensor_conf_write_8bit+0x6e>
 800bc66:	1cbb      	adds	r3, r7, #2
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	42b7      	cmp	r7, r6
 800bc6c:	bf38      	it	cc
 800bc6e:	9d01      	ldrcc	r5, [sp, #4]
 800bc70:	f44b 42a0 	orr.w	r2, fp, #20480	; 0x5000
 800bc74:	bf28      	it	cs
 800bc76:	1cb5      	addcs	r5, r6, #2
 800bc78:	ea4f 2112 	mov.w	r1, r2, lsr #8
 800bc7c:	bf34      	ite	cc
 800bc7e:	46ba      	movcc	sl, r7
 800bc80:	46b2      	movcs	sl, r6
 800bc82:	7062      	strb	r2, [r4, #1]
 800bc84:	7021      	strb	r1, [r4, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4648      	mov	r0, r9
 800bc8c:	f7fe fa46 	bl	800a11c <acc_integration_sensor_device_transfer>
 800bc90:	f1c5 0502 	rsb	r5, r5, #2
 800bc94:	f8a4 8000 	strh.w	r8, [r4]
 800bc98:	4454      	add	r4, sl
 800bc9a:	eb0b 0b9a 	add.w	fp, fp, sl, lsr #2
 800bc9e:	1976      	adds	r6, r6, r5
 800bca0:	fa1f fb8b 	uxth.w	fp, fp
 800bca4:	f8b4 8000 	ldrh.w	r8, [r4]
 800bca8:	d1df      	bne.n	800bc6a <acc_sensor_conf_write_8bit+0x2e>
 800bcaa:	b003      	add	sp, #12
 800bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb0:	4637      	mov	r7, r6
 800bcb2:	e7d5      	b.n	800bc60 <acc_sensor_conf_write_8bit+0x24>
 800bcb4:	2000041c 	.word	0x2000041c

0800bcb8 <acc_sensor_buffer_processed_read>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	2400      	movs	r4, #0
 800bcbe:	9400      	str	r4, [sp, #0]
 800bcc0:	f7ff fe2a 	bl	800b918 <internal_buffer_processed_read>
 800bcc4:	b002      	add	sp, #8
 800bcc6:	bd10      	pop	{r4, pc}

0800bcc8 <acc_sensor_get_communication_buffer>:
 800bcc8:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <acc_sensor_get_communication_buffer+0x1c>)
 800bcca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800bcce:	3801      	subs	r0, #1
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bcd6:	3306      	adds	r3, #6
 800bcd8:	600b      	str	r3, [r1, #0]
 800bcda:	b112      	cbz	r2, 800bce2 <acc_sensor_get_communication_buffer+0x1a>
 800bcdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	4770      	bx	lr
 800bce4:	2000041c 	.word	0x2000041c

0800bce8 <print_buffer_u16.constprop.2>:
 800bce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcec:	b085      	sub	sp, #20
 800bcee:	4689      	mov	r9, r1
 800bcf0:	9003      	str	r0, [sp, #12]
 800bcf2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800bcf6:	4943      	ldr	r1, [pc, #268]	; (800be04 <print_buffer_u16.constprop.2+0x11c>)
 800bcf8:	2060      	movs	r0, #96	; 0x60
 800bcfa:	f7fe fa15 	bl	800a128 <acc_integration_mem_alloc_debug>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d076      	beq.n	800bdf0 <print_buffer_u16.constprop.2+0x108>
 800bd02:	4680      	mov	r8, r0
 800bd04:	f1b9 0f00 	cmp.w	r9, #0
 800bd08:	d01c      	beq.n	800bd44 <print_buffer_u16.constprop.2+0x5c>
 800bd0a:	f04f 0b00 	mov.w	fp, #0
 800bd0e:	4f3e      	ldr	r7, [pc, #248]	; (800be08 <print_buffer_u16.constprop.2+0x120>)
 800bd10:	465e      	mov	r6, fp
 800bd12:	e008      	b.n	800bd26 <print_buffer_u16.constprop.2+0x3e>
 800bd14:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
 800bd18:	dd61      	ble.n	800bdde <print_buffer_u16.constprop.2+0xf6>
 800bd1a:	2a0f      	cmp	r2, #15
 800bd1c:	f106 0601 	add.w	r6, r6, #1
 800bd20:	d016      	beq.n	800bd50 <print_buffer_u16.constprop.2+0x68>
 800bd22:	45b1      	cmp	r9, r6
 800bd24:	d908      	bls.n	800bd38 <print_buffer_u16.constprop.2+0x50>
 800bd26:	f016 020f 	ands.w	r2, r6, #15
 800bd2a:	d1f3      	bne.n	800bd14 <print_buffer_u16.constprop.2+0x2c>
 800bd2c:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
 800bd30:	dd21      	ble.n	800bd76 <print_buffer_u16.constprop.2+0x8e>
 800bd32:	3601      	adds	r6, #1
 800bd34:	45b1      	cmp	r9, r6
 800bd36:	d8f6      	bhi.n	800bd26 <print_buffer_u16.constprop.2+0x3e>
 800bd38:	4643      	mov	r3, r8
 800bd3a:	4a34      	ldr	r2, [pc, #208]	; (800be0c <print_buffer_u16.constprop.2+0x124>)
 800bd3c:	4934      	ldr	r1, [pc, #208]	; (800be10 <print_buffer_u16.constprop.2+0x128>)
 800bd3e:	2002      	movs	r0, #2
 800bd40:	f7fe fa3e 	bl	800a1c0 <acc_log_rss>
 800bd44:	4640      	mov	r0, r8
 800bd46:	b005      	add	sp, #20
 800bd48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	f7fe ba26 	b.w	800a19c <acc_integration_mem_free>
 800bd50:	4643      	mov	r3, r8
 800bd52:	4a2e      	ldr	r2, [pc, #184]	; (800be0c <print_buffer_u16.constprop.2+0x124>)
 800bd54:	492e      	ldr	r1, [pc, #184]	; (800be10 <print_buffer_u16.constprop.2+0x128>)
 800bd56:	2002      	movs	r0, #2
 800bd58:	f7fe fa32 	bl	800a1c0 <acc_log_rss>
 800bd5c:	45b1      	cmp	r9, r6
 800bd5e:	d9f1      	bls.n	800bd44 <print_buffer_u16.constprop.2+0x5c>
 800bd60:	f04f 0b00 	mov.w	fp, #0
 800bd64:	f016 020f 	ands.w	r2, r6, #15
 800bd68:	465b      	mov	r3, fp
 800bd6a:	d005      	beq.n	800bd78 <print_buffer_u16.constprop.2+0x90>
 800bd6c:	232c      	movs	r3, #44	; 0x2c
 800bd6e:	f888 3000 	strb.w	r3, [r8]
 800bd72:	f04f 0b01 	mov.w	fp, #1
 800bd76:	465b      	mov	r3, fp
 800bd78:	9903      	ldr	r1, [sp, #12]
 800bd7a:	4443      	add	r3, r8
 800bd7c:	1e5d      	subs	r5, r3, #1
 800bd7e:	f831 4016 	ldrh.w	r4, [r1, r6, lsl #1]
 800bd82:	4628      	mov	r0, r5
 800bd84:	f04f 0a00 	mov.w	sl, #0
 800bd88:	fba7 c104 	umull	ip, r1, r7, r4
 800bd8c:	08c9      	lsrs	r1, r1, #3
 800bd8e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800bd92:	eba4 044c 	sub.w	r4, r4, ip, lsl #1
 800bd96:	3430      	adds	r4, #48	; 0x30
 800bd98:	f800 4f01 	strb.w	r4, [r0, #1]!
 800bd9c:	f10a 0a01 	add.w	sl, sl, #1
 800bda0:	460c      	mov	r4, r1
 800bda2:	2900      	cmp	r1, #0
 800bda4:	d1f0      	bne.n	800bd88 <print_buffer_u16.constprop.2+0xa0>
 800bda6:	f803 100a 	strb.w	r1, [r3, sl]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	9201      	str	r2, [sp, #4]
 800bdae:	9302      	str	r3, [sp, #8]
 800bdb0:	f7f4 fa80 	bl	80002b4 <strlen>
 800bdb4:	1e41      	subs	r1, r0, #1
 800bdb6:	2900      	cmp	r1, #0
 800bdb8:	9a01      	ldr	r2, [sp, #4]
 800bdba:	dd0e      	ble.n	800bdda <print_buffer_u16.constprop.2+0xf2>
 800bdbc:	9b02      	ldr	r3, [sp, #8]
 800bdbe:	4403      	add	r3, r0
 800bdc0:	3401      	adds	r4, #1
 800bdc2:	43e1      	mvns	r1, r4
 800bdc4:	4401      	add	r1, r0
 800bdc6:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 800bdca:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 800bdce:	f885 e000 	strb.w	lr, [r5]
 800bdd2:	428c      	cmp	r4, r1
 800bdd4:	f883 c000 	strb.w	ip, [r3]
 800bdd8:	dbf2      	blt.n	800bdc0 <print_buffer_u16.constprop.2+0xd8>
 800bdda:	44d3      	add	fp, sl
 800bddc:	e79d      	b.n	800bd1a <print_buffer_u16.constprop.2+0x32>
 800bdde:	f10b 0301 	add.w	r3, fp, #1
 800bde2:	212c      	movs	r1, #44	; 0x2c
 800bde4:	2b60      	cmp	r3, #96	; 0x60
 800bde6:	f808 100b 	strb.w	r1, [r8, fp]
 800bdea:	469b      	mov	fp, r3
 800bdec:	d095      	beq.n	800bd1a <print_buffer_u16.constprop.2+0x32>
 800bdee:	e7c2      	b.n	800bd76 <print_buffer_u16.constprop.2+0x8e>
 800bdf0:	4b08      	ldr	r3, [pc, #32]	; (800be14 <print_buffer_u16.constprop.2+0x12c>)
 800bdf2:	4a09      	ldr	r2, [pc, #36]	; (800be18 <print_buffer_u16.constprop.2+0x130>)
 800bdf4:	4906      	ldr	r1, [pc, #24]	; (800be10 <print_buffer_u16.constprop.2+0x128>)
 800bdf6:	2002      	movs	r0, #2
 800bdf8:	b005      	add	sp, #20
 800bdfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfe:	f7fe b9df 	b.w	800a1c0 <acc_log_rss>
 800be02:	bf00      	nop
 800be04:	0801807c 	.word	0x0801807c
 800be08:	cccccccd 	.word	0xcccccccd
 800be0c:	08017540 	.word	0x08017540
 800be10:	08018098 	.word	0x08018098
 800be14:	08017d9c 	.word	0x08017d9c
 800be18:	08016858 	.word	0x08016858

0800be1c <acc_sensor_diagnostics_print_buffer_u16>:
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <acc_sensor_diagnostics_print_buffer_u16+0xc>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	b903      	cbnz	r3, 800be24 <acc_sensor_diagnostics_print_buffer_u16+0x8>
 800be22:	4770      	bx	lr
 800be24:	f7ff bf60 	b.w	800bce8 <print_buffer_u16.constprop.2>
 800be28:	20000420 	.word	0x20000420

0800be2c <acc_sensor_diagnostics_print_buffer_bool>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	4b12      	ldr	r3, [pc, #72]	; (800be78 <acc_sensor_diagnostics_print_buffer_bool+0x4c>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	af00      	add	r7, sp, #0
 800be34:	b90b      	cbnz	r3, 800be3a <acc_sensor_diagnostics_print_buffer_bool+0xe>
 800be36:	46bd      	mov	sp, r7
 800be38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be3a:	4603      	mov	r3, r0
 800be3c:	466e      	mov	r6, sp
 800be3e:	b1a9      	cbz	r1, 800be6c <acc_sensor_diagnostics_print_buffer_bool+0x40>
 800be40:	004a      	lsls	r2, r1, #1
 800be42:	3208      	adds	r2, #8
 800be44:	f022 0207 	bic.w	r2, r2, #7
 800be48:	ebad 0d02 	sub.w	sp, sp, r2
 800be4c:	4668      	mov	r0, sp
 800be4e:	1e4d      	subs	r5, r1, #1
 800be50:	441d      	add	r5, r3
 800be52:	1e82      	subs	r2, r0, #2
 800be54:	3b01      	subs	r3, #1
 800be56:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800be5a:	f822 4f02 	strh.w	r4, [r2, #2]!
 800be5e:	42ab      	cmp	r3, r5
 800be60:	d1f9      	bne.n	800be56 <acc_sensor_diagnostics_print_buffer_bool+0x2a>
 800be62:	f7ff ff41 	bl	800bce8 <print_buffer_u16.constprop.2>
 800be66:	46b5      	mov	sp, r6
 800be68:	46bd      	mov	sp, r7
 800be6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6c:	4b03      	ldr	r3, [pc, #12]	; (800be7c <acc_sensor_diagnostics_print_buffer_bool+0x50>)
 800be6e:	4a04      	ldr	r2, [pc, #16]	; (800be80 <acc_sensor_diagnostics_print_buffer_bool+0x54>)
 800be70:	4804      	ldr	r0, [pc, #16]	; (800be84 <acc_sensor_diagnostics_print_buffer_bool+0x58>)
 800be72:	21ef      	movs	r1, #239	; 0xef
 800be74:	f004 f8ae 	bl	800ffd4 <__assert_func>
 800be78:	20000420 	.word	0x20000420
 800be7c:	08017db0 	.word	0x08017db0
 800be80:	08017d74 	.word	0x08017d74
 800be84:	0801807c 	.word	0x0801807c

0800be88 <acc_sensor_diagnostics_print_buffer_f32>:
 800be88:	4b44      	ldr	r3, [pc, #272]	; (800bf9c <acc_sensor_diagnostics_print_buffer_f32+0x114>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	b903      	cbnz	r3, 800be90 <acc_sensor_diagnostics_print_buffer_f32+0x8>
 800be8e:	4770      	bx	lr
 800be90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be94:	ed2d 8b04 	vpush	{d8-d9}
 800be98:	b082      	sub	sp, #8
 800be9a:	460e      	mov	r6, r1
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	46ea      	mov	sl, sp
 800bea0:	2900      	cmp	r1, #0
 800bea2:	d074      	beq.n	800bf8e <acc_sensor_diagnostics_print_buffer_f32+0x106>
 800bea4:	004b      	lsls	r3, r1, #1
 800bea6:	3308      	adds	r3, #8
 800bea8:	f023 0307 	bic.w	r3, r3, #7
 800beac:	ebad 0d03 	sub.w	sp, sp, r3
 800beb0:	f10d 0908 	add.w	r9, sp, #8
 800beb4:	4604      	mov	r4, r0
 800beb6:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 800bfa0 <acc_sensor_diagnostics_print_buffer_f32+0x118>
 800beba:	ed9f 9a3a 	vldr	s18, [pc, #232]	; 800bfa4 <acc_sensor_diagnostics_print_buffer_f32+0x11c>
 800bebe:	eddf 8a3a 	vldr	s17, [pc, #232]	; 800bfa8 <acc_sensor_diagnostics_print_buffer_f32+0x120>
 800bec2:	464d      	mov	r5, r9
 800bec4:	eb00 0881 	add.w	r8, r0, r1, lsl #2
 800bec8:	e024      	b.n	800bf14 <acc_sensor_diagnostics_print_buffer_f32+0x8c>
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	bf48      	it	mi
 800bed0:	eef1 7a67 	vnegmi.f32	s15, s15
 800bed4:	ee77 7a89 	vadd.f32	s15, s15, s18
 800bed8:	bf48      	it	mi
 800beda:	232d      	movmi	r3, #45	; 0x2d
 800bedc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800bee0:	bf58      	it	pl
 800bee2:	2320      	movpl	r3, #32
 800bee4:	ed8d 7a00 	vstr	s14, [sp]
 800bee8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800beec:	4a2f      	ldr	r2, [pc, #188]	; (800bfac <acc_sensor_diagnostics_print_buffer_f32+0x124>)
 800beee:	4930      	ldr	r1, [pc, #192]	; (800bfb0 <acc_sensor_diagnostics_print_buffer_f32+0x128>)
 800bef0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bef4:	2001      	movs	r0, #1
 800bef6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800befa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800befe:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf02:	f7fe f95d 	bl	800a1c0 <acc_log_rss>
 800bf06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf0a:	802b      	strh	r3, [r5, #0]
 800bf0c:	45a0      	cmp	r8, r4
 800bf0e:	f105 0502 	add.w	r5, r5, #2
 800bf12:	d019      	beq.n	800bf48 <acc_sensor_diagnostics_print_buffer_f32+0xc0>
 800bf14:	ecf4 7a01 	vldmia	r4!, {s15}
 800bf18:	eef4 7ac8 	vcmpe.f32	s15, s16
 800bf1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf24:	dcd1      	bgt.n	800beca <acc_sensor_diagnostics_print_buffer_f32+0x42>
 800bf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2a:	d417      	bmi.n	800bf5c <acc_sensor_diagnostics_print_buffer_f32+0xd4>
 800bf2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bf30:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf34:	45a0      	cmp	r8, r4
 800bf36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf3a:	f105 0502 	add.w	r5, r5, #2
 800bf3e:	ee17 3a90 	vmov	r3, s15
 800bf42:	f825 3c02 	strh.w	r3, [r5, #-2]
 800bf46:	d1e5      	bne.n	800bf14 <acc_sensor_diagnostics_print_buffer_f32+0x8c>
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4648      	mov	r0, r9
 800bf4c:	f7ff fecc 	bl	800bce8 <print_buffer_u16.constprop.2>
 800bf50:	46d5      	mov	sp, sl
 800bf52:	46bd      	mov	sp, r7
 800bf54:	ecbd 8b04 	vpop	{d8-d9}
 800bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5c:	ee79 7a67 	vsub.f32	s15, s18, s15
 800bf60:	232d      	movs	r3, #45	; 0x2d
 800bf62:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800bf66:	4a11      	ldr	r2, [pc, #68]	; (800bfac <acc_sensor_diagnostics_print_buffer_f32+0x124>)
 800bf68:	ed8d 7a00 	vstr	s14, [sp]
 800bf6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bf70:	490f      	ldr	r1, [pc, #60]	; (800bfb0 <acc_sensor_diagnostics_print_buffer_f32+0x128>)
 800bf72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf76:	2001      	movs	r0, #1
 800bf78:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800bf7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf80:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf84:	f7fe f91c 	bl	800a1c0 <acc_log_rss>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	802b      	strh	r3, [r5, #0]
 800bf8c:	e7be      	b.n	800bf0c <acc_sensor_diagnostics_print_buffer_f32+0x84>
 800bf8e:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <acc_sensor_diagnostics_print_buffer_f32+0x12c>)
 800bf90:	4a09      	ldr	r2, [pc, #36]	; (800bfb8 <acc_sensor_diagnostics_print_buffer_f32+0x130>)
 800bf92:	480a      	ldr	r0, [pc, #40]	; (800bfbc <acc_sensor_diagnostics_print_buffer_f32+0x134>)
 800bf94:	21fe      	movs	r1, #254	; 0xfe
 800bf96:	f004 f81d 	bl	800ffd4 <__assert_func>
 800bf9a:	bf00      	nop
 800bf9c:	20000420 	.word	0x20000420
 800bfa0:	477fff00 	.word	0x477fff00
 800bfa4:	350637bd 	.word	0x350637bd
 800bfa8:	49742400 	.word	0x49742400
 800bfac:	08017dc0 	.word	0x08017dc0
 800bfb0:	08018098 	.word	0x08018098
 800bfb4:	08017db0 	.word	0x08017db0
 800bfb8:	08017d88 	.word	0x08017d88
 800bfbc:	0801807c 	.word	0x0801807c

0800bfc0 <acc_sensor_diagnostics_sensor_status>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	b095      	sub	sp, #84	; 0x54
 800bfc8:	4fb6      	ldr	r7, [pc, #728]	; (800c2a4 <acc_sensor_diagnostics_sensor_status+0x2e4>)
 800bfca:	f8df a314 	ldr.w	sl, [pc, #788]	; 800c2e0 <acc_sensor_diagnostics_sensor_status+0x320>
 800bfce:	f897 9000 	ldrb.w	r9, [r7]
 800bfd2:	703b      	strb	r3, [r7, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	21b2      	movs	r1, #178	; 0xb2
 800bfd8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800bfdc:	4604      	mov	r4, r0
 800bfde:	f7ff fd63 	bl	800baa8 <acc_sensor_reg_write>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4eb0      	ldr	r6, [pc, #704]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800bfe6:	f828 3d20 	strh.w	r3, [r8, #-32]!
 800bfea:	2564      	movs	r5, #100	; 0x64
 800bfec:	e002      	b.n	800bff4 <acc_sensor_diagnostics_sensor_status+0x34>
 800bfee:	3d01      	subs	r5, #1
 800bff0:	b2ad      	uxth	r5, r5
 800bff2:	b1bd      	cbz	r5, 800c024 <acc_sensor_diagnostics_sensor_status+0x64>
 800bff4:	4642      	mov	r2, r8
 800bff6:	2111      	movs	r1, #17
 800bff8:	4620      	mov	r0, r4
 800bffa:	f7ff fd53 	bl	800baa4 <acc_sensor_reg_read>
 800bffe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c002:	783a      	ldrb	r2, [r7, #0]
 800c004:	0559      	lsls	r1, r3, #21
 800c006:	f140 80ce 	bpl.w	800c1a6 <acc_sensor_diagnostics_sensor_status+0x1e6>
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	d0ef      	beq.n	800bfee <acc_sensor_diagnostics_sensor_status+0x2e>
 800c00e:	3d01      	subs	r5, #1
 800c010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c014:	4652      	mov	r2, sl
 800c016:	4631      	mov	r1, r6
 800c018:	2002      	movs	r0, #2
 800c01a:	b2ad      	uxth	r5, r5
 800c01c:	f7fe f8d0 	bl	800a1c0 <acc_log_rss>
 800c020:	2d00      	cmp	r5, #0
 800c022:	d1e7      	bne.n	800bff4 <acc_sensor_diagnostics_sensor_status+0x34>
 800c024:	aa14      	add	r2, sp, #80	; 0x50
 800c026:	2500      	movs	r5, #0
 800c028:	f822 5d2c 	strh.w	r5, [r2, #-44]!
 800c02c:	4629      	mov	r1, r5
 800c02e:	4620      	mov	r0, r4
 800c030:	f7ff fd38 	bl	800baa4 <acc_sensor_reg_read>
 800c034:	aa14      	add	r2, sp, #80	; 0x50
 800c036:	212a      	movs	r1, #42	; 0x2a
 800c038:	f822 5d2a 	strh.w	r5, [r2, #-42]!
 800c03c:	4620      	mov	r0, r4
 800c03e:	f7ff fd31 	bl	800baa4 <acc_sensor_reg_read>
 800c042:	aa14      	add	r2, sp, #80	; 0x50
 800c044:	4e99      	ldr	r6, [pc, #612]	; (800c2ac <acc_sensor_diagnostics_sensor_status+0x2ec>)
 800c046:	f822 5d28 	strh.w	r5, [r2, #-40]!
 800c04a:	2128      	movs	r1, #40	; 0x28
 800c04c:	4620      	mov	r0, r4
 800c04e:	f7ff fd29 	bl	800baa4 <acc_sensor_reg_read>
 800c052:	f106 0a1e 	add.w	sl, r6, #30
 800c056:	4645      	mov	r5, r8
 800c058:	2163      	movs	r1, #99	; 0x63
 800c05a:	e001      	b.n	800c060 <acc_sensor_diagnostics_sensor_status+0xa0>
 800c05c:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 800c060:	462a      	mov	r2, r5
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fd1e 	bl	800baa4 <acc_sensor_reg_read>
 800c068:	4556      	cmp	r6, sl
 800c06a:	f105 0502 	add.w	r5, r5, #2
 800c06e:	d1f5      	bne.n	800c05c <acc_sensor_diagnostics_sensor_status+0x9c>
 800c070:	783b      	ldrb	r3, [r7, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	f040 8138 	bne.w	800c2e8 <acc_sensor_diagnostics_sensor_status+0x328>
 800c078:	4642      	mov	r2, r8
 800c07a:	2168      	movs	r1, #104	; 0x68
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7ff fd11 	bl	800baa4 <acc_sensor_reg_read>
 800c082:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c086:	2167      	movs	r1, #103	; 0x67
 800c088:	4620      	mov	r0, r4
 800c08a:	f7ff fd0b 	bl	800baa4 <acc_sensor_reg_read>
 800c08e:	aa0d      	add	r2, sp, #52	; 0x34
 800c090:	2166      	movs	r1, #102	; 0x66
 800c092:	4620      	mov	r0, r4
 800c094:	f7ff fd06 	bl	800baa4 <acc_sensor_reg_read>
 800c098:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800c09c:	2165      	movs	r1, #101	; 0x65
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7ff fd00 	bl	800baa4 <acc_sensor_reg_read>
 800c0a4:	783b      	ldrb	r3, [r7, #0]
 800c0a6:	b17b      	cbz	r3, 800c0c8 <acc_sensor_diagnostics_sensor_status+0x108>
 800c0a8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800c0ac:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c0b0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c0b4:	9200      	str	r2, [sp, #0]
 800c0b6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c0ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c0be:	4a7c      	ldr	r2, [pc, #496]	; (800c2b0 <acc_sensor_diagnostics_sensor_status+0x2f0>)
 800c0c0:	4979      	ldr	r1, [pc, #484]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c0c2:	2002      	movs	r0, #2
 800c0c4:	f7fe f87c 	bl	800a1c0 <acc_log_rss>
 800c0c8:	aa14      	add	r2, sp, #80	; 0x50
 800c0ca:	2500      	movs	r5, #0
 800c0cc:	f822 5d26 	strh.w	r5, [r2, #-38]!
 800c0d0:	2153      	movs	r1, #83	; 0x53
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f7ff fce6 	bl	800baa4 <acc_sensor_reg_read>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	2140      	movs	r1, #64	; 0x40
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800c0e2:	f7ff fcdf 	bl	800baa4 <acc_sensor_reg_read>
 800c0e6:	783b      	ldrb	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f040 80b6 	bne.w	800c25a <acc_sensor_diagnostics_sensor_status+0x29a>
 800c0ee:	4e71      	ldr	r6, [pc, #452]	; (800c2b4 <acc_sensor_diagnostics_sensor_status+0x2f4>)
 800c0f0:	4645      	mov	r5, r8
 800c0f2:	f106 0a1e 	add.w	sl, r6, #30
 800c0f6:	21f0      	movs	r1, #240	; 0xf0
 800c0f8:	e001      	b.n	800c0fe <acc_sensor_diagnostics_sensor_status+0x13e>
 800c0fa:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 800c0fe:	462a      	mov	r2, r5
 800c100:	4620      	mov	r0, r4
 800c102:	f7ff fccf 	bl	800baa4 <acc_sensor_reg_read>
 800c106:	4556      	cmp	r6, sl
 800c108:	f105 0502 	add.w	r5, r5, #2
 800c10c:	d1f5      	bne.n	800c0fa <acc_sensor_diagnostics_sensor_status+0x13a>
 800c10e:	783b      	ldrb	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f040 808d 	bne.w	800c230 <acc_sensor_diagnostics_sensor_status+0x270>
 800c116:	461d      	mov	r5, r3
 800c118:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 800c2e4 <acc_sensor_diagnostics_sensor_status+0x324>
 800c11c:	f8df a188 	ldr.w	sl, [pc, #392]	; 800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>
 800c120:	2601      	movs	r6, #1
 800c122:	b93b      	cbnz	r3, 800c134 <acc_sensor_diagnostics_sensor_status+0x174>
 800c124:	3601      	adds	r6, #1
 800c126:	3502      	adds	r5, #2
 800c128:	2e08      	cmp	r6, #8
 800c12a:	b2ed      	uxtb	r5, r5
 800c12c:	d019      	beq.n	800c162 <acc_sensor_diagnostics_sensor_status+0x1a2>
 800c12e:	783b      	ldrb	r3, [r7, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0f7      	beq.n	800c124 <acc_sensor_diagnostics_sensor_status+0x164>
 800c134:	ab14      	add	r3, sp, #80	; 0x50
 800c136:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800c13a:	4651      	mov	r1, sl
 800c13c:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 800c140:	ab14      	add	r3, sp, #80	; 0x50
 800c142:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800c146:	2002      	movs	r0, #2
 800c148:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800c14c:	e9cd 3200 	strd	r3, r2, [sp]
 800c150:	4633      	mov	r3, r6
 800c152:	465a      	mov	r2, fp
 800c154:	3601      	adds	r6, #1
 800c156:	f7fe f833 	bl	800a1c0 <acc_log_rss>
 800c15a:	3502      	adds	r5, #2
 800c15c:	2e08      	cmp	r6, #8
 800c15e:	b2ed      	uxtb	r5, r5
 800c160:	d1e5      	bne.n	800c12e <acc_sensor_diagnostics_sensor_status+0x16e>
 800c162:	aa14      	add	r2, sp, #80	; 0x50
 800c164:	2500      	movs	r5, #0
 800c166:	f822 5d24 	strh.w	r5, [r2, #-36]!
 800c16a:	219d      	movs	r1, #157	; 0x9d
 800c16c:	4620      	mov	r0, r4
 800c16e:	f7ff fc99 	bl	800baa4 <acc_sensor_reg_read>
 800c172:	aa14      	add	r2, sp, #80	; 0x50
 800c174:	2199      	movs	r1, #153	; 0x99
 800c176:	f822 5d22 	strh.w	r5, [r2, #-34]!
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7ff fc92 	bl	800baa4 <acc_sensor_reg_read>
 800c180:	4642      	mov	r2, r8
 800c182:	2196      	movs	r1, #150	; 0x96
 800c184:	4620      	mov	r0, r4
 800c186:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800c18a:	f7ff fc8b 	bl	800baa4 <acc_sensor_reg_read>
 800c18e:	462a      	mov	r2, r5
 800c190:	4620      	mov	r0, r4
 800c192:	21b2      	movs	r1, #178	; 0xb2
 800c194:	f7ff fc88 	bl	800baa8 <acc_sensor_reg_write>
 800c198:	783b      	ldrb	r3, [r7, #0]
 800c19a:	b97b      	cbnz	r3, 800c1bc <acc_sensor_diagnostics_sensor_status+0x1fc>
 800c19c:	f887 9000 	strb.w	r9, [r7]
 800c1a0:	b015      	add	sp, #84	; 0x54
 800c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	f43f af3c 	beq.w	800c024 <acc_sensor_diagnostics_sensor_status+0x64>
 800c1ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1b0:	4a41      	ldr	r2, [pc, #260]	; (800c2b8 <acc_sensor_diagnostics_sensor_status+0x2f8>)
 800c1b2:	493d      	ldr	r1, [pc, #244]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c1b4:	2002      	movs	r0, #2
 800c1b6:	f7fe f803 	bl	800a1c0 <acc_log_rss>
 800c1ba:	e733      	b.n	800c024 <acc_sensor_diagnostics_sensor_status+0x64>
 800c1bc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800c1c0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800c1c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800c1c8:	e9cd 2100 	strd	r2, r1, [sp]
 800c1cc:	2002      	movs	r0, #2
 800c1ce:	4a3b      	ldr	r2, [pc, #236]	; (800c2bc <acc_sensor_diagnostics_sensor_status+0x2fc>)
 800c1d0:	4935      	ldr	r1, [pc, #212]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c1d2:	f7fd fff5 	bl	800a1c0 <acc_log_rss>
 800c1d6:	783b      	ldrb	r3, [r7, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0df      	beq.n	800c19c <acc_sensor_diagnostics_sensor_status+0x1dc>
 800c1dc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800c1e0:	4a37      	ldr	r2, [pc, #220]	; (800c2c0 <acc_sensor_diagnostics_sensor_status+0x300>)
 800c1e2:	4931      	ldr	r1, [pc, #196]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c1e4:	2002      	movs	r0, #2
 800c1e6:	f7fd ffeb 	bl	800a1c0 <acc_log_rss>
 800c1ea:	783b      	ldrb	r3, [r7, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0d5      	beq.n	800c19c <acc_sensor_diagnostics_sensor_status+0x1dc>
 800c1f0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c1f4:	4a33      	ldr	r2, [pc, #204]	; (800c2c4 <acc_sensor_diagnostics_sensor_status+0x304>)
 800c1f6:	492c      	ldr	r1, [pc, #176]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c1f8:	2002      	movs	r0, #2
 800c1fa:	f7fd ffe1 	bl	800a1c0 <acc_log_rss>
 800c1fe:	783b      	ldrb	r3, [r7, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d0cb      	beq.n	800c19c <acc_sensor_diagnostics_sensor_status+0x1dc>
 800c204:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800c208:	4a2f      	ldr	r2, [pc, #188]	; (800c2c8 <acc_sensor_diagnostics_sensor_status+0x308>)
 800c20a:	4927      	ldr	r1, [pc, #156]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c20c:	2002      	movs	r0, #2
 800c20e:	f7fd ffd7 	bl	800a1c0 <acc_log_rss>
 800c212:	783b      	ldrb	r3, [r7, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d0c1      	beq.n	800c19c <acc_sensor_diagnostics_sensor_status+0x1dc>
 800c218:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c21c:	4a2b      	ldr	r2, [pc, #172]	; (800c2cc <acc_sensor_diagnostics_sensor_status+0x30c>)
 800c21e:	4922      	ldr	r1, [pc, #136]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c220:	2002      	movs	r0, #2
 800c222:	f7fd ffcd 	bl	800a1c0 <acc_log_rss>
 800c226:	f887 9000 	strb.w	r9, [r7]
 800c22a:	b015      	add	sp, #84	; 0x54
 800c22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c230:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c234:	4a26      	ldr	r2, [pc, #152]	; (800c2d0 <acc_sensor_diagnostics_sensor_status+0x310>)
 800c236:	491c      	ldr	r1, [pc, #112]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c238:	2002      	movs	r0, #2
 800c23a:	f7fd ffc1 	bl	800a1c0 <acc_log_rss>
 800c23e:	783b      	ldrb	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	f000 808e 	beq.w	800c362 <acc_sensor_diagnostics_sensor_status+0x3a2>
 800c246:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800c24a:	4a22      	ldr	r2, [pc, #136]	; (800c2d4 <acc_sensor_diagnostics_sensor_status+0x314>)
 800c24c:	4916      	ldr	r1, [pc, #88]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c24e:	2002      	movs	r0, #2
 800c250:	f7fd ffb6 	bl	800a1c0 <acc_log_rss>
 800c254:	2502      	movs	r5, #2
 800c256:	783b      	ldrb	r3, [r7, #0]
 800c258:	e75e      	b.n	800c118 <acc_sensor_diagnostics_sensor_status+0x158>
 800c25a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c25e:	4a1e      	ldr	r2, [pc, #120]	; (800c2d8 <acc_sensor_diagnostics_sensor_status+0x318>)
 800c260:	4911      	ldr	r1, [pc, #68]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c262:	2002      	movs	r0, #2
 800c264:	f7fd ffac 	bl	800a1c0 <acc_log_rss>
 800c268:	783b      	ldrb	r3, [r7, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f43f af3f 	beq.w	800c0ee <acc_sensor_diagnostics_sensor_status+0x12e>
 800c270:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c274:	4a19      	ldr	r2, [pc, #100]	; (800c2dc <acc_sensor_diagnostics_sensor_status+0x31c>)
 800c276:	490c      	ldr	r1, [pc, #48]	; (800c2a8 <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800c278:	f003 0004 	and.w	r0, r3, #4
 800c27c:	f003 0508 	and.w	r5, r3, #8
 800c280:	9004      	str	r0, [sp, #16]
 800c282:	f003 0010 	and.w	r0, r3, #16
 800c286:	9503      	str	r5, [sp, #12]
 800c288:	9002      	str	r0, [sp, #8]
 800c28a:	f003 0520 	and.w	r5, r3, #32
 800c28e:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800c292:	e9cd 0500 	strd	r0, r5, [sp]
 800c296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29a:	2002      	movs	r0, #2
 800c29c:	f7fd ff90 	bl	800a1c0 <acc_log_rss>
 800c2a0:	e725      	b.n	800c0ee <acc_sensor_diagnostics_sensor_status+0x12e>
 800c2a2:	bf00      	nop
 800c2a4:	20000420 	.word	0x20000420
 800c2a8:	08018098 	.word	0x08018098
 800c2ac:	080180ac 	.word	0x080180ac
 800c2b0:	08017eb0 	.word	0x08017eb0
 800c2b4:	080180cc 	.word	0x080180cc
 800c2b8:	08017e10 	.word	0x08017e10
 800c2bc:	08017fd4 	.word	0x08017fd4
 800c2c0:	08018020 	.word	0x08018020
 800c2c4:	08018040 	.word	0x08018040
 800c2c8:	08018058 	.word	0x08018058
 800c2cc:	08018068 	.word	0x08018068
 800c2d0:	08017f74 	.word	0x08017f74
 800c2d4:	08017f98 	.word	0x08017f98
 800c2d8:	08017edc 	.word	0x08017edc
 800c2dc:	08017ef4 	.word	0x08017ef4
 800c2e0:	08017df8 	.word	0x08017df8
 800c2e4:	08017fb0 	.word	0x08017fb0
 800c2e8:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 800c2ec:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800c2f0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800c2f4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800c2f8:	9006      	str	r0, [sp, #24]
 800c2fa:	9105      	str	r1, [sp, #20]
 800c2fc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800c300:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c304:	9204      	str	r2, [sp, #16]
 800c306:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c30a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c30e:	e9cd 2100 	strd	r2, r1, [sp]
 800c312:	e9cd 0502 	strd	r0, r5, [sp, #8]
 800c316:	4a14      	ldr	r2, [pc, #80]	; (800c368 <acc_sensor_diagnostics_sensor_status+0x3a8>)
 800c318:	4914      	ldr	r1, [pc, #80]	; (800c36c <acc_sensor_diagnostics_sensor_status+0x3ac>)
 800c31a:	2002      	movs	r0, #2
 800c31c:	f7fd ff50 	bl	800a1c0 <acc_log_rss>
 800c320:	783b      	ldrb	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f43f aea8 	beq.w	800c078 <acc_sensor_diagnostics_sensor_status+0xb8>
 800c328:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 800c32c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 800c330:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800c334:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
 800c338:	9006      	str	r0, [sp, #24]
 800c33a:	9105      	str	r1, [sp, #20]
 800c33c:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800c340:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800c344:	9204      	str	r2, [sp, #16]
 800c346:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c34a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c34e:	e9cd 2100 	strd	r2, r1, [sp]
 800c352:	e9cd 0502 	strd	r0, r5, [sp, #8]
 800c356:	4a06      	ldr	r2, [pc, #24]	; (800c370 <acc_sensor_diagnostics_sensor_status+0x3b0>)
 800c358:	4904      	ldr	r1, [pc, #16]	; (800c36c <acc_sensor_diagnostics_sensor_status+0x3ac>)
 800c35a:	2002      	movs	r0, #2
 800c35c:	f7fd ff30 	bl	800a1c0 <acc_log_rss>
 800c360:	e68a      	b.n	800c078 <acc_sensor_diagnostics_sensor_status+0xb8>
 800c362:	2501      	movs	r5, #1
 800c364:	e6d8      	b.n	800c118 <acc_sensor_diagnostics_sensor_status+0x158>
 800c366:	bf00      	nop
 800c368:	08017e28 	.word	0x08017e28
 800c36c:	08018098 	.word	0x08018098
 800c370:	08017e6c 	.word	0x08017e6c

0800c374 <acc_sensor_protocol_get_indication_header.part.0>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	460c      	mov	r4, r1
 800c37a:	f10d 020e 	add.w	r2, sp, #14
 800c37e:	2128      	movs	r1, #40	; 0x28
 800c380:	4606      	mov	r6, r0
 800c382:	f7ff fb8f 	bl	800baa4 <acc_sensor_reg_read>
 800c386:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800c38a:	b2d3      	uxtb	r3, r2
 800c38c:	7023      	strb	r3, [r4, #0]
 800c38e:	2b0a      	cmp	r3, #10
 800c390:	d846      	bhi.n	800c420 <acc_sensor_protocol_get_indication_header.part.0+0xac>
 800c392:	e8df f003 	tbb	[pc, r3]
 800c396:	0939      	.short	0x0939
 800c398:	19060606 	.word	0x19060606
 800c39c:	06060622 	.word	0x06060622
 800c3a0:	06          	.byte	0x06
 800c3a1:	00          	.byte	0x00
 800c3a2:	2001      	movs	r0, #1
 800c3a4:	b004      	add	sp, #16
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	0a12      	lsrs	r2, r2, #8
 800c3aa:	2a10      	cmp	r2, #16
 800c3ac:	d807      	bhi.n	800c3be <acc_sensor_protocol_get_indication_header.part.0+0x4a>
 800c3ae:	2001      	movs	r0, #1
 800c3b0:	4b23      	ldr	r3, [pc, #140]	; (800c440 <acc_sensor_protocol_get_indication_header.part.0+0xcc>)
 800c3b2:	fa00 f102 	lsl.w	r1, r0, r2
 800c3b6:	400b      	ands	r3, r1
 800c3b8:	b2d2      	uxtb	r2, r2
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d13e      	bne.n	800c43c <acc_sensor_protocol_get_indication_header.part.0+0xc8>
 800c3be:	2321      	movs	r3, #33	; 0x21
 800c3c0:	2001      	movs	r0, #1
 800c3c2:	7063      	strb	r3, [r4, #1]
 800c3c4:	b004      	add	sp, #16
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	f3c2 2300 	ubfx	r3, r2, #8, #1
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	f3c2 2240 	ubfx	r2, r2, #9, #1
 800c3d2:	7063      	strb	r3, [r4, #1]
 800c3d4:	70a2      	strb	r2, [r4, #2]
 800c3d6:	b004      	add	sp, #16
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f3c2 2100 	ubfx	r1, r2, #8, #1
 800c3e4:	f3c2 2340 	ubfx	r3, r2, #9, #1
 800c3e8:	bf14      	ite	ne
 800c3ea:	2001      	movne	r0, #1
 800c3ec:	2000      	moveq	r0, #0
 800c3ee:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 800c3f2:	70e0      	strb	r0, [r4, #3]
 800c3f4:	7061      	strb	r1, [r4, #1]
 800c3f6:	70a3      	strb	r3, [r4, #2]
 800c3f8:	7122      	strb	r2, [r4, #4]
 800c3fa:	d0d2      	beq.n	800c3a2 <acc_sensor_protocol_get_indication_header.part.0+0x2e>
 800c3fc:	200c      	movs	r0, #12
 800c3fe:	4631      	mov	r1, r6
 800c400:	f7fd ff36 	bl	800a270 <acc_probes_execute_primitive_probe>
 800c404:	2001      	movs	r0, #1
 800c406:	e7cd      	b.n	800c3a4 <acc_sensor_protocol_get_indication_header.part.0+0x30>
 800c408:	4633      	mov	r3, r6
 800c40a:	4a0e      	ldr	r2, [pc, #56]	; (800c444 <acc_sensor_protocol_get_indication_header.part.0+0xd0>)
 800c40c:	490e      	ldr	r1, [pc, #56]	; (800c448 <acc_sensor_protocol_get_indication_header.part.0+0xd4>)
 800c40e:	2000      	movs	r0, #0
 800c410:	f7fd fed6 	bl	800a1c0 <acc_log_rss>
 800c414:	4630      	mov	r0, r6
 800c416:	f7ff fdd3 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c41a:	2000      	movs	r0, #0
 800c41c:	b004      	add	sp, #16
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	2000      	movs	r0, #0
 800c422:	4605      	mov	r5, r0
 800c424:	4a09      	ldr	r2, [pc, #36]	; (800c44c <acc_sensor_protocol_get_indication_header.part.0+0xd8>)
 800c426:	4908      	ldr	r1, [pc, #32]	; (800c448 <acc_sensor_protocol_get_indication_header.part.0+0xd4>)
 800c428:	9600      	str	r6, [sp, #0]
 800c42a:	f7fd fec9 	bl	800a1c0 <acc_log_rss>
 800c42e:	4630      	mov	r0, r6
 800c430:	7025      	strb	r5, [r4, #0]
 800c432:	f7ff fdc5 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c436:	4628      	mov	r0, r5
 800c438:	b004      	add	sp, #16
 800c43a:	bd70      	pop	{r4, r5, r6, pc}
 800c43c:	7062      	strb	r2, [r4, #1]
 800c43e:	e7b1      	b.n	800c3a4 <acc_sensor_protocol_get_indication_header.part.0+0x30>
 800c440:	00010016 	.word	0x00010016
 800c444:	08018244 	.word	0x08018244
 800c448:	08018278 	.word	0x08018278
 800c44c:	08018288 	.word	0x08018288

0800c450 <acc_sensor_protocol_check_asic_id>:
 800c450:	b500      	push	{lr}
 800c452:	b083      	sub	sp, #12
 800c454:	aa02      	add	r2, sp, #8
 800c456:	2100      	movs	r1, #0
 800c458:	f822 1d02 	strh.w	r1, [r2, #-2]!
 800c45c:	f7ff fb22 	bl	800baa4 <acc_sensor_reg_read>
 800c460:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800c464:	f241 1312 	movw	r3, #4370	; 0x1112
 800c468:	1ac0      	subs	r0, r0, r3
 800c46a:	fab0 f080 	clz	r0, r0
 800c46e:	0940      	lsrs	r0, r0, #5
 800c470:	b003      	add	sp, #12
 800c472:	f85d fb04 	ldr.w	pc, [sp], #4
 800c476:	bf00      	nop

0800c478 <acc_sensor_protocol_is_sensor_running>:
 800c478:	b500      	push	{lr}
 800c47a:	b083      	sub	sp, #12
 800c47c:	aa02      	add	r2, sp, #8
 800c47e:	2300      	movs	r3, #0
 800c480:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800c484:	2111      	movs	r1, #17
 800c486:	f7ff fb0d 	bl	800baa4 <acc_sensor_reg_read>
 800c48a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800c48e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800c492:	b003      	add	sp, #12
 800c494:	f85d fb04 	ldr.w	pc, [sp], #4

0800c498 <acc_sensor_protocol_get_communication_buffer>:
 800c498:	f7ff bc16 	b.w	800bcc8 <acc_sensor_get_communication_buffer>

0800c49c <acc_sensor_protocol_load_program>:
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	4616      	mov	r6, r2
 800c4aa:	d840      	bhi.n	800c52e <acc_sensor_protocol_load_program+0x92>
 800c4ac:	ac06      	add	r4, sp, #24
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f824 3d02 	strh.w	r3, [r4, #-2]!
 800c4b4:	4688      	mov	r8, r1
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	212a      	movs	r1, #42	; 0x2a
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	f7ff faf2 	bl	800baa4 <acc_sensor_reg_read>
 800c4c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800c4c4:	065b      	lsls	r3, r3, #25
 800c4c6:	d43f      	bmi.n	800c548 <acc_sensor_protocol_load_program+0xac>
 800c4c8:	4622      	mov	r2, r4
 800c4ca:	2111      	movs	r1, #17
 800c4cc:	2400      	movs	r4, #0
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f8ad 4016 	strh.w	r4, [sp, #22]
 800c4d4:	f7ff fae6 	bl	800baa4 <acc_sensor_reg_read>
 800c4d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800c4dc:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
 800c4e0:	d117      	bne.n	800c512 <acc_sensor_protocol_load_program+0x76>
 800c4e2:	2401      	movs	r4, #1
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	4641      	mov	r1, r8
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f7ff fba7 	bl	800bc3c <acc_sensor_conf_write_8bit>
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	9400      	str	r4, [sp, #0]
 800c4f4:	2380      	movs	r3, #128	; 0x80
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	f7ff fae6 	bl	800bac8 <acc_sensor_reg_field_write>
 800c4fc:	2380      	movs	r3, #128	; 0x80
 800c4fe:	4628      	mov	r0, r5
 800c500:	9700      	str	r7, [sp, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	2107      	movs	r1, #7
 800c506:	f7ff fadf 	bl	800bac8 <acc_sensor_reg_field_write>
 800c50a:	4620      	mov	r0, r4
 800c50c:	b006      	add	sp, #24
 800c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c512:	4b12      	ldr	r3, [pc, #72]	; (800c55c <acc_sensor_protocol_load_program+0xc0>)
 800c514:	4a12      	ldr	r2, [pc, #72]	; (800c560 <acc_sensor_protocol_load_program+0xc4>)
 800c516:	4913      	ldr	r1, [pc, #76]	; (800c564 <acc_sensor_protocol_load_program+0xc8>)
 800c518:	9500      	str	r5, [sp, #0]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f7fd fe50 	bl	800a1c0 <acc_log_rss>
 800c520:	4628      	mov	r0, r5
 800c522:	f7ff fd4d 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c526:	4620      	mov	r0, r4
 800c528:	b006      	add	sp, #24
 800c52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c52e:	2400      	movs	r4, #0
 800c530:	e9cd 2400 	strd	r2, r4, [sp]
 800c534:	4620      	mov	r0, r4
 800c536:	9302      	str	r3, [sp, #8]
 800c538:	4a0b      	ldr	r2, [pc, #44]	; (800c568 <acc_sensor_protocol_load_program+0xcc>)
 800c53a:	490a      	ldr	r1, [pc, #40]	; (800c564 <acc_sensor_protocol_load_program+0xc8>)
 800c53c:	f7fd fe40 	bl	800a1c0 <acc_log_rss>
 800c540:	4620      	mov	r0, r4
 800c542:	b006      	add	sp, #24
 800c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c548:	462b      	mov	r3, r5
 800c54a:	4a08      	ldr	r2, [pc, #32]	; (800c56c <acc_sensor_protocol_load_program+0xd0>)
 800c54c:	4905      	ldr	r1, [pc, #20]	; (800c564 <acc_sensor_protocol_load_program+0xc8>)
 800c54e:	2001      	movs	r0, #1
 800c550:	f7fd fe36 	bl	800a1c0 <acc_log_rss>
 800c554:	4628      	mov	r0, r5
 800c556:	f7ff fd33 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c55a:	e7b5      	b.n	800c4c8 <acc_sensor_protocol_load_program+0x2c>
 800c55c:	08018170 	.word	0x08018170
 800c560:	08018354 	.word	0x08018354
 800c564:	08018278 	.word	0x08018278
 800c568:	080182e4 	.word	0x080182e4
 800c56c:	08018324 	.word	0x08018324

0800c570 <acc_sensor_protocol_clear_resources>:
 800c570:	2200      	movs	r2, #0
 800c572:	2174      	movs	r1, #116	; 0x74
 800c574:	f7ff ba98 	b.w	800baa8 <acc_sensor_reg_write>

0800c578 <acc_sensor_protocol_run_program>:
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b085      	sub	sp, #20
 800c57c:	aa04      	add	r2, sp, #16
 800c57e:	2500      	movs	r5, #0
 800c580:	f822 5d02 	strh.w	r5, [r2, #-2]!
 800c584:	460e      	mov	r6, r1
 800c586:	2111      	movs	r1, #17
 800c588:	4607      	mov	r7, r0
 800c58a:	f7ff fa8b 	bl	800baa4 <acc_sensor_reg_read>
 800c58e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800c592:	f412 6480 	ands.w	r4, r2, #1024	; 0x400
 800c596:	d11a      	bne.n	800c5ce <acc_sensor_protocol_run_program+0x56>
 800c598:	f640 73fb 	movw	r3, #4091	; 0xffb
 800c59c:	429e      	cmp	r6, r3
 800c59e:	d80d      	bhi.n	800c5bc <acc_sensor_protocol_run_program+0x44>
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	2110      	movs	r1, #16
 800c5a6:	f7ff fa7f 	bl	800baa8 <acc_sensor_reg_write>
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 800c5b0:	2110      	movs	r1, #16
 800c5b2:	f7ff fa79 	bl	800baa8 <acc_sensor_reg_write>
 800c5b6:	2001      	movs	r0, #1
 800c5b8:	b005      	add	sp, #20
 800c5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4633      	mov	r3, r6
 800c5c0:	4a09      	ldr	r2, [pc, #36]	; (800c5e8 <acc_sensor_protocol_run_program+0x70>)
 800c5c2:	490a      	ldr	r1, [pc, #40]	; (800c5ec <acc_sensor_protocol_run_program+0x74>)
 800c5c4:	f7fd fdfc 	bl	800a1c0 <acc_log_rss>
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	b005      	add	sp, #20
 800c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ce:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <acc_sensor_protocol_run_program+0x78>)
 800c5d0:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <acc_sensor_protocol_run_program+0x7c>)
 800c5d2:	4906      	ldr	r1, [pc, #24]	; (800c5ec <acc_sensor_protocol_run_program+0x74>)
 800c5d4:	9700      	str	r7, [sp, #0]
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	f7fd fdf2 	bl	800a1c0 <acc_log_rss>
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f7ff fcef 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	b005      	add	sp, #20
 800c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e8:	08018484 	.word	0x08018484
 800c5ec:	08018278 	.word	0x08018278
 800c5f0:	08018194 	.word	0x08018194
 800c5f4:	08018450 	.word	0x08018450

0800c5f8 <acc_sensor_protocol_try_get_indication>:
 800c5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5fc:	4e24      	ldr	r6, [pc, #144]	; (800c690 <acc_sensor_protocol_try_get_indication+0x98>)
 800c5fe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800c6a4 <acc_sensor_protocol_try_get_indication+0xac>
 800c602:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c698 <acc_sensor_protocol_try_get_indication+0xa0>
 800c606:	fba6 3601 	umull	r3, r6, r6, r1
 800c60a:	b084      	sub	sp, #16
 800c60c:	4604      	mov	r4, r0
 800c60e:	4692      	mov	sl, r2
 800c610:	09b6      	lsrs	r6, r6, #6
 800c612:	2564      	movs	r5, #100	; 0x64
 800c614:	2700      	movs	r7, #0
 800c616:	e012      	b.n	800c63e <acc_sensor_protocol_try_get_indication+0x46>
 800c618:	f822 7d02 	strh.w	r7, [r2, #-2]!
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7ff fa41 	bl	800baa4 <acc_sensor_reg_read>
 800c622:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 800c626:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c62a:	4623      	mov	r3, r4
 800c62c:	464a      	mov	r2, r9
 800c62e:	4641      	mov	r1, r8
 800c630:	f04f 0001 	mov.w	r0, #1
 800c634:	d118      	bne.n	800c668 <acc_sensor_protocol_try_get_indication+0x70>
 800c636:	f7fd fdc3 	bl	800a1c0 <acc_log_rss>
 800c63a:	3d01      	subs	r5, #1
 800c63c:	d007      	beq.n	800c64e <acc_sensor_protocol_try_get_indication+0x56>
 800c63e:	4631      	mov	r1, r6
 800c640:	4620      	mov	r0, r4
 800c642:	f7fd fd65 	bl	800a110 <acc_integration_wait_for_sensor_interrupt>
 800c646:	aa04      	add	r2, sp, #16
 800c648:	212a      	movs	r1, #42	; 0x2a
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d1e4      	bne.n	800c618 <acc_sensor_protocol_try_get_indication+0x20>
 800c64e:	4623      	mov	r3, r4
 800c650:	4a10      	ldr	r2, [pc, #64]	; (800c694 <acc_sensor_protocol_try_get_indication+0x9c>)
 800c652:	4911      	ldr	r1, [pc, #68]	; (800c698 <acc_sensor_protocol_try_get_indication+0xa0>)
 800c654:	2000      	movs	r0, #0
 800c656:	f7fd fdb3 	bl	800a1c0 <acc_log_rss>
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff fcb0 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c660:	2000      	movs	r0, #0
 800c662:	b004      	add	sp, #16
 800c664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c668:	f1ba 0f00 	cmp.w	sl, #0
 800c66c:	d005      	beq.n	800c67a <acc_sensor_protocol_try_get_indication+0x82>
 800c66e:	4651      	mov	r1, sl
 800c670:	4620      	mov	r0, r4
 800c672:	f7ff fe7f 	bl	800c374 <acc_sensor_protocol_get_indication_header.part.0>
 800c676:	2800      	cmp	r0, #0
 800c678:	d1f3      	bne.n	800c662 <acc_sensor_protocol_try_get_indication+0x6a>
 800c67a:	9400      	str	r4, [sp, #0]
 800c67c:	4b07      	ldr	r3, [pc, #28]	; (800c69c <acc_sensor_protocol_try_get_indication+0xa4>)
 800c67e:	4a08      	ldr	r2, [pc, #32]	; (800c6a0 <acc_sensor_protocol_try_get_indication+0xa8>)
 800c680:	4905      	ldr	r1, [pc, #20]	; (800c698 <acc_sensor_protocol_try_get_indication+0xa0>)
 800c682:	2000      	movs	r0, #0
 800c684:	f7fd fd9c 	bl	800a1c0 <acc_log_rss>
 800c688:	2000      	movs	r0, #0
 800c68a:	b004      	add	sp, #16
 800c68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c690:	10624dd3 	.word	0x10624dd3
 800c694:	08018608 	.word	0x08018608
 800c698:	08018278 	.word	0x08018278
 800c69c:	080181b4 	.word	0x080181b4
 800c6a0:	080185d4 	.word	0x080185d4
 800c6a4:	080185b0 	.word	0x080185b0

0800c6a8 <acc_sensor_protocol_get_indication_payload>:
 800c6a8:	b162      	cbz	r2, 800c6c4 <acc_sensor_protocol_get_indication_payload+0x1c>
 800c6aa:	b570      	push	{r4, r5, r6, lr}
 800c6ac:	3903      	subs	r1, #3
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	2906      	cmp	r1, #6
 800c6b6:	d807      	bhi.n	800c6c8 <acc_sensor_protocol_get_indication_payload+0x20>
 800c6b8:	e8df f001 	tbb	[pc, r1]
 800c6bc:	44372009 	.word	0x44372009
 800c6c0:	594e      	.short	0x594e
 800c6c2:	66          	.byte	0x66
 800c6c3:	00          	.byte	0x00
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4770      	bx	lr
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	b002      	add	sp, #8
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	f10d 0206 	add.w	r2, sp, #6
 800c6d2:	219d      	movs	r1, #157	; 0x9d
 800c6d4:	f7ff f9e6 	bl	800baa4 <acc_sensor_reg_read>
 800c6d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c6dc:	4629      	mov	r1, r5
 800c6de:	2004      	movs	r0, #4
 800c6e0:	f003 0507 	and.w	r5, r3, #7
 800c6e4:	f10d 0206 	add.w	r2, sp, #6
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f8ad 5006 	strh.w	r5, [sp, #6]
 800c6ee:	f7fd fda7 	bl	800a240 <acc_probes_execute_uint16>
 800c6f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c6f6:	7023      	strb	r3, [r4, #0]
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	e7e6      	b.n	800c6ca <acc_sensor_protocol_get_indication_payload+0x22>
 800c6fc:	1c96      	adds	r6, r2, #2
 800c6fe:	2127      	movs	r1, #39	; 0x27
 800c700:	f7ff f9d0 	bl	800baa4 <acc_sensor_reg_read>
 800c704:	4632      	mov	r2, r6
 800c706:	2126      	movs	r1, #38	; 0x26
 800c708:	4628      	mov	r0, r5
 800c70a:	f7ff f9cb 	bl	800baa4 <acc_sensor_reg_read>
 800c70e:	4622      	mov	r2, r4
 800c710:	2301      	movs	r3, #1
 800c712:	4629      	mov	r1, r5
 800c714:	2006      	movs	r0, #6
 800c716:	f7fd fd93 	bl	800a240 <acc_probes_execute_uint16>
 800c71a:	2005      	movs	r0, #5
 800c71c:	4632      	mov	r2, r6
 800c71e:	4629      	mov	r1, r5
 800c720:	2301      	movs	r3, #1
 800c722:	f7fd fd8d 	bl	800a240 <acc_probes_execute_uint16>
 800c726:	2001      	movs	r0, #1
 800c728:	e7cf      	b.n	800c6ca <acc_sensor_protocol_get_indication_payload+0x22>
 800c72a:	2100      	movs	r1, #0
 800c72c:	f852 3b04 	ldr.w	r3, [r2], #4
 800c730:	f7ff fac2 	bl	800bcb8 <acc_sensor_buffer_processed_read>
 800c734:	2007      	movs	r0, #7
 800c736:	4629      	mov	r1, r5
 800c738:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c73c:	f7fd fd80 	bl	800a240 <acc_probes_execute_uint16>
 800c740:	2001      	movs	r0, #1
 800c742:	e7c2      	b.n	800c6ca <acc_sensor_protocol_get_indication_payload+0x22>
 800c744:	6813      	ldr	r3, [r2, #0]
 800c746:	bb73      	cbnz	r3, 800c7a6 <acc_sensor_protocol_get_indication_payload+0xfe>
 800c748:	4603      	mov	r3, r0
 800c74a:	4a18      	ldr	r2, [pc, #96]	; (800c7ac <acc_sensor_protocol_get_indication_payload+0x104>)
 800c74c:	4918      	ldr	r1, [pc, #96]	; (800c7b0 <acc_sensor_protocol_get_indication_payload+0x108>)
 800c74e:	2001      	movs	r0, #1
 800c750:	f7fd fd36 	bl	800a1c0 <acc_log_rss>
 800c754:	2001      	movs	r0, #1
 800c756:	e7b8      	b.n	800c6ca <acc_sensor_protocol_get_indication_payload+0x22>
 800c758:	2127      	movs	r1, #39	; 0x27
 800c75a:	f7ff f9a3 	bl	800baa4 <acc_sensor_reg_read>
 800c75e:	200b      	movs	r0, #11
 800c760:	4622      	mov	r2, r4
 800c762:	4629      	mov	r1, r5
 800c764:	2301      	movs	r3, #1
 800c766:	f7fd fd6b 	bl	800a240 <acc_probes_execute_uint16>
 800c76a:	2001      	movs	r0, #1
 800c76c:	e7ad      	b.n	800c6ca <acc_sensor_protocol_get_indication_payload+0x22>
 800c76e:	2100      	movs	r1, #0
 800c770:	f852 3b04 	ldr.w	r3, [r2], #4
 800c774:	f7ff faa0 	bl	800bcb8 <acc_sensor_buffer_processed_read>
 800c778:	2008      	movs	r0, #8
 800c77a:	4629      	mov	r1, r5
 800c77c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c780:	f7fd fd5e 	bl	800a240 <acc_probes_execute_uint16>
 800c784:	2001      	movs	r0, #1
 800c786:	e7a0      	b.n	800c6ca <acc_sensor_protocol_get_indication_payload+0x22>
 800c788:	f852 3b04 	ldr.w	r3, [r2], #4
 800c78c:	2100      	movs	r1, #0
 800c78e:	4628      	mov	r0, r5
 800c790:	f7ff fa92 	bl	800bcb8 <acc_sensor_buffer_processed_read>
 800c794:	4629      	mov	r1, r5
 800c796:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c79a:	2000      	movs	r0, #0
 800c79c:	f7fd fd50 	bl	800a240 <acc_probes_execute_uint16>
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	b002      	add	sp, #8
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
 800c7a6:	3204      	adds	r2, #4
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	e7f0      	b.n	800c78e <acc_sensor_protocol_get_indication_payload+0xe6>
 800c7ac:	080182bc 	.word	0x080182bc
 800c7b0:	08018278 	.word	0x08018278

0800c7b4 <acc_sensor_protocol_respond_to_indication>:
 800c7b4:	b530      	push	{r4, r5, lr}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	aa02      	add	r2, sp, #8
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800c7c0:	2138      	movs	r1, #56	; 0x38
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	f7ff f96e 	bl	800baa4 <acc_sensor_reg_read>
 800c7c8:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 800c7cc:	b114      	cbz	r4, 800c7d4 <acc_sensor_protocol_respond_to_indication+0x20>
 800c7ce:	2001      	movs	r0, #1
 800c7d0:	b003      	add	sp, #12
 800c7d2:	bd30      	pop	{r4, r5, pc}
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	4a05      	ldr	r2, [pc, #20]	; (800c7ec <acc_sensor_protocol_respond_to_indication+0x38>)
 800c7d8:	4905      	ldr	r1, [pc, #20]	; (800c7f0 <acc_sensor_protocol_respond_to_indication+0x3c>)
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f7fd fcf0 	bl	800a1c0 <acc_log_rss>
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f7ff fbed 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	b003      	add	sp, #12
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	0801841c 	.word	0x0801841c
 800c7f0:	08018278 	.word	0x08018278

0800c7f4 <acc_sensor_protocol_terminate_program>:
 800c7f4:	b530      	push	{r4, r5, lr}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	aa02      	add	r2, sp, #8
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800c800:	2111      	movs	r1, #17
 800c802:	4605      	mov	r5, r0
 800c804:	f7ff f94e 	bl	800baa4 <acc_sensor_reg_read>
 800c808:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800c80c:	f410 6480 	ands.w	r4, r0, #1024	; 0x400
 800c810:	d007      	beq.n	800c822 <acc_sensor_protocol_terminate_program+0x2e>
 800c812:	4628      	mov	r0, r5
 800c814:	2201      	movs	r2, #1
 800c816:	2174      	movs	r1, #116	; 0x74
 800c818:	f7ff f946 	bl	800baa8 <acc_sensor_reg_write>
 800c81c:	2001      	movs	r0, #1
 800c81e:	b003      	add	sp, #12
 800c820:	bd30      	pop	{r4, r5, pc}
 800c822:	4b06      	ldr	r3, [pc, #24]	; (800c83c <acc_sensor_protocol_terminate_program+0x48>)
 800c824:	4a06      	ldr	r2, [pc, #24]	; (800c840 <acc_sensor_protocol_terminate_program+0x4c>)
 800c826:	4907      	ldr	r1, [pc, #28]	; (800c844 <acc_sensor_protocol_terminate_program+0x50>)
 800c828:	4620      	mov	r0, r4
 800c82a:	f7fd fcc9 	bl	800a1c0 <acc_log_rss>
 800c82e:	4628      	mov	r0, r5
 800c830:	f7ff fbc6 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c834:	4620      	mov	r0, r4
 800c836:	b003      	add	sp, #12
 800c838:	bd30      	pop	{r4, r5, pc}
 800c83a:	bf00      	nop
 800c83c:	080181dc 	.word	0x080181dc
 800c840:	08018578 	.word	0x08018578
 800c844:	08018278 	.word	0x08018278

0800c848 <acc_sensor_protocol_stop>:
 800c848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c84a:	b085      	sub	sp, #20
 800c84c:	460e      	mov	r6, r1
 800c84e:	4605      	mov	r5, r0
 800c850:	f7ff ffd0 	bl	800c7f4 <acc_sensor_protocol_terminate_program>
 800c854:	b360      	cbz	r0, 800c8b0 <acc_sensor_protocol_stop+0x68>
 800c856:	2703      	movs	r7, #3
 800c858:	aa02      	add	r2, sp, #8
 800c85a:	4631      	mov	r1, r6
 800c85c:	4628      	mov	r0, r5
 800c85e:	f7ff fecb 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800c862:	4604      	mov	r4, r0
 800c864:	2800      	cmp	r0, #0
 800c866:	d042      	beq.n	800c8ee <acc_sensor_protocol_stop+0xa6>
 800c868:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d028      	beq.n	800c8c2 <acc_sensor_protocol_stop+0x7a>
 800c870:	2b06      	cmp	r3, #6
 800c872:	d026      	beq.n	800c8c2 <acc_sensor_protocol_stop+0x7a>
 800c874:	2b01      	cmp	r3, #1
 800c876:	d00d      	beq.n	800c894 <acc_sensor_protocol_stop+0x4c>
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	4a23      	ldr	r2, [pc, #140]	; (800c908 <acc_sensor_protocol_stop+0xc0>)
 800c87c:	4b23      	ldr	r3, [pc, #140]	; (800c90c <acc_sensor_protocol_stop+0xc4>)
 800c87e:	4924      	ldr	r1, [pc, #144]	; (800c910 <acc_sensor_protocol_stop+0xc8>)
 800c880:	2000      	movs	r0, #0
 800c882:	f7fd fc9d 	bl	800a1c0 <acc_log_rss>
 800c886:	4628      	mov	r0, r5
 800c888:	f7ff fb9a 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c88c:	2400      	movs	r4, #0
 800c88e:	4620      	mov	r0, r4
 800c890:	b005      	add	sp, #20
 800c892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c894:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c898:	3b01      	subs	r3, #1
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	bf96      	itet	ls
 800c8a0:	4a1c      	ldrls	r2, [pc, #112]	; (800c914 <acc_sensor_protocol_stop+0xcc>)
 800c8a2:	4b1d      	ldrhi	r3, [pc, #116]	; (800c918 <acc_sensor_protocol_stop+0xd0>)
 800c8a4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	4a1c      	ldr	r2, [pc, #112]	; (800c91c <acc_sensor_protocol_stop+0xd4>)
 800c8ac:	4b17      	ldr	r3, [pc, #92]	; (800c90c <acc_sensor_protocol_stop+0xc4>)
 800c8ae:	e7e6      	b.n	800c87e <acc_sensor_protocol_stop+0x36>
 800c8b0:	4b16      	ldr	r3, [pc, #88]	; (800c90c <acc_sensor_protocol_stop+0xc4>)
 800c8b2:	4a1b      	ldr	r2, [pc, #108]	; (800c920 <acc_sensor_protocol_stop+0xd8>)
 800c8b4:	4916      	ldr	r1, [pc, #88]	; (800c910 <acc_sensor_protocol_stop+0xc8>)
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	f7fd fc82 	bl	800a1c0 <acc_log_rss>
 800c8bc:	4620      	mov	r0, r4
 800c8be:	b005      	add	sp, #20
 800c8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f7ff ff76 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	b1b0      	cbz	r0, 800c8fa <acc_sensor_protocol_stop+0xb2>
 800c8cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d0dc      	beq.n	800c88e <acc_sensor_protocol_stop+0x46>
 800c8d4:	3f01      	subs	r7, #1
 800c8d6:	d1bf      	bne.n	800c858 <acc_sensor_protocol_stop+0x10>
 800c8d8:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <acc_sensor_protocol_stop+0xc4>)
 800c8da:	4a12      	ldr	r2, [pc, #72]	; (800c924 <acc_sensor_protocol_stop+0xdc>)
 800c8dc:	490c      	ldr	r1, [pc, #48]	; (800c910 <acc_sensor_protocol_stop+0xc8>)
 800c8de:	4638      	mov	r0, r7
 800c8e0:	f7fd fc6e 	bl	800a1c0 <acc_log_rss>
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	f7ff fb6b 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c8ea:	463c      	mov	r4, r7
 800c8ec:	e7cf      	b.n	800c88e <acc_sensor_protocol_stop+0x46>
 800c8ee:	4b07      	ldr	r3, [pc, #28]	; (800c90c <acc_sensor_protocol_stop+0xc4>)
 800c8f0:	4a0d      	ldr	r2, [pc, #52]	; (800c928 <acc_sensor_protocol_stop+0xe0>)
 800c8f2:	4907      	ldr	r1, [pc, #28]	; (800c910 <acc_sensor_protocol_stop+0xc8>)
 800c8f4:	f7fd fc64 	bl	800a1c0 <acc_log_rss>
 800c8f8:	e7c9      	b.n	800c88e <acc_sensor_protocol_stop+0x46>
 800c8fa:	4b04      	ldr	r3, [pc, #16]	; (800c90c <acc_sensor_protocol_stop+0xc4>)
 800c8fc:	4a0b      	ldr	r2, [pc, #44]	; (800c92c <acc_sensor_protocol_stop+0xe4>)
 800c8fe:	4904      	ldr	r1, [pc, #16]	; (800c910 <acc_sensor_protocol_stop+0xc8>)
 800c900:	f7fd fc5e 	bl	800a1c0 <acc_log_rss>
 800c904:	e7c3      	b.n	800c88e <acc_sensor_protocol_stop+0x46>
 800c906:	bf00      	nop
 800c908:	08018510 	.word	0x08018510
 800c90c:	08018204 	.word	0x08018204
 800c910:	08018278 	.word	0x08018278
 800c914:	080180ec 	.word	0x080180ec
 800c918:	080184a0 	.word	0x080184a0
 800c91c:	080184f4 	.word	0x080184f4
 800c920:	080184b0 	.word	0x080184b0
 800c924:	08018554 	.word	0x08018554
 800c928:	080184d0 	.word	0x080184d0
 800c92c:	08018530 	.word	0x08018530

0800c930 <acc_sensor_protocol_low_power_stop>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	460e      	mov	r6, r1
 800c936:	4605      	mov	r5, r0
 800c938:	f7ff ff5c 	bl	800c7f4 <acc_sensor_protocol_terminate_program>
 800c93c:	b338      	cbz	r0, 800c98e <acc_sensor_protocol_low_power_stop+0x5e>
 800c93e:	4628      	mov	r0, r5
 800c940:	f7ff ff38 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800c944:	4604      	mov	r4, r0
 800c946:	b1d0      	cbz	r0, 800c97e <acc_sensor_protocol_low_power_stop+0x4e>
 800c948:	4631      	mov	r1, r6
 800c94a:	aa02      	add	r2, sp, #8
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7ff fe53 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800c952:	4604      	mov	r4, r0
 800c954:	b1c0      	cbz	r0, 800c988 <acc_sensor_protocol_low_power_stop+0x58>
 800c956:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d020      	beq.n	800c9a0 <acc_sensor_protocol_low_power_stop+0x70>
 800c95e:	2b06      	cmp	r3, #6
 800c960:	d038      	beq.n	800c9d4 <acc_sensor_protocol_low_power_stop+0xa4>
 800c962:	2b01      	cmp	r3, #1
 800c964:	d028      	beq.n	800c9b8 <acc_sensor_protocol_low_power_stop+0x88>
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	4a1f      	ldr	r2, [pc, #124]	; (800c9e8 <acc_sensor_protocol_low_power_stop+0xb8>)
 800c96a:	4b20      	ldr	r3, [pc, #128]	; (800c9ec <acc_sensor_protocol_low_power_stop+0xbc>)
 800c96c:	4920      	ldr	r1, [pc, #128]	; (800c9f0 <acc_sensor_protocol_low_power_stop+0xc0>)
 800c96e:	2000      	movs	r0, #0
 800c970:	f7fd fc26 	bl	800a1c0 <acc_log_rss>
 800c974:	4628      	mov	r0, r5
 800c976:	f7ff fb23 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c97a:	2400      	movs	r4, #0
 800c97c:	e004      	b.n	800c988 <acc_sensor_protocol_low_power_stop+0x58>
 800c97e:	4b1b      	ldr	r3, [pc, #108]	; (800c9ec <acc_sensor_protocol_low_power_stop+0xbc>)
 800c980:	4a1c      	ldr	r2, [pc, #112]	; (800c9f4 <acc_sensor_protocol_low_power_stop+0xc4>)
 800c982:	491b      	ldr	r1, [pc, #108]	; (800c9f0 <acc_sensor_protocol_low_power_stop+0xc0>)
 800c984:	f7fd fc1c 	bl	800a1c0 <acc_log_rss>
 800c988:	4620      	mov	r0, r4
 800c98a:	b004      	add	sp, #16
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
 800c98e:	4b17      	ldr	r3, [pc, #92]	; (800c9ec <acc_sensor_protocol_low_power_stop+0xbc>)
 800c990:	4a19      	ldr	r2, [pc, #100]	; (800c9f8 <acc_sensor_protocol_low_power_stop+0xc8>)
 800c992:	4917      	ldr	r1, [pc, #92]	; (800c9f0 <acc_sensor_protocol_low_power_stop+0xc0>)
 800c994:	4604      	mov	r4, r0
 800c996:	f7fd fc13 	bl	800a1c0 <acc_log_rss>
 800c99a:	4620      	mov	r0, r4
 800c99c:	b004      	add	sp, #16
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f7ff ff07 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1ed      	bne.n	800c988 <acc_sensor_protocol_low_power_stop+0x58>
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <acc_sensor_protocol_low_power_stop+0xbc>)
 800c9ae:	4a13      	ldr	r2, [pc, #76]	; (800c9fc <acc_sensor_protocol_low_power_stop+0xcc>)
 800c9b0:	490f      	ldr	r1, [pc, #60]	; (800c9f0 <acc_sensor_protocol_low_power_stop+0xc0>)
 800c9b2:	f7fd fc05 	bl	800a1c0 <acc_log_rss>
 800c9b6:	e7e7      	b.n	800c988 <acc_sensor_protocol_low_power_stop+0x58>
 800c9b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b20      	cmp	r3, #32
 800c9c2:	bf96      	itet	ls
 800c9c4:	4a0e      	ldrls	r2, [pc, #56]	; (800ca00 <acc_sensor_protocol_low_power_stop+0xd0>)
 800c9c6:	4b0f      	ldrhi	r3, [pc, #60]	; (800ca04 <acc_sensor_protocol_low_power_stop+0xd4>)
 800c9c8:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	4a0e      	ldr	r2, [pc, #56]	; (800ca08 <acc_sensor_protocol_low_power_stop+0xd8>)
 800c9d0:	4b06      	ldr	r3, [pc, #24]	; (800c9ec <acc_sensor_protocol_low_power_stop+0xbc>)
 800c9d2:	e7cb      	b.n	800c96c <acc_sensor_protocol_low_power_stop+0x3c>
 800c9d4:	4a0d      	ldr	r2, [pc, #52]	; (800ca0c <acc_sensor_protocol_low_power_stop+0xdc>)
 800c9d6:	4906      	ldr	r1, [pc, #24]	; (800c9f0 <acc_sensor_protocol_low_power_stop+0xc0>)
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f7fd fbf1 	bl	800a1c0 <acc_log_rss>
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f7ff faee 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800c9e4:	2400      	movs	r4, #0
 800c9e6:	e7cf      	b.n	800c988 <acc_sensor_protocol_low_power_stop+0x58>
 800c9e8:	08018510 	.word	0x08018510
 800c9ec:	08018220 	.word	0x08018220
 800c9f0:	08018278 	.word	0x08018278
 800c9f4:	08018388 	.word	0x08018388
 800c9f8:	080184b0 	.word	0x080184b0
 800c9fc:	080183f0 	.word	0x080183f0
 800ca00:	080180ec 	.word	0x080180ec
 800ca04:	080184a0 	.word	0x080184a0
 800ca08:	080184f4 	.word	0x080184f4
 800ca0c:	080183b8 	.word	0x080183b8

0800ca10 <acc_sensor_protocol_get_error_message>:
 800ca10:	3801      	subs	r0, #1
 800ca12:	b2c0      	uxtb	r0, r0
 800ca14:	2820      	cmp	r0, #32
 800ca16:	bf9a      	itte	ls
 800ca18:	4b02      	ldrls	r3, [pc, #8]	; (800ca24 <acc_sensor_protocol_get_error_message+0x14>)
 800ca1a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ca1e:	4802      	ldrhi	r0, [pc, #8]	; (800ca28 <acc_sensor_protocol_get_error_message+0x18>)
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	080180ec 	.word	0x080180ec
 800ca28:	080184a0 	.word	0x080184a0

0800ca2c <acc_alg_basic_online_variance_f32_free>:
 800ca2c:	b160      	cbz	r0, 800ca48 <acc_alg_basic_online_variance_f32_free+0x1c>
 800ca2e:	b510      	push	{r4, lr}
 800ca30:	4604      	mov	r4, r0
 800ca32:	6880      	ldr	r0, [r0, #8]
 800ca34:	f7fd fbb2 	bl	800a19c <acc_integration_mem_free>
 800ca38:	68e0      	ldr	r0, [r4, #12]
 800ca3a:	f7fd fbaf 	bl	800a19c <acc_integration_mem_free>
 800ca3e:	4620      	mov	r0, r4
 800ca40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca44:	f7fd bbaa 	b.w	800a19c <acc_integration_mem_free>
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop

0800ca4c <acc_alg_basic_online_variance_f32_get_length>:
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	4604      	mov	r4, r0
 800ca50:	b118      	cbz	r0, 800ca5a <acc_alg_basic_online_variance_f32_get_length+0xe>
 800ca52:	6843      	ldr	r3, [r0, #4]
 800ca54:	600b      	str	r3, [r1, #0]
 800ca56:	2001      	movs	r0, #1
 800ca58:	bd10      	pop	{r4, pc}
 800ca5a:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <acc_alg_basic_online_variance_f32_get_length+0x1c>)
 800ca5c:	4a03      	ldr	r2, [pc, #12]	; (800ca6c <acc_alg_basic_online_variance_f32_get_length+0x20>)
 800ca5e:	4904      	ldr	r1, [pc, #16]	; (800ca70 <acc_alg_basic_online_variance_f32_get_length+0x24>)
 800ca60:	f7fd fbae 	bl	800a1c0 <acc_log_rss>
 800ca64:	4620      	mov	r0, r4
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	080186e4 	.word	0x080186e4
 800ca6c:	08017544 	.word	0x08017544
 800ca70:	08018828 	.word	0x08018828

0800ca74 <acc_alg_basic_online_variance_f32_get_average>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4605      	mov	r5, r0
 800ca78:	b1b0      	cbz	r0, 800caa8 <acc_alg_basic_online_variance_f32_get_average+0x34>
 800ca7a:	6804      	ldr	r4, [r0, #0]
 800ca7c:	b164      	cbz	r4, 800ca98 <acc_alg_basic_online_variance_f32_get_average+0x24>
 800ca7e:	6840      	ldr	r0, [r0, #4]
 800ca80:	b140      	cbz	r0, 800ca94 <acc_alg_basic_online_variance_f32_get_average+0x20>
 800ca82:	68ab      	ldr	r3, [r5, #8]
 800ca84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ca88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca8c:	f841 2b04 	str.w	r2, [r1], #4
 800ca90:	4283      	cmp	r3, r0
 800ca92:	d1f9      	bne.n	800ca88 <acc_alg_basic_online_variance_f32_get_average+0x14>
 800ca94:	2001      	movs	r0, #1
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
 800ca98:	4620      	mov	r0, r4
 800ca9a:	4b07      	ldr	r3, [pc, #28]	; (800cab8 <acc_alg_basic_online_variance_f32_get_average+0x44>)
 800ca9c:	4a07      	ldr	r2, [pc, #28]	; (800cabc <acc_alg_basic_online_variance_f32_get_average+0x48>)
 800ca9e:	4908      	ldr	r1, [pc, #32]	; (800cac0 <acc_alg_basic_online_variance_f32_get_average+0x4c>)
 800caa0:	f7fd fb8e 	bl	800a1c0 <acc_log_rss>
 800caa4:	4620      	mov	r0, r4
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	4b03      	ldr	r3, [pc, #12]	; (800cab8 <acc_alg_basic_online_variance_f32_get_average+0x44>)
 800caaa:	4a06      	ldr	r2, [pc, #24]	; (800cac4 <acc_alg_basic_online_variance_f32_get_average+0x50>)
 800caac:	4904      	ldr	r1, [pc, #16]	; (800cac0 <acc_alg_basic_online_variance_f32_get_average+0x4c>)
 800caae:	f7fd fb87 	bl	800a1c0 <acc_log_rss>
 800cab2:	4628      	mov	r0, r5
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	bf00      	nop
 800cab8:	08018714 	.word	0x08018714
 800cabc:	08018780 	.word	0x08018780
 800cac0:	08018828 	.word	0x08018828
 800cac4:	08017544 	.word	0x08017544

0800cac8 <acc_alg_basic_online_variance_f32_get_standard_deviation>:
 800cac8:	b510      	push	{r4, lr}
 800caca:	4604      	mov	r4, r0
 800cacc:	b300      	cbz	r0, 800cb10 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x48>
 800cace:	6803      	ldr	r3, [r0, #0]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d915      	bls.n	800cb00 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x38>
 800cad4:	6842      	ldr	r2, [r0, #4]
 800cad6:	b18a      	cbz	r2, 800cafc <acc_alg_basic_online_variance_f32_get_standard_deviation+0x34>
 800cad8:	3b01      	subs	r3, #1
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	68c3      	ldr	r3, [r0, #12]
 800cae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cae8:	ecb3 7a01 	vldmia	r3!, {s14}
 800caec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800caf0:	429a      	cmp	r2, r3
 800caf2:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800caf6:	eca1 7a01 	vstmia	r1!, {s14}
 800cafa:	d1f5      	bne.n	800cae8 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x20>
 800cafc:	2001      	movs	r0, #1
 800cafe:	bd10      	pop	{r4, pc}
 800cb00:	4b07      	ldr	r3, [pc, #28]	; (800cb20 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x58>)
 800cb02:	4a08      	ldr	r2, [pc, #32]	; (800cb24 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x5c>)
 800cb04:	4908      	ldr	r1, [pc, #32]	; (800cb28 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x60>)
 800cb06:	2000      	movs	r0, #0
 800cb08:	f7fd fb5a 	bl	800a1c0 <acc_log_rss>
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	bd10      	pop	{r4, pc}
 800cb10:	4b03      	ldr	r3, [pc, #12]	; (800cb20 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x58>)
 800cb12:	4a06      	ldr	r2, [pc, #24]	; (800cb2c <acc_alg_basic_online_variance_f32_get_standard_deviation+0x64>)
 800cb14:	4904      	ldr	r1, [pc, #16]	; (800cb28 <acc_alg_basic_online_variance_f32_get_standard_deviation+0x60>)
 800cb16:	f7fd fb53 	bl	800a1c0 <acc_log_rss>
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	bf00      	nop
 800cb20:	08018744 	.word	0x08018744
 800cb24:	080187d4 	.word	0x080187d4
 800cb28:	08018828 	.word	0x08018828
 800cb2c:	08017544 	.word	0x08017544

0800cb30 <acc_alg_basic_subtract_mean_uint16.part.0>:
 800cb30:	2900      	cmp	r1, #0
 800cb32:	d036      	beq.n	800cba2 <acc_alg_basic_subtract_mean_uint16.part.0+0x72>
 800cb34:	b4f0      	push	{r4, r5, r6, r7}
 800cb36:	004f      	lsls	r7, r1, #1
 800cb38:	eb00 0c07 	add.w	ip, r0, r7
 800cb3c:	4605      	mov	r5, r0
 800cb3e:	2600      	movs	r6, #0
 800cb40:	f835 4b02 	ldrh.w	r4, [r5], #2
 800cb44:	1aa4      	subs	r4, r4, r2
 800cb46:	45ac      	cmp	ip, r5
 800cb48:	4426      	add	r6, r4
 800cb4a:	d1f9      	bne.n	800cb40 <acc_alg_basic_subtract_mean_uint16.part.0+0x10>
 800cb4c:	2e00      	cmp	r6, #0
 800cb4e:	ea4f 0251 	mov.w	r2, r1, lsr #1
 800cb52:	bfb4      	ite	lt
 800cb54:	1ab6      	sublt	r6, r6, r2
 800cb56:	18b6      	addge	r6, r6, r2
 800cb58:	fb96 f6f1 	sdiv	r6, r6, r1
 800cb5c:	b231      	sxth	r1, r6
 800cb5e:	2900      	cmp	r1, #0
 800cb60:	f1a0 0002 	sub.w	r0, r0, #2
 800cb64:	dd0f      	ble.n	800cb86 <acc_alg_basic_subtract_mean_uint16.part.0+0x56>
 800cb66:	4407      	add	r7, r0
 800cb68:	b2b6      	uxth	r6, r6
 800cb6a:	2400      	movs	r4, #0
 800cb6c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800cb70:	42b2      	cmp	r2, r6
 800cb72:	bf2a      	itet	cs
 800cb74:	1b92      	subcs	r2, r2, r6
 800cb76:	8004      	strhcc	r4, [r0, #0]
 800cb78:	8002      	strhcs	r2, [r0, #0]
 800cb7a:	4287      	cmp	r7, r0
 800cb7c:	d1f6      	bne.n	800cb6c <acc_alg_basic_subtract_mean_uint16.part.0+0x3c>
 800cb7e:	b103      	cbz	r3, 800cb82 <acc_alg_basic_subtract_mean_uint16.part.0+0x52>
 800cb80:	8019      	strh	r1, [r3, #0]
 800cb82:	bcf0      	pop	{r4, r5, r6, r7}
 800cb84:	4770      	bx	lr
 800cb86:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800cb8a:	4407      	add	r7, r0
 800cb8c:	194c      	adds	r4, r1, r5
 800cb8e:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800cb92:	42a2      	cmp	r2, r4
 800cb94:	bfd6      	itet	le
 800cb96:	1b92      	suble	r2, r2, r6
 800cb98:	8005      	strhgt	r5, [r0, #0]
 800cb9a:	8002      	strhle	r2, [r0, #0]
 800cb9c:	4287      	cmp	r7, r0
 800cb9e:	d1f6      	bne.n	800cb8e <acc_alg_basic_subtract_mean_uint16.part.0+0x5e>
 800cba0:	e7ed      	b.n	800cb7e <acc_alg_basic_subtract_mean_uint16.part.0+0x4e>
 800cba2:	b103      	cbz	r3, 800cba6 <acc_alg_basic_subtract_mean_uint16.part.0+0x76>
 800cba4:	8019      	strh	r1, [r3, #0]
 800cba6:	4770      	bx	lr

0800cba8 <acc_alg_basic_subtract_mean_uint16>:
 800cba8:	b109      	cbz	r1, 800cbae <acc_alg_basic_subtract_mean_uint16+0x6>
 800cbaa:	f7ff bfc1 	b.w	800cb30 <acc_alg_basic_subtract_mean_uint16.part.0>
 800cbae:	b430      	push	{r4, r5}
 800cbb0:	461c      	mov	r4, r3
 800cbb2:	b103      	cbz	r3, 800cbb6 <acc_alg_basic_subtract_mean_uint16+0xe>
 800cbb4:	8021      	strh	r1, [r4, #0]
 800cbb6:	bc30      	pop	{r4, r5}
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop

0800cbbc <acc_alg_basic_subtract_section_mean_q12_4>:
 800cbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	bf14      	ite	ne
 800cbc4:	4617      	movne	r7, r2
 800cbc6:	460f      	moveq	r7, r1
 800cbc8:	b1d9      	cbz	r1, 800cc02 <acc_alg_basic_subtract_section_mean_q12_4+0x46>
 800cbca:	4699      	mov	r9, r3
 800cbcc:	4680      	mov	r8, r0
 800cbce:	460d      	mov	r5, r1
 800cbd0:	468a      	mov	sl, r1
 800cbd2:	463e      	mov	r6, r7
 800cbd4:	2400      	movs	r4, #0
 800cbd6:	e008      	b.n	800cbea <acc_alg_basic_subtract_section_mean_q12_4+0x2e>
 800cbd8:	b95e      	cbnz	r6, 800cbf2 <acc_alg_basic_subtract_section_mean_q12_4+0x36>
 800cbda:	443c      	add	r4, r7
 800cbdc:	b2a4      	uxth	r4, r4
 800cbde:	ebaa 0207 	sub.w	r2, sl, r7
 800cbe2:	42a5      	cmp	r5, r4
 800cbe4:	fa1f fa82 	uxth.w	sl, r2
 800cbe8:	d90b      	bls.n	800cc02 <acc_alg_basic_subtract_section_mean_q12_4+0x46>
 800cbea:	19a3      	adds	r3, r4, r6
 800cbec:	42ab      	cmp	r3, r5
 800cbee:	ddf3      	ble.n	800cbd8 <acc_alg_basic_subtract_section_mean_q12_4+0x1c>
 800cbf0:	4656      	mov	r6, sl
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	464a      	mov	r2, r9
 800cbf6:	4631      	mov	r1, r6
 800cbf8:	eb08 0044 	add.w	r0, r8, r4, lsl #1
 800cbfc:	f7ff ff98 	bl	800cb30 <acc_alg_basic_subtract_mean_uint16.part.0>
 800cc00:	e7eb      	b.n	800cbda <acc_alg_basic_subtract_section_mean_q12_4+0x1e>
 800cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc06:	bf00      	nop

0800cc08 <acc_alg_data_merging>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	b089      	sub	sp, #36	; 0x24
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	469b      	mov	fp, r3
 800cc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc14:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	b3ba      	cbz	r2, 800cc8c <acc_alg_data_merging+0x84>
 800cc1c:	1e8b      	subs	r3, r1, #2
 800cc1e:	4692      	mov	sl, r2
 800cc20:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800cc24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc26:	1e91      	subs	r1, r2, #2
 800cc28:	f1a8 0202 	sub.w	r2, r8, #2
 800cc2c:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 800cc30:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 800cc34:	f821 4f02 	strh.w	r4, [r1, #2]!
 800cc38:	42ab      	cmp	r3, r5
 800cc3a:	881c      	ldrh	r4, [r3, #0]
 800cc3c:	f822 4f02 	strh.w	r4, [r2, #2]!
 800cc40:	d1f4      	bne.n	800cc2c <acc_alg_data_merging+0x24>
 800cc42:	4654      	mov	r4, sl
 800cc44:	2500      	movs	r5, #0
 800cc46:	462e      	mov	r6, r5
 800cc48:	4629      	mov	r1, r5
 800cc4a:	46c4      	mov	ip, r8
 800cc4c:	f04f 0e00 	mov.w	lr, #0
 800cc50:	4673      	mov	r3, lr
 800cc52:	428b      	cmp	r3, r1
 800cc54:	d00b      	beq.n	800cc6e <acc_alg_data_merging+0x66>
 800cc56:	f8bc 2000 	ldrh.w	r2, [ip]
 800cc5a:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 800cc5e:	1a12      	subs	r2, r2, r0
 800cc60:	2a00      	cmp	r2, #0
 800cc62:	bfb8      	it	lt
 800cc64:	4252      	neglt	r2, r2
 800cc66:	4593      	cmp	fp, r2
 800cc68:	bf88      	it	hi
 800cc6a:	f10e 0e01 	addhi.w	lr, lr, #1
 800cc6e:	3301      	adds	r3, #1
 800cc70:	429c      	cmp	r4, r3
 800cc72:	d1ee      	bne.n	800cc52 <acc_alg_data_merging+0x4a>
 800cc74:	45b6      	cmp	lr, r6
 800cc76:	bf88      	it	hi
 800cc78:	460d      	movhi	r5, r1
 800cc7a:	f101 0101 	add.w	r1, r1, #1
 800cc7e:	bf88      	it	hi
 800cc80:	4676      	movhi	r6, lr
 800cc82:	428c      	cmp	r4, r1
 800cc84:	f10c 0c02 	add.w	ip, ip, #2
 800cc88:	d1e0      	bne.n	800cc4c <acc_alg_data_merging+0x44>
 800cc8a:	b91e      	cbnz	r6, 800cc94 <acc_alg_data_merging+0x8c>
 800cc8c:	3724      	adds	r7, #36	; 0x24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc94:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800cc98:	f109 0308 	add.w	r3, r9, #8
 800cc9c:	f023 0307 	bic.w	r3, r3, #7
 800cca0:	f8c7 d004 	str.w	sp, [r7, #4]
 800cca4:	ebad 0d03 	sub.w	sp, sp, r3
 800cca8:	46ea      	mov	sl, sp
 800ccaa:	464a      	mov	r2, r9
 800ccac:	ebad 0d03 	sub.w	sp, sp, r3
 800ccb0:	4641      	mov	r1, r8
 800ccb2:	4650      	mov	r0, sl
 800ccb4:	f8c7 d014 	str.w	sp, [r7, #20]
 800ccb8:	f003 f9f0 	bl	801009c <memcpy>
 800ccbc:	464a      	mov	r2, r9
 800ccbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccc0:	6978      	ldr	r0, [r7, #20]
 800ccc2:	f003 f9eb 	bl	801009c <memcpy>
 800ccc6:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
 800ccca:	61fa      	str	r2, [r7, #28]
 800cccc:	1c73      	adds	r3, r6, #1
 800ccce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	085b      	lsrs	r3, r3, #1
 800ccd6:	60bb      	str	r3, [r7, #8]
 800ccd8:	f832 9015 	ldrh.w	r9, [r2, r5, lsl #1]
 800ccdc:	4686      	mov	lr, r0
 800ccde:	4603      	mov	r3, r0
 800cce0:	46a4      	mov	ip, r4
 800cce2:	e008      	b.n	800ccf6 <acc_alg_data_merging+0xee>
 800cce4:	69f9      	ldr	r1, [r7, #28]
 800cce6:	4411      	add	r1, r2
 800cce8:	61f9      	str	r1, [r7, #28]
 800ccea:	44a1      	add	r9, r4
 800ccec:	f04f 0e01 	mov.w	lr, #1
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	459c      	cmp	ip, r3
 800ccf4:	d03d      	beq.n	800cd72 <acc_alg_data_merging+0x16a>
 800ccf6:	429d      	cmp	r5, r3
 800ccf8:	d0fa      	beq.n	800ccf0 <acc_alg_data_merging+0xe8>
 800ccfa:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 800ccfe:	f83a 1015 	ldrh.w	r1, [sl, r5, lsl #1]
 800cd02:	697c      	ldr	r4, [r7, #20]
 800cd04:	1a89      	subs	r1, r1, r2
 800cd06:	2900      	cmp	r1, #0
 800cd08:	bfb8      	it	lt
 800cd0a:	4249      	neglt	r1, r1
 800cd0c:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 800cd10:	61bc      	str	r4, [r7, #24]
 800cd12:	458b      	cmp	fp, r1
 800cd14:	ea4f 0140 	mov.w	r1, r0, lsl #1
 800cd18:	d8e4      	bhi.n	800cce4 <acc_alg_data_merging+0xdc>
 800cd1a:	eb08 0401 	add.w	r4, r8, r1
 800cd1e:	613c      	str	r4, [r7, #16]
 800cd20:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800cd22:	1c46      	adds	r6, r0, #1
 800cd24:	440c      	add	r4, r1
 800cd26:	f1be 0f00 	cmp.w	lr, #0
 800cd2a:	d018      	beq.n	800cd5e <acc_alg_data_merging+0x156>
 800cd2c:	68be      	ldr	r6, [r7, #8]
 800cd2e:	69fc      	ldr	r4, [r7, #28]
 800cd30:	eb06 0e04 	add.w	lr, r6, r4
 800cd34:	68fc      	ldr	r4, [r7, #12]
 800cd36:	fbbe f4f4 	udiv	r4, lr, r4
 800cd3a:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
 800cd3e:	eb06 0409 	add.w	r4, r6, r9
 800cd42:	68fe      	ldr	r6, [r7, #12]
 800cd44:	fbb4 f4f6 	udiv	r4, r4, r6
 800cd48:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800cd4a:	3102      	adds	r1, #2
 800cd4c:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
 800cd50:	3002      	adds	r0, #2
 800cd52:	4606      	mov	r6, r0
 800cd54:	eb08 0001 	add.w	r0, r8, r1
 800cd58:	6138      	str	r0, [r7, #16]
 800cd5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd5c:	1844      	adds	r4, r0, r1
 800cd5e:	6939      	ldr	r1, [r7, #16]
 800cd60:	3301      	adds	r3, #1
 800cd62:	800a      	strh	r2, [r1, #0]
 800cd64:	459c      	cmp	ip, r3
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	8022      	strh	r2, [r4, #0]
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f04f 0e00 	mov.w	lr, #0
 800cd70:	d1c1      	bne.n	800ccf6 <acc_alg_data_merging+0xee>
 800cd72:	f1be 0f00 	cmp.w	lr, #0
 800cd76:	d00f      	beq.n	800cd98 <acc_alg_data_merging+0x190>
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	eb02 0609 	add.w	r6, r2, r9
 800cd80:	4413      	add	r3, r2
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd88:	f828 3010 	strh.w	r3, [r8, r0, lsl #1]
 800cd8c:	fbb6 f6f2 	udiv	r6, r6, r2
 800cd90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd92:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
 800cd96:	3001      	adds	r0, #1
 800cd98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd9a:	6018      	str	r0, [r3, #0]
 800cd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd9e:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800cda2:	681c      	ldr	r4, [r3, #0]
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	f47f af4d 	bne.w	800cc44 <acc_alg_data_merging+0x3c>
 800cdaa:	3724      	adds	r7, #36	; 0x24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb2:	bf00      	nop

0800cdb4 <acc_alg_delay_sample_detection_size>:
 800cdb4:	b182      	cbz	r2, 800cdd8 <acc_alg_delay_sample_detection_size+0x24>
 800cdb6:	b430      	push	{r4, r5}
 800cdb8:	1e83      	subs	r3, r0, #2
 800cdba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cdbe:	3902      	subs	r1, #2
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	f833 5f02 	ldrh.w	r5, [r3, #2]!
 800cdc6:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 800cdca:	42a5      	cmp	r5, r4
 800cdcc:	bf88      	it	hi
 800cdce:	3001      	addhi	r0, #1
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d1f6      	bne.n	800cdc2 <acc_alg_delay_sample_detection_size+0xe>
 800cdd4:	bc30      	pop	{r4, r5}
 800cdd6:	4770      	bx	lr
 800cdd8:	4610      	mov	r0, r2
 800cdda:	4770      	bx	lr

0800cddc <acc_alg_delay_sample_detection>:
 800cddc:	b1aa      	cbz	r2, 800ce0a <acc_alg_delay_sample_detection+0x2e>
 800cdde:	b4f0      	push	{r4, r5, r6, r7}
 800cde0:	3802      	subs	r0, #2
 800cde2:	2400      	movs	r4, #0
 800cde4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800cde8:	3902      	subs	r1, #2
 800cdea:	4627      	mov	r7, r4
 800cdec:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cdf0:	f831 5f02 	ldrh.w	r5, [r1, #2]!
 800cdf4:	42ae      	cmp	r6, r5
 800cdf6:	bf84      	itt	hi
 800cdf8:	f823 4017 	strhhi.w	r4, [r3, r7, lsl #1]
 800cdfc:	3701      	addhi	r7, #1
 800cdfe:	4290      	cmp	r0, r2
 800ce00:	f104 0401 	add.w	r4, r4, #1
 800ce04:	d1f2      	bne.n	800cdec <acc_alg_delay_sample_detection+0x10>
 800ce06:	bcf0      	pop	{r4, r5, r6, r7}
 800ce08:	4770      	bx	lr
 800ce0a:	4770      	bx	lr

0800ce0c <acc_alg_peak_detection_size>:
 800ce0c:	b4f0      	push	{r4, r5, r6, r7}
 800ce0e:	1e8b      	subs	r3, r1, #2
 800ce10:	2700      	movs	r7, #0
 800ce12:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ce16:	463e      	mov	r6, r7
 800ce18:	4291      	cmp	r1, r2
 800ce1a:	d014      	beq.n	800ce46 <acc_alg_peak_detection_size+0x3a>
 800ce1c:	884b      	ldrh	r3, [r1, #2]
 800ce1e:	f831 4b02 	ldrh.w	r4, [r1], #2
 800ce22:	1b1d      	subs	r5, r3, r4
 800ce24:	2d01      	cmp	r5, #1
 800ce26:	d111      	bne.n	800ce4c <acc_alg_peak_detection_size+0x40>
 800ce28:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 800ce2c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800ce30:	429c      	cmp	r4, r3
 800ce32:	d30d      	bcc.n	800ce50 <acc_alg_peak_detection_size+0x44>
 800ce34:	d9f0      	bls.n	800ce18 <acc_alg_peak_detection_size+0xc>
 800ce36:	2e00      	cmp	r6, #0
 800ce38:	d0ee      	beq.n	800ce18 <acc_alg_peak_detection_size+0xc>
 800ce3a:	4291      	cmp	r1, r2
 800ce3c:	f107 0701 	add.w	r7, r7, #1
 800ce40:	f04f 0600 	mov.w	r6, #0
 800ce44:	d1ea      	bne.n	800ce1c <acc_alg_peak_detection_size+0x10>
 800ce46:	4638      	mov	r0, r7
 800ce48:	bcf0      	pop	{r4, r5, r6, r7}
 800ce4a:	4770      	bx	lr
 800ce4c:	2600      	movs	r6, #0
 800ce4e:	e7e3      	b.n	800ce18 <acc_alg_peak_detection_size+0xc>
 800ce50:	462e      	mov	r6, r5
 800ce52:	e7e1      	b.n	800ce18 <acc_alg_peak_detection_size+0xc>

0800ce54 <acc_alg_peak_detection>:
 800ce54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce58:	f04f 0800 	mov.w	r8, #0
 800ce5c:	1e8c      	subs	r4, r1, #2
 800ce5e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800ce62:	46c1      	mov	r9, r8
 800ce64:	4647      	mov	r7, r8
 800ce66:	4291      	cmp	r1, r2
 800ce68:	d01b      	beq.n	800cea2 <acc_alg_peak_detection+0x4e>
 800ce6a:	884d      	ldrh	r5, [r1, #2]
 800ce6c:	f831 4b02 	ldrh.w	r4, [r1], #2
 800ce70:	1b2e      	subs	r6, r5, r4
 800ce72:	2e01      	cmp	r6, #1
 800ce74:	d117      	bne.n	800cea6 <acc_alg_peak_detection+0x52>
 800ce76:	f830 e014 	ldrh.w	lr, [r0, r4, lsl #1]
 800ce7a:	f830 c015 	ldrh.w	ip, [r0, r5, lsl #1]
 800ce7e:	45e6      	cmp	lr, ip
 800ce80:	d313      	bcc.n	800ceaa <acc_alg_peak_detection+0x56>
 800ce82:	d9f0      	bls.n	800ce66 <acc_alg_peak_detection+0x12>
 800ce84:	f1c9 0401 	rsb	r4, r9, #1
 800ce88:	4425      	add	r5, r4
 800ce8a:	eb09 0555 	add.w	r5, r9, r5, lsr #1
 800ce8e:	2f00      	cmp	r7, #0
 800ce90:	d0e9      	beq.n	800ce66 <acc_alg_peak_detection+0x12>
 800ce92:	4291      	cmp	r1, r2
 800ce94:	f823 5018 	strh.w	r5, [r3, r8, lsl #1]
 800ce98:	f04f 0700 	mov.w	r7, #0
 800ce9c:	f108 0801 	add.w	r8, r8, #1
 800cea0:	d1e3      	bne.n	800ce6a <acc_alg_peak_detection+0x16>
 800cea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea6:	2700      	movs	r7, #0
 800cea8:	e7dd      	b.n	800ce66 <acc_alg_peak_detection+0x12>
 800ceaa:	46a1      	mov	r9, r4
 800ceac:	4637      	mov	r7, r6
 800ceae:	e7da      	b.n	800ce66 <acc_alg_peak_detection+0x12>

0800ceb0 <acc_utils_swap16_array>:
 800ceb0:	1e4a      	subs	r2, r1, #1
 800ceb2:	b131      	cbz	r1, 800cec2 <acc_utils_swap16_array+0x12>
 800ceb4:	8803      	ldrh	r3, [r0, #0]
 800ceb6:	3a01      	subs	r2, #1
 800ceb8:	ba5b      	rev16	r3, r3
 800ceba:	f820 3b02 	strh.w	r3, [r0], #2
 800cebe:	1c53      	adds	r3, r2, #1
 800cec0:	d1f8      	bne.n	800ceb4 <acc_utils_swap16_array+0x4>
 800cec2:	4770      	bx	lr

0800cec4 <acc_utils_swap32_array>:
 800cec4:	1e4a      	subs	r2, r1, #1
 800cec6:	b131      	cbz	r1, 800ced6 <acc_utils_swap32_array+0x12>
 800cec8:	6803      	ldr	r3, [r0, #0]
 800ceca:	3a01      	subs	r2, #1
 800cecc:	ba1b      	rev	r3, r3
 800cece:	f840 3b04 	str.w	r3, [r0], #4
 800ced2:	1c53      	adds	r3, r2, #1
 800ced4:	d1f8      	bne.n	800cec8 <acc_utils_swap32_array+0x4>
 800ced6:	4770      	bx	lr

0800ced8 <acc_utils_uint8_to_uint32_swap>:
 800ced8:	6800      	ldr	r0, [r0, #0]
 800ceda:	ba00      	rev	r0, r0
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop

0800cee0 <acc_utils_uint32_to_uint8_swap>:
 800cee0:	ba00      	rev	r0, r0
 800cee2:	6008      	str	r0, [r1, #0]
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop

0800cee8 <filter_no_operation>:
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop

0800ceec <event>:
 800ceec:	b510      	push	{r4, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cef2:	4798      	blx	r3
 800cef4:	6820      	ldr	r0, [r4, #0]
 800cef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cefa:	6843      	ldr	r3, [r0, #4]
 800cefc:	4718      	bx	r3
 800cefe:	bf00      	nop

0800cf00 <reset>:
 800cf00:	6800      	ldr	r0, [r0, #0]
 800cf02:	68c3      	ldr	r3, [r0, #12]
 800cf04:	4718      	bx	r3
 800cf06:	bf00      	nop

0800cf08 <filter_q3_12_complex>:
 800cf08:	4603      	mov	r3, r0
 800cf0a:	3040      	adds	r0, #64	; 0x40
 800cf0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf0e:	6919      	ldr	r1, [r3, #16]
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	0892      	lsrs	r2, r2, #2
 800cf14:	f7fb bf2e 	b.w	8008d74 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800cf18 <validate>:
 800cf18:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	b510      	push	{r4, lr}
 800cf20:	d113      	bne.n	800cf4a <validate+0x32>
 800cf22:	6983      	ldr	r3, [r0, #24]
 800cf24:	4604      	mov	r4, r0
 800cf26:	b123      	cbz	r3, 800cf32 <validate+0x1a>
 800cf28:	4a0b      	ldr	r2, [pc, #44]	; (800cf58 <validate+0x40>)
 800cf2a:	490c      	ldr	r1, [pc, #48]	; (800cf5c <validate+0x44>)
 800cf2c:	2001      	movs	r0, #1
 800cf2e:	f7fd f947 	bl	800a1c0 <acc_log_rss>
 800cf32:	69e3      	ldr	r3, [r4, #28]
 800cf34:	b123      	cbz	r3, 800cf40 <validate+0x28>
 800cf36:	4a0a      	ldr	r2, [pc, #40]	; (800cf60 <validate+0x48>)
 800cf38:	4908      	ldr	r1, [pc, #32]	; (800cf5c <validate+0x44>)
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	f7fd f940 	bl	800a1c0 <acc_log_rss>
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf46:	6883      	ldr	r3, [r0, #8]
 800cf48:	4718      	bx	r3
 800cf4a:	4a06      	ldr	r2, [pc, #24]	; (800cf64 <validate+0x4c>)
 800cf4c:	4903      	ldr	r1, [pc, #12]	; (800cf5c <validate+0x44>)
 800cf4e:	2000      	movs	r0, #0
 800cf50:	f7fd f936 	bl	800a1c0 <acc_log_rss>
 800cf54:	2000      	movs	r0, #0
 800cf56:	bd10      	pop	{r4, pc}
 800cf58:	080188b8 	.word	0x080188b8
 800cf5c:	080188a0 	.word	0x080188a0
 800cf60:	080188cc 	.word	0x080188cc
 800cf64:	08018878 	.word	0x08018878

0800cf68 <acc_element_depth_domain_low_pass_filter_init>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4d16      	ldr	r5, [pc, #88]	; (800cfc4 <acc_element_depth_domain_low_pass_filter_init+0x5c>)
 800cf6c:	4c16      	ldr	r4, [pc, #88]	; (800cfc8 <acc_element_depth_domain_low_pass_filter_init+0x60>)
 800cf6e:	4b17      	ldr	r3, [pc, #92]	; (800cfcc <acc_element_depth_domain_low_pass_filter_init+0x64>)
 800cf70:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800cf74:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800cf78:	60c3      	str	r3, [r0, #12]
 800cf7a:	b19a      	cbz	r2, 800cfa4 <acc_element_depth_domain_low_pass_filter_init+0x3c>
 800cf7c:	2907      	cmp	r1, #7
 800cf7e:	d116      	bne.n	800cfae <acc_element_depth_domain_low_pass_filter_init+0x46>
 800cf80:	4b13      	ldr	r3, [pc, #76]	; (800cfd0 <acc_element_depth_domain_low_pass_filter_init+0x68>)
 800cf82:	6383      	str	r3, [r0, #56]	; 0x38
 800cf84:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800cf88:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	2001      	movs	r0, #1
 800cf90:	f7fb fd4a 	bl	8008a28 <acc_alg_biquad_q3_12_lowpass_coeffs>
 800cf94:	4604      	mov	r4, r0
 800cf96:	b940      	cbnz	r0, 800cfaa <acc_element_depth_domain_low_pass_filter_init+0x42>
 800cf98:	4a0e      	ldr	r2, [pc, #56]	; (800cfd4 <acc_element_depth_domain_low_pass_filter_init+0x6c>)
 800cf9a:	490f      	ldr	r1, [pc, #60]	; (800cfd8 <acc_element_depth_domain_low_pass_filter_init+0x70>)
 800cf9c:	f7fd f910 	bl	800a1c0 <acc_log_rss>
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	4b0d      	ldr	r3, [pc, #52]	; (800cfdc <acc_element_depth_domain_low_pass_filter_init+0x74>)
 800cfa6:	6383      	str	r3, [r0, #56]	; 0x38
 800cfa8:	2401      	movs	r4, #1
 800cfaa:	4620      	mov	r0, r4
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	2300      	movs	r3, #0
 800cfb0:	6383      	str	r3, [r0, #56]	; 0x38
 800cfb2:	461c      	mov	r4, r3
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	4a0a      	ldr	r2, [pc, #40]	; (800cfe0 <acc_element_depth_domain_low_pass_filter_init+0x78>)
 800cfb8:	4907      	ldr	r1, [pc, #28]	; (800cfd8 <acc_element_depth_domain_low_pass_filter_init+0x70>)
 800cfba:	f7fd f901 	bl	800a1c0 <acc_log_rss>
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	bf00      	nop
 800cfc4:	0800ceed 	.word	0x0800ceed
 800cfc8:	0800cf19 	.word	0x0800cf19
 800cfcc:	0800cf01 	.word	0x0800cf01
 800cfd0:	0800cf09 	.word	0x0800cf09
 800cfd4:	0801884c 	.word	0x0801884c
 800cfd8:	080188a0 	.word	0x080188a0
 800cfdc:	0800cee9 	.word	0x0800cee9
 800cfe0:	080189dc 	.word	0x080189dc

0800cfe4 <event>:
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cfea:	4798      	blx	r3
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff2:	6843      	ldr	r3, [r0, #4]
 800cff4:	4718      	bx	r3
 800cff6:	bf00      	nop

0800cff8 <reset>:
 800cff8:	6800      	ldr	r0, [r0, #0]
 800cffa:	68c3      	ldr	r3, [r0, #12]
 800cffc:	4718      	bx	r3
 800cffe:	bf00      	nop

0800d000 <iq_mix_q3_12>:
 800d000:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d002:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800d006:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800d00a:	b538      	push	{r3, r4, r5, lr}
 800d00c:	6815      	ldr	r5, [r2, #0]
 800d00e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d010:	4604      	mov	r4, r0
 800d012:	086d      	lsrs	r5, r5, #1
 800d014:	ed93 0a00 	vldr	s0, [r3]
 800d018:	462a      	mov	r2, r5
 800d01a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800d01e:	f7fc f9d3 	bl	80093c8 <acc_alg_iq_demodulation_q3_12_real>
 800d022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d024:	00ad      	lsls	r5, r5, #2
 800d026:	601d      	str	r5, [r3, #0]
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	bf00      	nop

0800d02c <iq_mix_q3_12_complex>:
 800d02c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d02e:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800d032:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800d036:	b538      	push	{r3, r4, r5, lr}
 800d038:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d03a:	6815      	ldr	r5, [r2, #0]
 800d03c:	ed93 0a00 	vldr	s0, [r3]
 800d040:	4604      	mov	r4, r0
 800d042:	08a9      	lsrs	r1, r5, #2
 800d044:	6900      	ldr	r0, [r0, #16]
 800d046:	f7fc fa9d 	bl	8009584 <acc_alg_iq_demodulation_q3_12_complex>
 800d04a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d04c:	f025 0503 	bic.w	r5, r5, #3
 800d050:	601d      	str	r5, [r3, #0]
 800d052:	bd38      	pop	{r3, r4, r5, pc}

0800d054 <validate>:
 800d054:	4a1b      	ldr	r2, [pc, #108]	; (800d0c4 <validate+0x70>)
 800d056:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d058:	4293      	cmp	r3, r2
 800d05a:	b510      	push	{r4, lr}
 800d05c:	4604      	mov	r4, r0
 800d05e:	d020      	beq.n	800d0a2 <validate+0x4e>
 800d060:	4a19      	ldr	r2, [pc, #100]	; (800d0c8 <validate+0x74>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d006      	beq.n	800d074 <validate+0x20>
 800d066:	4a19      	ldr	r2, [pc, #100]	; (800d0cc <validate+0x78>)
 800d068:	4919      	ldr	r1, [pc, #100]	; (800d0d0 <validate+0x7c>)
 800d06a:	2000      	movs	r0, #0
 800d06c:	f7fd f8a8 	bl	800a1c0 <acc_log_rss>
 800d070:	2000      	movs	r0, #0
 800d072:	bd10      	pop	{r4, pc}
 800d074:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d01d      	beq.n	800d0b8 <validate+0x64>
 800d07c:	69a3      	ldr	r3, [r4, #24]
 800d07e:	b123      	cbz	r3, 800d08a <validate+0x36>
 800d080:	4a14      	ldr	r2, [pc, #80]	; (800d0d4 <validate+0x80>)
 800d082:	4913      	ldr	r1, [pc, #76]	; (800d0d0 <validate+0x7c>)
 800d084:	2001      	movs	r0, #1
 800d086:	f7fd f89b 	bl	800a1c0 <acc_log_rss>
 800d08a:	69e3      	ldr	r3, [r4, #28]
 800d08c:	b123      	cbz	r3, 800d098 <validate+0x44>
 800d08e:	4a12      	ldr	r2, [pc, #72]	; (800d0d8 <validate+0x84>)
 800d090:	490f      	ldr	r1, [pc, #60]	; (800d0d0 <validate+0x7c>)
 800d092:	2001      	movs	r0, #1
 800d094:	f7fd f894 	bl	800a1c0 <acc_log_rss>
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d09e:	6883      	ldr	r3, [r0, #8]
 800d0a0:	4718      	bx	r3
 800d0a2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d0e8      	beq.n	800d07c <validate+0x28>
 800d0aa:	4a0c      	ldr	r2, [pc, #48]	; (800d0dc <validate+0x88>)
 800d0ac:	4908      	ldr	r1, [pc, #32]	; (800d0d0 <validate+0x7c>)
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	f7fd f886 	bl	800a1c0 <acc_log_rss>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	4a09      	ldr	r2, [pc, #36]	; (800d0e0 <validate+0x8c>)
 800d0ba:	4905      	ldr	r1, [pc, #20]	; (800d0d0 <validate+0x7c>)
 800d0bc:	2000      	movs	r0, #0
 800d0be:	f7fd f87f 	bl	800a1c0 <acc_log_rss>
 800d0c2:	e7d5      	b.n	800d070 <validate+0x1c>
 800d0c4:	0800d02d 	.word	0x0800d02d
 800d0c8:	0800d001 	.word	0x0800d001
 800d0cc:	08018928 	.word	0x08018928
 800d0d0:	080188dc 	.word	0x080188dc
 800d0d4:	080188b8 	.word	0x080188b8
 800d0d8:	080188cc 	.word	0x080188cc
 800d0dc:	08018878 	.word	0x08018878
 800d0e0:	080188f0 	.word	0x080188f0

0800d0e4 <acc_element_iq_mixer_init>:
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	4a0f      	ldr	r2, [pc, #60]	; (800d124 <acc_element_iq_mixer_init+0x40>)
 800d0e8:	4c0f      	ldr	r4, [pc, #60]	; (800d128 <acc_element_iq_mixer_init+0x44>)
 800d0ea:	4b10      	ldr	r3, [pc, #64]	; (800d12c <acc_element_iq_mixer_init+0x48>)
 800d0ec:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800d0f0:	2903      	cmp	r1, #3
 800d0f2:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 800d0f6:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800d0fa:	60c3      	str	r3, [r0, #12]
 800d0fc:	d00e      	beq.n	800d11c <acc_element_iq_mixer_init+0x38>
 800d0fe:	2907      	cmp	r1, #7
 800d100:	d103      	bne.n	800d10a <acc_element_iq_mixer_init+0x26>
 800d102:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <acc_element_iq_mixer_init+0x4c>)
 800d104:	6383      	str	r3, [r0, #56]	; 0x38
 800d106:	2001      	movs	r0, #1
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	2400      	movs	r4, #0
 800d10c:	6384      	str	r4, [r0, #56]	; 0x38
 800d10e:	4a09      	ldr	r2, [pc, #36]	; (800d134 <acc_element_iq_mixer_init+0x50>)
 800d110:	4909      	ldr	r1, [pc, #36]	; (800d138 <acc_element_iq_mixer_init+0x54>)
 800d112:	4620      	mov	r0, r4
 800d114:	f7fd f854 	bl	800a1c0 <acc_log_rss>
 800d118:	4620      	mov	r0, r4
 800d11a:	bd10      	pop	{r4, pc}
 800d11c:	4b07      	ldr	r3, [pc, #28]	; (800d13c <acc_element_iq_mixer_init+0x58>)
 800d11e:	6383      	str	r3, [r0, #56]	; 0x38
 800d120:	2001      	movs	r0, #1
 800d122:	bd10      	pop	{r4, pc}
 800d124:	0800d055 	.word	0x0800d055
 800d128:	0800cfe5 	.word	0x0800cfe5
 800d12c:	0800cff9 	.word	0x0800cff9
 800d130:	0800d02d 	.word	0x0800d02d
 800d134:	080189dc 	.word	0x080189dc
 800d138:	080188dc 	.word	0x080188dc
 800d13c:	0800d001 	.word	0x0800d001

0800d140 <event>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d144:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d146:	682a      	ldr	r2, [r5, #0]
 800d148:	4604      	mov	r4, r0
 800d14a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800d14e:	4798      	blx	r3
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	6028      	str	r0, [r5, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	4618      	mov	r0, r3
 800d158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d15c:	4710      	bx	r2
 800d15e:	bf00      	nop

0800d160 <reset>:
 800d160:	6800      	ldr	r0, [r0, #0]
 800d162:	68c3      	ldr	r3, [r0, #12]
 800d164:	4718      	bx	r3
 800d166:	bf00      	nop

0800d168 <validate>:
 800d168:	6983      	ldr	r3, [r0, #24]
 800d16a:	b510      	push	{r4, lr}
 800d16c:	4604      	mov	r4, r0
 800d16e:	b123      	cbz	r3, 800d17a <validate+0x12>
 800d170:	4a08      	ldr	r2, [pc, #32]	; (800d194 <validate+0x2c>)
 800d172:	4909      	ldr	r1, [pc, #36]	; (800d198 <validate+0x30>)
 800d174:	2001      	movs	r0, #1
 800d176:	f7fd f823 	bl	800a1c0 <acc_log_rss>
 800d17a:	69e3      	ldr	r3, [r4, #28]
 800d17c:	b123      	cbz	r3, 800d188 <validate+0x20>
 800d17e:	4a07      	ldr	r2, [pc, #28]	; (800d19c <validate+0x34>)
 800d180:	4905      	ldr	r1, [pc, #20]	; (800d198 <validate+0x30>)
 800d182:	2001      	movs	r0, #1
 800d184:	f7fd f81c 	bl	800a1c0 <acc_log_rss>
 800d188:	6820      	ldr	r0, [r4, #0]
 800d18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18e:	6883      	ldr	r3, [r0, #8]
 800d190:	4718      	bx	r3
 800d192:	bf00      	nop
 800d194:	080188b8 	.word	0x080188b8
 800d198:	08018940 	.word	0x08018940
 800d19c:	080188cc 	.word	0x080188cc

0800d1a0 <abs_q3_12_complex>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	0897      	lsrs	r7, r2, #2
 800d1a4:	d00b      	beq.n	800d1be <abs_q3_12_complex+0x1e>
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	1e8d      	subs	r5, r1, #2
 800d1aa:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 800d1ae:	f854 0b04 	ldr.w	r0, [r4], #4
 800d1b2:	f7fb fb81 	bl	80088b8 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800d1b6:	42b4      	cmp	r4, r6
 800d1b8:	f825 0f02 	strh.w	r0, [r5, #2]!
 800d1bc:	d1f7      	bne.n	800d1ae <abs_q3_12_complex+0xe>
 800d1be:	0078      	lsls	r0, r7, #1
 800d1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c2:	bf00      	nop

0800d1c4 <acc_element_abs_init>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4a0a      	ldr	r2, [pc, #40]	; (800d1f0 <acc_element_abs_init+0x2c>)
 800d1c8:	4c0a      	ldr	r4, [pc, #40]	; (800d1f4 <acc_element_abs_init+0x30>)
 800d1ca:	4b0b      	ldr	r3, [pc, #44]	; (800d1f8 <acc_element_abs_init+0x34>)
 800d1cc:	60c3      	str	r3, [r0, #12]
 800d1ce:	2907      	cmp	r1, #7
 800d1d0:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800d1d4:	d008      	beq.n	800d1e8 <acc_element_abs_init+0x24>
 800d1d6:	2400      	movs	r4, #0
 800d1d8:	6384      	str	r4, [r0, #56]	; 0x38
 800d1da:	4a08      	ldr	r2, [pc, #32]	; (800d1fc <acc_element_abs_init+0x38>)
 800d1dc:	4908      	ldr	r1, [pc, #32]	; (800d200 <acc_element_abs_init+0x3c>)
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f7fc ffee 	bl	800a1c0 <acc_log_rss>
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	bd10      	pop	{r4, pc}
 800d1e8:	4b06      	ldr	r3, [pc, #24]	; (800d204 <acc_element_abs_init+0x40>)
 800d1ea:	6383      	str	r3, [r0, #56]	; 0x38
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	bd10      	pop	{r4, pc}
 800d1f0:	0800d169 	.word	0x0800d169
 800d1f4:	0800d141 	.word	0x0800d141
 800d1f8:	0800d161 	.word	0x0800d161
 800d1fc:	080189dc 	.word	0x080189dc
 800d200:	08018940 	.word	0x08018940
 800d204:	0800d1a1 	.word	0x0800d1a1

0800d208 <event>:
 800d208:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d20a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d20c:	6811      	ldr	r1, [r2, #0]
 800d20e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800d210:	b510      	push	{r4, lr}
 800d212:	4604      	mov	r4, r0
 800d214:	6900      	ldr	r0, [r0, #16]
 800d216:	4798      	blx	r3
 800d218:	6820      	ldr	r0, [r4, #0]
 800d21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d21e:	6843      	ldr	r3, [r0, #4]
 800d220:	4718      	bx	r3
 800d222:	bf00      	nop

0800d224 <reset>:
 800d224:	6800      	ldr	r0, [r0, #0]
 800d226:	68c3      	ldr	r3, [r0, #12]
 800d228:	4718      	bx	r3
 800d22a:	bf00      	nop

0800d22c <validate>:
 800d22c:	6983      	ldr	r3, [r0, #24]
 800d22e:	b510      	push	{r4, lr}
 800d230:	4604      	mov	r4, r0
 800d232:	b123      	cbz	r3, 800d23e <validate+0x12>
 800d234:	4a08      	ldr	r2, [pc, #32]	; (800d258 <validate+0x2c>)
 800d236:	4909      	ldr	r1, [pc, #36]	; (800d25c <validate+0x30>)
 800d238:	2001      	movs	r0, #1
 800d23a:	f7fc ffc1 	bl	800a1c0 <acc_log_rss>
 800d23e:	69e3      	ldr	r3, [r4, #28]
 800d240:	b123      	cbz	r3, 800d24c <validate+0x20>
 800d242:	4a07      	ldr	r2, [pc, #28]	; (800d260 <validate+0x34>)
 800d244:	4905      	ldr	r1, [pc, #20]	; (800d25c <validate+0x30>)
 800d246:	2001      	movs	r0, #1
 800d248:	f7fc ffba 	bl	800a1c0 <acc_log_rss>
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d252:	6883      	ldr	r3, [r0, #8]
 800d254:	4718      	bx	r3
 800d256:	bf00      	nop
 800d258:	080188b8 	.word	0x080188b8
 800d25c:	0801894c 	.word	0x0801894c
 800d260:	080188cc 	.word	0x080188cc

0800d264 <centering_q12_4>:
 800d264:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800d268:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800d26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d270:	f7ff bca4 	b.w	800cbbc <acc_alg_basic_subtract_section_mean_q12_4>

0800d274 <acc_element_centering_init>:
 800d274:	b430      	push	{r4, r5}
 800d276:	4603      	mov	r3, r0
 800d278:	2904      	cmp	r1, #4
 800d27a:	4808      	ldr	r0, [pc, #32]	; (800d29c <acc_element_centering_init+0x28>)
 800d27c:	4d08      	ldr	r5, [pc, #32]	; (800d2a0 <acc_element_centering_init+0x2c>)
 800d27e:	4c09      	ldr	r4, [pc, #36]	; (800d2a4 <acc_element_centering_init+0x30>)
 800d280:	60d8      	str	r0, [r3, #12]
 800d282:	bf1a      	itte	ne
 800d284:	2000      	movne	r0, #0
 800d286:	4601      	movne	r1, r0
 800d288:	4907      	ldreq	r1, [pc, #28]	; (800d2a8 <acc_element_centering_init+0x34>)
 800d28a:	6399      	str	r1, [r3, #56]	; 0x38
 800d28c:	e9c3 5401 	strd	r5, r4, [r3, #4]
 800d290:	bf08      	it	eq
 800d292:	2001      	moveq	r0, #1
 800d294:	879a      	strh	r2, [r3, #60]	; 0x3c
 800d296:	bc30      	pop	{r4, r5}
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	0800d225 	.word	0x0800d225
 800d2a0:	0800d209 	.word	0x0800d209
 800d2a4:	0800d22d 	.word	0x0800d22d
 800d2a8:	0800d265 	.word	0x0800d265

0800d2ac <convert_q3_12_to_u16>:
 800d2ac:	b410      	push	{r4}
 800d2ae:	0854      	lsrs	r4, r2, #1
 800d2b0:	d009      	beq.n	800d2c6 <convert_q3_12_to_u16+0x1a>
 800d2b2:	0064      	lsls	r4, r4, #1
 800d2b4:	4421      	add	r1, r4
 800d2b6:	4404      	add	r4, r0
 800d2b8:	f834 3d02 	ldrh.w	r3, [r4, #-2]!
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	4284      	cmp	r4, r0
 800d2c0:	f821 3d02 	strh.w	r3, [r1, #-2]!
 800d2c4:	d1f8      	bne.n	800d2b8 <convert_q3_12_to_u16+0xc>
 800d2c6:	f022 0001 	bic.w	r0, r2, #1
 800d2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <convert_q15_16_to_f32>:
 800d2d0:	b410      	push	{r4}
 800d2d2:	0894      	lsrs	r4, r2, #2
 800d2d4:	d019      	beq.n	800d30a <convert_q15_16_to_f32+0x3a>
 800d2d6:	00a4      	lsls	r4, r4, #2
 800d2d8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d314 <convert_q15_16_to_f32+0x44>
 800d2dc:	4421      	add	r1, r4
 800d2de:	4404      	add	r4, r0
 800d2e0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d2e4:	fa1f fc83 	uxth.w	ip, r3
 800d2e8:	ee07 ca10 	vmov	s14, ip
 800d2ec:	141b      	asrs	r3, r3, #16
 800d2ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d2f2:	ee07 3a90 	vmov	s15, r3
 800d2f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d2fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2fe:	42a0      	cmp	r0, r4
 800d300:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d304:	ed61 7a01 	vstmdb	r1!, {s15}
 800d308:	d1ea      	bne.n	800d2e0 <convert_q15_16_to_f32+0x10>
 800d30a:	f022 0003 	bic.w	r0, r2, #3
 800d30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	37800000 	.word	0x37800000

0800d318 <convert_q3_12_complex_to_f32_complex>:
 800d318:	0892      	lsrs	r2, r2, #2
 800d31a:	b410      	push	{r4}
 800d31c:	d026      	beq.n	800d36c <convert_q3_12_complex_to_f32_complex+0x54>
 800d31e:	00d4      	lsls	r4, r2, #3
 800d320:	eddf 6a15 	vldr	s13, [pc, #84]	; 800d378 <convert_q3_12_complex_to_f32_complex+0x60>
 800d324:	eddf 5a15 	vldr	s11, [pc, #84]	; 800d37c <convert_q3_12_complex_to_f32_complex+0x64>
 800d328:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d32c:	190b      	adds	r3, r1, r4
 800d32e:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 800d332:	ee07 0a10 	vmov	s14, r0
 800d336:	f932 0d04 	ldrsh.w	r0, [r2, #-4]!
 800d33a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d33e:	ee07 0a90 	vmov	s15, r0
 800d342:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d34a:	ee27 6a25 	vmul.f32	s12, s14, s11
 800d34e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d352:	ed03 7a01 	vstr	s14, [r3, #-4]
 800d356:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d35a:	3b08      	subs	r3, #8
 800d35c:	edc3 7a00 	vstr	s15, [r3]
 800d360:	4299      	cmp	r1, r3
 800d362:	d1e4      	bne.n	800d32e <convert_q3_12_complex_to_f32_complex+0x16>
 800d364:	4620      	mov	r0, r4
 800d366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	4614      	mov	r4, r2
 800d36e:	4620      	mov	r0, r4
 800d370:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	39800000 	.word	0x39800000
 800d37c:	00000000 	.word	0x00000000

0800d380 <convert_q12_4_to_q15_16>:
 800d380:	0852      	lsrs	r2, r2, #1
 800d382:	b410      	push	{r4}
 800d384:	d00e      	beq.n	800d3a4 <convert_q12_4_to_q15_16+0x24>
 800d386:	0094      	lsls	r4, r2, #2
 800d388:	4421      	add	r1, r4
 800d38a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d38e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
 800d392:	031b      	lsls	r3, r3, #12
 800d394:	4282      	cmp	r2, r0
 800d396:	f841 3d04 	str.w	r3, [r1, #-4]!
 800d39a:	d1f8      	bne.n	800d38e <convert_q12_4_to_q15_16+0xe>
 800d39c:	4620      	mov	r0, r4
 800d39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop

0800d3b0 <convert_q12_4_to_q3_12>:
 800d3b0:	b410      	push	{r4}
 800d3b2:	0854      	lsrs	r4, r2, #1
 800d3b4:	d00b      	beq.n	800d3ce <convert_q12_4_to_q3_12+0x1e>
 800d3b6:	0064      	lsls	r4, r4, #1
 800d3b8:	4421      	add	r1, r4
 800d3ba:	4404      	add	r4, r0
 800d3bc:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800d3c0:	105b      	asrs	r3, r3, #1
 800d3c2:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800d3c6:	4284      	cmp	r4, r0
 800d3c8:	f821 3d02 	strh.w	r3, [r1, #-2]!
 800d3cc:	d1f6      	bne.n	800d3bc <convert_q12_4_to_q3_12+0xc>
 800d3ce:	f022 0001 	bic.w	r0, r2, #1
 800d3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <convert_q12_4_to_q3_12_complex>:
 800d3d8:	0852      	lsrs	r2, r2, #1
 800d3da:	b430      	push	{r4, r5}
 800d3dc:	d014      	beq.n	800d408 <convert_q12_4_to_q3_12_complex+0x30>
 800d3de:	0095      	lsls	r5, r2, #2
 800d3e0:	4429      	add	r1, r5
 800d3e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d3e6:	2400      	movs	r4, #0
 800d3e8:	f932 3d02 	ldrsh.w	r3, [r2, #-2]!
 800d3ec:	f821 4c02 	strh.w	r4, [r1, #-2]
 800d3f0:	105b      	asrs	r3, r3, #1
 800d3f2:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800d3f6:	4290      	cmp	r0, r2
 800d3f8:	f821 3c04 	strh.w	r3, [r1, #-4]
 800d3fc:	f1a1 0104 	sub.w	r1, r1, #4
 800d400:	d1f2      	bne.n	800d3e8 <convert_q12_4_to_q3_12_complex+0x10>
 800d402:	4628      	mov	r0, r5
 800d404:	bc30      	pop	{r4, r5}
 800d406:	4770      	bx	lr
 800d408:	4615      	mov	r5, r2
 800d40a:	4628      	mov	r0, r5
 800d40c:	bc30      	pop	{r4, r5}
 800d40e:	4770      	bx	lr

0800d410 <event>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d414:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d416:	682a      	ldr	r2, [r5, #0]
 800d418:	4604      	mov	r4, r0
 800d41a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800d41e:	4798      	blx	r3
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	6028      	str	r0, [r5, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	4618      	mov	r0, r3
 800d428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d42c:	4710      	bx	r2
 800d42e:	bf00      	nop

0800d430 <reset>:
 800d430:	6800      	ldr	r0, [r0, #0]
 800d432:	68c3      	ldr	r3, [r0, #12]
 800d434:	4718      	bx	r3
 800d436:	bf00      	nop

0800d438 <validate>:
 800d438:	6983      	ldr	r3, [r0, #24]
 800d43a:	b510      	push	{r4, lr}
 800d43c:	4604      	mov	r4, r0
 800d43e:	b123      	cbz	r3, 800d44a <validate+0x12>
 800d440:	4a08      	ldr	r2, [pc, #32]	; (800d464 <validate+0x2c>)
 800d442:	4909      	ldr	r1, [pc, #36]	; (800d468 <validate+0x30>)
 800d444:	2001      	movs	r0, #1
 800d446:	f7fc febb 	bl	800a1c0 <acc_log_rss>
 800d44a:	69e3      	ldr	r3, [r4, #28]
 800d44c:	b123      	cbz	r3, 800d458 <validate+0x20>
 800d44e:	4a07      	ldr	r2, [pc, #28]	; (800d46c <validate+0x34>)
 800d450:	4905      	ldr	r1, [pc, #20]	; (800d468 <validate+0x30>)
 800d452:	2001      	movs	r0, #1
 800d454:	f7fc feb4 	bl	800a1c0 <acc_log_rss>
 800d458:	6820      	ldr	r0, [r4, #0]
 800d45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d45e:	6883      	ldr	r3, [r0, #8]
 800d460:	4718      	bx	r3
 800d462:	bf00      	nop
 800d464:	080188b8 	.word	0x080188b8
 800d468:	08018988 	.word	0x08018988
 800d46c:	080188cc 	.word	0x080188cc

0800d470 <acc_element_converter_init>:
 800d470:	3a01      	subs	r2, #1
 800d472:	b510      	push	{r4, lr}
 800d474:	2a06      	cmp	r2, #6
 800d476:	d805      	bhi.n	800d484 <acc_element_converter_init+0x14>
 800d478:	e8df f002 	tbb	[pc, r2]
 800d47c:	04211d19 	.word	0x04211d19
 800d480:	250d      	.short	0x250d
 800d482:	29          	.byte	0x29
 800d483:	00          	.byte	0x00
 800d484:	2400      	movs	r4, #0
 800d486:	6384      	str	r4, [r0, #56]	; 0x38
 800d488:	4a13      	ldr	r2, [pc, #76]	; (800d4d8 <acc_element_converter_init+0x68>)
 800d48a:	4914      	ldr	r1, [pc, #80]	; (800d4dc <acc_element_converter_init+0x6c>)
 800d48c:	4620      	mov	r0, r4
 800d48e:	f7fc fe97 	bl	800a1c0 <acc_log_rss>
 800d492:	4620      	mov	r0, r4
 800d494:	bd10      	pop	{r4, pc}
 800d496:	2904      	cmp	r1, #4
 800d498:	d1f4      	bne.n	800d484 <acc_element_converter_init+0x14>
 800d49a:	4c11      	ldr	r4, [pc, #68]	; (800d4e0 <acc_element_converter_init+0x70>)
 800d49c:	4911      	ldr	r1, [pc, #68]	; (800d4e4 <acc_element_converter_init+0x74>)
 800d49e:	4a12      	ldr	r2, [pc, #72]	; (800d4e8 <acc_element_converter_init+0x78>)
 800d4a0:	4b12      	ldr	r3, [pc, #72]	; (800d4ec <acc_element_converter_init+0x7c>)
 800d4a2:	6384      	str	r4, [r0, #56]	; 0x38
 800d4a4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d4a8:	60c3      	str	r3, [r0, #12]
 800d4aa:	2001      	movs	r0, #1
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	2905      	cmp	r1, #5
 800d4b0:	d1e8      	bne.n	800d484 <acc_element_converter_init+0x14>
 800d4b2:	4c0f      	ldr	r4, [pc, #60]	; (800d4f0 <acc_element_converter_init+0x80>)
 800d4b4:	e7f2      	b.n	800d49c <acc_element_converter_init+0x2c>
 800d4b6:	2903      	cmp	r1, #3
 800d4b8:	d1e4      	bne.n	800d484 <acc_element_converter_init+0x14>
 800d4ba:	4c0e      	ldr	r4, [pc, #56]	; (800d4f4 <acc_element_converter_init+0x84>)
 800d4bc:	e7ee      	b.n	800d49c <acc_element_converter_init+0x2c>
 800d4be:	2904      	cmp	r1, #4
 800d4c0:	d1e0      	bne.n	800d484 <acc_element_converter_init+0x14>
 800d4c2:	4c0d      	ldr	r4, [pc, #52]	; (800d4f8 <acc_element_converter_init+0x88>)
 800d4c4:	e7ea      	b.n	800d49c <acc_element_converter_init+0x2c>
 800d4c6:	2907      	cmp	r1, #7
 800d4c8:	d1dc      	bne.n	800d484 <acc_element_converter_init+0x14>
 800d4ca:	4c0c      	ldr	r4, [pc, #48]	; (800d4fc <acc_element_converter_init+0x8c>)
 800d4cc:	e7e6      	b.n	800d49c <acc_element_converter_init+0x2c>
 800d4ce:	2904      	cmp	r1, #4
 800d4d0:	d1d8      	bne.n	800d484 <acc_element_converter_init+0x14>
 800d4d2:	4c0b      	ldr	r4, [pc, #44]	; (800d500 <acc_element_converter_init+0x90>)
 800d4d4:	e7e2      	b.n	800d49c <acc_element_converter_init+0x2c>
 800d4d6:	bf00      	nop
 800d4d8:	08018960 	.word	0x08018960
 800d4dc:	08018988 	.word	0x08018988
 800d4e0:	0800d381 	.word	0x0800d381
 800d4e4:	0800d411 	.word	0x0800d411
 800d4e8:	0800d439 	.word	0x0800d439
 800d4ec:	0800d431 	.word	0x0800d431
 800d4f0:	0800d2d1 	.word	0x0800d2d1
 800d4f4:	0800d2ad 	.word	0x0800d2ad
 800d4f8:	0800d3b1 	.word	0x0800d3b1
 800d4fc:	0800d319 	.word	0x0800d319
 800d500:	0800d3d9 	.word	0x0800d3d9

0800d504 <event>:
 800d504:	4603      	mov	r3, r0
 800d506:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d508:	6800      	ldr	r0, [r0, #0]
 800d50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50c:	6013      	str	r3, [r2, #0]
 800d50e:	6843      	ldr	r3, [r0, #4]
 800d510:	4718      	bx	r3
 800d512:	bf00      	nop

0800d514 <reset>:
 800d514:	6800      	ldr	r0, [r0, #0]
 800d516:	68c3      	ldr	r3, [r0, #12]
 800d518:	4718      	bx	r3
 800d51a:	bf00      	nop

0800d51c <validate>:
 800d51c:	6983      	ldr	r3, [r0, #24]
 800d51e:	b510      	push	{r4, lr}
 800d520:	4604      	mov	r4, r0
 800d522:	b123      	cbz	r3, 800d52e <validate+0x12>
 800d524:	4a08      	ldr	r2, [pc, #32]	; (800d548 <validate+0x2c>)
 800d526:	4909      	ldr	r1, [pc, #36]	; (800d54c <validate+0x30>)
 800d528:	2001      	movs	r0, #1
 800d52a:	f7fc fe49 	bl	800a1c0 <acc_log_rss>
 800d52e:	69e3      	ldr	r3, [r4, #28]
 800d530:	b123      	cbz	r3, 800d53c <validate+0x20>
 800d532:	4a07      	ldr	r2, [pc, #28]	; (800d550 <validate+0x34>)
 800d534:	4905      	ldr	r1, [pc, #20]	; (800d54c <validate+0x30>)
 800d536:	2001      	movs	r0, #1
 800d538:	f7fc fe42 	bl	800a1c0 <acc_log_rss>
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d542:	6883      	ldr	r3, [r0, #8]
 800d544:	4718      	bx	r3
 800d546:	bf00      	nop
 800d548:	080188b8 	.word	0x080188b8
 800d54c:	0801899c 	.word	0x0801899c
 800d550:	080188cc 	.word	0x080188cc

0800d554 <acc_element_crop_init>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4604      	mov	r4, r0
 800d558:	4608      	mov	r0, r1
 800d55a:	4615      	mov	r5, r2
 800d55c:	f000 fb4a 	bl	800dbf4 <acc_element_sizeof>
 800d560:	4a04      	ldr	r2, [pc, #16]	; (800d574 <acc_element_crop_init+0x20>)
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <acc_element_crop_init+0x24>)
 800d564:	4905      	ldr	r1, [pc, #20]	; (800d57c <acc_element_crop_init+0x28>)
 800d566:	6061      	str	r1, [r4, #4]
 800d568:	fb05 f000 	mul.w	r0, r5, r0
 800d56c:	63a0      	str	r0, [r4, #56]	; 0x38
 800d56e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	0800d51d 	.word	0x0800d51d
 800d578:	0800d515 	.word	0x0800d515
 800d57c:	0800d505 	.word	0x0800d505

0800d580 <noise_level_normalization_u16>:
 800d580:	0849      	lsrs	r1, r1, #1
 800d582:	d014      	beq.n	800d5ae <noise_level_normalization_u16+0x2e>
 800d584:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d588:	b410      	push	{r4}
 800d58a:	3802      	subs	r0, #2
 800d58c:	1e8c      	subs	r4, r1, #2
 800d58e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800d592:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800d596:	fb03 f101 	mul.w	r1, r3, r1
 800d59a:	4284      	cmp	r4, r0
 800d59c:	fb91 f1f2 	sdiv	r1, r1, r2
 800d5a0:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800d5a4:	8001      	strh	r1, [r0, #0]
 800d5a6:	d1f2      	bne.n	800d58e <noise_level_normalization_u16+0xe>
 800d5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	4770      	bx	lr

0800d5b0 <event>:
 800d5b0:	b570      	push	{r4, r5, r6, lr}
 800d5b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d5b4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800d5b6:	6819      	ldr	r1, [r3, #0]
 800d5b8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800d5ba:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 800d5bc:	4604      	mov	r4, r0
 800d5be:	6900      	ldr	r0, [r0, #16]
 800d5c0:	47a8      	blx	r5
 800d5c2:	6820      	ldr	r0, [r4, #0]
 800d5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5c8:	6843      	ldr	r3, [r0, #4]
 800d5ca:	4718      	bx	r3

0800d5cc <reset>:
 800d5cc:	6800      	ldr	r0, [r0, #0]
 800d5ce:	68c3      	ldr	r3, [r0, #12]
 800d5d0:	4718      	bx	r3
 800d5d2:	bf00      	nop

0800d5d4 <validate>:
 800d5d4:	6983      	ldr	r3, [r0, #24]
 800d5d6:	b510      	push	{r4, lr}
 800d5d8:	4604      	mov	r4, r0
 800d5da:	b123      	cbz	r3, 800d5e6 <validate+0x12>
 800d5dc:	4a08      	ldr	r2, [pc, #32]	; (800d600 <validate+0x2c>)
 800d5de:	4909      	ldr	r1, [pc, #36]	; (800d604 <validate+0x30>)
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	f7fc fded 	bl	800a1c0 <acc_log_rss>
 800d5e6:	69e3      	ldr	r3, [r4, #28]
 800d5e8:	b123      	cbz	r3, 800d5f4 <validate+0x20>
 800d5ea:	4a07      	ldr	r2, [pc, #28]	; (800d608 <validate+0x34>)
 800d5ec:	4905      	ldr	r1, [pc, #20]	; (800d604 <validate+0x30>)
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	f7fc fde6 	bl	800a1c0 <acc_log_rss>
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fa:	6883      	ldr	r3, [r0, #8]
 800d5fc:	4718      	bx	r3
 800d5fe:	bf00      	nop
 800d600:	080188b8 	.word	0x080188b8
 800d604:	080189f0 	.word	0x080189f0
 800d608:	080188cc 	.word	0x080188cc

0800d60c <acc_element_noise_level_normalization_init>:
 800d60c:	2902      	cmp	r1, #2
 800d60e:	b510      	push	{r4, lr}
 800d610:	8702      	strh	r2, [r0, #56]	; 0x38
 800d612:	8743      	strh	r3, [r0, #58]	; 0x3a
 800d614:	d00b      	beq.n	800d62e <acc_element_noise_level_normalization_init+0x22>
 800d616:	2904      	cmp	r1, #4
 800d618:	d009      	beq.n	800d62e <acc_element_noise_level_normalization_init+0x22>
 800d61a:	2400      	movs	r4, #0
 800d61c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800d61e:	4b09      	ldr	r3, [pc, #36]	; (800d644 <acc_element_noise_level_normalization_init+0x38>)
 800d620:	4a09      	ldr	r2, [pc, #36]	; (800d648 <acc_element_noise_level_normalization_init+0x3c>)
 800d622:	490a      	ldr	r1, [pc, #40]	; (800d64c <acc_element_noise_level_normalization_init+0x40>)
 800d624:	4620      	mov	r0, r4
 800d626:	f7fc fdcb 	bl	800a1c0 <acc_log_rss>
 800d62a:	4620      	mov	r0, r4
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	4908      	ldr	r1, [pc, #32]	; (800d650 <acc_element_noise_level_normalization_init+0x44>)
 800d630:	4a08      	ldr	r2, [pc, #32]	; (800d654 <acc_element_noise_level_normalization_init+0x48>)
 800d632:	4c09      	ldr	r4, [pc, #36]	; (800d658 <acc_element_noise_level_normalization_init+0x4c>)
 800d634:	4b09      	ldr	r3, [pc, #36]	; (800d65c <acc_element_noise_level_normalization_init+0x50>)
 800d636:	63c4      	str	r4, [r0, #60]	; 0x3c
 800d638:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d63c:	60c3      	str	r3, [r0, #12]
 800d63e:	2001      	movs	r0, #1
 800d640:	bd10      	pop	{r4, pc}
 800d642:	bf00      	nop
 800d644:	080189ac 	.word	0x080189ac
 800d648:	080189d8 	.word	0x080189d8
 800d64c:	080189f0 	.word	0x080189f0
 800d650:	0800d5b1 	.word	0x0800d5b1
 800d654:	0800d5d5 	.word	0x0800d5d5
 800d658:	0800d581 	.word	0x0800d581
 800d65c:	0800d5cd 	.word	0x0800d5cd

0800d660 <event>:
 800d660:	b510      	push	{r4, lr}
 800d662:	4604      	mov	r4, r0
 800d664:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d666:	4798      	blx	r3
 800d668:	6820      	ldr	r0, [r4, #0]
 800d66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d66e:	6843      	ldr	r3, [r0, #4]
 800d670:	4718      	bx	r3
 800d672:	bf00      	nop

0800d674 <reset>:
 800d674:	6800      	ldr	r0, [r0, #0]
 800d676:	68c3      	ldr	r3, [r0, #12]
 800d678:	4718      	bx	r3
 800d67a:	bf00      	nop

0800d67c <phase_compensate_q3_12_complex>:
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	b085      	sub	sp, #20
 800d682:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d684:	f9b0 2044 	ldrsh.w	r2, [r0, #68]	; 0x44
 800d688:	6905      	ldr	r5, [r0, #16]
 800d68a:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800d68e:	af00      	add	r7, sp, #0
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	60ba      	str	r2, [r7, #8]
 800d694:	b383      	cbz	r3, 800d6f8 <phase_compensate_q3_12_complex+0x7c>
 800d696:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800d69a:	f10a 0b08 	add.w	fp, sl, #8
 800d69e:	f04f 0900 	mov.w	r9, #0
 800d6a2:	f02b 0307 	bic.w	r3, fp, #7
 800d6a6:	607b      	str	r3, [r7, #4]
 800d6a8:	464e      	mov	r6, r9
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	46eb      	mov	fp, sp
 800d6ae:	ebad 0d03 	sub.w	sp, sp, r3
 800d6b2:	466c      	mov	r4, sp
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4652      	mov	r2, sl
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f002 fcef 	bl	801009c <memcpy>
 800d6be:	eb04 020a 	add.w	r2, r4, sl
 800d6c2:	8026      	strh	r6, [r4, #0]
 800d6c4:	8066      	strh	r6, [r4, #2]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f822 6c04 	strh.w	r6, [r2, #-4]
 800d6cc:	f822 6c02 	strh.w	r6, [r2, #-2]
 800d6d0:	68b9      	ldr	r1, [r7, #8]
 800d6d2:	4642      	mov	r2, r8
 800d6d4:	f001 fa7c 	bl	800ebd0 <acc_alg_phase_estimation_q3_12>
 800d6d8:	4641      	mov	r1, r8
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7fb f920 	bl	8008920 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	4642      	mov	r2, r8
 800d6e4:	4621      	mov	r1, r4
 800d6e6:	f7fb f8bf 	bl	8008868 <acc_alg_basic_math_q3_12_complex_mul>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f109 0901 	add.w	r9, r9, #1
 800d6f0:	454b      	cmp	r3, r9
 800d6f2:	4455      	add	r5, sl
 800d6f4:	46dd      	mov	sp, fp
 800d6f6:	d1d8      	bne.n	800d6aa <phase_compensate_q3_12_complex+0x2e>
 800d6f8:	3714      	adds	r7, #20
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d700 <validate>:
 800d700:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800d704:	429a      	cmp	r2, r3
 800d706:	b510      	push	{r4, lr}
 800d708:	d113      	bne.n	800d732 <validate+0x32>
 800d70a:	6983      	ldr	r3, [r0, #24]
 800d70c:	4604      	mov	r4, r0
 800d70e:	b123      	cbz	r3, 800d71a <validate+0x1a>
 800d710:	4a0b      	ldr	r2, [pc, #44]	; (800d740 <validate+0x40>)
 800d712:	490c      	ldr	r1, [pc, #48]	; (800d744 <validate+0x44>)
 800d714:	2001      	movs	r0, #1
 800d716:	f7fc fd53 	bl	800a1c0 <acc_log_rss>
 800d71a:	69e3      	ldr	r3, [r4, #28]
 800d71c:	b123      	cbz	r3, 800d728 <validate+0x28>
 800d71e:	4a0a      	ldr	r2, [pc, #40]	; (800d748 <validate+0x48>)
 800d720:	4908      	ldr	r1, [pc, #32]	; (800d744 <validate+0x44>)
 800d722:	2001      	movs	r0, #1
 800d724:	f7fc fd4c 	bl	800a1c0 <acc_log_rss>
 800d728:	6820      	ldr	r0, [r4, #0]
 800d72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d72e:	6883      	ldr	r3, [r0, #8]
 800d730:	4718      	bx	r3
 800d732:	4a06      	ldr	r2, [pc, #24]	; (800d74c <validate+0x4c>)
 800d734:	4903      	ldr	r1, [pc, #12]	; (800d744 <validate+0x44>)
 800d736:	2000      	movs	r0, #0
 800d738:	f7fc fd42 	bl	800a1c0 <acc_log_rss>
 800d73c:	2000      	movs	r0, #0
 800d73e:	bd10      	pop	{r4, pc}
 800d740:	080188b8 	.word	0x080188b8
 800d744:	08018a14 	.word	0x08018a14
 800d748:	080188cc 	.word	0x080188cc
 800d74c:	08018878 	.word	0x08018878

0800d750 <acc_element_phase_compensation_init>:
 800d750:	eddf 6a17 	vldr	s13, [pc, #92]	; 800d7b0 <acc_element_phase_compensation_init+0x60>
 800d754:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d760:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d764:	ee20 0a26 	vmul.f32	s0, s0, s13
 800d768:	bfb8      	it	lt
 800d76a:	eef0 7a47 	vmovlt.f32	s15, s14
 800d76e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d772:	b538      	push	{r3, r4, r5, lr}
 800d774:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d778:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
 800d77c:	4b0d      	ldr	r3, [pc, #52]	; (800d7b4 <acc_element_phase_compensation_init+0x64>)
 800d77e:	4d0e      	ldr	r5, [pc, #56]	; (800d7b8 <acc_element_phase_compensation_init+0x68>)
 800d780:	4c0e      	ldr	r4, [pc, #56]	; (800d7bc <acc_element_phase_compensation_init+0x6c>)
 800d782:	60c3      	str	r3, [r0, #12]
 800d784:	ee10 3a10 	vmov	r3, s0
 800d788:	2907      	cmp	r1, #7
 800d78a:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800d78e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800d792:	d008      	beq.n	800d7a6 <acc_element_phase_compensation_init+0x56>
 800d794:	2400      	movs	r4, #0
 800d796:	6384      	str	r4, [r0, #56]	; 0x38
 800d798:	4a09      	ldr	r2, [pc, #36]	; (800d7c0 <acc_element_phase_compensation_init+0x70>)
 800d79a:	490a      	ldr	r1, [pc, #40]	; (800d7c4 <acc_element_phase_compensation_init+0x74>)
 800d79c:	4620      	mov	r0, r4
 800d79e:	f7fc fd0f 	bl	800a1c0 <acc_log_rss>
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	4b08      	ldr	r3, [pc, #32]	; (800d7c8 <acc_element_phase_compensation_init+0x78>)
 800d7a8:	6383      	str	r3, [r0, #56]	; 0x38
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	bd38      	pop	{r3, r4, r5, pc}
 800d7ae:	bf00      	nop
 800d7b0:	45800000 	.word	0x45800000
 800d7b4:	0800d675 	.word	0x0800d675
 800d7b8:	0800d661 	.word	0x0800d661
 800d7bc:	0800d701 	.word	0x0800d701
 800d7c0:	080189dc 	.word	0x080189dc
 800d7c4:	08018a14 	.word	0x08018a14
 800d7c8:	0800d67d 	.word	0x0800d67d

0800d7cc <saturation_check_u16>:
 800d7cc:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800d838 <saturation_check_u16+0x6c>
 800d7d0:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800d83c <saturation_check_u16+0x70>
 800d7d4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d7d8:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800d7dc:	0849      	lsrs	r1, r1, #1
 800d7de:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800d7e2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d7e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d7ea:	d023      	beq.n	800d834 <saturation_check_u16+0x68>
 800d7ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d7f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f4:	ee17 3a10 	vmov	r3, s14
 800d7f8:	b410      	push	{r4}
 800d7fa:	b29c      	uxth	r4, r3
 800d7fc:	ee17 3a90 	vmov	r3, s15
 800d800:	b29a      	uxth	r2, r3
 800d802:	8803      	ldrh	r3, [r0, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	d911      	bls.n	800d82c <saturation_check_u16+0x60>
 800d808:	429c      	cmp	r4, r3
 800d80a:	d20f      	bcs.n	800d82c <saturation_check_u16+0x60>
 800d80c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d810:	3902      	subs	r1, #2
 800d812:	e005      	b.n	800d820 <saturation_check_u16+0x54>
 800d814:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d818:	4293      	cmp	r3, r2
 800d81a:	d207      	bcs.n	800d82c <saturation_check_u16+0x60>
 800d81c:	42a3      	cmp	r3, r4
 800d81e:	d905      	bls.n	800d82c <saturation_check_u16+0x60>
 800d820:	4288      	cmp	r0, r1
 800d822:	d1f7      	bne.n	800d814 <saturation_check_u16+0x48>
 800d824:	2000      	movs	r0, #0
 800d826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	2001      	movs	r0, #1
 800d82e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	4608      	mov	r0, r1
 800d836:	4770      	bx	lr
 800d838:	42c80000 	.word	0x42c80000
 800d83c:	477fff00 	.word	0x477fff00

0800d840 <event>:
 800d840:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d842:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d844:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 800d848:	6811      	ldr	r1, [r2, #0]
 800d84a:	b570      	push	{r4, r5, r6, lr}
 800d84c:	4604      	mov	r4, r0
 800d84e:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800d852:	4798      	blx	r3
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	7028      	strb	r0, [r5, #0]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	4618      	mov	r0, r3
 800d85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d860:	4710      	bx	r2
 800d862:	bf00      	nop

0800d864 <reset>:
 800d864:	6800      	ldr	r0, [r0, #0]
 800d866:	68c3      	ldr	r3, [r0, #12]
 800d868:	4718      	bx	r3
 800d86a:	bf00      	nop

0800d86c <validate>:
 800d86c:	6983      	ldr	r3, [r0, #24]
 800d86e:	b510      	push	{r4, lr}
 800d870:	4604      	mov	r4, r0
 800d872:	b123      	cbz	r3, 800d87e <validate+0x12>
 800d874:	4a08      	ldr	r2, [pc, #32]	; (800d898 <validate+0x2c>)
 800d876:	4909      	ldr	r1, [pc, #36]	; (800d89c <validate+0x30>)
 800d878:	2001      	movs	r0, #1
 800d87a:	f7fc fca1 	bl	800a1c0 <acc_log_rss>
 800d87e:	69e3      	ldr	r3, [r4, #28]
 800d880:	b123      	cbz	r3, 800d88c <validate+0x20>
 800d882:	4a07      	ldr	r2, [pc, #28]	; (800d8a0 <validate+0x34>)
 800d884:	4905      	ldr	r1, [pc, #20]	; (800d89c <validate+0x30>)
 800d886:	2001      	movs	r0, #1
 800d888:	f7fc fc9a 	bl	800a1c0 <acc_log_rss>
 800d88c:	6820      	ldr	r0, [r4, #0]
 800d88e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d892:	6883      	ldr	r3, [r0, #8]
 800d894:	4718      	bx	r3
 800d896:	bf00      	nop
 800d898:	080188b8 	.word	0x080188b8
 800d89c:	08018a54 	.word	0x08018a54
 800d8a0:	080188cc 	.word	0x080188cc

0800d8a4 <acc_element_saturation_check_init>:
 800d8a4:	2902      	cmp	r1, #2
 800d8a6:	b510      	push	{r4, lr}
 800d8a8:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 800d8ac:	d00b      	beq.n	800d8c6 <acc_element_saturation_check_init+0x22>
 800d8ae:	2904      	cmp	r1, #4
 800d8b0:	d009      	beq.n	800d8c6 <acc_element_saturation_check_init+0x22>
 800d8b2:	2400      	movs	r4, #0
 800d8b4:	63c4      	str	r4, [r0, #60]	; 0x3c
 800d8b6:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <acc_element_saturation_check_init+0x38>)
 800d8b8:	4a09      	ldr	r2, [pc, #36]	; (800d8e0 <acc_element_saturation_check_init+0x3c>)
 800d8ba:	490a      	ldr	r1, [pc, #40]	; (800d8e4 <acc_element_saturation_check_init+0x40>)
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f7fc fc7f 	bl	800a1c0 <acc_log_rss>
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	4908      	ldr	r1, [pc, #32]	; (800d8e8 <acc_element_saturation_check_init+0x44>)
 800d8c8:	4a08      	ldr	r2, [pc, #32]	; (800d8ec <acc_element_saturation_check_init+0x48>)
 800d8ca:	4c09      	ldr	r4, [pc, #36]	; (800d8f0 <acc_element_saturation_check_init+0x4c>)
 800d8cc:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <acc_element_saturation_check_init+0x50>)
 800d8ce:	63c4      	str	r4, [r0, #60]	; 0x3c
 800d8d0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d8d4:	60c3      	str	r3, [r0, #12]
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	bd10      	pop	{r4, pc}
 800d8da:	bf00      	nop
 800d8dc:	08018a30 	.word	0x08018a30
 800d8e0:	080189d8 	.word	0x080189d8
 800d8e4:	08018a54 	.word	0x08018a54
 800d8e8:	0800d841 	.word	0x0800d841
 800d8ec:	0800d86d 	.word	0x0800d86d
 800d8f0:	0800d7cd 	.word	0x0800d7cd
 800d8f4:	0800d865 	.word	0x0800d865

0800d8f8 <reset>:
 800d8f8:	69c3      	ldr	r3, [r0, #28]
 800d8fa:	6800      	ldr	r0, [r0, #0]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	701a      	strb	r2, [r3, #0]
 800d900:	68c3      	ldr	r3, [r0, #12]
 800d902:	4718      	bx	r3

0800d904 <event>:
 800d904:	b570      	push	{r4, r5, r6, lr}
 800d906:	69c5      	ldr	r5, [r0, #28]
 800d908:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d90a:	782b      	ldrb	r3, [r5, #0]
 800d90c:	6812      	ldr	r2, [r2, #0]
 800d90e:	4604      	mov	r4, r0
 800d910:	1d2e      	adds	r6, r5, #4
 800d912:	6900      	ldr	r0, [r0, #16]
 800d914:	b94b      	cbnz	r3, 800d92a <event+0x26>
 800d916:	4631      	mov	r1, r6
 800d918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d91a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800d91e:	4798      	blx	r3
 800d920:	6820      	ldr	r0, [r4, #0]
 800d922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d926:	6843      	ldr	r3, [r0, #4]
 800d928:	4718      	bx	r3
 800d92a:	4601      	mov	r1, r0
 800d92c:	4630      	mov	r0, r6
 800d92e:	f002 fbb5 	bl	801009c <memcpy>
 800d932:	2300      	movs	r3, #0
 800d934:	702b      	strb	r3, [r5, #0]
 800d936:	e7f3      	b.n	800d920 <event+0x1c>

0800d938 <filter_q3_12_complex>:
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	4604      	mov	r4, r0
 800d93c:	ed2d 8b02 	vpush	{d8}
 800d940:	2007      	movs	r0, #7
 800d942:	eeb0 8a40 	vmov.f32	s16, s0
 800d946:	4616      	mov	r6, r2
 800d948:	460d      	mov	r5, r1
 800d94a:	f000 f953 	bl	800dbf4 <acc_element_sizeof>
 800d94e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d990 <filter_q3_12_complex+0x58>
 800d952:	fbb6 f3f0 	udiv	r3, r6, r0
 800d956:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d962:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800d966:	ee28 8a07 	vmul.f32	s16, s16, s14
 800d96a:	bfb8      	it	lt
 800d96c:	eeb0 0a67 	vmovlt.f32	s0, s15
 800d970:	ee38 8a00 	vadd.f32	s16, s16, s0
 800d974:	4629      	mov	r1, r5
 800d976:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800d97a:	4620      	mov	r0, r4
 800d97c:	ee18 2a10 	vmov	r2, s16
 800d980:	ecbd 8b02 	vpop	{d8}
 800d984:	b212      	sxth	r2, r2
 800d986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d98a:	f001 b8f3 	b.w	800eb74 <acc_alg_basic_exponential_smoothing_q3_12_complex>
 800d98e:	bf00      	nop
 800d990:	45800000 	.word	0x45800000

0800d994 <validate>:
 800d994:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800d998:	429a      	cmp	r2, r3
 800d99a:	b510      	push	{r4, lr}
 800d99c:	d011      	beq.n	800d9c2 <validate+0x2e>
 800d99e:	6982      	ldr	r2, [r0, #24]
 800d9a0:	b942      	cbnz	r2, 800d9b4 <validate+0x20>
 800d9a2:	69c1      	ldr	r1, [r0, #28]
 800d9a4:	3104      	adds	r1, #4
 800d9a6:	428b      	cmp	r3, r1
 800d9a8:	d112      	bne.n	800d9d0 <validate+0x3c>
 800d9aa:	6800      	ldr	r0, [r0, #0]
 800d9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b0:	6883      	ldr	r3, [r0, #8]
 800d9b2:	4718      	bx	r3
 800d9b4:	4a09      	ldr	r2, [pc, #36]	; (800d9dc <validate+0x48>)
 800d9b6:	490a      	ldr	r1, [pc, #40]	; (800d9e0 <validate+0x4c>)
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	f7fc fc01 	bl	800a1c0 <acc_log_rss>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	4a08      	ldr	r2, [pc, #32]	; (800d9e4 <validate+0x50>)
 800d9c4:	4906      	ldr	r1, [pc, #24]	; (800d9e0 <validate+0x4c>)
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	f7fc fbfa 	bl	800a1c0 <acc_log_rss>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	bd10      	pop	{r4, pc}
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4903      	ldr	r1, [pc, #12]	; (800d9e0 <validate+0x4c>)
 800d9d4:	4a04      	ldr	r2, [pc, #16]	; (800d9e8 <validate+0x54>)
 800d9d6:	f7fc fbf3 	bl	800a1c0 <acc_log_rss>
 800d9da:	e7f0      	b.n	800d9be <validate+0x2a>
 800d9dc:	08018ac0 	.word	0x08018ac0
 800d9e0:	08018a9c 	.word	0x08018a9c
 800d9e4:	08018a70 	.word	0x08018a70
 800d9e8:	08018ae0 	.word	0x08018ae0

0800d9ec <acc_element_time_domain_low_pass_filter_init>:
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	4a0b      	ldr	r2, [pc, #44]	; (800da1c <acc_element_time_domain_low_pass_filter_init+0x30>)
 800d9f0:	4c0b      	ldr	r4, [pc, #44]	; (800da20 <acc_element_time_domain_low_pass_filter_init+0x34>)
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <acc_element_time_domain_low_pass_filter_init+0x38>)
 800d9f4:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800d9f8:	2907      	cmp	r1, #7
 800d9fa:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800d9fe:	60c3      	str	r3, [r0, #12]
 800da00:	d008      	beq.n	800da14 <acc_element_time_domain_low_pass_filter_init+0x28>
 800da02:	2400      	movs	r4, #0
 800da04:	6384      	str	r4, [r0, #56]	; 0x38
 800da06:	4a08      	ldr	r2, [pc, #32]	; (800da28 <acc_element_time_domain_low_pass_filter_init+0x3c>)
 800da08:	4908      	ldr	r1, [pc, #32]	; (800da2c <acc_element_time_domain_low_pass_filter_init+0x40>)
 800da0a:	4620      	mov	r0, r4
 800da0c:	f7fc fbd8 	bl	800a1c0 <acc_log_rss>
 800da10:	4620      	mov	r0, r4
 800da12:	bd10      	pop	{r4, pc}
 800da14:	4b06      	ldr	r3, [pc, #24]	; (800da30 <acc_element_time_domain_low_pass_filter_init+0x44>)
 800da16:	6383      	str	r3, [r0, #56]	; 0x38
 800da18:	2001      	movs	r0, #1
 800da1a:	bd10      	pop	{r4, pc}
 800da1c:	0800d995 	.word	0x0800d995
 800da20:	0800d905 	.word	0x0800d905
 800da24:	0800d8f9 	.word	0x0800d8f9
 800da28:	080189dc 	.word	0x080189dc
 800da2c:	08018a9c 	.word	0x08018a9c
 800da30:	0800d939 	.word	0x0800d939

0800da34 <consume>:
 800da34:	b510      	push	{r4, lr}
 800da36:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800da38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800da3c:	740b      	strb	r3, [r1, #16]
 800da3e:	4604      	mov	r4, r0
 800da40:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 800da44:	6900      	ldr	r0, [r0, #16]
 800da46:	4798      	blx	r3
 800da48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da4a:	2200      	movs	r2, #0
 800da4c:	60da      	str	r2, [r3, #12]
 800da4e:	bd10      	pop	{r4, pc}

0800da50 <reset>:
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop

0800da54 <validate>:
 800da54:	6983      	ldr	r3, [r0, #24]
 800da56:	b510      	push	{r4, lr}
 800da58:	4604      	mov	r4, r0
 800da5a:	b123      	cbz	r3, 800da66 <validate+0x12>
 800da5c:	4a0b      	ldr	r2, [pc, #44]	; (800da8c <validate+0x38>)
 800da5e:	490c      	ldr	r1, [pc, #48]	; (800da90 <validate+0x3c>)
 800da60:	2001      	movs	r0, #1
 800da62:	f7fc fbad 	bl	800a1c0 <acc_log_rss>
 800da66:	69e3      	ldr	r3, [r4, #28]
 800da68:	b123      	cbz	r3, 800da74 <validate+0x20>
 800da6a:	4a0a      	ldr	r2, [pc, #40]	; (800da94 <validate+0x40>)
 800da6c:	4908      	ldr	r1, [pc, #32]	; (800da90 <validate+0x3c>)
 800da6e:	2001      	movs	r0, #1
 800da70:	f7fc fba6 	bl	800a1c0 <acc_log_rss>
 800da74:	6963      	ldr	r3, [r4, #20]
 800da76:	b133      	cbz	r3, 800da86 <validate+0x32>
 800da78:	4a07      	ldr	r2, [pc, #28]	; (800da98 <validate+0x44>)
 800da7a:	4905      	ldr	r1, [pc, #20]	; (800da90 <validate+0x3c>)
 800da7c:	2000      	movs	r0, #0
 800da7e:	f7fc fb9f 	bl	800a1c0 <acc_log_rss>
 800da82:	2000      	movs	r0, #0
 800da84:	bd10      	pop	{r4, pc}
 800da86:	2001      	movs	r0, #1
 800da88:	bd10      	pop	{r4, pc}
 800da8a:	bf00      	nop
 800da8c:	080188b8 	.word	0x080188b8
 800da90:	08018b08 	.word	0x08018b08
 800da94:	080188cc 	.word	0x080188cc
 800da98:	08018b20 	.word	0x08018b20

0800da9c <acc_element_sink_callback_init>:
 800da9c:	b430      	push	{r4, r5}
 800da9e:	4d05      	ldr	r5, [pc, #20]	; (800dab4 <acc_element_sink_callback_init+0x18>)
 800daa0:	4c05      	ldr	r4, [pc, #20]	; (800dab8 <acc_element_sink_callback_init+0x1c>)
 800daa2:	4b06      	ldr	r3, [pc, #24]	; (800dabc <acc_element_sink_callback_init+0x20>)
 800daa4:	6401      	str	r1, [r0, #64]	; 0x40
 800daa6:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800daaa:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800daae:	60c3      	str	r3, [r0, #12]
 800dab0:	bc30      	pop	{r4, r5}
 800dab2:	4770      	bx	lr
 800dab4:	0800da35 	.word	0x0800da35
 800dab8:	0800da55 	.word	0x0800da55
 800dabc:	0800da51 	.word	0x0800da51

0800dac0 <acc_element_source_adc_init>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	460c      	mov	r4, r1
 800dac4:	4605      	mov	r5, r0
 800dac6:	4608      	mov	r0, r1
 800dac8:	4616      	mov	r6, r2
 800daca:	f7fc f9cb 	bl	8009e64 <acc_base_configuration_print>
 800dace:	4620      	mov	r0, r4
 800dad0:	f7fb ff80 	bl	80099d4 <acc_base_configuration_sensor_get>
 800dad4:	63a8      	str	r0, [r5, #56]	; 0x38
 800dad6:	b150      	cbz	r0, 800daee <acc_element_source_adc_init+0x2e>
 800dad8:	4620      	mov	r0, r4
 800dada:	4631      	mov	r1, r6
 800dadc:	f7fa fbc0 	bl	8008260 <acc_sensor_manager_prepare_measurement>
 800dae0:	6428      	str	r0, [r5, #64]	; 0x40
 800dae2:	b150      	cbz	r0, 800dafa <acc_element_source_adc_init+0x3a>
 800dae4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800dae6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 800daea:	2001      	movs	r0, #1
 800daec:	bd70      	pop	{r4, r5, r6, pc}
 800daee:	4620      	mov	r0, r4
 800daf0:	4631      	mov	r1, r6
 800daf2:	f7fa fc27 	bl	8008344 <acc_sensor_manager_prepare_metadata_only>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d1f4      	bne.n	800dae4 <acc_element_source_adc_init+0x24>
 800dafa:	2000      	movs	r0, #0
 800dafc:	bd70      	pop	{r4, r5, r6, pc}
 800dafe:	bf00      	nop

0800db00 <acc_element_source_adc_release>:
 800db00:	b108      	cbz	r0, 800db06 <acc_element_source_adc_release+0x6>
 800db02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800db04:	b900      	cbnz	r0, 800db08 <acc_element_source_adc_release+0x8>
 800db06:	4770      	bx	lr
 800db08:	f7fa bcea 	b.w	80084e0 <acc_sensor_manager_release_measurement>

0800db0c <acc_element_source_adc_reset>:
 800db0c:	6800      	ldr	r0, [r0, #0]
 800db0e:	68c3      	ldr	r3, [r0, #12]
 800db10:	4718      	bx	r3
 800db12:	bf00      	nop

0800db14 <acc_element_source_adc_validate>:
 800db14:	6800      	ldr	r0, [r0, #0]
 800db16:	6883      	ldr	r3, [r0, #8]
 800db18:	4718      	bx	r3
 800db1a:	bf00      	nop

0800db1c <acc_element_source_adc_produce>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800db20:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db22:	6a03      	ldr	r3, [r0, #32]
 800db24:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800db26:	4c28      	ldr	r4, [pc, #160]	; (800dbc8 <acc_element_source_adc_produce+0xac>)
 800db28:	2500      	movs	r5, #0
 800db2a:	6035      	str	r5, [r6, #0]
 800db2c:	600c      	str	r4, [r1, #0]
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800db32:	2e00      	cmp	r6, #0
 800db34:	d033      	beq.n	800db9e <acc_element_source_adc_produce+0x82>
 800db36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800db3a:	4604      	mov	r4, r0
 800db3c:	bb23      	cbnz	r3, 800db88 <acc_element_source_adc_produce+0x6c>
 800db3e:	461d      	mov	r5, r3
 800db40:	e030      	b.n	800dba4 <acc_element_source_adc_produce+0x88>
 800db42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db46:	685e      	ldr	r6, [r3, #4]
 800db48:	6810      	ldr	r0, [r2, #0]
 800db4a:	6967      	ldr	r7, [r4, #20]
 800db4c:	6899      	ldr	r1, [r3, #8]
 800db4e:	0076      	lsls	r6, r6, #1
 800db50:	4632      	mov	r2, r6
 800db52:	4438      	add	r0, r7
 800db54:	f002 faa2 	bl	801009c <memcpy>
 800db58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800db5c:	6813      	ldr	r3, [r2, #0]
 800db5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800db60:	7800      	ldrb	r0, [r0, #0]
 800db62:	4433      	add	r3, r6
 800db64:	6013      	str	r3, [r2, #0]
 800db66:	7008      	strb	r0, [r1, #0]
 800db68:	b90d      	cbnz	r5, 800db6e <acc_element_source_adc_produce+0x52>
 800db6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db6c:	601e      	str	r6, [r3, #0]
 800db6e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800db72:	1e59      	subs	r1, r3, #1
 800db74:	42a9      	cmp	r1, r5
 800db76:	bf08      	it	eq
 800db78:	6ae1      	ldreq	r1, [r4, #44]	; 0x2c
 800db7a:	f105 0501 	add.w	r5, r5, #1
 800db7e:	bf08      	it	eq
 800db80:	600e      	streq	r6, [r1, #0]
 800db82:	42ab      	cmp	r3, r5
 800db84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800db86:	d90c      	bls.n	800dba2 <acc_element_source_adc_produce+0x86>
 800db88:	4630      	mov	r0, r6
 800db8a:	f7fa fc39 	bl	8008400 <acc_sensor_manager_wait_for_adc_output>
 800db8e:	4606      	mov	r6, r0
 800db90:	2800      	cmp	r0, #0
 800db92:	d1d6      	bne.n	800db42 <acc_element_source_adc_produce+0x26>
 800db94:	4b0d      	ldr	r3, [pc, #52]	; (800dbcc <acc_element_source_adc_produce+0xb0>)
 800db96:	4a0e      	ldr	r2, [pc, #56]	; (800dbd0 <acc_element_source_adc_produce+0xb4>)
 800db98:	490e      	ldr	r1, [pc, #56]	; (800dbd4 <acc_element_source_adc_produce+0xb8>)
 800db9a:	f7fc fb11 	bl	800a1c0 <acc_log_rss>
 800db9e:	4630      	mov	r0, r6
 800dba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dba2:	6815      	ldr	r5, [r2, #0]
 800dba4:	6967      	ldr	r7, [r4, #20]
 800dba6:	2002      	movs	r0, #2
 800dba8:	f000 f824 	bl	800dbf4 <acc_element_sizeof>
 800dbac:	4631      	mov	r1, r6
 800dbae:	fbb5 f3f0 	udiv	r3, r5, r0
 800dbb2:	463a      	mov	r2, r7
 800dbb4:	2001      	movs	r0, #1
 800dbb6:	f7fc fb43 	bl	800a240 <acc_probes_execute_uint16>
 800dbba:	6820      	ldr	r0, [r4, #0]
 800dbbc:	2601      	movs	r6, #1
 800dbbe:	6843      	ldr	r3, [r0, #4]
 800dbc0:	4798      	blx	r3
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	51645c3c 	.word	0x51645c3c
 800dbcc:	08018b48 	.word	0x08018b48
 800dbd0:	08018b68 	.word	0x08018b68
 800dbd4:	08018b9c 	.word	0x08018b9c

0800dbd8 <acc_element_source_adc_inject_data>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	4604      	mov	r4, r0
 800dbdc:	6940      	ldr	r0, [r0, #20]
 800dbde:	4615      	mov	r5, r2
 800dbe0:	f002 fa5c 	bl	801009c <memcpy>
 800dbe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbe6:	6820      	ldr	r0, [r4, #0]
 800dbe8:	601d      	str	r5, [r3, #0]
 800dbea:	6843      	ldr	r3, [r0, #4]
 800dbec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbf0:	4718      	bx	r3
 800dbf2:	bf00      	nop

0800dbf4 <acc_element_sizeof>:
 800dbf4:	3801      	subs	r0, #1
 800dbf6:	b2c0      	uxtb	r0, r0
 800dbf8:	2806      	cmp	r0, #6
 800dbfa:	bf9a      	itte	ls
 800dbfc:	4b02      	ldrls	r3, [pc, #8]	; (800dc08 <acc_element_sizeof+0x14>)
 800dbfe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800dc02:	2000      	movhi	r0, #0
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	08018bb4 	.word	0x08018bb4

0800dc0c <acc_element_connect>:
 800dc0c:	6001      	str	r1, [r0, #0]
 800dc0e:	4770      	bx	lr

0800dc10 <acc_cpd_area_calibration_calculate_area_settings>:
 800dc10:	0080      	lsls	r0, r0, #2
 800dc12:	b280      	uxth	r0, r0
 800dc14:	f100 0340 	add.w	r3, r0, #64	; 0x40
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	2b7b      	cmp	r3, #123	; 0x7b
 800dc1c:	8008      	strh	r0, [r1, #0]
 800dc1e:	804b      	strh	r3, [r1, #2]
 800dc20:	d91a      	bls.n	800dc58 <acc_cpd_area_calibration_calculate_area_settings+0x48>
 800dc22:	b410      	push	{r4}
 800dc24:	4c13      	ldr	r4, [pc, #76]	; (800dc74 <acc_cpd_area_calibration_calculate_area_settings+0x64>)
 800dc26:	8048      	strh	r0, [r1, #2]
 800dc28:	089a      	lsrs	r2, r3, #2
 800dc2a:	fba4 0202 	umull	r0, r2, r4, r2
 800dc2e:	0892      	lsrs	r2, r2, #2
 800dc30:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 800dc34:	2000      	movs	r0, #0
 800dc36:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800dc3a:	2403      	movs	r4, #3
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	810c      	strh	r4, [r1, #8]
 800dc40:	800b      	strh	r3, [r1, #0]
 800dc42:	808a      	strh	r2, [r1, #4]
 800dc44:	80ca      	strh	r2, [r1, #6]
 800dc46:	814a      	strh	r2, [r1, #10]
 800dc48:	820a      	strh	r2, [r1, #16]
 800dc4a:	824a      	strh	r2, [r1, #18]
 800dc4c:	8188      	strh	r0, [r1, #12]
 800dc4e:	81c8      	strh	r0, [r1, #14]
 800dc50:	8288      	strh	r0, [r1, #20]
 800dc52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	2301      	movs	r3, #1
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2003      	movs	r0, #3
 800dc5e:	808b      	strh	r3, [r1, #4]
 800dc60:	814b      	strh	r3, [r1, #10]
 800dc62:	818b      	strh	r3, [r1, #12]
 800dc64:	820b      	strh	r3, [r1, #16]
 800dc66:	80ca      	strh	r2, [r1, #6]
 800dc68:	824a      	strh	r2, [r1, #18]
 800dc6a:	828a      	strh	r2, [r1, #20]
 800dc6c:	8108      	strh	r0, [r1, #8]
 800dc6e:	81c8      	strh	r0, [r1, #14]
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	21084211 	.word	0x21084211

0800dc78 <acc_cpd_cbank_calibration>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	2200      	movs	r2, #0
 800dc80:	6800      	ldr	r0, [r0, #0]
 800dc82:	460e      	mov	r6, r1
 800dc84:	a904      	add	r1, sp, #16
 800dc86:	f7fe fc07 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800dc8a:	9d04      	ldr	r5, [sp, #16]
 800dc8c:	494f      	ldr	r1, [pc, #316]	; (800ddcc <acc_cpd_cbank_calibration+0x154>)
 800dc8e:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800dc92:	4628      	mov	r0, r5
 800dc94:	f002 fa02 	bl	801009c <memcpy>
 800dc98:	6863      	ldr	r3, [r4, #4]
 800dc9a:	494d      	ldr	r1, [pc, #308]	; (800ddd0 <acc_cpd_cbank_calibration+0x158>)
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	220c      	movs	r2, #12
 800dca0:	f001 f8be 	bl	800ee20 <acc_confprogram_patch>
 800dca4:	68a3      	ldr	r3, [r4, #8]
 800dca6:	494a      	ldr	r1, [pc, #296]	; (800ddd0 <acc_cpd_cbank_calibration+0x158>)
 800dca8:	4628      	mov	r0, r5
 800dcaa:	220a      	movs	r2, #10
 800dcac:	f001 f8b8 	bl	800ee20 <acc_confprogram_patch>
 800dcb0:	68e3      	ldr	r3, [r4, #12]
 800dcb2:	4947      	ldr	r1, [pc, #284]	; (800ddd0 <acc_cpd_cbank_calibration+0x158>)
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	220b      	movs	r2, #11
 800dcb8:	f001 f8b2 	bl	800ee20 <acc_confprogram_patch>
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	4944      	ldr	r1, [pc, #272]	; (800ddd0 <acc_cpd_cbank_calibration+0x158>)
 800dcc0:	8a23      	ldrh	r3, [r4, #16]
 800dcc2:	2209      	movs	r2, #9
 800dcc4:	f001 f8ac 	bl	800ee20 <acc_confprogram_patch>
 800dcc8:	6820      	ldr	r0, [r4, #0]
 800dcca:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800dcce:	2100      	movs	r1, #0
 800dcd0:	f7fe fbe4 	bl	800c49c <acc_sensor_protocol_load_program>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d031      	beq.n	800dd3c <acc_cpd_cbank_calibration+0xc4>
 800dcd8:	4b3e      	ldr	r3, [pc, #248]	; (800ddd4 <acc_cpd_cbank_calibration+0x15c>)
 800dcda:	6820      	ldr	r0, [r4, #0]
 800dcdc:	8b99      	ldrh	r1, [r3, #28]
 800dcde:	f7fe fc4b 	bl	800c578 <acc_sensor_protocol_run_program>
 800dce2:	4605      	mov	r5, r0
 800dce4:	b1e8      	cbz	r0, 800dd22 <acc_cpd_cbank_calibration+0xaa>
 800dce6:	6824      	ldr	r4, [r4, #0]
 800dce8:	493b      	ldr	r1, [pc, #236]	; (800ddd8 <acc_cpd_cbank_calibration+0x160>)
 800dcea:	4620      	mov	r0, r4
 800dcec:	aa02      	add	r2, sp, #8
 800dcee:	f7fe fc83 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d053      	beq.n	800dd9e <acc_cpd_cbank_calibration+0x126>
 800dcf6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800dcfa:	2901      	cmp	r1, #1
 800dcfc:	d02b      	beq.n	800dd56 <acc_cpd_cbank_calibration+0xde>
 800dcfe:	2903      	cmp	r1, #3
 800dd00:	d038      	beq.n	800dd74 <acc_cpd_cbank_calibration+0xfc>
 800dd02:	9100      	str	r1, [sp, #0]
 800dd04:	4b35      	ldr	r3, [pc, #212]	; (800dddc <acc_cpd_cbank_calibration+0x164>)
 800dd06:	4a36      	ldr	r2, [pc, #216]	; (800dde0 <acc_cpd_cbank_calibration+0x168>)
 800dd08:	4936      	ldr	r1, [pc, #216]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	f7fc fa58 	bl	800a1c0 <acc_log_rss>
 800dd10:	4a35      	ldr	r2, [pc, #212]	; (800dde8 <acc_cpd_cbank_calibration+0x170>)
 800dd12:	4934      	ldr	r1, [pc, #208]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd14:	2000      	movs	r0, #0
 800dd16:	f7fc fa53 	bl	800a1c0 <acc_log_rss>
 800dd1a:	2500      	movs	r5, #0
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	b006      	add	sp, #24
 800dd20:	bd70      	pop	{r4, r5, r6, pc}
 800dd22:	4b32      	ldr	r3, [pc, #200]	; (800ddec <acc_cpd_cbank_calibration+0x174>)
 800dd24:	4a32      	ldr	r2, [pc, #200]	; (800ddf0 <acc_cpd_cbank_calibration+0x178>)
 800dd26:	492f      	ldr	r1, [pc, #188]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd28:	f7fc fa4a 	bl	800a1c0 <acc_log_rss>
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	4a31      	ldr	r2, [pc, #196]	; (800ddf4 <acc_cpd_cbank_calibration+0x17c>)
 800dd30:	492c      	ldr	r1, [pc, #176]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd32:	f7fc fa45 	bl	800a1c0 <acc_log_rss>
 800dd36:	4628      	mov	r0, r5
 800dd38:	b006      	add	sp, #24
 800dd3a:	bd70      	pop	{r4, r5, r6, pc}
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	4a2e      	ldr	r2, [pc, #184]	; (800ddf8 <acc_cpd_cbank_calibration+0x180>)
 800dd40:	4928      	ldr	r1, [pc, #160]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd42:	f7fc fa3d 	bl	800a1c0 <acc_log_rss>
 800dd46:	4628      	mov	r0, r5
 800dd48:	4a2c      	ldr	r2, [pc, #176]	; (800ddfc <acc_cpd_cbank_calibration+0x184>)
 800dd4a:	4926      	ldr	r1, [pc, #152]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd4c:	f7fc fa38 	bl	800a1c0 <acc_log_rss>
 800dd50:	4628      	mov	r0, r5
 800dd52:	b006      	add	sp, #24
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7fe f932 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800dd5c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800dd60:	f7fe fe56 	bl	800ca10 <acc_sensor_protocol_get_error_message>
 800dd64:	4623      	mov	r3, r4
 800dd66:	9000      	str	r0, [sp, #0]
 800dd68:	4a25      	ldr	r2, [pc, #148]	; (800de00 <acc_cpd_cbank_calibration+0x188>)
 800dd6a:	491e      	ldr	r1, [pc, #120]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	f7fc fa27 	bl	800a1c0 <acc_log_rss>
 800dd72:	e7cd      	b.n	800dd10 <acc_cpd_cbank_calibration+0x98>
 800dd74:	aa04      	add	r2, sp, #16
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7fe fc96 	bl	800c6a8 <acc_sensor_protocol_get_indication_payload>
 800dd7c:	b300      	cbz	r0, 800ddc0 <acc_cpd_cbank_calibration+0x148>
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f7fe fd18 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800dd84:	4605      	mov	r5, r0
 800dd86:	b178      	cbz	r0, 800dda8 <acc_cpd_cbank_calibration+0x130>
 800dd88:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dd8c:	6033      	str	r3, [r6, #0]
 800dd8e:	4a1d      	ldr	r2, [pc, #116]	; (800de04 <acc_cpd_cbank_calibration+0x18c>)
 800dd90:	4914      	ldr	r1, [pc, #80]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dd92:	2002      	movs	r0, #2
 800dd94:	f7fc fa14 	bl	800a1c0 <acc_log_rss>
 800dd98:	4628      	mov	r0, r5
 800dd9a:	b006      	add	sp, #24
 800dd9c:	bd70      	pop	{r4, r5, r6, pc}
 800dd9e:	4a1a      	ldr	r2, [pc, #104]	; (800de08 <acc_cpd_cbank_calibration+0x190>)
 800dda0:	4910      	ldr	r1, [pc, #64]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800dda2:	f7fc fa0d 	bl	800a1c0 <acc_log_rss>
 800dda6:	e7b3      	b.n	800dd10 <acc_cpd_cbank_calibration+0x98>
 800dda8:	4b18      	ldr	r3, [pc, #96]	; (800de0c <acc_cpd_cbank_calibration+0x194>)
 800ddaa:	4a19      	ldr	r2, [pc, #100]	; (800de10 <acc_cpd_cbank_calibration+0x198>)
 800ddac:	490d      	ldr	r1, [pc, #52]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800ddae:	f7fc fa07 	bl	800a1c0 <acc_log_rss>
 800ddb2:	4b18      	ldr	r3, [pc, #96]	; (800de14 <acc_cpd_cbank_calibration+0x19c>)
 800ddb4:	4a18      	ldr	r2, [pc, #96]	; (800de18 <acc_cpd_cbank_calibration+0x1a0>)
 800ddb6:	490b      	ldr	r1, [pc, #44]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800ddb8:	2000      	movs	r0, #0
 800ddba:	f7fc fa01 	bl	800a1c0 <acc_log_rss>
 800ddbe:	e7a7      	b.n	800dd10 <acc_cpd_cbank_calibration+0x98>
 800ddc0:	4b12      	ldr	r3, [pc, #72]	; (800de0c <acc_cpd_cbank_calibration+0x194>)
 800ddc2:	4a15      	ldr	r2, [pc, #84]	; (800de18 <acc_cpd_cbank_calibration+0x1a0>)
 800ddc4:	4907      	ldr	r1, [pc, #28]	; (800dde4 <acc_cpd_cbank_calibration+0x16c>)
 800ddc6:	f7fc f9fb 	bl	800a1c0 <acc_log_rss>
 800ddca:	e7f2      	b.n	800ddb2 <acc_cpd_cbank_calibration+0x13a>
 800ddcc:	08012b1c 	.word	0x08012b1c
 800ddd0:	08019918 	.word	0x08019918
 800ddd4:	08012ae8 	.word	0x08012ae8
 800ddd8:	001e8480 	.word	0x001e8480
 800dddc:	08018be8 	.word	0x08018be8
 800dde0:	08018d0c 	.word	0x08018d0c
 800dde4:	08018c40 	.word	0x08018c40
 800dde8:	08018da4 	.word	0x08018da4
 800ddec:	08018bd0 	.word	0x08018bd0
 800ddf0:	08018c94 	.word	0x08018c94
 800ddf4:	08018c98 	.word	0x08018c98
 800ddf8:	08018c10 	.word	0x08018c10
 800ddfc:	08018c58 	.word	0x08018c58
 800de00:	08018ce8 	.word	0x08018ce8
 800de04:	08018d80 	.word	0x08018d80
 800de08:	08018cc8 	.word	0x08018cc8
 800de0c:	08018c04 	.word	0x08018c04
 800de10:	08018d58 	.word	0x08018d58
 800de14:	08018bdc 	.word	0x08018bdc
 800de18:	08018d38 	.word	0x08018d38

0800de1c <acc_cpd_dll_calibration>:
 800de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de20:	4b97      	ldr	r3, [pc, #604]	; (800e080 <acc_cpd_dll_calibration+0x264>)
 800de22:	4e98      	ldr	r6, [pc, #608]	; (800e084 <acc_cpd_dll_calibration+0x268>)
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	b0c3      	sub	sp, #268	; 0x10c
 800de28:	f04f 0902 	mov.w	r9, #2
 800de2c:	4604      	mov	r4, r0
 800de2e:	46cb      	mov	fp, r9
 800de30:	9102      	str	r1, [sp, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f040 8111 	bne.w	800e05a <acc_cpd_dll_calibration+0x23e>
 800de38:	e9d4 1200 	ldrd	r1, r2, [r4]
 800de3c:	68a3      	ldr	r3, [r4, #8]
 800de3e:	9135      	str	r1, [sp, #212]	; 0xd4
 800de40:	68e1      	ldr	r1, [r4, #12]
 800de42:	9236      	str	r2, [sp, #216]	; 0xd8
 800de44:	9337      	str	r3, [sp, #220]	; 0xdc
 800de46:	8a22      	ldrh	r2, [r4, #16]
 800de48:	6963      	ldr	r3, [r4, #20]
 800de4a:	9138      	str	r1, [sp, #224]	; 0xe0
 800de4c:	a835      	add	r0, sp, #212	; 0xd4
 800de4e:	a906      	add	r1, sp, #24
 800de50:	f8cd b0e8 	str.w	fp, [sp, #232]	; 0xe8
 800de54:	f8ad 20e4 	strh.w	r2, [sp, #228]	; 0xe4
 800de58:	933b      	str	r3, [sp, #236]	; 0xec
 800de5a:	f000 f937 	bl	800e0cc <acc_cpd_dly_coarse_calibration>
 800de5e:	4680      	mov	r8, r0
 800de60:	2800      	cmp	r0, #0
 800de62:	f000 8101 	beq.w	800e068 <acc_cpd_dll_calibration+0x24c>
 800de66:	aa0c      	add	r2, sp, #48	; 0x30
 800de68:	a906      	add	r1, sp, #24
 800de6a:	200c      	movs	r0, #12
 800de6c:	f001 fb94 	bl	800f598 <acc_alg_dly_coarse_priority_sort>
 800de70:	2800      	cmp	r0, #0
 800de72:	f000 80e0 	beq.w	800e036 <acc_cpd_dll_calibration+0x21a>
 800de76:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800de7a:	f04f 0a00 	mov.w	sl, #0
 800de7e:	465d      	mov	r5, fp
 800de80:	4b7f      	ldr	r3, [pc, #508]	; (800e080 <acc_cpd_dll_calibration+0x264>)
 800de82:	f839 7b02 	ldrh.w	r7, [r9], #2
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f040 80bb 	bne.w	800e004 <acc_cpd_dll_calibration+0x1e8>
 800de8e:	e9d4 1200 	ldrd	r1, r2, [r4]
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	9135      	str	r1, [sp, #212]	; 0xd4
 800de96:	68e1      	ldr	r1, [r4, #12]
 800de98:	9236      	str	r2, [sp, #216]	; 0xd8
 800de9a:	9337      	str	r3, [sp, #220]	; 0xdc
 800de9c:	8a22      	ldrh	r2, [r4, #16]
 800de9e:	6963      	ldr	r3, [r4, #20]
 800dea0:	9138      	str	r1, [sp, #224]	; 0xe0
 800dea2:	a835      	add	r0, sp, #212	; 0xd4
 800dea4:	a91b      	add	r1, sp, #108	; 0x6c
 800dea6:	e9cd 573a 	strd	r5, r7, [sp, #232]	; 0xe8
 800deaa:	f8ad 20e4 	strh.w	r2, [sp, #228]	; 0xe4
 800deae:	933c      	str	r3, [sp, #240]	; 0xf0
 800deb0:	f000 fd56 	bl	800e960 <acc_cpd_rx_fine_dip_calibration>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	f000 808f 	beq.w	800dfd8 <acc_cpd_dll_calibration+0x1bc>
 800deba:	ab28      	add	r3, sp, #160	; 0xa0
 800debc:	aa35      	add	r2, sp, #212	; 0xd4
 800debe:	a91b      	add	r1, sp, #108	; 0x6c
 800dec0:	2019      	movs	r0, #25
 800dec2:	f001 fbd1 	bl	800f668 <acc_alg_plateau_finder>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d079      	beq.n	800dfbe <acc_cpd_dll_calibration+0x1a2>
 800deca:	3801      	subs	r0, #1
 800decc:	b280      	uxth	r0, r0
 800dece:	f10d 03d6 	add.w	r3, sp, #214	; 0xd6
 800ded2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	9b02      	ldr	r3, [sp, #8]
 800deda:	f8cd 9014 	str.w	r9, [sp, #20]
 800dede:	330c      	adds	r3, #12
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800dee6:	f83b 3b02 	ldrh.w	r3, [fp], #2
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	aa42      	add	r2, sp, #264	; 0x108
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	eb02 0803 	add.w	r8, r2, r3
 800def4:	4631      	mov	r1, r6
 800def6:	f838 3c68 	ldrh.w	r3, [r8, #-104]
 800defa:	9301      	str	r3, [sp, #4]
 800defc:	4a62      	ldr	r2, [pc, #392]	; (800e088 <acc_cpd_dll_calibration+0x26c>)
 800defe:	4b63      	ldr	r3, [pc, #396]	; (800e08c <acc_cpd_dll_calibration+0x270>)
 800df00:	2004      	movs	r0, #4
 800df02:	f7fc f95d 	bl	800a1c0 <acc_log_rss>
 800df06:	4b5e      	ldr	r3, [pc, #376]	; (800e080 <acc_cpd_dll_calibration+0x264>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	46c1      	mov	r9, r8
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f040 808a 	bne.w	800e026 <acc_cpd_dll_calibration+0x20a>
 800df12:	e9d4 1200 	ldrd	r1, r2, [r4]
 800df16:	f839 3c68 	ldrh.w	r3, [r9, #-104]
 800df1a:	9319      	str	r3, [sp, #100]	; 0x64
 800df1c:	9112      	str	r1, [sp, #72]	; 0x48
 800df1e:	68a3      	ldr	r3, [r4, #8]
 800df20:	68e1      	ldr	r1, [r4, #12]
 800df22:	9213      	str	r2, [sp, #76]	; 0x4c
 800df24:	9314      	str	r3, [sp, #80]	; 0x50
 800df26:	8a22      	ldrh	r2, [r4, #16]
 800df28:	6963      	ldr	r3, [r4, #20]
 800df2a:	9115      	str	r1, [sp, #84]	; 0x54
 800df2c:	a812      	add	r0, sp, #72	; 0x48
 800df2e:	9903      	ldr	r1, [sp, #12]
 800df30:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
 800df34:	931a      	str	r3, [sp, #104]	; 0x68
 800df36:	e9cd 5717 	strd	r5, r7, [sp, #92]	; 0x5c
 800df3a:	f001 faa9 	bl	800f490 <acc_cpd_area_calibration>
 800df3e:	4b53      	ldr	r3, [pc, #332]	; (800e08c <acc_cpd_dll_calibration+0x270>)
 800df40:	4a53      	ldr	r2, [pc, #332]	; (800e090 <acc_cpd_dll_calibration+0x274>)
 800df42:	4631      	mov	r1, r6
 800df44:	2800      	cmp	r0, #0
 800df46:	d064      	beq.n	800e012 <acc_cpd_dll_calibration+0x1f6>
 800df48:	464b      	mov	r3, r9
 800df4a:	46d3      	mov	fp, sl
 800df4c:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800df50:	f8dd a008 	ldr.w	sl, [sp, #8]
 800df54:	4a4f      	ldr	r2, [pc, #316]	; (800e094 <acc_cpd_dll_calibration+0x278>)
 800df56:	f8ca 3000 	str.w	r3, [sl]
 800df5a:	4680      	mov	r8, r0
 800df5c:	e9cd 7300 	strd	r7, r3, [sp]
 800df60:	4948      	ldr	r1, [pc, #288]	; (800e084 <acc_cpd_dll_calibration+0x268>)
 800df62:	4b4a      	ldr	r3, [pc, #296]	; (800e08c <acc_cpd_dll_calibration+0x270>)
 800df64:	4c4c      	ldr	r4, [pc, #304]	; (800e098 <acc_cpd_dll_calibration+0x27c>)
 800df66:	2004      	movs	r0, #4
 800df68:	f7fc f92a 	bl	800a1c0 <acc_log_rss>
 800df6c:	ab42      	add	r3, sp, #264	; 0x108
 800df6e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800df72:	46a9      	mov	r9, r5
 800df74:	f833 3cf0 	ldrh.w	r3, [r3, #-240]
 800df78:	f8ca 7004 	str.w	r7, [sl, #4]
 800df7c:	f8ca 9008 	str.w	r9, [sl, #8]
 800df80:	4a46      	ldr	r2, [pc, #280]	; (800e09c <acc_cpd_dll_calibration+0x280>)
 800df82:	4940      	ldr	r1, [pc, #256]	; (800e084 <acc_cpd_dll_calibration+0x268>)
 800df84:	e9cd 7300 	strd	r7, r3, [sp]
 800df88:	2002      	movs	r0, #2
 800df8a:	4623      	mov	r3, r4
 800df8c:	f7fc f918 	bl	800a1c0 <acc_log_rss>
 800df90:	f8da 3000 	ldr.w	r3, [sl]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	4a42      	ldr	r2, [pc, #264]	; (800e0a0 <acc_cpd_dll_calibration+0x284>)
 800df98:	493a      	ldr	r1, [pc, #232]	; (800e084 <acc_cpd_dll_calibration+0x268>)
 800df9a:	4623      	mov	r3, r4
 800df9c:	2002      	movs	r0, #2
 800df9e:	f7fc f90f 	bl	800a1c0 <acc_log_rss>
 800dfa2:	f10b 0201 	add.w	r2, fp, #1
 800dfa6:	9201      	str	r2, [sp, #4]
 800dfa8:	9400      	str	r4, [sp, #0]
 800dfaa:	4623      	mov	r3, r4
 800dfac:	4a3d      	ldr	r2, [pc, #244]	; (800e0a4 <acc_cpd_dll_calibration+0x288>)
 800dfae:	4935      	ldr	r1, [pc, #212]	; (800e084 <acc_cpd_dll_calibration+0x268>)
 800dfb0:	2004      	movs	r0, #4
 800dfb2:	f7fc f905 	bl	800a1c0 <acc_log_rss>
 800dfb6:	4640      	mov	r0, r8
 800dfb8:	b043      	add	sp, #268	; 0x10c
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	4b33      	ldr	r3, [pc, #204]	; (800e08c <acc_cpd_dll_calibration+0x270>)
 800dfc0:	4a39      	ldr	r2, [pc, #228]	; (800e0a8 <acc_cpd_dll_calibration+0x28c>)
 800dfc2:	4631      	mov	r1, r6
 800dfc4:	2004      	movs	r0, #4
 800dfc6:	f7fc f8fb 	bl	800a1c0 <acc_log_rss>
 800dfca:	9700      	str	r7, [sp, #0]
 800dfcc:	4b2f      	ldr	r3, [pc, #188]	; (800e08c <acc_cpd_dll_calibration+0x270>)
 800dfce:	4a37      	ldr	r2, [pc, #220]	; (800e0ac <acc_cpd_dll_calibration+0x290>)
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	2004      	movs	r0, #4
 800dfd4:	f7fc f8f4 	bl	800a1c0 <acc_log_rss>
 800dfd8:	e9cd 5700 	strd	r5, r7, [sp]
 800dfdc:	f10a 0a01 	add.w	sl, sl, #1
 800dfe0:	4b2d      	ldr	r3, [pc, #180]	; (800e098 <acc_cpd_dll_calibration+0x27c>)
 800dfe2:	4a33      	ldr	r2, [pc, #204]	; (800e0b0 <acc_cpd_dll_calibration+0x294>)
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	2004      	movs	r0, #4
 800dfe8:	f7fc f8ea 	bl	800a1c0 <acc_log_rss>
 800dfec:	f1ba 0f0c 	cmp.w	sl, #12
 800dff0:	f47f af46 	bne.w	800de80 <acc_cpd_dll_calibration+0x64>
 800dff4:	2d01      	cmp	r5, #1
 800dff6:	d129      	bne.n	800e04c <acc_cpd_dll_calibration+0x230>
 800dff8:	f04f 0800 	mov.w	r8, #0
 800dffc:	4640      	mov	r0, r8
 800dffe:	b043      	add	sp, #268	; 0x10c
 800e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	463b      	mov	r3, r7
 800e006:	4a2b      	ldr	r2, [pc, #172]	; (800e0b4 <acc_cpd_dll_calibration+0x298>)
 800e008:	4631      	mov	r1, r6
 800e00a:	2002      	movs	r0, #2
 800e00c:	f7fc f8d8 	bl	800a1c0 <acc_log_rss>
 800e010:	e73d      	b.n	800de8e <acc_cpd_dll_calibration+0x72>
 800e012:	2003      	movs	r0, #3
 800e014:	f7fc f8d4 	bl	800a1c0 <acc_log_rss>
 800e018:	9b04      	ldr	r3, [sp, #16]
 800e01a:	455b      	cmp	r3, fp
 800e01c:	f47f af63 	bne.w	800dee6 <acc_cpd_dll_calibration+0xca>
 800e020:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e024:	e7d1      	b.n	800dfca <acc_cpd_dll_calibration+0x1ae>
 800e026:	f838 3c68 	ldrh.w	r3, [r8, #-104]
 800e02a:	4a23      	ldr	r2, [pc, #140]	; (800e0b8 <acc_cpd_dll_calibration+0x29c>)
 800e02c:	4631      	mov	r1, r6
 800e02e:	2002      	movs	r0, #2
 800e030:	f7fc f8c6 	bl	800a1c0 <acc_log_rss>
 800e034:	e76d      	b.n	800df12 <acc_cpd_dll_calibration+0xf6>
 800e036:	f8cd b000 	str.w	fp, [sp]
 800e03a:	4b17      	ldr	r3, [pc, #92]	; (800e098 <acc_cpd_dll_calibration+0x27c>)
 800e03c:	4a1f      	ldr	r2, [pc, #124]	; (800e0bc <acc_cpd_dll_calibration+0x2a0>)
 800e03e:	4631      	mov	r1, r6
 800e040:	2004      	movs	r0, #4
 800e042:	f7fc f8bd 	bl	800a1c0 <acc_log_rss>
 800e046:	f1bb 0f01 	cmp.w	fp, #1
 800e04a:	d0d5      	beq.n	800dff8 <acc_cpd_dll_calibration+0x1dc>
 800e04c:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <acc_cpd_dll_calibration+0x264>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f04f 0b01 	mov.w	fp, #1
 800e054:	2b00      	cmp	r3, #0
 800e056:	f43f aeef 	beq.w	800de38 <acc_cpd_dll_calibration+0x1c>
 800e05a:	465b      	mov	r3, fp
 800e05c:	4a18      	ldr	r2, [pc, #96]	; (800e0c0 <acc_cpd_dll_calibration+0x2a4>)
 800e05e:	4631      	mov	r1, r6
 800e060:	2002      	movs	r0, #2
 800e062:	f7fc f8ad 	bl	800a1c0 <acc_log_rss>
 800e066:	e6e7      	b.n	800de38 <acc_cpd_dll_calibration+0x1c>
 800e068:	f8cd b000 	str.w	fp, [sp]
 800e06c:	4b15      	ldr	r3, [pc, #84]	; (800e0c4 <acc_cpd_dll_calibration+0x2a8>)
 800e06e:	4a16      	ldr	r2, [pc, #88]	; (800e0c8 <acc_cpd_dll_calibration+0x2ac>)
 800e070:	4904      	ldr	r1, [pc, #16]	; (800e084 <acc_cpd_dll_calibration+0x268>)
 800e072:	f7fc f8a5 	bl	800a1c0 <acc_log_rss>
 800e076:	4640      	mov	r0, r8
 800e078:	b043      	add	sp, #268	; 0x10c
 800e07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07e:	bf00      	nop
 800e080:	20000420 	.word	0x20000420
 800e084:	08018e24 	.word	0x08018e24
 800e088:	08018f00 	.word	0x08018f00
 800e08c:	08018dd8 	.word	0x08018dd8
 800e090:	08019050 	.word	0x08019050
 800e094:	08018f4c 	.word	0x08018f4c
 800e098:	08018dc0 	.word	0x08018dc0
 800e09c:	08018fa0 	.word	0x08018fa0
 800e0a0:	08018fd0 	.word	0x08018fd0
 800e0a4:	08018ffc 	.word	0x08018ffc
 800e0a8:	08018ed8 	.word	0x08018ed8
 800e0ac:	080190a4 	.word	0x080190a4
 800e0b0:	080190dc 	.word	0x080190dc
 800e0b4:	08018eb8 	.word	0x08018eb8
 800e0b8:	08018f2c 	.word	0x08018f2c
 800e0bc:	08018e74 	.word	0x08018e74
 800e0c0:	08018e08 	.word	0x08018e08
 800e0c4:	08018dec 	.word	0x08018dec
 800e0c8:	08018e34 	.word	0x08018e34

0800e0cc <acc_cpd_dly_coarse_calibration>:
 800e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d0:	b08d      	sub	sp, #52	; 0x34
 800e0d2:	4681      	mov	r9, r0
 800e0d4:	9107      	str	r1, [sp, #28]
 800e0d6:	6800      	ldr	r0, [r0, #0]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	460d      	mov	r5, r1
 800e0dc:	a90a      	add	r1, sp, #40	; 0x28
 800e0de:	f7fe f9db 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800e0e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e0e4:	4979      	ldr	r1, [pc, #484]	; (800e2cc <acc_cpd_dly_coarse_calibration+0x200>)
 800e0e6:	f640 326c 	movw	r2, #2924	; 0xb6c
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f001 ffd6 	bl	801009c <memcpy>
 800e0f0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800e0f4:	4976      	ldr	r1, [pc, #472]	; (800e2d0 <acc_cpd_dly_coarse_calibration+0x204>)
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	2209      	movs	r2, #9
 800e0fa:	f000 fe91 	bl	800ee20 <acc_confprogram_patch>
 800e0fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e102:	4973      	ldr	r1, [pc, #460]	; (800e2d0 <acc_cpd_dly_coarse_calibration+0x204>)
 800e104:	4620      	mov	r0, r4
 800e106:	2222      	movs	r2, #34	; 0x22
 800e108:	f000 fe8a 	bl	800ee20 <acc_confprogram_patch>
 800e10c:	4620      	mov	r0, r4
 800e10e:	4970      	ldr	r1, [pc, #448]	; (800e2d0 <acc_cpd_dly_coarse_calibration+0x204>)
 800e110:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800e114:	2211      	movs	r2, #17
 800e116:	f000 fe83 	bl	800ee20 <acc_confprogram_patch>
 800e11a:	f8d9 0000 	ldr.w	r0, [r9]
 800e11e:	f640 326c 	movw	r2, #2924	; 0xb6c
 800e122:	2100      	movs	r1, #0
 800e124:	f7fe f9ba 	bl	800c49c <acc_sensor_protocol_load_program>
 800e128:	2800      	cmp	r0, #0
 800e12a:	f000 8087 	beq.w	800e23c <acc_cpd_dly_coarse_calibration+0x170>
 800e12e:	f8d9 6000 	ldr.w	r6, [r9]
 800e132:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800e2d0 <acc_cpd_dly_coarse_calibration+0x204>
 800e136:	f1a5 0a02 	sub.w	sl, r5, #2
 800e13a:	2700      	movs	r7, #0
 800e13c:	9700      	str	r7, [sp, #0]
 800e13e:	230b      	movs	r3, #11
 800e140:	465a      	mov	r2, fp
 800e142:	2100      	movs	r1, #0
 800e144:	4630      	mov	r0, r6
 800e146:	f000 fed7 	bl	800eef8 <acc_confprogram_live_patch>
 800e14a:	4680      	mov	r8, r0
 800e14c:	b300      	cbz	r0, 800e190 <acc_cpd_dly_coarse_calibration+0xc4>
 800e14e:	4b61      	ldr	r3, [pc, #388]	; (800e2d4 <acc_cpd_dly_coarse_calibration+0x208>)
 800e150:	4630      	mov	r0, r6
 800e152:	8a99      	ldrh	r1, [r3, #20]
 800e154:	f7fe fa10 	bl	800c578 <acc_sensor_protocol_run_program>
 800e158:	4680      	mov	r8, r0
 800e15a:	b318      	cbz	r0, 800e1a4 <acc_cpd_dly_coarse_calibration+0xd8>
 800e15c:	aa08      	add	r2, sp, #32
 800e15e:	495e      	ldr	r1, [pc, #376]	; (800e2d8 <acc_cpd_dly_coarse_calibration+0x20c>)
 800e160:	4630      	mov	r0, r6
 800e162:	f7fe fa49 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800e166:	2800      	cmp	r0, #0
 800e168:	d052      	beq.n	800e210 <acc_cpd_dly_coarse_calibration+0x144>
 800e16a:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800e16e:	2901      	cmp	r1, #1
 800e170:	d054      	beq.n	800e21c <acc_cpd_dly_coarse_calibration+0x150>
 800e172:	2904      	cmp	r1, #4
 800e174:	d01c      	beq.n	800e1b0 <acc_cpd_dly_coarse_calibration+0xe4>
 800e176:	9100      	str	r1, [sp, #0]
 800e178:	4b58      	ldr	r3, [pc, #352]	; (800e2dc <acc_cpd_dly_coarse_calibration+0x210>)
 800e17a:	4a59      	ldr	r2, [pc, #356]	; (800e2e0 <acc_cpd_dly_coarse_calibration+0x214>)
 800e17c:	4959      	ldr	r1, [pc, #356]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e17e:	2000      	movs	r0, #0
 800e180:	f7fc f81e 	bl	800a1c0 <acc_log_rss>
 800e184:	f04f 0800 	mov.w	r8, #0
 800e188:	4640      	mov	r0, r8
 800e18a:	b00d      	add	sp, #52	; 0x34
 800e18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e190:	9600      	str	r6, [sp, #0]
 800e192:	4b55      	ldr	r3, [pc, #340]	; (800e2e8 <acc_cpd_dly_coarse_calibration+0x21c>)
 800e194:	4a55      	ldr	r2, [pc, #340]	; (800e2ec <acc_cpd_dly_coarse_calibration+0x220>)
 800e196:	4953      	ldr	r1, [pc, #332]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e198:	f7fc f812 	bl	800a1c0 <acc_log_rss>
 800e19c:	4640      	mov	r0, r8
 800e19e:	b00d      	add	sp, #52	; 0x34
 800e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a4:	4b52      	ldr	r3, [pc, #328]	; (800e2f0 <acc_cpd_dly_coarse_calibration+0x224>)
 800e1a6:	4a53      	ldr	r2, [pc, #332]	; (800e2f4 <acc_cpd_dly_coarse_calibration+0x228>)
 800e1a8:	494e      	ldr	r1, [pc, #312]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e1aa:	f7fc f809 	bl	800a1c0 <acc_log_rss>
 800e1ae:	e7eb      	b.n	800e188 <acc_cpd_dly_coarse_calibration+0xbc>
 800e1b0:	aa0a      	add	r2, sp, #40	; 0x28
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f7fe fa78 	bl	800c6a8 <acc_sensor_protocol_get_indication_payload>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d04a      	beq.n	800e252 <acc_cpd_dly_coarse_calibration+0x186>
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7fe faf9 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d052      	beq.n	800e26e <acc_cpd_dly_coarse_calibration+0x1a2>
 800e1c8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800e1cc:	f8bd 502a 	ldrh.w	r5, [sp, #42]	; 0x2a
 800e1d0:	2c7f      	cmp	r4, #127	; 0x7f
 800e1d2:	d852      	bhi.n	800e27a <acc_cpd_dly_coarse_calibration+0x1ae>
 800e1d4:	3480      	adds	r4, #128	; 0x80
 800e1d6:	2d7f      	cmp	r5, #127	; 0x7f
 800e1d8:	d90b      	bls.n	800e1f2 <acc_cpd_dly_coarse_calibration+0x126>
 800e1da:	237f      	movs	r3, #127	; 0x7f
 800e1dc:	9500      	str	r5, [sp, #0]
 800e1de:	9303      	str	r3, [sp, #12]
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	9702      	str	r7, [sp, #8]
 800e1e4:	4b44      	ldr	r3, [pc, #272]	; (800e2f8 <acc_cpd_dly_coarse_calibration+0x22c>)
 800e1e6:	4a45      	ldr	r2, [pc, #276]	; (800e2fc <acc_cpd_dly_coarse_calibration+0x230>)
 800e1e8:	493e      	ldr	r1, [pc, #248]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	f7fb ffe8 	bl	800a1c0 <acc_log_rss>
 800e1f0:	257f      	movs	r5, #127	; 0x7f
 800e1f2:	3701      	adds	r7, #1
 800e1f4:	1b64      	subs	r4, r4, r5
 800e1f6:	2f0c      	cmp	r7, #12
 800e1f8:	f82a 4f02 	strh.w	r4, [sl, #2]!
 800e1fc:	d19e      	bne.n	800e13c <acc_cpd_dly_coarse_calibration+0x70>
 800e1fe:	4c40      	ldr	r4, [pc, #256]	; (800e300 <acc_cpd_dly_coarse_calibration+0x234>)
 800e200:	7823      	ldrb	r3, [r4, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d146      	bne.n	800e294 <acc_cpd_dly_coarse_calibration+0x1c8>
 800e206:	9807      	ldr	r0, [sp, #28]
 800e208:	210c      	movs	r1, #12
 800e20a:	f7fd fe07 	bl	800be1c <acc_sensor_diagnostics_print_buffer_u16>
 800e20e:	e7bb      	b.n	800e188 <acc_cpd_dly_coarse_calibration+0xbc>
 800e210:	4b32      	ldr	r3, [pc, #200]	; (800e2dc <acc_cpd_dly_coarse_calibration+0x210>)
 800e212:	4a3c      	ldr	r2, [pc, #240]	; (800e304 <acc_cpd_dly_coarse_calibration+0x238>)
 800e214:	4933      	ldr	r1, [pc, #204]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e216:	f7fb ffd3 	bl	800a1c0 <acc_log_rss>
 800e21a:	e7b3      	b.n	800e184 <acc_cpd_dly_coarse_calibration+0xb8>
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7fd fecf 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800e222:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
 800e226:	f7fe fbf3 	bl	800ca10 <acc_sensor_protocol_get_error_message>
 800e22a:	4b2c      	ldr	r3, [pc, #176]	; (800e2dc <acc_cpd_dly_coarse_calibration+0x210>)
 800e22c:	4a36      	ldr	r2, [pc, #216]	; (800e308 <acc_cpd_dly_coarse_calibration+0x23c>)
 800e22e:	492d      	ldr	r1, [pc, #180]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e230:	e9cd 6000 	strd	r6, r0, [sp]
 800e234:	2000      	movs	r0, #0
 800e236:	f7fb ffc3 	bl	800a1c0 <acc_log_rss>
 800e23a:	e7a3      	b.n	800e184 <acc_cpd_dly_coarse_calibration+0xb8>
 800e23c:	4680      	mov	r8, r0
 800e23e:	4a33      	ldr	r2, [pc, #204]	; (800e30c <acc_cpd_dly_coarse_calibration+0x240>)
 800e240:	4928      	ldr	r1, [pc, #160]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e242:	f7fb ffbd 	bl	800a1c0 <acc_log_rss>
 800e246:	4a32      	ldr	r2, [pc, #200]	; (800e310 <acc_cpd_dly_coarse_calibration+0x244>)
 800e248:	4926      	ldr	r1, [pc, #152]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e24a:	4640      	mov	r0, r8
 800e24c:	f7fb ffb8 	bl	800a1c0 <acc_log_rss>
 800e250:	e79a      	b.n	800e188 <acc_cpd_dly_coarse_calibration+0xbc>
 800e252:	4b30      	ldr	r3, [pc, #192]	; (800e314 <acc_cpd_dly_coarse_calibration+0x248>)
 800e254:	4a30      	ldr	r2, [pc, #192]	; (800e318 <acc_cpd_dly_coarse_calibration+0x24c>)
 800e256:	4923      	ldr	r1, [pc, #140]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e258:	f7fb ffb2 	bl	800a1c0 <acc_log_rss>
 800e25c:	4b2f      	ldr	r3, [pc, #188]	; (800e31c <acc_cpd_dly_coarse_calibration+0x250>)
 800e25e:	4a2e      	ldr	r2, [pc, #184]	; (800e318 <acc_cpd_dly_coarse_calibration+0x24c>)
 800e260:	4920      	ldr	r1, [pc, #128]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e262:	2000      	movs	r0, #0
 800e264:	f7fb ffac 	bl	800a1c0 <acc_log_rss>
 800e268:	f04f 0800 	mov.w	r8, #0
 800e26c:	e78c      	b.n	800e188 <acc_cpd_dly_coarse_calibration+0xbc>
 800e26e:	4b29      	ldr	r3, [pc, #164]	; (800e314 <acc_cpd_dly_coarse_calibration+0x248>)
 800e270:	4a2b      	ldr	r2, [pc, #172]	; (800e320 <acc_cpd_dly_coarse_calibration+0x254>)
 800e272:	491c      	ldr	r1, [pc, #112]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e274:	f7fb ffa4 	bl	800a1c0 <acc_log_rss>
 800e278:	e7f0      	b.n	800e25c <acc_cpd_dly_coarse_calibration+0x190>
 800e27a:	237f      	movs	r3, #127	; 0x7f
 800e27c:	9400      	str	r4, [sp, #0]
 800e27e:	9303      	str	r3, [sp, #12]
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	9702      	str	r7, [sp, #8]
 800e284:	4b1c      	ldr	r3, [pc, #112]	; (800e2f8 <acc_cpd_dly_coarse_calibration+0x22c>)
 800e286:	4a27      	ldr	r2, [pc, #156]	; (800e324 <acc_cpd_dly_coarse_calibration+0x258>)
 800e288:	4916      	ldr	r1, [pc, #88]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e28a:	2001      	movs	r0, #1
 800e28c:	f7fb ff98 	bl	800a1c0 <acc_log_rss>
 800e290:	24ff      	movs	r4, #255	; 0xff
 800e292:	e7a0      	b.n	800e1d6 <acc_cpd_dly_coarse_calibration+0x10a>
 800e294:	e9d9 0505 	ldrd	r0, r5, [r9, #20]
 800e298:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800e29c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800e2a0:	f8d9 3000 	ldr.w	r3, [r9]
 800e2a4:	9102      	str	r1, [sp, #8]
 800e2a6:	e9cd 2200 	strd	r2, r2, [sp]
 800e2aa:	e9cd 0503 	strd	r0, r5, [sp, #12]
 800e2ae:	4a1e      	ldr	r2, [pc, #120]	; (800e328 <acc_cpd_dly_coarse_calibration+0x25c>)
 800e2b0:	490c      	ldr	r1, [pc, #48]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e2b2:	2002      	movs	r0, #2
 800e2b4:	f7fb ff84 	bl	800a1c0 <acc_log_rss>
 800e2b8:	7823      	ldrb	r3, [r4, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d0a3      	beq.n	800e206 <acc_cpd_dly_coarse_calibration+0x13a>
 800e2be:	4a1b      	ldr	r2, [pc, #108]	; (800e32c <acc_cpd_dly_coarse_calibration+0x260>)
 800e2c0:	4908      	ldr	r1, [pc, #32]	; (800e2e4 <acc_cpd_dly_coarse_calibration+0x218>)
 800e2c2:	2002      	movs	r0, #2
 800e2c4:	f7fb ff7c 	bl	800a1c0 <acc_log_rss>
 800e2c8:	e79d      	b.n	800e206 <acc_cpd_dly_coarse_calibration+0x13a>
 800e2ca:	bf00      	nop
 800e2cc:	08014e9c 	.word	0x08014e9c
 800e2d0:	0801b9e8 	.word	0x0801b9e8
 800e2d4:	08014e50 	.word	0x08014e50
 800e2d8:	001e8480 	.word	0x001e8480
 800e2dc:	0801917c 	.word	0x0801917c
 800e2e0:	08019380 	.word	0x08019380
 800e2e4:	080191e8 	.word	0x080191e8
 800e2e8:	08019148 	.word	0x08019148
 800e2ec:	0801923c 	.word	0x0801923c
 800e2f0:	08019164 	.word	0x08019164
 800e2f4:	080192b8 	.word	0x080192b8
 800e2f8:	080191a4 	.word	0x080191a4
 800e2fc:	08019480 	.word	0x08019480
 800e300:	20000420 	.word	0x20000420
 800e304:	08019304 	.word	0x08019304
 800e308:	08019340 	.word	0x08019340
 800e30c:	080191b4 	.word	0x080191b4
 800e310:	08019200 	.word	0x08019200
 800e314:	08019198 	.word	0x08019198
 800e318:	080193c0 	.word	0x080193c0
 800e31c:	08019170 	.word	0x08019170
 800e320:	080193f8 	.word	0x080193f8
 800e324:	08019434 	.word	0x08019434
 800e328:	080194cc 	.word	0x080194cc
 800e32c:	08019540 	.word	0x08019540

0800e330 <acc_cpd_linear_sweep_load_program>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	b089      	sub	sp, #36	; 0x24
 800e336:	460e      	mov	r6, r1
 800e338:	2200      	movs	r2, #0
 800e33a:	a907      	add	r1, sp, #28
 800e33c:	9004      	str	r0, [sp, #16]
 800e33e:	f7fe f8ab 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800e342:	9d07      	ldr	r5, [sp, #28]
 800e344:	49c8      	ldr	r1, [pc, #800]	; (800e668 <acc_cpd_linear_sweep_load_program+0x338>)
 800e346:	f640 5238 	movw	r2, #3384	; 0xd38
 800e34a:	4628      	mov	r0, r5
 800e34c:	f001 fea6 	bl	801009c <memcpy>
 800e350:	6833      	ldr	r3, [r6, #0]
 800e352:	49c6      	ldr	r1, [pc, #792]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e354:	4628      	mov	r0, r5
 800e356:	2241      	movs	r2, #65	; 0x41
 800e358:	f000 fd62 	bl	800ee20 <acc_confprogram_patch>
 800e35c:	6873      	ldr	r3, [r6, #4]
 800e35e:	49c3      	ldr	r1, [pc, #780]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e360:	4628      	mov	r0, r5
 800e362:	223f      	movs	r2, #63	; 0x3f
 800e364:	f000 fd5c 	bl	800ee20 <acc_confprogram_patch>
 800e368:	68b3      	ldr	r3, [r6, #8]
 800e36a:	49c0      	ldr	r1, [pc, #768]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e36c:	4628      	mov	r0, r5
 800e36e:	2240      	movs	r2, #64	; 0x40
 800e370:	f000 fd56 	bl	800ee20 <acc_confprogram_patch>
 800e374:	89b3      	ldrh	r3, [r6, #12]
 800e376:	49bd      	ldr	r1, [pc, #756]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e378:	4628      	mov	r0, r5
 800e37a:	223d      	movs	r2, #61	; 0x3d
 800e37c:	f000 fd50 	bl	800ee20 <acc_confprogram_patch>
 800e380:	6933      	ldr	r3, [r6, #16]
 800e382:	49ba      	ldr	r1, [pc, #744]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e384:	4628      	mov	r0, r5
 800e386:	2227      	movs	r2, #39	; 0x27
 800e388:	f000 fd4a 	bl	800ee20 <acc_confprogram_patch>
 800e38c:	6973      	ldr	r3, [r6, #20]
 800e38e:	49b7      	ldr	r1, [pc, #732]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e390:	4628      	mov	r0, r5
 800e392:	2251      	movs	r2, #81	; 0x51
 800e394:	f000 fd44 	bl	800ee20 <acc_confprogram_patch>
 800e398:	69b3      	ldr	r3, [r6, #24]
 800e39a:	49b4      	ldr	r1, [pc, #720]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e39c:	4628      	mov	r0, r5
 800e39e:	222b      	movs	r2, #43	; 0x2b
 800e3a0:	f000 fd3e 	bl	800ee20 <acc_confprogram_patch>
 800e3a4:	69f3      	ldr	r3, [r6, #28]
 800e3a6:	49b1      	ldr	r1, [pc, #708]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	2266      	movs	r2, #102	; 0x66
 800e3ac:	f000 fd38 	bl	800ee20 <acc_confprogram_patch>
 800e3b0:	6a33      	ldr	r3, [r6, #32]
 800e3b2:	49ae      	ldr	r1, [pc, #696]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	225a      	movs	r2, #90	; 0x5a
 800e3b8:	f000 fd32 	bl	800ee20 <acc_confprogram_patch>
 800e3bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e3be:	49ab      	ldr	r1, [pc, #684]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	225b      	movs	r2, #91	; 0x5b
 800e3c4:	f000 fd2c 	bl	800ee20 <acc_confprogram_patch>
 800e3c8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e3ca:	49a8      	ldr	r1, [pc, #672]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	2218      	movs	r2, #24
 800e3d0:	f000 fd26 	bl	800ee20 <acc_confprogram_patch>
 800e3d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e3d6:	49a5      	ldr	r1, [pc, #660]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3d8:	4628      	mov	r0, r5
 800e3da:	2219      	movs	r2, #25
 800e3dc:	f000 fd20 	bl	800ee20 <acc_confprogram_patch>
 800e3e0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e3e2:	49a2      	ldr	r1, [pc, #648]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	221a      	movs	r2, #26
 800e3e8:	f000 fd1a 	bl	800ee20 <acc_confprogram_patch>
 800e3ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800e3ee:	499f      	ldr	r1, [pc, #636]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	221b      	movs	r2, #27
 800e3f4:	f000 fd14 	bl	800ee20 <acc_confprogram_patch>
 800e3f8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e3fa:	499c      	ldr	r1, [pc, #624]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	221c      	movs	r2, #28
 800e400:	f000 fd0e 	bl	800ee20 <acc_confprogram_patch>
 800e404:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800e406:	4999      	ldr	r1, [pc, #612]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e408:	4628      	mov	r0, r5
 800e40a:	221d      	movs	r2, #29
 800e40c:	f000 fd08 	bl	800ee20 <acc_confprogram_patch>
 800e410:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800e412:	4996      	ldr	r1, [pc, #600]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e414:	4628      	mov	r0, r5
 800e416:	2245      	movs	r2, #69	; 0x45
 800e418:	f000 fd02 	bl	800ee20 <acc_confprogram_patch>
 800e41c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800e41e:	4993      	ldr	r1, [pc, #588]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e420:	4628      	mov	r0, r5
 800e422:	2246      	movs	r2, #70	; 0x46
 800e424:	f000 fcfc 	bl	800ee20 <acc_confprogram_patch>
 800e428:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800e42a:	4990      	ldr	r1, [pc, #576]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e42c:	4628      	mov	r0, r5
 800e42e:	2247      	movs	r2, #71	; 0x47
 800e430:	f000 fcf6 	bl	800ee20 <acc_confprogram_patch>
 800e434:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e436:	498d      	ldr	r1, [pc, #564]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e438:	4628      	mov	r0, r5
 800e43a:	225c      	movs	r2, #92	; 0x5c
 800e43c:	f000 fcf0 	bl	800ee20 <acc_confprogram_patch>
 800e440:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e442:	498a      	ldr	r1, [pc, #552]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e444:	4628      	mov	r0, r5
 800e446:	2274      	movs	r2, #116	; 0x74
 800e448:	f000 fcea 	bl	800ee20 <acc_confprogram_patch>
 800e44c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e44e:	4987      	ldr	r1, [pc, #540]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e450:	4628      	mov	r0, r5
 800e452:	2253      	movs	r2, #83	; 0x53
 800e454:	f000 fce4 	bl	800ee20 <acc_confprogram_patch>
 800e458:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800e45a:	4984      	ldr	r1, [pc, #528]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e45c:	4628      	mov	r0, r5
 800e45e:	2254      	movs	r2, #84	; 0x54
 800e460:	f000 fcde 	bl	800ee20 <acc_confprogram_patch>
 800e464:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800e466:	4981      	ldr	r1, [pc, #516]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e468:	4628      	mov	r0, r5
 800e46a:	2233      	movs	r2, #51	; 0x33
 800e46c:	f000 fcd8 	bl	800ee20 <acc_confprogram_patch>
 800e470:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800e472:	497e      	ldr	r1, [pc, #504]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e474:	4628      	mov	r0, r5
 800e476:	2234      	movs	r2, #52	; 0x34
 800e478:	f000 fcd2 	bl	800ee20 <acc_confprogram_patch>
 800e47c:	6e73      	ldr	r3, [r6, #100]	; 0x64
 800e47e:	497b      	ldr	r1, [pc, #492]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e480:	4628      	mov	r0, r5
 800e482:	2263      	movs	r2, #99	; 0x63
 800e484:	f000 fccc 	bl	800ee20 <acc_confprogram_patch>
 800e488:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800e48a:	4978      	ldr	r1, [pc, #480]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e48c:	4628      	mov	r0, r5
 800e48e:	2244      	movs	r2, #68	; 0x44
 800e490:	f000 fcc6 	bl	800ee20 <acc_confprogram_patch>
 800e494:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800e496:	4975      	ldr	r1, [pc, #468]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e498:	4628      	mov	r0, r5
 800e49a:	222d      	movs	r2, #45	; 0x2d
 800e49c:	f000 fcc0 	bl	800ee20 <acc_confprogram_patch>
 800e4a0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f040 8103 	bne.w	800e6ae <acc_cpd_linear_sweep_load_program+0x37e>
 800e4a8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e4aa:	4970      	ldr	r1, [pc, #448]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e4ac:	2242      	movs	r2, #66	; 0x42
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f000 fcb6 	bl	800ee20 <acc_confprogram_patch>
 800e4b4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800e4b6:	496d      	ldr	r1, [pc, #436]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e4b8:	2267      	movs	r2, #103	; 0x67
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f000 fcb0 	bl	800ee20 <acc_confprogram_patch>
 800e4c0:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 800e4c2:	496a      	ldr	r1, [pc, #424]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e4c4:	2236      	movs	r2, #54	; 0x36
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 fcaa 	bl	800ee20 <acc_confprogram_patch>
 800e4cc:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 800e4ce:	4967      	ldr	r1, [pc, #412]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e4d0:	2235      	movs	r2, #53	; 0x35
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f000 fca4 	bl	800ee20 <acc_confprogram_patch>
 800e4d8:	f8d6 4080 	ldr.w	r4, [r6, #128]	; 0x80
 800e4dc:	b2a3      	uxth	r3, r4
 800e4de:	2b08      	cmp	r3, #8
 800e4e0:	f200 80d6 	bhi.w	800e690 <acc_cpd_linear_sweep_load_program+0x360>
 800e4e4:	461c      	mov	r4, r3
 800e4e6:	2700      	movs	r7, #0
 800e4e8:	4623      	mov	r3, r4
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	225d      	movs	r2, #93	; 0x5d
 800e4ee:	495f      	ldr	r1, [pc, #380]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e4f0:	f000 fc96 	bl	800ee20 <acc_confprogram_patch>
 800e4f4:	4623      	mov	r3, r4
 800e4f6:	2248      	movs	r2, #72	; 0x48
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	495c      	ldr	r1, [pc, #368]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e4fc:	f000 fc90 	bl	800ee20 <acc_confprogram_patch>
 800e500:	215f      	movs	r1, #95	; 0x5f
 800e502:	485a      	ldr	r0, [pc, #360]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e504:	f000 fd7a 	bl	800effc <acc_confprogram_get_default_value>
 800e508:	2161      	movs	r1, #97	; 0x61
 800e50a:	9005      	str	r0, [sp, #20]
 800e50c:	4857      	ldr	r0, [pc, #348]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e50e:	f000 fd75 	bl	800effc <acc_confprogram_get_default_value>
 800e512:	2160      	movs	r1, #96	; 0x60
 800e514:	4683      	mov	fp, r0
 800e516:	4855      	ldr	r0, [pc, #340]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e518:	f000 fd70 	bl	800effc <acc_confprogram_get_default_value>
 800e51c:	214a      	movs	r1, #74	; 0x4a
 800e51e:	4682      	mov	sl, r0
 800e520:	4852      	ldr	r0, [pc, #328]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e522:	f000 fd6b 	bl	800effc <acc_confprogram_get_default_value>
 800e526:	214c      	movs	r1, #76	; 0x4c
 800e528:	4681      	mov	r9, r0
 800e52a:	4850      	ldr	r0, [pc, #320]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e52c:	f000 fd66 	bl	800effc <acc_confprogram_get_default_value>
 800e530:	214b      	movs	r1, #75	; 0x4b
 800e532:	4680      	mov	r8, r0
 800e534:	484d      	ldr	r0, [pc, #308]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e536:	f000 fd61 	bl	800effc <acc_confprogram_get_default_value>
 800e53a:	213b      	movs	r1, #59	; 0x3b
 800e53c:	9001      	str	r0, [sp, #4]
 800e53e:	484b      	ldr	r0, [pc, #300]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e540:	f000 fd5c 	bl	800effc <acc_confprogram_get_default_value>
 800e544:	2137      	movs	r1, #55	; 0x37
 800e546:	9002      	str	r0, [sp, #8]
 800e548:	4848      	ldr	r0, [pc, #288]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e54a:	f000 fd57 	bl	800effc <acc_confprogram_get_default_value>
 800e54e:	2123      	movs	r1, #35	; 0x23
 800e550:	9003      	str	r0, [sp, #12]
 800e552:	4846      	ldr	r0, [pc, #280]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e554:	f000 fd52 	bl	800effc <acc_confprogram_get_default_value>
 800e558:	9b05      	ldr	r3, [sp, #20]
 800e55a:	4944      	ldr	r1, [pc, #272]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e55c:	4604      	mov	r4, r0
 800e55e:	433b      	orrs	r3, r7
 800e560:	4628      	mov	r0, r5
 800e562:	225f      	movs	r2, #95	; 0x5f
 800e564:	f000 fc5c 	bl	800ee20 <acc_confprogram_patch>
 800e568:	ea47 030b 	orr.w	r3, r7, fp
 800e56c:	4628      	mov	r0, r5
 800e56e:	2261      	movs	r2, #97	; 0x61
 800e570:	493e      	ldr	r1, [pc, #248]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e572:	f000 fc55 	bl	800ee20 <acc_confprogram_patch>
 800e576:	ea47 030a 	orr.w	r3, r7, sl
 800e57a:	4628      	mov	r0, r5
 800e57c:	2260      	movs	r2, #96	; 0x60
 800e57e:	493b      	ldr	r1, [pc, #236]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e580:	f000 fc4e 	bl	800ee20 <acc_confprogram_patch>
 800e584:	ea47 0309 	orr.w	r3, r7, r9
 800e588:	4628      	mov	r0, r5
 800e58a:	224a      	movs	r2, #74	; 0x4a
 800e58c:	4937      	ldr	r1, [pc, #220]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e58e:	f000 fc47 	bl	800ee20 <acc_confprogram_patch>
 800e592:	ea47 0308 	orr.w	r3, r7, r8
 800e596:	4628      	mov	r0, r5
 800e598:	224c      	movs	r2, #76	; 0x4c
 800e59a:	4934      	ldr	r1, [pc, #208]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e59c:	f000 fc40 	bl	800ee20 <acc_confprogram_patch>
 800e5a0:	9b01      	ldr	r3, [sp, #4]
 800e5a2:	4932      	ldr	r1, [pc, #200]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5a4:	433b      	orrs	r3, r7
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	224b      	movs	r2, #75	; 0x4b
 800e5aa:	f000 fc39 	bl	800ee20 <acc_confprogram_patch>
 800e5ae:	9b02      	ldr	r3, [sp, #8]
 800e5b0:	492e      	ldr	r1, [pc, #184]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5b2:	433b      	orrs	r3, r7
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	223b      	movs	r2, #59	; 0x3b
 800e5b8:	f000 fc32 	bl	800ee20 <acc_confprogram_patch>
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	492b      	ldr	r1, [pc, #172]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5c0:	433b      	orrs	r3, r7
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	2237      	movs	r2, #55	; 0x37
 800e5c6:	f000 fc2b 	bl	800ee20 <acc_confprogram_patch>
 800e5ca:	ea47 0304 	orr.w	r3, r7, r4
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	2223      	movs	r2, #35	; 0x23
 800e5d2:	4926      	ldr	r1, [pc, #152]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5d4:	f000 fc24 	bl	800ee20 <acc_confprogram_patch>
 800e5d8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800e5dc:	4923      	ldr	r1, [pc, #140]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5de:	4628      	mov	r0, r5
 800e5e0:	2255      	movs	r2, #85	; 0x55
 800e5e2:	f000 fc1d 	bl	800ee20 <acc_confprogram_patch>
 800e5e6:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800e5ea:	4920      	ldr	r1, [pc, #128]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	2256      	movs	r2, #86	; 0x56
 800e5f0:	f000 fc16 	bl	800ee20 <acc_confprogram_patch>
 800e5f4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800e5f8:	491c      	ldr	r1, [pc, #112]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	223c      	movs	r2, #60	; 0x3c
 800e5fe:	f000 fc0f 	bl	800ee20 <acc_confprogram_patch>
 800e602:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800e606:	4919      	ldr	r1, [pc, #100]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e608:	4628      	mov	r0, r5
 800e60a:	2225      	movs	r2, #37	; 0x25
 800e60c:	f000 fc08 	bl	800ee20 <acc_confprogram_patch>
 800e610:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e614:	4915      	ldr	r1, [pc, #84]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e616:	4628      	mov	r0, r5
 800e618:	2226      	movs	r2, #38	; 0x26
 800e61a:	f000 fc01 	bl	800ee20 <acc_confprogram_patch>
 800e61e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800e622:	4912      	ldr	r1, [pc, #72]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e624:	222a      	movs	r2, #42	; 0x2a
 800e626:	4628      	mov	r0, r5
 800e628:	f000 fbfa 	bl	800ee20 <acc_confprogram_patch>
 800e62c:	214d      	movs	r1, #77	; 0x4d
 800e62e:	480f      	ldr	r0, [pc, #60]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e630:	f000 fce4 	bl	800effc <acc_confprogram_get_default_value>
 800e634:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800e638:	490c      	ldr	r1, [pc, #48]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e63a:	4403      	add	r3, r0
 800e63c:	224d      	movs	r2, #77	; 0x4d
 800e63e:	4628      	mov	r0, r5
 800e640:	f000 fbee 	bl	800ee20 <acc_confprogram_patch>
 800e644:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
 800e648:	4908      	ldr	r1, [pc, #32]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e64a:	1e63      	subs	r3, r4, #1
 800e64c:	4628      	mov	r0, r5
 800e64e:	2205      	movs	r2, #5
 800e650:	f000 fbe6 	bl	800ee20 <acc_confprogram_patch>
 800e654:	4628      	mov	r0, r5
 800e656:	2252      	movs	r2, #82	; 0x52
 800e658:	4904      	ldr	r1, [pc, #16]	; (800e66c <acc_cpd_linear_sweep_load_program+0x33c>)
 800e65a:	2304      	movs	r3, #4
 800e65c:	fbb3 f3f4 	udiv	r3, r3, r4
 800e660:	3b01      	subs	r3, #1
 800e662:	f000 fbdd 	bl	800ee20 <acc_confprogram_patch>
 800e666:	e003      	b.n	800e670 <acc_cpd_linear_sweep_load_program+0x340>
 800e668:	08013360 	.word	0x08013360
 800e66c:	0801a698 	.word	0x0801a698
 800e670:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800e674:	4932      	ldr	r1, [pc, #200]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e676:	4628      	mov	r0, r5
 800e678:	2250      	movs	r2, #80	; 0x50
 800e67a:	f000 fbd1 	bl	800ee20 <acc_confprogram_patch>
 800e67e:	9804      	ldr	r0, [sp, #16]
 800e680:	f640 5238 	movw	r2, #3384	; 0xd38
 800e684:	2100      	movs	r1, #0
 800e686:	f7fd ff09 	bl	800c49c <acc_sensor_protocol_load_program>
 800e68a:	b009      	add	sp, #36	; 0x24
 800e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e690:	2302      	movs	r3, #2
 800e692:	2258      	movs	r2, #88	; 0x58
 800e694:	492a      	ldr	r1, [pc, #168]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e696:	4628      	mov	r0, r5
 800e698:	b2a4      	uxth	r4, r4
 800e69a:	f000 fbc1 	bl	800ee20 <acc_confprogram_patch>
 800e69e:	3c08      	subs	r4, #8
 800e6a0:	23ff      	movs	r3, #255	; 0xff
 800e6a2:	fa03 f404 	lsl.w	r4, r3, r4
 800e6a6:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 800e6aa:	2408      	movs	r4, #8
 800e6ac:	e71c      	b.n	800e4e8 <acc_cpd_linear_sweep_load_program+0x1b8>
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	220f      	movs	r2, #15
 800e6b4:	4922      	ldr	r1, [pc, #136]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e6b6:	f000 fbb3 	bl	800ee20 <acc_confprogram_patch>
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f64f 7380 	movw	r3, #65408	; 0xff80
 800e6c0:	2211      	movs	r2, #17
 800e6c2:	491f      	ldr	r1, [pc, #124]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e6c4:	f000 fbac 	bl	800ee20 <acc_confprogram_patch>
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	233f      	movs	r3, #63	; 0x3f
 800e6cc:	2213      	movs	r2, #19
 800e6ce:	491c      	ldr	r1, [pc, #112]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e6d0:	f000 fba6 	bl	800ee20 <acc_confprogram_patch>
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f64f 7380 	movw	r3, #65408	; 0xff80
 800e6da:	2210      	movs	r2, #16
 800e6dc:	4918      	ldr	r1, [pc, #96]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e6de:	f000 fb9f 	bl	800ee20 <acc_confprogram_patch>
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	2212      	movs	r2, #18
 800e6e8:	4915      	ldr	r1, [pc, #84]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e6ea:	f000 fb99 	bl	800ee20 <acc_confprogram_patch>
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800e6f4:	2214      	movs	r2, #20
 800e6f6:	4912      	ldr	r1, [pc, #72]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e6f8:	f000 fb92 	bl	800ee20 <acc_confprogram_patch>
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	233f      	movs	r3, #63	; 0x3f
 800e700:	2215      	movs	r2, #21
 800e702:	490f      	ldr	r1, [pc, #60]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e704:	f000 fb8c 	bl	800ee20 <acc_confprogram_patch>
 800e708:	4628      	mov	r0, r5
 800e70a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800e70e:	220d      	movs	r2, #13
 800e710:	490b      	ldr	r1, [pc, #44]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e712:	f000 fb85 	bl	800ee20 <acc_confprogram_patch>
 800e716:	4628      	mov	r0, r5
 800e718:	233f      	movs	r3, #63	; 0x3f
 800e71a:	220e      	movs	r2, #14
 800e71c:	4908      	ldr	r1, [pc, #32]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e71e:	f000 fb7f 	bl	800ee20 <acc_confprogram_patch>
 800e722:	4628      	mov	r0, r5
 800e724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e728:	2216      	movs	r2, #22
 800e72a:	4905      	ldr	r1, [pc, #20]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e72c:	f000 fb78 	bl	800ee20 <acc_confprogram_patch>
 800e730:	233f      	movs	r3, #63	; 0x3f
 800e732:	2217      	movs	r2, #23
 800e734:	4902      	ldr	r1, [pc, #8]	; (800e740 <acc_cpd_linear_sweep_load_program+0x410>)
 800e736:	4628      	mov	r0, r5
 800e738:	f000 fb72 	bl	800ee20 <acc_confprogram_patch>
 800e73c:	e6b4      	b.n	800e4a8 <acc_cpd_linear_sweep_load_program+0x178>
 800e73e:	bf00      	nop
 800e740:	0801a698 	.word	0x0801a698

0800e744 <acc_cpd_linear_sweep_run_program>:
 800e744:	b510      	push	{r4, lr}
 800e746:	4604      	mov	r4, r0
 800e748:	f7fd ff12 	bl	800c570 <acc_sensor_protocol_clear_resources>
 800e74c:	4b03      	ldr	r3, [pc, #12]	; (800e75c <acc_cpd_linear_sweep_run_program+0x18>)
 800e74e:	4620      	mov	r0, r4
 800e750:	f8b3 1082 	ldrh.w	r1, [r3, #130]	; 0x82
 800e754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e758:	f7fd bf0e 	b.w	800c578 <acc_sensor_protocol_run_program>
 800e75c:	080132d0 	.word	0x080132d0

0800e760 <acc_cpd_linear_sweep_update_program>:
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	460c      	mov	r4, r1
 800e764:	b082      	sub	sp, #8
 800e766:	4605      	mov	r5, r0
 800e768:	214d      	movs	r1, #77	; 0x4d
 800e76a:	4814      	ldr	r0, [pc, #80]	; (800e7bc <acc_cpd_linear_sweep_update_program+0x5c>)
 800e76c:	f000 fc46 	bl	800effc <acc_confprogram_get_default_value>
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	6826      	ldr	r6, [r4, #0]
 800e774:	4a11      	ldr	r2, [pc, #68]	; (800e7bc <acc_cpd_linear_sweep_update_program+0x5c>)
 800e776:	4418      	add	r0, r3
 800e778:	9000      	str	r0, [sp, #0]
 800e77a:	234d      	movs	r3, #77	; 0x4d
 800e77c:	4628      	mov	r0, r5
 800e77e:	2100      	movs	r1, #0
 800e780:	f000 fbba 	bl	800eef8 <acc_confprogram_live_patch>
 800e784:	b158      	cbz	r0, 800e79e <acc_cpd_linear_sweep_update_program+0x3e>
 800e786:	9600      	str	r6, [sp, #0]
 800e788:	4628      	mov	r0, r5
 800e78a:	232a      	movs	r3, #42	; 0x2a
 800e78c:	4a0b      	ldr	r2, [pc, #44]	; (800e7bc <acc_cpd_linear_sweep_update_program+0x5c>)
 800e78e:	2100      	movs	r1, #0
 800e790:	f000 fbb2 	bl	800eef8 <acc_confprogram_live_patch>
 800e794:	4604      	mov	r4, r0
 800e796:	b150      	cbz	r0, 800e7ae <acc_cpd_linear_sweep_update_program+0x4e>
 800e798:	4620      	mov	r0, r4
 800e79a:	b002      	add	sp, #8
 800e79c:	bd70      	pop	{r4, r5, r6, pc}
 800e79e:	4a08      	ldr	r2, [pc, #32]	; (800e7c0 <acc_cpd_linear_sweep_update_program+0x60>)
 800e7a0:	4908      	ldr	r1, [pc, #32]	; (800e7c4 <acc_cpd_linear_sweep_update_program+0x64>)
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	f7fb fd0c 	bl	800a1c0 <acc_log_rss>
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	b002      	add	sp, #8
 800e7ac:	bd70      	pop	{r4, r5, r6, pc}
 800e7ae:	4a06      	ldr	r2, [pc, #24]	; (800e7c8 <acc_cpd_linear_sweep_update_program+0x68>)
 800e7b0:	4904      	ldr	r1, [pc, #16]	; (800e7c4 <acc_cpd_linear_sweep_update_program+0x64>)
 800e7b2:	f7fb fd05 	bl	800a1c0 <acc_log_rss>
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	b002      	add	sp, #8
 800e7ba:	bd70      	pop	{r4, r5, r6, pc}
 800e7bc:	0801a698 	.word	0x0801a698
 800e7c0:	08019590 	.word	0x08019590
 800e7c4:	080195bc 	.word	0x080195bc
 800e7c8:	080195d0 	.word	0x080195d0

0800e7cc <acc_cpd_linear_sweep_transfer_data>:
 800e7cc:	b500      	push	{lr}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	aa02      	add	r2, sp, #8
 800e7d2:	f842 1d08 	str.w	r1, [r2, #-8]!
 800e7d6:	2106      	movs	r1, #6
 800e7d8:	f7fd ff66 	bl	800c6a8 <acc_sensor_protocol_get_indication_payload>
 800e7dc:	b003      	add	sp, #12
 800e7de:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7e2:	bf00      	nop

0800e7e4 <acc_cpd_linear_sweep_sensor_continue>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	f7fd ffe5 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	b920      	cbnz	r0, 800e7f8 <acc_cpd_linear_sweep_sensor_continue+0x14>
 800e7ee:	4b03      	ldr	r3, [pc, #12]	; (800e7fc <acc_cpd_linear_sweep_sensor_continue+0x18>)
 800e7f0:	4a03      	ldr	r2, [pc, #12]	; (800e800 <acc_cpd_linear_sweep_sensor_continue+0x1c>)
 800e7f2:	4904      	ldr	r1, [pc, #16]	; (800e804 <acc_cpd_linear_sweep_sensor_continue+0x20>)
 800e7f4:	f7fb fce4 	bl	800a1c0 <acc_log_rss>
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	bd10      	pop	{r4, pc}
 800e7fc:	08019568 	.word	0x08019568
 800e800:	08018d58 	.word	0x08018d58
 800e804:	080195bc 	.word	0x080195bc

0800e808 <acc_cpd_linear_sweep_stop>:
 800e808:	f7fe b81e 	b.w	800c848 <acc_sensor_protocol_stop>

0800e80c <acc_cpd_linear_sweep_low_power_stop>:
 800e80c:	f7fe b890 	b.w	800c930 <acc_sensor_protocol_low_power_stop>

0800e810 <acc_cpd_pll_divisors_calculate>:
 800e810:	ed90 6a00 	vldr	s12, [r0]
 800e814:	eddf 6a47 	vldr	s13, [pc, #284]	; 800e934 <acc_cpd_pll_divisors_calculate+0x124>
 800e818:	eddf 5a47 	vldr	s11, [pc, #284]	; 800e938 <acc_cpd_pll_divisors_calculate+0x128>
 800e81c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800e93c <acc_cpd_pll_divisors_calculate+0x12c>
 800e820:	4a47      	ldr	r2, [pc, #284]	; (800e940 <acc_cpd_pll_divisors_calculate+0x130>)
 800e822:	eddf 4a48 	vldr	s9, [pc, #288]	; 800e944 <acc_cpd_pll_divisors_calculate+0x134>
 800e826:	ed9f 5a48 	vldr	s10, [pc, #288]	; 800e948 <acc_cpd_pll_divisors_calculate+0x138>
 800e82a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e82e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800e832:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800e836:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800e83a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e83e:	ee76 6a84 	vadd.f32	s13, s13, s8
 800e842:	ee17 3a10 	vmov	r3, s14
 800e846:	b29b      	uxth	r3, r3
 800e848:	fba2 0203 	umull	r0, r2, r2, r3
 800e84c:	0892      	lsrs	r2, r2, #2
 800e84e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	b29b      	uxth	r3, r3
 800e856:	ee07 3a10 	vmov	s14, r3
 800e85a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e85e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800e862:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e866:	ee16 3a90 	vmov	r3, s13
 800e86a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e86e:	b29b      	uxth	r3, r3
 800e870:	ee17 0a10 	vmov	r0, s14
 800e874:	b280      	uxth	r0, r0
 800e876:	ee07 0a90 	vmov	s15, r0
 800e87a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e87e:	f1a3 0210 	sub.w	r2, r3, #16
 800e882:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e886:	b292      	uxth	r2, r2
 800e888:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800e88c:	2aef      	cmp	r2, #239	; 0xef
 800e88e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e896:	ee17 0a90 	vmov	r0, s15
 800e89a:	8108      	strh	r0, [r1, #8]
 800e89c:	d92b      	bls.n	800e8f6 <acc_cpd_pll_divisors_calculate+0xe6>
 800e89e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800e8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e94c <acc_cpd_pll_divisors_calculate+0x13c>
 800e8aa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e950 <acc_cpd_pll_divisors_calculate+0x140>
 800e8ae:	4a29      	ldr	r2, [pc, #164]	; (800e954 <acc_cpd_pll_divisors_calculate+0x144>)
 800e8b0:	4929      	ldr	r1, [pc, #164]	; (800e958 <acc_cpd_pll_divisors_calculate+0x148>)
 800e8b2:	bf48      	it	mi
 800e8b4:	eeb1 6a46 	vnegmi.f32	s12, s12
 800e8b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e8bc:	b500      	push	{lr}
 800e8be:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800e8c2:	b085      	sub	sp, #20
 800e8c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8c8:	bf48      	it	mi
 800e8ca:	232d      	movmi	r3, #45	; 0x2d
 800e8cc:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e8d0:	bf58      	it	pl
 800e8d2:	2320      	movpl	r3, #32
 800e8d4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800e8de:	4b1f      	ldr	r3, [pc, #124]	; (800e95c <acc_cpd_pll_divisors_calculate+0x14c>)
 800e8e0:	edcd 7a01 	vstr	s15, [sp, #4]
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	ed8d 6a02 	vstr	s12, [sp, #8]
 800e8ea:	f7fb fc69 	bl	800a1c0 <acc_log_rss>
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	b005      	add	sp, #20
 800e8f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8f6:	2b3f      	cmp	r3, #63	; 0x3f
 800e8f8:	d911      	bls.n	800e91e <acc_cpd_pll_divisors_calculate+0x10e>
 800e8fa:	2bbf      	cmp	r3, #191	; 0xbf
 800e8fc:	bf98      	it	ls
 800e8fe:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 800e902:	f04f 0201 	mov.w	r2, #1
 800e906:	bf8c      	ite	hi
 800e908:	08d8      	lsrhi	r0, r3, #3
 800e90a:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 800e90e:	804a      	strh	r2, [r1, #2]
 800e910:	f003 0207 	and.w	r2, r3, #7
 800e914:	8088      	strh	r0, [r1, #4]
 800e916:	80ca      	strh	r2, [r1, #6]
 800e918:	800b      	strh	r3, [r1, #0]
 800e91a:	2001      	movs	r0, #1
 800e91c:	4770      	bx	lr
 800e91e:	2000      	movs	r0, #0
 800e920:	2b2f      	cmp	r3, #47	; 0x2f
 800e922:	bf88      	it	hi
 800e924:	461a      	movhi	r2, r3
 800e926:	8048      	strh	r0, [r1, #2]
 800e928:	80c8      	strh	r0, [r1, #6]
 800e92a:	808a      	strh	r2, [r1, #4]
 800e92c:	800b      	strh	r3, [r1, #0]
 800e92e:	2001      	movs	r0, #1
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	4b989680 	.word	0x4b989680
 800e938:	43a28000 	.word	0x43a28000
 800e93c:	4f1502f9 	.word	0x4f1502f9
 800e940:	cccccccd 	.word	0xcccccccd
 800e944:	3e4ccccd 	.word	0x3e4ccccd
 800e948:	427c0000 	.word	0x427c0000
 800e94c:	350637bd 	.word	0x350637bd
 800e950:	49742400 	.word	0x49742400
 800e954:	08019620 	.word	0x08019620
 800e958:	08019660 	.word	0x08019660
 800e95c:	08019600 	.word	0x08019600

0800e960 <acc_cpd_rx_fine_dip_calibration>:
 800e960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e962:	6806      	ldr	r6, [r0, #0]
 800e964:	b08b      	sub	sp, #44	; 0x2c
 800e966:	4604      	mov	r4, r0
 800e968:	2200      	movs	r2, #0
 800e96a:	4630      	mov	r0, r6
 800e96c:	460f      	mov	r7, r1
 800e96e:	a908      	add	r1, sp, #32
 800e970:	f7fd fd92 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800e974:	9d08      	ldr	r5, [sp, #32]
 800e976:	496c      	ldr	r1, [pc, #432]	; (800eb28 <acc_cpd_rx_fine_dip_calibration+0x1c8>)
 800e978:	f640 523c 	movw	r2, #3388	; 0xd3c
 800e97c:	4628      	mov	r0, r5
 800e97e:	f001 fb8d 	bl	801009c <memcpy>
 800e982:	6863      	ldr	r3, [r4, #4]
 800e984:	4969      	ldr	r1, [pc, #420]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e986:	4628      	mov	r0, r5
 800e988:	221d      	movs	r2, #29
 800e98a:	f000 fa49 	bl	800ee20 <acc_confprogram_patch>
 800e98e:	68a3      	ldr	r3, [r4, #8]
 800e990:	4966      	ldr	r1, [pc, #408]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e992:	4628      	mov	r0, r5
 800e994:	221b      	movs	r2, #27
 800e996:	f000 fa43 	bl	800ee20 <acc_confprogram_patch>
 800e99a:	68e3      	ldr	r3, [r4, #12]
 800e99c:	4963      	ldr	r1, [pc, #396]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e99e:	4628      	mov	r0, r5
 800e9a0:	221c      	movs	r2, #28
 800e9a2:	f000 fa3d 	bl	800ee20 <acc_confprogram_patch>
 800e9a6:	8a23      	ldrh	r3, [r4, #16]
 800e9a8:	4960      	ldr	r1, [pc, #384]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	2219      	movs	r2, #25
 800e9ae:	f000 fa37 	bl	800ee20 <acc_confprogram_patch>
 800e9b2:	69e3      	ldr	r3, [r4, #28]
 800e9b4:	495d      	ldr	r1, [pc, #372]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	220f      	movs	r2, #15
 800e9ba:	f000 fa31 	bl	800ee20 <acc_confprogram_patch>
 800e9be:	69a3      	ldr	r3, [r4, #24]
 800e9c0:	495a      	ldr	r1, [pc, #360]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	2211      	movs	r2, #17
 800e9c6:	f000 fa2b 	bl	800ee20 <acc_confprogram_patch>
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	4957      	ldr	r1, [pc, #348]	; (800eb2c <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800e9ce:	6963      	ldr	r3, [r4, #20]
 800e9d0:	2230      	movs	r2, #48	; 0x30
 800e9d2:	f000 fa25 	bl	800ee20 <acc_confprogram_patch>
 800e9d6:	6820      	ldr	r0, [r4, #0]
 800e9d8:	f640 523c 	movw	r2, #3388	; 0xd3c
 800e9dc:	2100      	movs	r1, #0
 800e9de:	f7fd fd5d 	bl	800c49c <acc_sensor_protocol_load_program>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d043      	beq.n	800ea6e <acc_cpd_rx_fine_dip_calibration+0x10e>
 800e9e6:	4b52      	ldr	r3, [pc, #328]	; (800eb30 <acc_cpd_rx_fine_dip_calibration+0x1d0>)
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800e9ec:	f7fd fdc4 	bl	800c578 <acc_sensor_protocol_run_program>
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d048      	beq.n	800ea88 <acc_cpd_rx_fine_dip_calibration+0x128>
 800e9f6:	aa06      	add	r2, sp, #24
 800e9f8:	494e      	ldr	r1, [pc, #312]	; (800eb34 <acc_cpd_rx_fine_dip_calibration+0x1d4>)
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f7fd fdfc 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800ea00:	4605      	mov	r5, r0
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d048      	beq.n	800ea98 <acc_cpd_rx_fine_dip_calibration+0x138>
 800ea06:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ea0a:	2901      	cmp	r1, #1
 800ea0c:	d053      	beq.n	800eab6 <acc_cpd_rx_fine_dip_calibration+0x156>
 800ea0e:	2908      	cmp	r1, #8
 800ea10:	d148      	bne.n	800eaa4 <acc_cpd_rx_fine_dip_calibration+0x144>
 800ea12:	2319      	movs	r3, #25
 800ea14:	aa08      	add	r2, sp, #32
 800ea16:	4630      	mov	r0, r6
 800ea18:	9308      	str	r3, [sp, #32]
 800ea1a:	f7fd fe45 	bl	800c6a8 <acc_sensor_protocol_get_indication_payload>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d05a      	beq.n	800ead8 <acc_cpd_rx_fine_dip_calibration+0x178>
 800ea22:	4630      	mov	r0, r6
 800ea24:	f7fd fec6 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800ea28:	4605      	mov	r5, r0
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d05b      	beq.n	800eae6 <acc_cpd_rx_fine_dip_calibration+0x186>
 800ea2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea30:	463a      	mov	r2, r7
 800ea32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea36:	f8d3 c000 	ldr.w	ip, [r3]
 800ea3a:	685e      	ldr	r6, [r3, #4]
 800ea3c:	6898      	ldr	r0, [r3, #8]
 800ea3e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800ea42:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ea46:	3310      	adds	r3, #16
 800ea48:	428b      	cmp	r3, r1
 800ea4a:	f8c2 c000 	str.w	ip, [r2]
 800ea4e:	6056      	str	r6, [r2, #4]
 800ea50:	6090      	str	r0, [r2, #8]
 800ea52:	f102 0210 	add.w	r2, r2, #16
 800ea56:	d1ee      	bne.n	800ea36 <acc_cpd_rx_fine_dip_calibration+0xd6>
 800ea58:	881b      	ldrh	r3, [r3, #0]
 800ea5a:	4e37      	ldr	r6, [pc, #220]	; (800eb38 <acc_cpd_rx_fine_dip_calibration+0x1d8>)
 800ea5c:	8013      	strh	r3, [r2, #0]
 800ea5e:	7833      	ldrb	r3, [r6, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d146      	bne.n	800eaf2 <acc_cpd_rx_fine_dip_calibration+0x192>
 800ea64:	4638      	mov	r0, r7
 800ea66:	2119      	movs	r1, #25
 800ea68:	f7fd f9d8 	bl	800be1c <acc_sensor_diagnostics_print_buffer_u16>
 800ea6c:	e009      	b.n	800ea82 <acc_cpd_rx_fine_dip_calibration+0x122>
 800ea6e:	4605      	mov	r5, r0
 800ea70:	4a32      	ldr	r2, [pc, #200]	; (800eb3c <acc_cpd_rx_fine_dip_calibration+0x1dc>)
 800ea72:	4933      	ldr	r1, [pc, #204]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800ea74:	f7fb fba4 	bl	800a1c0 <acc_log_rss>
 800ea78:	4a32      	ldr	r2, [pc, #200]	; (800eb44 <acc_cpd_rx_fine_dip_calibration+0x1e4>)
 800ea7a:	4931      	ldr	r1, [pc, #196]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f7fb fb9f 	bl	800a1c0 <acc_log_rss>
 800ea82:	4628      	mov	r0, r5
 800ea84:	b00b      	add	sp, #44	; 0x2c
 800ea86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea88:	4b2f      	ldr	r3, [pc, #188]	; (800eb48 <acc_cpd_rx_fine_dip_calibration+0x1e8>)
 800ea8a:	4a30      	ldr	r2, [pc, #192]	; (800eb4c <acc_cpd_rx_fine_dip_calibration+0x1ec>)
 800ea8c:	492c      	ldr	r1, [pc, #176]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800ea8e:	f7fb fb97 	bl	800a1c0 <acc_log_rss>
 800ea92:	4628      	mov	r0, r5
 800ea94:	b00b      	add	sp, #44	; 0x2c
 800ea96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea98:	4b2d      	ldr	r3, [pc, #180]	; (800eb50 <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 800ea9a:	4a2e      	ldr	r2, [pc, #184]	; (800eb54 <acc_cpd_rx_fine_dip_calibration+0x1f4>)
 800ea9c:	4928      	ldr	r1, [pc, #160]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800ea9e:	f7fb fb8f 	bl	800a1c0 <acc_log_rss>
 800eaa2:	e7ee      	b.n	800ea82 <acc_cpd_rx_fine_dip_calibration+0x122>
 800eaa4:	9100      	str	r1, [sp, #0]
 800eaa6:	4b2a      	ldr	r3, [pc, #168]	; (800eb50 <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 800eaa8:	4a2b      	ldr	r2, [pc, #172]	; (800eb58 <acc_cpd_rx_fine_dip_calibration+0x1f8>)
 800eaaa:	4925      	ldr	r1, [pc, #148]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800eaac:	2000      	movs	r0, #0
 800eaae:	f7fb fb87 	bl	800a1c0 <acc_log_rss>
 800eab2:	2500      	movs	r5, #0
 800eab4:	e7e5      	b.n	800ea82 <acc_cpd_rx_fine_dip_calibration+0x122>
 800eab6:	4630      	mov	r0, r6
 800eab8:	f7fd fa82 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800eabc:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800eac0:	f7fd ffa6 	bl	800ca10 <acc_sensor_protocol_get_error_message>
 800eac4:	4b22      	ldr	r3, [pc, #136]	; (800eb50 <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 800eac6:	4a25      	ldr	r2, [pc, #148]	; (800eb5c <acc_cpd_rx_fine_dip_calibration+0x1fc>)
 800eac8:	491d      	ldr	r1, [pc, #116]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800eaca:	e9cd 6000 	strd	r6, r0, [sp]
 800eace:	2000      	movs	r0, #0
 800ead0:	f7fb fb76 	bl	800a1c0 <acc_log_rss>
 800ead4:	2500      	movs	r5, #0
 800ead6:	e7d4      	b.n	800ea82 <acc_cpd_rx_fine_dip_calibration+0x122>
 800ead8:	4b21      	ldr	r3, [pc, #132]	; (800eb60 <acc_cpd_rx_fine_dip_calibration+0x200>)
 800eada:	4a22      	ldr	r2, [pc, #136]	; (800eb64 <acc_cpd_rx_fine_dip_calibration+0x204>)
 800eadc:	4918      	ldr	r1, [pc, #96]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800eade:	f7fb fb6f 	bl	800a1c0 <acc_log_rss>
 800eae2:	2500      	movs	r5, #0
 800eae4:	e7cd      	b.n	800ea82 <acc_cpd_rx_fine_dip_calibration+0x122>
 800eae6:	4b1e      	ldr	r3, [pc, #120]	; (800eb60 <acc_cpd_rx_fine_dip_calibration+0x200>)
 800eae8:	4a1f      	ldr	r2, [pc, #124]	; (800eb68 <acc_cpd_rx_fine_dip_calibration+0x208>)
 800eaea:	4915      	ldr	r1, [pc, #84]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800eaec:	f7fb fb68 	bl	800a1c0 <acc_log_rss>
 800eaf0:	e7f7      	b.n	800eae2 <acc_cpd_rx_fine_dip_calibration+0x182>
 800eaf2:	68a2      	ldr	r2, [r4, #8]
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	e9d4 0c06 	ldrd	r0, ip, [r4, #24]
 800eafa:	e9cd 2200 	strd	r2, r2, [sp]
 800eafe:	6961      	ldr	r1, [r4, #20]
 800eb00:	68e2      	ldr	r2, [r4, #12]
 800eb02:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800eb06:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800eb0a:	2002      	movs	r0, #2
 800eb0c:	4a17      	ldr	r2, [pc, #92]	; (800eb6c <acc_cpd_rx_fine_dip_calibration+0x20c>)
 800eb0e:	490c      	ldr	r1, [pc, #48]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800eb10:	f7fb fb56 	bl	800a1c0 <acc_log_rss>
 800eb14:	7833      	ldrb	r3, [r6, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0a4      	beq.n	800ea64 <acc_cpd_rx_fine_dip_calibration+0x104>
 800eb1a:	4a15      	ldr	r2, [pc, #84]	; (800eb70 <acc_cpd_rx_fine_dip_calibration+0x210>)
 800eb1c:	4908      	ldr	r1, [pc, #32]	; (800eb40 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800eb1e:	2002      	movs	r0, #2
 800eb20:	f7fb fb4e 	bl	800a1c0 <acc_log_rss>
 800eb24:	e79e      	b.n	800ea64 <acc_cpd_rx_fine_dip_calibration+0x104>
 800eb26:	bf00      	nop
 800eb28:	08014114 	.word	0x08014114
 800eb2c:	0801b3c4 	.word	0x0801b3c4
 800eb30:	08014098 	.word	0x08014098
 800eb34:	001e8480 	.word	0x001e8480
 800eb38:	20000420 	.word	0x20000420
 800eb3c:	080196a8 	.word	0x080196a8
 800eb40:	080196f4 	.word	0x080196f4
 800eb44:	08019200 	.word	0x08019200
 800eb48:	08019674 	.word	0x08019674
 800eb4c:	0801970c 	.word	0x0801970c
 800eb50:	08019680 	.word	0x08019680
 800eb54:	08019304 	.word	0x08019304
 800eb58:	08019380 	.word	0x08019380
 800eb5c:	08019340 	.word	0x08019340
 800eb60:	0801969c 	.word	0x0801969c
 800eb64:	080193c0 	.word	0x080193c0
 800eb68:	080193f8 	.word	0x080193f8
 800eb6c:	0801975c 	.word	0x0801975c
 800eb70:	080197e0 	.word	0x080197e0

0800eb74 <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800eb74:	b353      	cbz	r3, 800ebcc <acc_alg_basic_exponential_smoothing_q3_12_complex+0x58>
 800eb76:	b470      	push	{r4, r5, r6}
 800eb78:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800eb7c:	3002      	adds	r0, #2
 800eb7e:	1c8e      	adds	r6, r1, #2
 800eb80:	f936 5c02 	ldrsh.w	r5, [r6, #-2]
 800eb84:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 800eb88:	1b64      	subs	r4, r4, r5
 800eb8a:	fb02 f404 	mul.w	r4, r2, r4
 800eb8e:	2c00      	cmp	r4, #0
 800eb90:	bfb8      	it	lt
 800eb92:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800eb96:	eb05 3424 	add.w	r4, r5, r4, asr #12
 800eb9a:	f826 4c02 	strh.w	r4, [r6, #-2]
 800eb9e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800eba2:	f9b0 4000 	ldrsh.w	r4, [r0]
 800eba6:	1b64      	subs	r4, r4, r5
 800eba8:	fb02 f404 	mul.w	r4, r2, r4
 800ebac:	2c00      	cmp	r4, #0
 800ebae:	bfb8      	it	lt
 800ebb0:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800ebb4:	eb05 3424 	add.w	r4, r5, r4, asr #12
 800ebb8:	804c      	strh	r4, [r1, #2]
 800ebba:	3104      	adds	r1, #4
 800ebbc:	428b      	cmp	r3, r1
 800ebbe:	f106 0604 	add.w	r6, r6, #4
 800ebc2:	f100 0004 	add.w	r0, r0, #4
 800ebc6:	d1db      	bne.n	800eb80 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800ebc8:	bc70      	pop	{r4, r5, r6}
 800ebca:	4770      	bx	lr
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop

0800ebd0 <acc_alg_phase_estimation_q3_12>:
 800ebd0:	2a01      	cmp	r2, #1
 800ebd2:	b4f0      	push	{r4, r5, r6, r7}
 800ebd4:	d923      	bls.n	800ec1e <acc_alg_phase_estimation_q3_12+0x4e>
 800ebd6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800ebda:	f1ac 0c04 	sub.w	ip, ip, #4
 800ebde:	4603      	mov	r3, r0
 800ebe0:	f9b3 7000 	ldrsh.w	r7, [r3]
 800ebe4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800ebe8:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800ebec:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800ebf0:	1bed      	subs	r5, r5, r7
 800ebf2:	fb01 f505 	mul.w	r5, r1, r5
 800ebf6:	1ba4      	subs	r4, r4, r6
 800ebf8:	2d00      	cmp	r5, #0
 800ebfa:	fb01 f404 	mul.w	r4, r1, r4
 800ebfe:	bfb8      	it	lt
 800ec00:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800ec04:	2c00      	cmp	r4, #0
 800ec06:	bfb8      	it	lt
 800ec08:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800ec0c:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800ec10:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800ec14:	809d      	strh	r5, [r3, #4]
 800ec16:	80dc      	strh	r4, [r3, #6]
 800ec18:	3304      	adds	r3, #4
 800ec1a:	459c      	cmp	ip, r3
 800ec1c:	d1e0      	bne.n	800ebe0 <acc_alg_phase_estimation_q3_12+0x10>
 800ec1e:	1e53      	subs	r3, r2, #1
 800ec20:	d027      	beq.n	800ec72 <acc_alg_phase_estimation_q3_12+0xa2>
 800ec22:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800ec26:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800ec2a:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800ec2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ec32:	3004      	adds	r0, #4
 800ec34:	f932 4c08 	ldrsh.w	r4, [r2, #-8]
 800ec38:	1ba4      	subs	r4, r4, r6
 800ec3a:	fb01 f304 	mul.w	r3, r1, r4
 800ec3e:	f932 4c06 	ldrsh.w	r4, [r2, #-6]
 800ec42:	1b64      	subs	r4, r4, r5
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	fb01 f404 	mul.w	r4, r1, r4
 800ec4a:	bfb8      	it	lt
 800ec4c:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800ec50:	2c00      	cmp	r4, #0
 800ec52:	bfb8      	it	lt
 800ec54:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800ec58:	eb06 3323 	add.w	r3, r6, r3, asr #12
 800ec5c:	eb05 3524 	add.w	r5, r5, r4, asr #12
 800ec60:	b21e      	sxth	r6, r3
 800ec62:	b22d      	sxth	r5, r5
 800ec64:	f822 6c08 	strh.w	r6, [r2, #-8]
 800ec68:	f822 5c06 	strh.w	r5, [r2, #-6]
 800ec6c:	3a04      	subs	r2, #4
 800ec6e:	4282      	cmp	r2, r0
 800ec70:	d1e0      	bne.n	800ec34 <acc_alg_phase_estimation_q3_12+0x64>
 800ec72:	bcf0      	pop	{r4, r5, r6, r7}
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop

0800ec78 <acc_confprogram_modify_bin_sensor>:
 800ec78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec7c:	b085      	sub	sp, #20
 800ec7e:	2401      	movs	r4, #1
 800ec80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec82:	fa04 f303 	lsl.w	r3, r4, r3
 800ec86:	42ab      	cmp	r3, r5
 800ec88:	f103 38ff 	add.w	r8, r3, #4294967295
 800ec8c:	d91b      	bls.n	800ecc6 <acc_confprogram_modify_bin_sensor+0x4e>
 800ec8e:	b28e      	uxth	r6, r1
 800ec90:	4691      	mov	r9, r2
 800ec92:	4631      	mov	r1, r6
 800ec94:	4623      	mov	r3, r4
 800ec96:	aa02      	add	r2, sp, #8
 800ec98:	4607      	mov	r7, r0
 800ec9a:	f7fc ff3b 	bl	800bb14 <acc_sensor_conf_read>
 800ec9e:	9b02      	ldr	r3, [sp, #8]
 800eca0:	fa08 f809 	lsl.w	r8, r8, r9
 800eca4:	ea23 0308 	bic.w	r3, r3, r8
 800eca8:	aa04      	add	r2, sp, #16
 800ecaa:	fa05 f509 	lsl.w	r5, r5, r9
 800ecae:	431d      	orrs	r5, r3
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4623      	mov	r3, r4
 800ecba:	f7fc ff6f 	bl	800bb9c <acc_sensor_conf_write_32bit>
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	b005      	add	sp, #20
 800ecc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecc6:	f8cd 8000 	str.w	r8, [sp]
 800ecca:	462b      	mov	r3, r5
 800eccc:	4a04      	ldr	r2, [pc, #16]	; (800ece0 <acc_confprogram_modify_bin_sensor+0x68>)
 800ecce:	4905      	ldr	r1, [pc, #20]	; (800ece4 <acc_confprogram_modify_bin_sensor+0x6c>)
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f7fb fa75 	bl	800a1c0 <acc_log_rss>
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	b005      	add	sp, #20
 800ecda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecde:	bf00      	nop
 800ece0:	0801bcc8 	.word	0x0801bcc8
 800ece4:	0801bcf4 	.word	0x0801bcf4

0800ece8 <acc_confprogram_modify_bin>:
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	9e06      	ldr	r6, [sp, #24]
 800ecee:	2401      	movs	r4, #1
 800ecf0:	fa04 f303 	lsl.w	r3, r4, r3
 800ecf4:	42b3      	cmp	r3, r6
 800ecf6:	f103 35ff 	add.w	r5, r3, #4294967295
 800ecfa:	d90e      	bls.n	800ed1a <acc_confprogram_modify_bin+0x32>
 800ecfc:	1844      	adds	r4, r0, r1
 800ecfe:	4620      	mov	r0, r4
 800ed00:	4617      	mov	r7, r2
 800ed02:	f7fe f8e9 	bl	800ced8 <acc_utils_uint8_to_uint32_swap>
 800ed06:	40bd      	lsls	r5, r7
 800ed08:	ea20 0005 	bic.w	r0, r0, r5
 800ed0c:	40be      	lsls	r6, r7
 800ed0e:	4621      	mov	r1, r4
 800ed10:	4330      	orrs	r0, r6
 800ed12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed16:	f7fe b8e3 	b.w	800cee0 <acc_utils_uint32_to_uint8_swap>
 800ed1a:	9506      	str	r5, [sp, #24]
 800ed1c:	4633      	mov	r3, r6
 800ed1e:	4a03      	ldr	r2, [pc, #12]	; (800ed2c <acc_confprogram_modify_bin+0x44>)
 800ed20:	4903      	ldr	r1, [pc, #12]	; (800ed30 <acc_confprogram_modify_bin+0x48>)
 800ed22:	2000      	movs	r0, #0
 800ed24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed28:	f7fb ba4a 	b.w	800a1c0 <acc_log_rss>
 800ed2c:	0801bcc8 	.word	0x0801bcc8
 800ed30:	0801bcf4 	.word	0x0801bcf4

0800ed34 <acc_confprogram_modify_runif_sensor>:
 800ed34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	4617      	mov	r7, r2
 800ed3e:	4698      	mov	r8, r3
 800ed40:	4604      	mov	r4, r0
 800ed42:	f7fd fb99 	bl	800c478 <acc_sensor_protocol_is_sensor_running>
 800ed46:	bb40      	cbnz	r0, 800ed9a <acc_confprogram_modify_runif_sensor+0x66>
 800ed48:	b2ae      	uxth	r6, r5
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	aa02      	add	r2, sp, #8
 800ed50:	4620      	mov	r0, r4
 800ed52:	f7fc fedf 	bl	800bb14 <acc_sensor_conf_read>
 800ed56:	9b02      	ldr	r3, [sp, #8]
 800ed58:	f023 030f 	bic.w	r3, r3, #15
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	f1b8 0f00 	cmp.w	r8, #0
 800ed62:	d10f      	bne.n	800ed84 <acc_confprogram_modify_runif_sensor+0x50>
 800ed64:	462b      	mov	r3, r5
 800ed66:	4a12      	ldr	r2, [pc, #72]	; (800edb0 <acc_confprogram_modify_runif_sensor+0x7c>)
 800ed68:	4912      	ldr	r1, [pc, #72]	; (800edb4 <acc_confprogram_modify_runif_sensor+0x80>)
 800ed6a:	2004      	movs	r0, #4
 800ed6c:	f7fb fa28 	bl	800a1c0 <acc_log_rss>
 800ed70:	4620      	mov	r0, r4
 800ed72:	4631      	mov	r1, r6
 800ed74:	2301      	movs	r3, #1
 800ed76:	aa03      	add	r2, sp, #12
 800ed78:	f7fc ff10 	bl	800bb9c <acc_sensor_conf_write_32bit>
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	b004      	add	sp, #16
 800ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed84:	ea43 0007 	orr.w	r0, r3, r7
 800ed88:	9003      	str	r0, [sp, #12]
 800ed8a:	9700      	str	r7, [sp, #0]
 800ed8c:	462b      	mov	r3, r5
 800ed8e:	4a0a      	ldr	r2, [pc, #40]	; (800edb8 <acc_confprogram_modify_runif_sensor+0x84>)
 800ed90:	4908      	ldr	r1, [pc, #32]	; (800edb4 <acc_confprogram_modify_runif_sensor+0x80>)
 800ed92:	2004      	movs	r0, #4
 800ed94:	f7fb fa14 	bl	800a1c0 <acc_log_rss>
 800ed98:	e7ea      	b.n	800ed70 <acc_confprogram_modify_runif_sensor+0x3c>
 800ed9a:	4623      	mov	r3, r4
 800ed9c:	4a07      	ldr	r2, [pc, #28]	; (800edbc <acc_confprogram_modify_runif_sensor+0x88>)
 800ed9e:	4905      	ldr	r1, [pc, #20]	; (800edb4 <acc_confprogram_modify_runif_sensor+0x80>)
 800eda0:	2000      	movs	r0, #0
 800eda2:	f7fb fa0d 	bl	800a1c0 <acc_log_rss>
 800eda6:	2000      	movs	r0, #0
 800eda8:	b004      	add	sp, #16
 800edaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edae:	bf00      	nop
 800edb0:	0801bda0 	.word	0x0801bda0
 800edb4:	0801bcf4 	.word	0x0801bcf4
 800edb8:	0801bd68 	.word	0x0801bd68
 800edbc:	0801bd34 	.word	0x0801bd34

0800edc0 <acc_confprogram_modify_runif>:
 800edc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc4:	1885      	adds	r5, r0, r2
 800edc6:	b082      	sub	sp, #8
 800edc8:	4628      	mov	r0, r5
 800edca:	4614      	mov	r4, r2
 800edcc:	460f      	mov	r7, r1
 800edce:	4698      	mov	r8, r3
 800edd0:	f7fe f882 	bl	800ced8 <acc_utils_uint8_to_uint32_swap>
 800edd4:	08a3      	lsrs	r3, r4, #2
 800edd6:	f020 060f 	bic.w	r6, r0, #15
 800edda:	9700      	str	r7, [sp, #0]
 800eddc:	f1b8 0f00 	cmp.w	r8, #0
 800ede0:	d10b      	bne.n	800edfa <acc_confprogram_modify_runif+0x3a>
 800ede2:	4a0c      	ldr	r2, [pc, #48]	; (800ee14 <acc_confprogram_modify_runif+0x54>)
 800ede4:	490c      	ldr	r1, [pc, #48]	; (800ee18 <acc_confprogram_modify_runif+0x58>)
 800ede6:	2004      	movs	r0, #4
 800ede8:	f7fb f9ea 	bl	800a1c0 <acc_log_rss>
 800edec:	4629      	mov	r1, r5
 800edee:	4630      	mov	r0, r6
 800edf0:	b002      	add	sp, #8
 800edf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	f7fe b873 	b.w	800cee0 <acc_utils_uint32_to_uint8_swap>
 800edfa:	4a08      	ldr	r2, [pc, #32]	; (800ee1c <acc_confprogram_modify_runif+0x5c>)
 800edfc:	4906      	ldr	r1, [pc, #24]	; (800ee18 <acc_confprogram_modify_runif+0x58>)
 800edfe:	2004      	movs	r0, #4
 800ee00:	f7fb f9de 	bl	800a1c0 <acc_log_rss>
 800ee04:	433e      	orrs	r6, r7
 800ee06:	4629      	mov	r1, r5
 800ee08:	4630      	mov	r0, r6
 800ee0a:	b002      	add	sp, #8
 800ee0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	f7fe b866 	b.w	800cee0 <acc_utils_uint32_to_uint8_swap>
 800ee14:	0801bd00 	.word	0x0801bd00
 800ee18:	0801bcf4 	.word	0x0801bcf4
 800ee1c:	0801bd68 	.word	0x0801bd68

0800ee20 <acc_confprogram_patch>:
 800ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee24:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800ee28:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ee2c:	b083      	sub	sp, #12
 800ee2e:	6871      	ldr	r1, [r6, #4]
 800ee30:	b1e1      	cbz	r1, 800ee6c <acc_confprogram_patch+0x4c>
 800ee32:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800eef0 <acc_confprogram_patch+0xd0>
 800ee36:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800eef4 <acc_confprogram_patch+0xd4>
 800ee3a:	461f      	mov	r7, r3
 800ee3c:	4681      	mov	r9, r0
 800ee3e:	4690      	mov	r8, r2
 800ee40:	2500      	movs	r5, #0
 800ee42:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800ee46:	68b2      	ldr	r2, [r6, #8]
 800ee48:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800ee4c:	009c      	lsls	r4, r3, #2
 800ee4e:	2a03      	cmp	r2, #3
 800ee50:	d809      	bhi.n	800ee66 <acc_confprogram_patch+0x46>
 800ee52:	e8df f002 	tbb	[pc, r2]
 800ee56:	0e21      	.short	0x0e21
 800ee58:	0233      	.short	0x0233
 800ee5a:	4651      	mov	r1, sl
 800ee5c:	465a      	mov	r2, fp
 800ee5e:	2000      	movs	r0, #0
 800ee60:	f7fb f9ae 	bl	800a1c0 <acc_log_rss>
 800ee64:	6871      	ldr	r1, [r6, #4]
 800ee66:	3501      	adds	r5, #1
 800ee68:	42a9      	cmp	r1, r5
 800ee6a:	d8ea      	bhi.n	800ee42 <acc_confprogram_patch+0x22>
 800ee6c:	b003      	add	sp, #12
 800ee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee72:	4643      	mov	r3, r8
 800ee74:	4a1b      	ldr	r2, [pc, #108]	; (800eee4 <acc_confprogram_patch+0xc4>)
 800ee76:	9700      	str	r7, [sp, #0]
 800ee78:	4651      	mov	r1, sl
 800ee7a:	2004      	movs	r0, #4
 800ee7c:	f7fb f9a0 	bl	800a1c0 <acc_log_rss>
 800ee80:	68b3      	ldr	r3, [r6, #8]
 800ee82:	441c      	add	r4, r3
 800ee84:	1c3b      	adds	r3, r7, #0
 800ee86:	6861      	ldr	r1, [r4, #4]
 800ee88:	8922      	ldrh	r2, [r4, #8]
 800ee8a:	bf18      	it	ne
 800ee8c:	2301      	movne	r3, #1
 800ee8e:	4648      	mov	r0, r9
 800ee90:	f7ff ff96 	bl	800edc0 <acc_confprogram_modify_runif>
 800ee94:	6871      	ldr	r1, [r6, #4]
 800ee96:	e7e6      	b.n	800ee66 <acc_confprogram_patch+0x46>
 800ee98:	4643      	mov	r3, r8
 800ee9a:	4a13      	ldr	r2, [pc, #76]	; (800eee8 <acc_confprogram_patch+0xc8>)
 800ee9c:	9700      	str	r7, [sp, #0]
 800ee9e:	4651      	mov	r1, sl
 800eea0:	2004      	movs	r0, #4
 800eea2:	f7fb f98d 	bl	800a1c0 <acc_log_rss>
 800eea6:	68b3      	ldr	r3, [r6, #8]
 800eea8:	441c      	add	r4, r3
 800eeaa:	4648      	mov	r0, r9
 800eeac:	88a1      	ldrh	r1, [r4, #4]
 800eeae:	79e3      	ldrb	r3, [r4, #7]
 800eeb0:	79a2      	ldrb	r2, [r4, #6]
 800eeb2:	9700      	str	r7, [sp, #0]
 800eeb4:	f7ff ff18 	bl	800ece8 <acc_confprogram_modify_bin>
 800eeb8:	6871      	ldr	r1, [r6, #4]
 800eeba:	e7d4      	b.n	800ee66 <acc_confprogram_patch+0x46>
 800eebc:	4643      	mov	r3, r8
 800eebe:	4a0b      	ldr	r2, [pc, #44]	; (800eeec <acc_confprogram_patch+0xcc>)
 800eec0:	9700      	str	r7, [sp, #0]
 800eec2:	4651      	mov	r1, sl
 800eec4:	2004      	movs	r0, #4
 800eec6:	f7fb f97b 	bl	800a1c0 <acc_log_rss>
 800eeca:	68b3      	ldr	r3, [r6, #8]
 800eecc:	441c      	add	r4, r3
 800eece:	fab7 f387 	clz	r3, r7
 800eed2:	6861      	ldr	r1, [r4, #4]
 800eed4:	8922      	ldrh	r2, [r4, #8]
 800eed6:	095b      	lsrs	r3, r3, #5
 800eed8:	4648      	mov	r0, r9
 800eeda:	f7ff ff71 	bl	800edc0 <acc_confprogram_modify_runif>
 800eede:	6871      	ldr	r1, [r6, #4]
 800eee0:	e7c1      	b.n	800ee66 <acc_confprogram_patch+0x46>
 800eee2:	bf00      	nop
 800eee4:	0801be04 	.word	0x0801be04
 800eee8:	0801bdd0 	.word	0x0801bdd0
 800eeec:	0801be34 	.word	0x0801be34
 800eef0:	0801be68 	.word	0x0801be68
 800eef4:	0801bcf4 	.word	0x0801bcf4

0800eef8 <acc_confprogram_live_patch>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800ef00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef04:	b085      	sub	sp, #20
 800ef06:	6872      	ldr	r2, [r6, #4]
 800ef08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ef0a:	2a00      	cmp	r2, #0
 800ef0c:	d066      	beq.n	800efdc <acc_confprogram_live_patch+0xe4>
 800ef0e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800eff8 <acc_confprogram_live_patch+0x100>
 800ef12:	9303      	str	r3, [sp, #12]
 800ef14:	4689      	mov	r9, r1
 800ef16:	4680      	mov	r8, r0
 800ef18:	2500      	movs	r5, #0
 800ef1a:	f04f 0b01 	mov.w	fp, #1
 800ef1e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800ef22:	68b3      	ldr	r3, [r6, #8]
 800ef24:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
 800ef28:	00a4      	lsls	r4, r4, #2
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d80b      	bhi.n	800ef46 <acc_confprogram_live_patch+0x4e>
 800ef2e:	e8df f003 	tbb	[pc, r3]
 800ef32:	3f27      	.short	0x3f27
 800ef34:	0211      	.short	0x0211
 800ef36:	4a2c      	ldr	r2, [pc, #176]	; (800efe8 <acc_confprogram_live_patch+0xf0>)
 800ef38:	4651      	mov	r1, sl
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	f7fb f940 	bl	800a1c0 <acc_log_rss>
 800ef40:	6872      	ldr	r2, [r6, #4]
 800ef42:	f04f 0b00 	mov.w	fp, #0
 800ef46:	3501      	adds	r5, #1
 800ef48:	42aa      	cmp	r2, r5
 800ef4a:	d8e8      	bhi.n	800ef1e <acc_confprogram_live_patch+0x26>
 800ef4c:	4658      	mov	r0, fp
 800ef4e:	b005      	add	sp, #20
 800ef50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef54:	9b03      	ldr	r3, [sp, #12]
 800ef56:	4a25      	ldr	r2, [pc, #148]	; (800efec <acc_confprogram_live_patch+0xf4>)
 800ef58:	9700      	str	r7, [sp, #0]
 800ef5a:	4651      	mov	r1, sl
 800ef5c:	2004      	movs	r0, #4
 800ef5e:	f7fb f92f 	bl	800a1c0 <acc_log_rss>
 800ef62:	68b3      	ldr	r3, [r6, #8]
 800ef64:	441c      	add	r4, r3
 800ef66:	fab7 f387 	clz	r3, r7
 800ef6a:	8921      	ldrh	r1, [r4, #8]
 800ef6c:	6862      	ldr	r2, [r4, #4]
 800ef6e:	eb09 0191 	add.w	r1, r9, r1, lsr #2
 800ef72:	095b      	lsrs	r3, r3, #5
 800ef74:	4640      	mov	r0, r8
 800ef76:	f7ff fedd 	bl	800ed34 <acc_confprogram_modify_runif_sensor>
 800ef7a:	b1a8      	cbz	r0, 800efa8 <acc_confprogram_live_patch+0xb0>
 800ef7c:	6872      	ldr	r2, [r6, #4]
 800ef7e:	e7e2      	b.n	800ef46 <acc_confprogram_live_patch+0x4e>
 800ef80:	9b03      	ldr	r3, [sp, #12]
 800ef82:	4a1b      	ldr	r2, [pc, #108]	; (800eff0 <acc_confprogram_live_patch+0xf8>)
 800ef84:	9700      	str	r7, [sp, #0]
 800ef86:	4651      	mov	r1, sl
 800ef88:	2004      	movs	r0, #4
 800ef8a:	f7fb f919 	bl	800a1c0 <acc_log_rss>
 800ef8e:	68b3      	ldr	r3, [r6, #8]
 800ef90:	441c      	add	r4, r3
 800ef92:	4640      	mov	r0, r8
 800ef94:	88a1      	ldrh	r1, [r4, #4]
 800ef96:	79e3      	ldrb	r3, [r4, #7]
 800ef98:	79a2      	ldrb	r2, [r4, #6]
 800ef9a:	9700      	str	r7, [sp, #0]
 800ef9c:	eb09 0191 	add.w	r1, r9, r1, lsr #2
 800efa0:	f7ff fe6a 	bl	800ec78 <acc_confprogram_modify_bin_sensor>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d1e9      	bne.n	800ef7c <acc_confprogram_live_patch+0x84>
 800efa8:	f04f 0b00 	mov.w	fp, #0
 800efac:	6872      	ldr	r2, [r6, #4]
 800efae:	e7ca      	b.n	800ef46 <acc_confprogram_live_patch+0x4e>
 800efb0:	9b03      	ldr	r3, [sp, #12]
 800efb2:	4a10      	ldr	r2, [pc, #64]	; (800eff4 <acc_confprogram_live_patch+0xfc>)
 800efb4:	9700      	str	r7, [sp, #0]
 800efb6:	4651      	mov	r1, sl
 800efb8:	2004      	movs	r0, #4
 800efba:	f7fb f901 	bl	800a1c0 <acc_log_rss>
 800efbe:	68b3      	ldr	r3, [r6, #8]
 800efc0:	441c      	add	r4, r3
 800efc2:	1c3b      	adds	r3, r7, #0
 800efc4:	8921      	ldrh	r1, [r4, #8]
 800efc6:	6862      	ldr	r2, [r4, #4]
 800efc8:	bf18      	it	ne
 800efca:	2301      	movne	r3, #1
 800efcc:	eb09 0191 	add.w	r1, r9, r1, lsr #2
 800efd0:	4640      	mov	r0, r8
 800efd2:	f7ff feaf 	bl	800ed34 <acc_confprogram_modify_runif_sensor>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d0e6      	beq.n	800efa8 <acc_confprogram_live_patch+0xb0>
 800efda:	e7cf      	b.n	800ef7c <acc_confprogram_live_patch+0x84>
 800efdc:	f04f 0b01 	mov.w	fp, #1
 800efe0:	4658      	mov	r0, fp
 800efe2:	b005      	add	sp, #20
 800efe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe8:	0801bc94 	.word	0x0801bc94
 800efec:	0801bc64 	.word	0x0801bc64
 800eff0:	0801bc04 	.word	0x0801bc04
 800eff4:	0801bc34 	.word	0x0801bc34
 800eff8:	0801bcf4 	.word	0x0801bcf4

0800effc <acc_confprogram_get_default_value>:
 800effc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f000:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop

0800f008 <run_area_calibration>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	ed2d 8b02 	vpush	{d8}
 800f010:	4bc6      	ldr	r3, [pc, #792]	; (800f32c <run_area_calibration+0x324>)
 800f012:	f8df b35c 	ldr.w	fp, [pc, #860]	; 800f370 <run_area_calibration+0x368>
 800f016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f018:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800f330 <run_area_calibration+0x328>
 800f01c:	ed9f 8ac5 	vldr	s16, [pc, #788]	; 800f334 <run_area_calibration+0x32c>
 800f020:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800f024:	f20d 18ff 	addw	r8, sp, #511	; 0x1ff
 800f028:	9305      	str	r3, [sp, #20]
 800f02a:	4604      	mov	r4, r0
 800f02c:	9106      	str	r1, [sp, #24]
 800f02e:	af23      	add	r7, sp, #140	; 0x8c
 800f030:	46c2      	mov	sl, r8
 800f032:	2500      	movs	r5, #0
 800f034:	f8cd 801c 	str.w	r8, [sp, #28]
 800f038:	f89b 3000 	ldrb.w	r3, [fp]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f040 8168 	bne.w	800f312 <run_area_calibration+0x30a>
 800f042:	a90d      	add	r1, sp, #52	; 0x34
 800f044:	b2a8      	uxth	r0, r5
 800f046:	f7fe fde3 	bl	800dc10 <acc_cpd_area_calibration_calculate_area_settings>
 800f04a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	227f      	movs	r2, #127	; 0x7f
 800f052:	2319      	movs	r3, #25
 800f054:	2100      	movs	r1, #0
 800f056:	4620      	mov	r0, r4
 800f058:	f7fc fd36 	bl	800bac8 <acc_sensor_reg_field_write>
 800f05c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	f44f 527e 	mov.w	r2, #16256	; 0x3f80
 800f066:	2319      	movs	r3, #25
 800f068:	2107      	movs	r1, #7
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7fc fd2c 	bl	800bac8 <acc_sensor_reg_field_write>
 800f070:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	2201      	movs	r2, #1
 800f078:	231a      	movs	r3, #26
 800f07a:	2100      	movs	r1, #0
 800f07c:	4620      	mov	r0, r4
 800f07e:	f7fc fd23 	bl	800bac8 <acc_sensor_reg_field_write>
 800f082:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	2202      	movs	r2, #2
 800f08a:	231a      	movs	r3, #26
 800f08c:	2101      	movs	r1, #1
 800f08e:	4620      	mov	r0, r4
 800f090:	f7fc fd1a 	bl	800bac8 <acc_sensor_reg_field_write>
 800f094:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	220c      	movs	r2, #12
 800f09c:	231a      	movs	r3, #26
 800f09e:	2102      	movs	r1, #2
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f7fc fd11 	bl	800bac8 <acc_sensor_reg_field_write>
 800f0a6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	2210      	movs	r2, #16
 800f0ae:	231a      	movs	r3, #26
 800f0b0:	2104      	movs	r1, #4
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f7fc fd08 	bl	800bac8 <acc_sensor_reg_field_write>
 800f0b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	2220      	movs	r2, #32
 800f0c0:	231a      	movs	r3, #26
 800f0c2:	2105      	movs	r1, #5
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7fc fcff 	bl	800bac8 <acc_sensor_reg_field_write>
 800f0ca:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	22c0      	movs	r2, #192	; 0xc0
 800f0d2:	231a      	movs	r3, #26
 800f0d4:	2106      	movs	r1, #6
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f7fc fcf6 	bl	800bac8 <acc_sensor_reg_field_write>
 800f0dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0e6:	231a      	movs	r3, #26
 800f0e8:	2108      	movs	r1, #8
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f7fc fcec 	bl	800bac8 <acc_sensor_reg_field_write>
 800f0f0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0fa:	231a      	movs	r3, #26
 800f0fc:	2109      	movs	r1, #9
 800f0fe:	4620      	mov	r0, r4
 800f100:	f7fc fce2 	bl	800bac8 <acc_sensor_reg_field_write>
 800f104:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f108:	9300      	str	r3, [sp, #0]
 800f10a:	210a      	movs	r1, #10
 800f10c:	4620      	mov	r0, r4
 800f10e:	231a      	movs	r3, #26
 800f110:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800f114:	f7fc fcd8 	bl	800bac8 <acc_sensor_reg_field_write>
 800f118:	9905      	ldr	r1, [sp, #20]
 800f11a:	4620      	mov	r0, r4
 800f11c:	f7fd fa2c 	bl	800c578 <acc_sensor_protocol_run_program>
 800f120:	b1e8      	cbz	r0, 800f15e <run_area_calibration+0x156>
 800f122:	aa09      	add	r2, sp, #36	; 0x24
 800f124:	4984      	ldr	r1, [pc, #528]	; (800f338 <run_area_calibration+0x330>)
 800f126:	4620      	mov	r0, r4
 800f128:	f7fd fa66 	bl	800c5f8 <acc_sensor_protocol_try_get_indication>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	f000 80f7 	beq.w	800f320 <run_area_calibration+0x318>
 800f132:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800f136:	2b01      	cmp	r3, #1
 800f138:	f000 811c 	beq.w	800f374 <run_area_calibration+0x36c>
 800f13c:	2b05      	cmp	r3, #5
 800f13e:	d014      	beq.n	800f16a <run_area_calibration+0x162>
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	4a7e      	ldr	r2, [pc, #504]	; (800f33c <run_area_calibration+0x334>)
 800f144:	4b7e      	ldr	r3, [pc, #504]	; (800f340 <run_area_calibration+0x338>)
 800f146:	497f      	ldr	r1, [pc, #508]	; (800f344 <run_area_calibration+0x33c>)
 800f148:	2000      	movs	r0, #0
 800f14a:	f7fb f839 	bl	800a1c0 <acc_log_rss>
 800f14e:	2400      	movs	r4, #0
 800f150:	4620      	mov	r0, r4
 800f152:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 800f156:	ecbd 8b02 	vpop	{d8}
 800f15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f15e:	4b7a      	ldr	r3, [pc, #488]	; (800f348 <run_area_calibration+0x340>)
 800f160:	4a7a      	ldr	r2, [pc, #488]	; (800f34c <run_area_calibration+0x344>)
 800f162:	4978      	ldr	r1, [pc, #480]	; (800f344 <run_area_calibration+0x33c>)
 800f164:	f7fb f82c 	bl	800a1c0 <acc_log_rss>
 800f168:	e7f1      	b.n	800f14e <run_area_calibration+0x146>
 800f16a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f040 811c 	bne.w	800f3ac <run_area_calibration+0x3a4>
 800f174:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800f178:	b12b      	cbz	r3, 800f186 <run_area_calibration+0x17e>
 800f17a:	4b75      	ldr	r3, [pc, #468]	; (800f350 <run_area_calibration+0x348>)
 800f17c:	4a75      	ldr	r2, [pc, #468]	; (800f354 <run_area_calibration+0x34c>)
 800f17e:	4971      	ldr	r1, [pc, #452]	; (800f344 <run_area_calibration+0x33c>)
 800f180:	2004      	movs	r0, #4
 800f182:	f7fb f81d 	bl	800a1c0 <acc_log_rss>
 800f186:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800f18a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f18c:	2105      	movs	r1, #5
 800f18e:	4620      	mov	r0, r4
 800f190:	930b      	str	r3, [sp, #44]	; 0x2c
 800f192:	f7fd fa89 	bl	800c6a8 <acc_sensor_protocol_get_indication_payload>
 800f196:	2800      	cmp	r0, #0
 800f198:	f000 80fc 	beq.w	800f394 <run_area_calibration+0x38c>
 800f19c:	4620      	mov	r0, r4
 800f19e:	f7fd fb09 	bl	800c7b4 <acc_sensor_protocol_respond_to_indication>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	f000 8109 	beq.w	800f3ba <run_area_calibration+0x3b2>
 800f1a8:	e9dd 960b 	ldrd	r9, r6, [sp, #44]	; 0x2c
 800f1ac:	fa1f f889 	uxth.w	r8, r9
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	4641      	mov	r1, r8
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f1ba:	f7fd fcf5 	bl	800cba8 <acc_alg_basic_subtract_mean_uint16>
 800f1be:	f89b 3000 	ldrb.w	r3, [fp]
 800f1c2:	b123      	cbz	r3, 800f1ce <run_area_calibration+0x1c6>
 800f1c4:	4a64      	ldr	r2, [pc, #400]	; (800f358 <run_area_calibration+0x350>)
 800f1c6:	495f      	ldr	r1, [pc, #380]	; (800f344 <run_area_calibration+0x33c>)
 800f1c8:	2002      	movs	r0, #2
 800f1ca:	f7fa fff9 	bl	800a1c0 <acc_log_rss>
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	f7fc fe23 	bl	800be1c <acc_sensor_diagnostics_print_buffer_u16>
 800f1d6:	aa14      	add	r2, sp, #80	; 0x50
 800f1d8:	eef0 0a68 	vmov.f32	s1, s17
 800f1dc:	eeb0 0a48 	vmov.f32	s0, s16
 800f1e0:	ab13      	add	r3, sp, #76	; 0x4c
 800f1e2:	9200      	str	r2, [sp, #0]
 800f1e4:	4641      	mov	r1, r8
 800f1e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f000 fc80 	bl	800faf0 <acc_alg_filter_gauss_mask>
 800f1f0:	4641      	mov	r1, r8
 800f1f2:	ab15      	add	r3, sp, #84	; 0x54
 800f1f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	f000 fc4b 	bl	800fa94 <acc_alg_basic_energy>
 800f1fe:	4630      	mov	r0, r6
 800f200:	f000 fdf4 	bl	800fdec <acc_alg_area_check_center_frequency>
 800f204:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f206:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f208:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800f20c:	3501      	adds	r5, #1
 800f20e:	f80a 0f01 	strb.w	r0, [sl, #1]!
 800f212:	f847 2b04 	str.w	r2, [r7], #4
 800f216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f218:	67bb      	str	r3, [r7, #120]	; 0x78
 800f21a:	2d1f      	cmp	r5, #31
 800f21c:	f47f af0c 	bne.w	800f038 <run_area_calibration+0x30>
 800f220:	f89b 3000 	ldrb.w	r3, [fp]
 800f224:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f040 80d8 	bne.w	800f3de <run_area_calibration+0x3d6>
 800f22e:	211f      	movs	r1, #31
 800f230:	a823      	add	r0, sp, #140	; 0x8c
 800f232:	f7fc fe29 	bl	800be88 <acc_sensor_diagnostics_print_buffer_f32>
 800f236:	f89b 3000 	ldrb.w	r3, [fp]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 80c9 	bne.w	800f3d2 <run_area_calibration+0x3ca>
 800f240:	ac42      	add	r4, sp, #264	; 0x108
 800f242:	4620      	mov	r0, r4
 800f244:	211f      	movs	r1, #31
 800f246:	f7fc fe1f 	bl	800be88 <acc_sensor_diagnostics_print_buffer_f32>
 800f24a:	f89b 3000 	ldrb.w	r3, [fp]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f040 80cb 	bne.w	800f3ea <run_area_calibration+0x3e2>
 800f254:	a861      	add	r0, sp, #388	; 0x184
 800f256:	211f      	movs	r1, #31
 800f258:	f7fc fe16 	bl	800be88 <acc_sensor_diagnostics_print_buffer_f32>
 800f25c:	f89b 3000 	ldrb.w	r3, [fp]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f040 80b0 	bne.w	800f3c6 <run_area_calibration+0x3be>
 800f266:	211f      	movs	r1, #31
 800f268:	a880      	add	r0, sp, #512	; 0x200
 800f26a:	f7fc fddf 	bl	800be2c <acc_sensor_diagnostics_print_buffer_bool>
 800f26e:	9b06      	ldr	r3, [sp, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 80dd 	beq.w	800f430 <run_area_calibration+0x428>
 800f276:	ab0b      	add	r3, sp, #44	; 0x2c
 800f278:	e9cd 4300 	strd	r4, r3, [sp]
 800f27c:	aa13      	add	r2, sp, #76	; 0x4c
 800f27e:	a961      	add	r1, sp, #388	; 0x184
 800f280:	ab23      	add	r3, sp, #140	; 0x8c
 800f282:	201f      	movs	r0, #31
 800f284:	f000 fdec 	bl	800fe60 <acc_alg_area_selection>
 800f288:	4604      	mov	r4, r0
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f000 80b3 	beq.w	800f3f6 <run_area_calibration+0x3ee>
 800f290:	f20d 221e 	addw	r2, sp, #542	; 0x21e
 800f294:	2400      	movs	r4, #0
 800f296:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800f29a:	4590      	cmp	r8, r2
 800f29c:	441c      	add	r4, r3
 800f29e:	d1fa      	bne.n	800f296 <run_area_calibration+0x28e>
 800f2a0:	9400      	str	r4, [sp, #0]
 800f2a2:	4b2e      	ldr	r3, [pc, #184]	; (800f35c <run_area_calibration+0x354>)
 800f2a4:	4a2e      	ldr	r2, [pc, #184]	; (800f360 <run_area_calibration+0x358>)
 800f2a6:	4927      	ldr	r1, [pc, #156]	; (800f344 <run_area_calibration+0x33c>)
 800f2a8:	2004      	movs	r0, #4
 800f2aa:	f7fa ff89 	bl	800a1c0 <acc_log_rss>
 800f2ae:	2c1a      	cmp	r4, #26
 800f2b0:	f240 80a8 	bls.w	800f404 <run_area_calibration+0x3fc>
 800f2b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800f2b8:	ab23      	add	r3, sp, #140	; 0x8c
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f893 4174 	ldrb.w	r4, [r3, #372]	; 0x174
 800f2c0:	2c00      	cmp	r4, #0
 800f2c2:	f000 80ae 	beq.w	800f422 <run_area_calibration+0x41a>
 800f2c6:	f1a2 030b 	sub.w	r3, r2, #11
 800f2ca:	2b08      	cmp	r3, #8
 800f2cc:	f240 80a1 	bls.w	800f412 <run_area_calibration+0x40a>
 800f2d0:	ab23      	add	r3, sp, #140	; 0x8c
 800f2d2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800f2d6:	ed91 7a3e 	vldr	s14, [r1, #248]	; 0xf8
 800f2da:	edd1 7a00 	vldr	s15, [r1]
 800f2de:	4b1f      	ldr	r3, [pc, #124]	; (800f35c <run_area_calibration+0x354>)
 800f2e0:	9200      	str	r2, [sp, #0]
 800f2e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f2e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2ee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2f6:	4a1b      	ldr	r2, [pc, #108]	; (800f364 <run_area_calibration+0x35c>)
 800f2f8:	ed8d 7a02 	vstr	s14, [sp, #8]
 800f2fc:	edcd 7a01 	vstr	s15, [sp, #4]
 800f300:	4910      	ldr	r1, [pc, #64]	; (800f344 <run_area_calibration+0x33c>)
 800f302:	2002      	movs	r0, #2
 800f304:	f7fa ff5c 	bl	800a1c0 <acc_log_rss>
 800f308:	9a06      	ldr	r2, [sp, #24]
 800f30a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800f30e:	8013      	strh	r3, [r2, #0]
 800f310:	e71e      	b.n	800f150 <run_area_calibration+0x148>
 800f312:	462b      	mov	r3, r5
 800f314:	4a14      	ldr	r2, [pc, #80]	; (800f368 <run_area_calibration+0x360>)
 800f316:	490b      	ldr	r1, [pc, #44]	; (800f344 <run_area_calibration+0x33c>)
 800f318:	2002      	movs	r0, #2
 800f31a:	f7fa ff51 	bl	800a1c0 <acc_log_rss>
 800f31e:	e690      	b.n	800f042 <run_area_calibration+0x3a>
 800f320:	4b07      	ldr	r3, [pc, #28]	; (800f340 <run_area_calibration+0x338>)
 800f322:	4a12      	ldr	r2, [pc, #72]	; (800f36c <run_area_calibration+0x364>)
 800f324:	4907      	ldr	r1, [pc, #28]	; (800f344 <run_area_calibration+0x33c>)
 800f326:	f7fa ff4b 	bl	800a1c0 <acc_log_rss>
 800f32a:	e710      	b.n	800f14e <run_area_calibration+0x146>
 800f32c:	08015a08 	.word	0x08015a08
 800f330:	42280000 	.word	0x42280000
 800f334:	43fa0000 	.word	0x43fa0000
 800f338:	001e8480 	.word	0x001e8480
 800f33c:	08019380 	.word	0x08019380
 800f340:	0801bee8 	.word	0x0801bee8
 800f344:	0801c09c 	.word	0x0801c09c
 800f348:	0801beb4 	.word	0x0801beb4
 800f34c:	0801c0b0 	.word	0x0801c0b0
 800f350:	0801bed4 	.word	0x0801bed4
 800f354:	0801c128 	.word	0x0801c128
 800f358:	0801c158 	.word	0x0801c158
 800f35c:	0801bf10 	.word	0x0801bf10
 800f360:	0801c2b4 	.word	0x0801c2b4
 800f364:	0801c3ec 	.word	0x0801c3ec
 800f368:	0801c07c 	.word	0x0801c07c
 800f36c:	08019304 	.word	0x08019304
 800f370:	20000420 	.word	0x20000420
 800f374:	4620      	mov	r0, r4
 800f376:	f7fc fe23 	bl	800bfc0 <acc_sensor_diagnostics_sensor_status>
 800f37a:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 800f37e:	f7fd fb47 	bl	800ca10 <acc_sensor_protocol_get_error_message>
 800f382:	4b2f      	ldr	r3, [pc, #188]	; (800f440 <run_area_calibration+0x438>)
 800f384:	4a2f      	ldr	r2, [pc, #188]	; (800f444 <run_area_calibration+0x43c>)
 800f386:	4930      	ldr	r1, [pc, #192]	; (800f448 <run_area_calibration+0x440>)
 800f388:	e9cd 4000 	strd	r4, r0, [sp]
 800f38c:	2000      	movs	r0, #0
 800f38e:	f7fa ff17 	bl	800a1c0 <acc_log_rss>
 800f392:	e6dc      	b.n	800f14e <run_area_calibration+0x146>
 800f394:	4b2d      	ldr	r3, [pc, #180]	; (800f44c <run_area_calibration+0x444>)
 800f396:	4a2e      	ldr	r2, [pc, #184]	; (800f450 <run_area_calibration+0x448>)
 800f398:	492b      	ldr	r1, [pc, #172]	; (800f448 <run_area_calibration+0x440>)
 800f39a:	f7fa ff11 	bl	800a1c0 <acc_log_rss>
 800f39e:	4b2d      	ldr	r3, [pc, #180]	; (800f454 <run_area_calibration+0x44c>)
 800f3a0:	4a2b      	ldr	r2, [pc, #172]	; (800f450 <run_area_calibration+0x448>)
 800f3a2:	4929      	ldr	r1, [pc, #164]	; (800f448 <run_area_calibration+0x440>)
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	f7fa ff0b 	bl	800a1c0 <acc_log_rss>
 800f3aa:	e6d0      	b.n	800f14e <run_area_calibration+0x146>
 800f3ac:	4b2a      	ldr	r3, [pc, #168]	; (800f458 <run_area_calibration+0x450>)
 800f3ae:	4a2b      	ldr	r2, [pc, #172]	; (800f45c <run_area_calibration+0x454>)
 800f3b0:	4925      	ldr	r1, [pc, #148]	; (800f448 <run_area_calibration+0x440>)
 800f3b2:	2004      	movs	r0, #4
 800f3b4:	f7fa ff04 	bl	800a1c0 <acc_log_rss>
 800f3b8:	e6dc      	b.n	800f174 <run_area_calibration+0x16c>
 800f3ba:	4b24      	ldr	r3, [pc, #144]	; (800f44c <run_area_calibration+0x444>)
 800f3bc:	4a28      	ldr	r2, [pc, #160]	; (800f460 <run_area_calibration+0x458>)
 800f3be:	4922      	ldr	r1, [pc, #136]	; (800f448 <run_area_calibration+0x440>)
 800f3c0:	f7fa fefe 	bl	800a1c0 <acc_log_rss>
 800f3c4:	e7eb      	b.n	800f39e <run_area_calibration+0x396>
 800f3c6:	4a27      	ldr	r2, [pc, #156]	; (800f464 <run_area_calibration+0x45c>)
 800f3c8:	491f      	ldr	r1, [pc, #124]	; (800f448 <run_area_calibration+0x440>)
 800f3ca:	2002      	movs	r0, #2
 800f3cc:	f7fa fef8 	bl	800a1c0 <acc_log_rss>
 800f3d0:	e749      	b.n	800f266 <run_area_calibration+0x25e>
 800f3d2:	4a25      	ldr	r2, [pc, #148]	; (800f468 <run_area_calibration+0x460>)
 800f3d4:	491c      	ldr	r1, [pc, #112]	; (800f448 <run_area_calibration+0x440>)
 800f3d6:	2002      	movs	r0, #2
 800f3d8:	f7fa fef2 	bl	800a1c0 <acc_log_rss>
 800f3dc:	e730      	b.n	800f240 <run_area_calibration+0x238>
 800f3de:	4a23      	ldr	r2, [pc, #140]	; (800f46c <run_area_calibration+0x464>)
 800f3e0:	4919      	ldr	r1, [pc, #100]	; (800f448 <run_area_calibration+0x440>)
 800f3e2:	2002      	movs	r0, #2
 800f3e4:	f7fa feec 	bl	800a1c0 <acc_log_rss>
 800f3e8:	e721      	b.n	800f22e <run_area_calibration+0x226>
 800f3ea:	4a21      	ldr	r2, [pc, #132]	; (800f470 <run_area_calibration+0x468>)
 800f3ec:	4916      	ldr	r1, [pc, #88]	; (800f448 <run_area_calibration+0x440>)
 800f3ee:	2002      	movs	r0, #2
 800f3f0:	f7fa fee6 	bl	800a1c0 <acc_log_rss>
 800f3f4:	e72e      	b.n	800f254 <run_area_calibration+0x24c>
 800f3f6:	4b1f      	ldr	r3, [pc, #124]	; (800f474 <run_area_calibration+0x46c>)
 800f3f8:	4a1f      	ldr	r2, [pc, #124]	; (800f478 <run_area_calibration+0x470>)
 800f3fa:	4913      	ldr	r1, [pc, #76]	; (800f448 <run_area_calibration+0x440>)
 800f3fc:	2003      	movs	r0, #3
 800f3fe:	f7fa fedf 	bl	800a1c0 <acc_log_rss>
 800f402:	e6a5      	b.n	800f150 <run_area_calibration+0x148>
 800f404:	4b1b      	ldr	r3, [pc, #108]	; (800f474 <run_area_calibration+0x46c>)
 800f406:	4a1d      	ldr	r2, [pc, #116]	; (800f47c <run_area_calibration+0x474>)
 800f408:	490f      	ldr	r1, [pc, #60]	; (800f448 <run_area_calibration+0x440>)
 800f40a:	2003      	movs	r0, #3
 800f40c:	f7fa fed8 	bl	800a1c0 <acc_log_rss>
 800f410:	e69d      	b.n	800f14e <run_area_calibration+0x146>
 800f412:	4b18      	ldr	r3, [pc, #96]	; (800f474 <run_area_calibration+0x46c>)
 800f414:	4a1a      	ldr	r2, [pc, #104]	; (800f480 <run_area_calibration+0x478>)
 800f416:	490c      	ldr	r1, [pc, #48]	; (800f448 <run_area_calibration+0x440>)
 800f418:	2003      	movs	r0, #3
 800f41a:	f7fa fed1 	bl	800a1c0 <acc_log_rss>
 800f41e:	2400      	movs	r4, #0
 800f420:	e696      	b.n	800f150 <run_area_calibration+0x148>
 800f422:	4b14      	ldr	r3, [pc, #80]	; (800f474 <run_area_calibration+0x46c>)
 800f424:	4a17      	ldr	r2, [pc, #92]	; (800f484 <run_area_calibration+0x47c>)
 800f426:	4908      	ldr	r1, [pc, #32]	; (800f448 <run_area_calibration+0x440>)
 800f428:	2003      	movs	r0, #3
 800f42a:	f7fa fec9 	bl	800a1c0 <acc_log_rss>
 800f42e:	e68f      	b.n	800f150 <run_area_calibration+0x148>
 800f430:	4b15      	ldr	r3, [pc, #84]	; (800f488 <run_area_calibration+0x480>)
 800f432:	4a10      	ldr	r2, [pc, #64]	; (800f474 <run_area_calibration+0x46c>)
 800f434:	4815      	ldr	r0, [pc, #84]	; (800f48c <run_area_calibration+0x484>)
 800f436:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800f43a:	f000 fdcb 	bl	800ffd4 <__assert_func>
 800f43e:	bf00      	nop
 800f440:	0801bee8 	.word	0x0801bee8
 800f444:	08019340 	.word	0x08019340
 800f448:	0801c09c 	.word	0x0801c09c
 800f44c:	0801bf04 	.word	0x0801bf04
 800f450:	080193c0 	.word	0x080193c0
 800f454:	0801bec0 	.word	0x0801bec0
 800f458:	0801bed4 	.word	0x0801bed4
 800f45c:	0801c0f8 	.word	0x0801c0f8
 800f460:	080193f8 	.word	0x080193f8
 800f464:	0801c1f8 	.word	0x0801c1f8
 800f468:	0801c1b4 	.word	0x0801c1b4
 800f46c:	0801c18c 	.word	0x0801c18c
 800f470:	0801c1d8 	.word	0x0801c1d8
 800f474:	0801bf10 	.word	0x0801bf10
 800f478:	0801c25c 	.word	0x0801c25c
 800f47c:	0801c2e8 	.word	0x0801c2e8
 800f480:	0801c3a0 	.word	0x0801c3a0
 800f484:	0801c350 	.word	0x0801c350
 800f488:	0801c224 	.word	0x0801c224
 800f48c:	0801c240 	.word	0x0801c240

0800f490 <acc_cpd_area_calibration>:
 800f490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f492:	460e      	mov	r6, r1
 800f494:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
 800f498:	b08b      	sub	sp, #44	; 0x2c
 800f49a:	6943      	ldr	r3, [r0, #20]
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f4a2:	4b33      	ldr	r3, [pc, #204]	; (800f570 <acc_cpd_area_calibration+0xe0>)
 800f4a4:	4a33      	ldr	r2, [pc, #204]	; (800f574 <acc_cpd_area_calibration+0xe4>)
 800f4a6:	4934      	ldr	r1, [pc, #208]	; (800f578 <acc_cpd_area_calibration+0xe8>)
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	2004      	movs	r0, #4
 800f4ac:	f7fa fe88 	bl	800a1c0 <acc_log_rss>
 800f4b0:	4b32      	ldr	r3, [pc, #200]	; (800f57c <acc_cpd_area_calibration+0xec>)
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	b193      	cbz	r3, 800f4dc <acc_cpd_area_calibration+0x4c>
 800f4b6:	68a2      	ldr	r2, [r4, #8]
 800f4b8:	69a0      	ldr	r0, [r4, #24]
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	e9d4 5707 	ldrd	r5, r7, [r4, #28]
 800f4c0:	e9cd 2200 	strd	r2, r2, [sp]
 800f4c4:	6961      	ldr	r1, [r4, #20]
 800f4c6:	9706      	str	r7, [sp, #24]
 800f4c8:	68e2      	ldr	r2, [r4, #12]
 800f4ca:	e9cd 0504 	strd	r0, r5, [sp, #16]
 800f4ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f4d2:	2002      	movs	r0, #2
 800f4d4:	4a2a      	ldr	r2, [pc, #168]	; (800f580 <acc_cpd_area_calibration+0xf0>)
 800f4d6:	4928      	ldr	r1, [pc, #160]	; (800f578 <acc_cpd_area_calibration+0xe8>)
 800f4d8:	f7fa fe72 	bl	800a1c0 <acc_log_rss>
 800f4dc:	2200      	movs	r2, #0
 800f4de:	a909      	add	r1, sp, #36	; 0x24
 800f4e0:	6820      	ldr	r0, [r4, #0]
 800f4e2:	f7fc ffd9 	bl	800c498 <acc_sensor_protocol_get_communication_buffer>
 800f4e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f4e8:	4926      	ldr	r1, [pc, #152]	; (800f584 <acc_cpd_area_calibration+0xf4>)
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f44f 6217 	mov.w	r2, #2416	; 0x970
 800f4f0:	f000 fdd4 	bl	801009c <memcpy>
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	6a23      	ldr	r3, [r4, #32]
 800f4f8:	4923      	ldr	r1, [pc, #140]	; (800f588 <acc_cpd_area_calibration+0xf8>)
 800f4fa:	220f      	movs	r2, #15
 800f4fc:	f7ff fc90 	bl	800ee20 <acc_confprogram_patch>
 800f500:	4628      	mov	r0, r5
 800f502:	6963      	ldr	r3, [r4, #20]
 800f504:	4920      	ldr	r1, [pc, #128]	; (800f588 <acc_cpd_area_calibration+0xf8>)
 800f506:	2231      	movs	r2, #49	; 0x31
 800f508:	f7ff fc8a 	bl	800ee20 <acc_confprogram_patch>
 800f50c:	4628      	mov	r0, r5
 800f50e:	69a3      	ldr	r3, [r4, #24]
 800f510:	491d      	ldr	r1, [pc, #116]	; (800f588 <acc_cpd_area_calibration+0xf8>)
 800f512:	2212      	movs	r2, #18
 800f514:	f7ff fc84 	bl	800ee20 <acc_confprogram_patch>
 800f518:	4628      	mov	r0, r5
 800f51a:	69e3      	ldr	r3, [r4, #28]
 800f51c:	491a      	ldr	r1, [pc, #104]	; (800f588 <acc_cpd_area_calibration+0xf8>)
 800f51e:	2224      	movs	r2, #36	; 0x24
 800f520:	f7ff fc7e 	bl	800ee20 <acc_confprogram_patch>
 800f524:	f44f 6217 	mov.w	r2, #2416	; 0x970
 800f528:	2100      	movs	r1, #0
 800f52a:	6820      	ldr	r0, [r4, #0]
 800f52c:	f7fc ffb6 	bl	800c49c <acc_sensor_protocol_load_program>
 800f530:	4605      	mov	r5, r0
 800f532:	b140      	cbz	r0, 800f546 <acc_cpd_area_calibration+0xb6>
 800f534:	4631      	mov	r1, r6
 800f536:	6820      	ldr	r0, [r4, #0]
 800f538:	f7ff fd66 	bl	800f008 <run_area_calibration>
 800f53c:	4605      	mov	r5, r0
 800f53e:	b970      	cbnz	r0, 800f55e <acc_cpd_area_calibration+0xce>
 800f540:	4628      	mov	r0, r5
 800f542:	b00b      	add	sp, #44	; 0x2c
 800f544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f546:	4a11      	ldr	r2, [pc, #68]	; (800f58c <acc_cpd_area_calibration+0xfc>)
 800f548:	490b      	ldr	r1, [pc, #44]	; (800f578 <acc_cpd_area_calibration+0xe8>)
 800f54a:	f7fa fe39 	bl	800a1c0 <acc_log_rss>
 800f54e:	4628      	mov	r0, r5
 800f550:	4a0f      	ldr	r2, [pc, #60]	; (800f590 <acc_cpd_area_calibration+0x100>)
 800f552:	4909      	ldr	r1, [pc, #36]	; (800f578 <acc_cpd_area_calibration+0xe8>)
 800f554:	f7fa fe34 	bl	800a1c0 <acc_log_rss>
 800f558:	4628      	mov	r0, r5
 800f55a:	b00b      	add	sp, #44	; 0x2c
 800f55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f55e:	4b04      	ldr	r3, [pc, #16]	; (800f570 <acc_cpd_area_calibration+0xe0>)
 800f560:	4a0c      	ldr	r2, [pc, #48]	; (800f594 <acc_cpd_area_calibration+0x104>)
 800f562:	4905      	ldr	r1, [pc, #20]	; (800f578 <acc_cpd_area_calibration+0xe8>)
 800f564:	2004      	movs	r0, #4
 800f566:	f7fa fe2b 	bl	800a1c0 <acc_log_rss>
 800f56a:	4628      	mov	r0, r5
 800f56c:	b00b      	add	sp, #44	; 0x2c
 800f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f570:	0801be98 	.word	0x0801be98
 800f574:	0801bf24 	.word	0x0801bf24
 800f578:	0801c09c 	.word	0x0801c09c
 800f57c:	20000420 	.word	0x20000420
 800f580:	0801bf84 	.word	0x0801bf84
 800f584:	08015a64 	.word	0x08015a64
 800f588:	0801cba8 	.word	0x0801cba8
 800f58c:	0801c018 	.word	0x0801c018
 800f590:	08019200 	.word	0x08019200
 800f594:	0801c048 	.word	0x0801c048

0800f598 <acc_alg_dly_coarse_priority_sort>:
 800f598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59c:	1dc3      	adds	r3, r0, #7
 800f59e:	466c      	mov	r4, sp
 800f5a0:	08db      	lsrs	r3, r3, #3
 800f5a2:	eba4 03c3 	sub.w	r3, r4, r3, lsl #3
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	4606      	mov	r6, r0
 800f5aa:	469d      	mov	sp, r3
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d04e      	beq.n	800f64e <acc_alg_dly_coarse_priority_sort+0xb6>
 800f5b0:	1e45      	subs	r5, r0, #1
 800f5b2:	f10d 3bff 	add.w	fp, sp, #4294967295
 800f5b6:	4668      	mov	r0, sp
 800f5b8:	f04f 0800 	mov.w	r8, #0
 800f5bc:	fa10 f585 	uxtah	r5, r0, r5
 800f5c0:	465b      	mov	r3, fp
 800f5c2:	46c4      	mov	ip, r8
 800f5c4:	1e88      	subs	r0, r1, #2
 800f5c6:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 800f5ca:	f803 cf01 	strb.w	ip, [r3, #1]!
 800f5ce:	45a0      	cmp	r8, r4
 800f5d0:	bf38      	it	cc
 800f5d2:	46a0      	movcc	r8, r4
 800f5d4:	42ab      	cmp	r3, r5
 800f5d6:	d1f6      	bne.n	800f5c6 <acc_alg_dly_coarse_priority_sort+0x2e>
 800f5d8:	f3c8 084f 	ubfx	r8, r8, #1, #16
 800f5dc:	f04f 0c1e 	mov.w	ip, #30
 800f5e0:	f04f 0a00 	mov.w	sl, #0
 800f5e4:	45e0      	cmp	r8, ip
 800f5e6:	eb08 0e0c 	add.w	lr, r8, ip
 800f5ea:	bf88      	it	hi
 800f5ec:	eba8 090c 	subhi.w	r9, r8, ip
 800f5f0:	fa1f fe8e 	uxth.w	lr, lr
 800f5f4:	bf8c      	ite	hi
 800f5f6:	fa1f f989 	uxthhi.w	r9, r9
 800f5fa:	f04f 0900 	movls.w	r9, #0
 800f5fe:	2300      	movs	r3, #0
 800f600:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800f604:	bf28      	it	cs
 800f606:	f04f 0eff 	movcs.w	lr, #255	; 0xff
 800f60a:	461c      	mov	r4, r3
 800f60c:	4658      	mov	r0, fp
 800f60e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f612:	b975      	cbnz	r5, 800f632 <acc_alg_dly_coarse_priority_sort+0x9a>
 800f614:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 800f618:	45a9      	cmp	r9, r5
 800f61a:	d80a      	bhi.n	800f632 <acc_alg_dly_coarse_priority_sort+0x9a>
 800f61c:	45ae      	cmp	lr, r5
 800f61e:	d308      	bcc.n	800f632 <acc_alg_dly_coarse_priority_sort+0x9a>
 800f620:	f822 401a 	strh.w	r4, [r2, sl, lsl #1]
 800f624:	f10a 0501 	add.w	r5, sl, #1
 800f628:	f04f 0401 	mov.w	r4, #1
 800f62c:	7004      	strb	r4, [r0, #0]
 800f62e:	fa1f fa85 	uxth.w	sl, r5
 800f632:	3301      	adds	r3, #1
 800f634:	b29c      	uxth	r4, r3
 800f636:	42b4      	cmp	r4, r6
 800f638:	d3e9      	bcc.n	800f60e <acc_alg_dly_coarse_priority_sort+0x76>
 800f63a:	f10c 0c1e 	add.w	ip, ip, #30
 800f63e:	45b2      	cmp	sl, r6
 800f640:	fa1f fc8c 	uxth.w	ip, ip
 800f644:	d3ce      	bcc.n	800f5e4 <acc_alg_dly_coarse_priority_sort+0x4c>
 800f646:	2001      	movs	r0, #1
 800f648:	46bd      	mov	sp, r7
 800f64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64e:	4a04      	ldr	r2, [pc, #16]	; (800f660 <acc_alg_dly_coarse_priority_sort+0xc8>)
 800f650:	4904      	ldr	r1, [pc, #16]	; (800f664 <acc_alg_dly_coarse_priority_sort+0xcc>)
 800f652:	f7fa fdb5 	bl	800a1c0 <acc_log_rss>
 800f656:	4630      	mov	r0, r6
 800f658:	46bd      	mov	sp, r7
 800f65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65e:	bf00      	nop
 800f660:	0801c41c 	.word	0x0801c41c
 800f664:	0801c434 	.word	0x0801c434

0800f668 <acc_alg_plateau_finder>:
 800f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	0044      	lsls	r4, r0, #1
 800f66e:	3408      	adds	r4, #8
 800f670:	08e4      	lsrs	r4, r4, #3
 800f672:	b08b      	sub	sp, #44	; 0x2c
 800f674:	00e4      	lsls	r4, r4, #3
 800f676:	af06      	add	r7, sp, #24
 800f678:	ebad 0d04 	sub.w	sp, sp, r4
 800f67c:	ad06      	add	r5, sp, #24
 800f67e:	ebad 0d04 	sub.w	sp, sp, r4
 800f682:	f10d 0a18 	add.w	sl, sp, #24
 800f686:	ebad 0d04 	sub.w	sp, sp, r4
 800f68a:	607b      	str	r3, [r7, #4]
 800f68c:	2801      	cmp	r0, #1
 800f68e:	ab06      	add	r3, sp, #24
 800f690:	60bd      	str	r5, [r7, #8]
 800f692:	6039      	str	r1, [r7, #0]
 800f694:	4693      	mov	fp, r2
 800f696:	60fb      	str	r3, [r7, #12]
 800f698:	f240 81e3 	bls.w	800fa62 <acc_alg_plateau_finder+0x3fa>
 800f69c:	1e86      	subs	r6, r0, #2
 800f69e:	f04f 0900 	mov.w	r9, #0
 800f6a2:	b2b6      	uxth	r6, r6
 800f6a4:	460d      	mov	r5, r1
 800f6a6:	f100 38ff 	add.w	r8, r0, #4294967295
 800f6aa:	eddf 6acc 	vldr	s13, [pc, #816]	; 800f9dc <acc_alg_plateau_finder+0x374>
 800f6ae:	3602      	adds	r6, #2
 800f6b0:	464a      	mov	r2, r9
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	2401      	movs	r4, #1
 800f6b6:	e004      	b.n	800f6c2 <acc_alg_plateau_finder+0x5a>
 800f6b8:	45a0      	cmp	r8, r4
 800f6ba:	d01e      	beq.n	800f6fa <acc_alg_plateau_finder+0x92>
 800f6bc:	3401      	adds	r4, #1
 800f6be:	42a6      	cmp	r6, r4
 800f6c0:	d050      	beq.n	800f764 <acc_alg_plateau_finder+0xfc>
 800f6c2:	f8b5 c000 	ldrh.w	ip, [r5]
 800f6c6:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800f6ca:	ee07 ca90 	vmov	s15, ip
 800f6ce:	459c      	cmp	ip, r3
 800f6d0:	eba3 0e0c 	sub.w	lr, r3, ip
 800f6d4:	bf28      	it	cs
 800f6d6:	ebac 0303 	subcs.w	r3, ip, r3
 800f6da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6de:	b2a0      	uxth	r0, r4
 800f6e0:	bf34      	ite	cc
 800f6e2:	fa1f f38e 	uxthcc.w	r3, lr
 800f6e6:	b29b      	uxthcs	r3, r3
 800f6e8:	3201      	adds	r2, #1
 800f6ea:	4401      	add	r1, r0
 800f6ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6f0:	b292      	uxth	r2, r2
 800f6f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f6f6:	b289      	uxth	r1, r1
 800f6f8:	d9de      	bls.n	800f6b8 <acc_alg_plateau_finder+0x50>
 800f6fa:	2a02      	cmp	r2, #2
 800f6fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f700:	f109 0e01 	add.w	lr, r9, #1
 800f704:	f240 8186 	bls.w	800fa14 <acc_alg_plateau_finder+0x3ac>
 800f708:	ee07 1a10 	vmov	s14, r1
 800f70c:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 800f710:	ee07 2a10 	vmov	s14, r2
 800f714:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800f718:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800f71c:	ee85 7a06 	vdiv.f32	s14, s10, s12
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 800f72e:	3401      	adds	r4, #1
 800f730:	2100      	movs	r1, #0
 800f732:	42a6      	cmp	r6, r4
 800f734:	460a      	mov	r2, r1
 800f736:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 800f73a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f73e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800f742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f746:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800f9dc <acc_alg_plateau_finder+0x374>
 800f74a:	ee17 3a90 	vmov	r3, s15
 800f74e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f752:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800f756:	ee16 3a10 	vmov	r3, s12
 800f75a:	f82a 3019 	strh.w	r3, [sl, r9, lsl #1]
 800f75e:	fa1f f98e 	uxth.w	r9, lr
 800f762:	d1ae      	bne.n	800f6c2 <acc_alg_plateau_finder+0x5a>
 800f764:	f8cd 9000 	str.w	r9, [sp]
 800f768:	4b9d      	ldr	r3, [pc, #628]	; (800f9e0 <acc_alg_plateau_finder+0x378>)
 800f76a:	4a9e      	ldr	r2, [pc, #632]	; (800f9e4 <acc_alg_plateau_finder+0x37c>)
 800f76c:	499e      	ldr	r1, [pc, #632]	; (800f9e8 <acc_alg_plateau_finder+0x380>)
 800f76e:	2004      	movs	r0, #4
 800f770:	f7fa fd26 	bl	800a1c0 <acc_log_rss>
 800f774:	f1b9 0f00 	cmp.w	r9, #0
 800f778:	d024      	beq.n	800f7c4 <acc_alg_plateau_finder+0x15c>
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	f8c7 a008 	str.w	sl, [r7, #8]
 800f780:	1e9e      	subs	r6, r3, #2
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	1e9d      	subs	r5, r3, #2
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3b02      	subs	r3, #2
 800f78a:	f1aa 0802 	sub.w	r8, sl, #2
 800f78e:	2400      	movs	r4, #0
 800f790:	469a      	mov	sl, r3
 800f792:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 800f796:	9304      	str	r3, [sp, #16]
 800f798:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
 800f79c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800f7a0:	4991      	ldr	r1, [pc, #580]	; (800f9e8 <acc_alg_plateau_finder+0x380>)
 800f7a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f7a6:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800f7aa:	4a90      	ldr	r2, [pc, #576]	; (800f9ec <acc_alg_plateau_finder+0x384>)
 800f7ac:	e9cd 4300 	strd	r4, r3, [sp]
 800f7b0:	2004      	movs	r0, #4
 800f7b2:	4b8b      	ldr	r3, [pc, #556]	; (800f9e0 <acc_alg_plateau_finder+0x378>)
 800f7b4:	3401      	adds	r4, #1
 800f7b6:	f7fa fd03 	bl	800a1c0 <acc_log_rss>
 800f7ba:	b2a3      	uxth	r3, r4
 800f7bc:	4599      	cmp	r9, r3
 800f7be:	d8e8      	bhi.n	800f792 <acc_alg_plateau_finder+0x12a>
 800f7c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	881a      	ldrh	r2, [r3, #0]
 800f7c8:	60ba      	str	r2, [r7, #8]
 800f7ca:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	f240 8136 	bls.w	800fa40 <acc_alg_plateau_finder+0x3d8>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800f9f0 <acc_alg_plateau_finder+0x388>
 800f7da:	ed9f 5a86 	vldr	s10, [pc, #536]	; 800f9f4 <acc_alg_plateau_finder+0x38c>
 800f7de:	eddf 6a86 	vldr	s13, [pc, #536]	; 800f9f8 <acc_alg_plateau_finder+0x390>
 800f7e2:	eddf 5a86 	vldr	s11, [pc, #536]	; 800f9fc <acc_alg_plateau_finder+0x394>
 800f7e6:	ed9f 6a86 	vldr	s12, [pc, #536]	; 800fa00 <acc_alg_plateau_finder+0x398>
 800f7ea:	497f      	ldr	r1, [pc, #508]	; (800f9e8 <acc_alg_plateau_finder+0x380>)
 800f7ec:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 800f7f0:	ee07 2a90 	vmov	s15, r2
 800f7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7f8:	4b79      	ldr	r3, [pc, #484]	; (800f9e0 <acc_alg_plateau_finder+0x378>)
 800f7fa:	4a82      	ldr	r2, [pc, #520]	; (800fa04 <acc_alg_plateau_finder+0x39c>)
 800f7fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f800:	2004      	movs	r0, #4
 800f802:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f80a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f812:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f816:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f81a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f81e:	ee17 4a90 	vmov	r4, s15
 800f822:	b2a4      	uxth	r4, r4
 800f824:	9400      	str	r4, [sp, #0]
 800f826:	f7fa fccb 	bl	800a1c0 <acc_log_rss>
 800f82a:	f1b9 0f00 	cmp.w	r9, #0
 800f82e:	f000 8116 	beq.w	800fa5e <acc_alg_plateau_finder+0x3f6>
 800f832:	2500      	movs	r5, #0
 800f834:	f1aa 0802 	sub.w	r8, sl, #2
 800f838:	f8c7 a004 	str.w	sl, [r7, #4]
 800f83c:	462e      	mov	r6, r5
 800f83e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800f842:	e00a      	b.n	800f85a <acc_alg_plateau_finder+0x1f2>
 800f844:	428b      	cmp	r3, r1
 800f846:	f200 80f3 	bhi.w	800fa30 <acc_alg_plateau_finder+0x3c8>
 800f84a:	1c6b      	adds	r3, r5, #1
 800f84c:	f82b 6015 	strh.w	r6, [fp, r5, lsl #1]
 800f850:	b29d      	uxth	r5, r3
 800f852:	3601      	adds	r6, #1
 800f854:	b2b6      	uxth	r6, r6
 800f856:	45b1      	cmp	r9, r6
 800f858:	d012      	beq.n	800f880 <acc_alg_plateau_finder+0x218>
 800f85a:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 800f85e:	f241 3287 	movw	r2, #4999	; 0x1387
 800f862:	4293      	cmp	r3, r2
 800f864:	f5aa 61fa 	sub.w	r1, sl, #2000	; 0x7d0
 800f868:	d8ec      	bhi.n	800f844 <acc_alg_plateau_finder+0x1dc>
 800f86a:	3601      	adds	r6, #1
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	4a66      	ldr	r2, [pc, #408]	; (800fa08 <acc_alg_plateau_finder+0x3a0>)
 800f870:	4b5b      	ldr	r3, [pc, #364]	; (800f9e0 <acc_alg_plateau_finder+0x378>)
 800f872:	495d      	ldr	r1, [pc, #372]	; (800f9e8 <acc_alg_plateau_finder+0x380>)
 800f874:	2004      	movs	r0, #4
 800f876:	b2b6      	uxth	r6, r6
 800f878:	f7fa fca2 	bl	800a1c0 <acc_log_rss>
 800f87c:	45b1      	cmp	r9, r6
 800f87e:	d1ec      	bne.n	800f85a <acc_alg_plateau_finder+0x1f2>
 800f880:	2d01      	cmp	r5, #1
 800f882:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800f886:	f240 80e8 	bls.w	800fa5a <acc_alg_plateau_finder+0x3f2>
 800f88a:	1eab      	subs	r3, r5, #2
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	fa0f f983 	sxth.w	r9, r3
 800f892:	60bb      	str	r3, [r7, #8]
 800f894:	f109 0301 	add.w	r3, r9, #1
 800f898:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800f89c:	4698      	mov	r8, r3
 800f89e:	607d      	str	r5, [r7, #4]
 800f8a0:	f1b9 0f00 	cmp.w	r9, #0
 800f8a4:	db26      	blt.n	800f8f4 <acc_alg_plateau_finder+0x28c>
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	464e      	mov	r6, r9
 800f8aa:	2500      	movs	r5, #0
 800f8ac:	f830 1d02 	ldrh.w	r1, [r0, #-2]!
 800f8b0:	f83a 2011 	ldrh.w	r2, [sl, r1, lsl #1]
 800f8b4:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800f8b8:	42a2      	cmp	r2, r4
 800f8ba:	eba2 0304 	sub.w	r3, r2, r4
 800f8be:	bf88      	it	hi
 800f8c0:	b29a      	uxthhi	r2, r3
 800f8c2:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800f8c6:	bf9c      	itt	ls
 800f8c8:	1aa2      	subls	r2, r4, r2
 800f8ca:	b292      	uxthls	r2, r2
 800f8cc:	42a3      	cmp	r3, r4
 800f8ce:	eba3 0e04 	sub.w	lr, r3, r4
 800f8d2:	bf96      	itet	ls
 800f8d4:	1ae3      	subls	r3, r4, r3
 800f8d6:	fa1f f38e 	uxthhi.w	r3, lr
 800f8da:	b29b      	uxthls	r3, r3
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	f106 36ff 	add.w	r6, r6, #4294967295
 800f8e2:	d903      	bls.n	800f8ec <acc_alg_plateau_finder+0x284>
 800f8e4:	f8a0 c000 	strh.w	ip, [r0]
 800f8e8:	8041      	strh	r1, [r0, #2]
 800f8ea:	2501      	movs	r5, #1
 800f8ec:	0433      	lsls	r3, r6, #16
 800f8ee:	d5dd      	bpl.n	800f8ac <acc_alg_plateau_finder+0x244>
 800f8f0:	2d00      	cmp	r5, #0
 800f8f2:	d1d5      	bne.n	800f8a0 <acc_alg_plateau_finder+0x238>
 800f8f4:	f8bb 2000 	ldrh.w	r2, [fp]
 800f8f8:	687d      	ldr	r5, [r7, #4]
 800f8fa:	f83a 0012 	ldrh.w	r0, [sl, r2, lsl #1]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	f10b 0302 	add.w	r3, fp, #2
 800f904:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 800f908:	4659      	mov	r1, fp
 800f90a:	f04f 0901 	mov.w	r9, #1
 800f90e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800f912:	f83a 3013 	ldrh.w	r3, [sl, r3, lsl #1]
 800f916:	4283      	cmp	r3, r0
 800f918:	eba3 0200 	sub.w	r2, r3, r0
 800f91c:	bf96      	itet	ls
 800f91e:	1ac3      	subls	r3, r0, r3
 800f920:	b293      	uxthhi	r3, r2
 800f922:	b29b      	uxthls	r3, r3
 800f924:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f928:	bf3c      	itt	cc
 800f92a:	f109 0901 	addcc.w	r9, r9, #1
 800f92e:	fa1f f989 	uxthcc.w	r9, r9
 800f932:	428c      	cmp	r4, r1
 800f934:	d1eb      	bne.n	800f90e <acc_alg_plateau_finder+0x2a6>
 800f936:	68fe      	ldr	r6, [r7, #12]
 800f938:	f8c7 a008 	str.w	sl, [r7, #8]
 800f93c:	f109 39ff 	add.w	r9, r9, #4294967295
 800f940:	46a8      	mov	r8, r5
 800f942:	f1b9 0f00 	cmp.w	r9, #0
 800f946:	d028      	beq.n	800f99a <acc_alg_plateau_finder+0x332>
 800f948:	2400      	movs	r4, #0
 800f94a:	4d27      	ldr	r5, [pc, #156]	; (800f9e8 <acc_alg_plateau_finder+0x380>)
 800f94c:	46a2      	mov	sl, r4
 800f94e:	4622      	mov	r2, r4
 800f950:	e004      	b.n	800f95c <acc_alg_plateau_finder+0x2f4>
 800f952:	3401      	adds	r4, #1
 800f954:	b2a4      	uxth	r4, r4
 800f956:	454c      	cmp	r4, r9
 800f958:	4622      	mov	r2, r4
 800f95a:	d21b      	bcs.n	800f994 <acc_alg_plateau_finder+0x32c>
 800f95c:	0053      	lsls	r3, r2, #1
 800f95e:	3302      	adds	r3, #2
 800f960:	f83b 1012 	ldrh.w	r1, [fp, r2, lsl #1]
 800f964:	f83b 0003 	ldrh.w	r0, [fp, r3]
 800f968:	f836 e011 	ldrh.w	lr, [r6, r1, lsl #1]
 800f96c:	f836 c010 	ldrh.w	ip, [r6, r0, lsl #1]
 800f970:	45e6      	cmp	lr, ip
 800f972:	d2ee      	bcs.n	800f952 <acc_alg_plateau_finder+0x2ea>
 800f974:	3401      	adds	r4, #1
 800f976:	f82b 0012 	strh.w	r0, [fp, r2, lsl #1]
 800f97a:	b2a4      	uxth	r4, r4
 800f97c:	4a23      	ldr	r2, [pc, #140]	; (800fa0c <acc_alg_plateau_finder+0x3a4>)
 800f97e:	f82b 1003 	strh.w	r1, [fp, r3]
 800f982:	2004      	movs	r0, #4
 800f984:	4629      	mov	r1, r5
 800f986:	f7fa fc1b 	bl	800a1c0 <acc_log_rss>
 800f98a:	454c      	cmp	r4, r9
 800f98c:	f04f 0a01 	mov.w	sl, #1
 800f990:	4622      	mov	r2, r4
 800f992:	d3e3      	bcc.n	800f95c <acc_alg_plateau_finder+0x2f4>
 800f994:	f1ba 0f00 	cmp.w	sl, #0
 800f998:	d1d3      	bne.n	800f942 <acc_alg_plateau_finder+0x2da>
 800f99a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800f99e:	4645      	mov	r5, r8
 800f9a0:	1e6c      	subs	r4, r5, #1
 800f9a2:	b2a4      	uxth	r4, r4
 800f9a4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800f9e0 <acc_alg_plateau_finder+0x378>
 800f9a8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800fa10 <acc_alg_plateau_finder+0x3a8>
 800f9ac:	4e0e      	ldr	r6, [pc, #56]	; (800f9e8 <acc_alg_plateau_finder+0x380>)
 800f9ae:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 800f9b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f9b6:	f83b 3f02 	ldrh.w	r3, [fp, #2]!
 800f9ba:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 800f9be:	4631      	mov	r1, r6
 800f9c0:	e9cd 3200 	strd	r3, r2, [sp]
 800f9c4:	2004      	movs	r0, #4
 800f9c6:	464b      	mov	r3, r9
 800f9c8:	4642      	mov	r2, r8
 800f9ca:	f7fa fbf9 	bl	800a1c0 <acc_log_rss>
 800f9ce:	455c      	cmp	r4, fp
 800f9d0:	d1f1      	bne.n	800f9b6 <acc_alg_plateau_finder+0x34e>
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	00000000 	.word	0x00000000
 800f9e0:	0801c458 	.word	0x0801c458
 800f9e4:	0801c4e0 	.word	0x0801c4e0
 800f9e8:	0801c4c8 	.word	0x0801c4c8
 800f9ec:	0801c4f8 	.word	0x0801c4f8
 800f9f0:	3f99999a 	.word	0x3f99999a
 800f9f4:	37800000 	.word	0x37800000
 800f9f8:	3f866666 	.word	0x3f866666
 800f9fc:	47800000 	.word	0x47800000
 800fa00:	47000000 	.word	0x47000000
 800fa04:	0801c56c 	.word	0x0801c56c
 800fa08:	0801c580 	.word	0x0801c580
 800fa0c:	0801c5e8 	.word	0x0801c5e8
 800fa10:	0801c61c 	.word	0x0801c61c
 800fa14:	e9cd c201 	strd	ip, r2, [sp, #4]
 800fa18:	4917      	ldr	r1, [pc, #92]	; (800fa78 <acc_alg_plateau_finder+0x410>)
 800fa1a:	4a18      	ldr	r2, [pc, #96]	; (800fa7c <acc_alg_plateau_finder+0x414>)
 800fa1c:	9400      	str	r4, [sp, #0]
 800fa1e:	2004      	movs	r0, #4
 800fa20:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <acc_alg_plateau_finder+0x418>)
 800fa22:	f7fa fbcd 	bl	800a1c0 <acc_log_rss>
 800fa26:	2200      	movs	r2, #0
 800fa28:	eddf 6a16 	vldr	s13, [pc, #88]	; 800fa84 <acc_alg_plateau_finder+0x41c>
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	e645      	b.n	800f6bc <acc_alg_plateau_finder+0x54>
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	4a15      	ldr	r2, [pc, #84]	; (800fa88 <acc_alg_plateau_finder+0x420>)
 800fa34:	4b12      	ldr	r3, [pc, #72]	; (800fa80 <acc_alg_plateau_finder+0x418>)
 800fa36:	4910      	ldr	r1, [pc, #64]	; (800fa78 <acc_alg_plateau_finder+0x410>)
 800fa38:	2004      	movs	r0, #4
 800fa3a:	f7fa fbc1 	bl	800a1c0 <acc_log_rss>
 800fa3e:	e708      	b.n	800f852 <acc_alg_plateau_finder+0x1ea>
 800fa40:	9200      	str	r2, [sp, #0]
 800fa42:	4b0f      	ldr	r3, [pc, #60]	; (800fa80 <acc_alg_plateau_finder+0x418>)
 800fa44:	4a11      	ldr	r2, [pc, #68]	; (800fa8c <acc_alg_plateau_finder+0x424>)
 800fa46:	490c      	ldr	r1, [pc, #48]	; (800fa78 <acc_alg_plateau_finder+0x410>)
 800fa48:	2004      	movs	r0, #4
 800fa4a:	f7fa fbb9 	bl	800a1c0 <acc_log_rss>
 800fa4e:	2500      	movs	r5, #0
 800fa50:	4628      	mov	r0, r5
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5a:	2d00      	cmp	r5, #0
 800fa5c:	d1a0      	bne.n	800f9a0 <acc_alg_plateau_finder+0x338>
 800fa5e:	2500      	movs	r5, #0
 800fa60:	e7b7      	b.n	800f9d2 <acc_alg_plateau_finder+0x36a>
 800fa62:	2400      	movs	r4, #0
 800fa64:	9400      	str	r4, [sp, #0]
 800fa66:	4b06      	ldr	r3, [pc, #24]	; (800fa80 <acc_alg_plateau_finder+0x418>)
 800fa68:	4a09      	ldr	r2, [pc, #36]	; (800fa90 <acc_alg_plateau_finder+0x428>)
 800fa6a:	4903      	ldr	r1, [pc, #12]	; (800fa78 <acc_alg_plateau_finder+0x410>)
 800fa6c:	2004      	movs	r0, #4
 800fa6e:	46a1      	mov	r9, r4
 800fa70:	f7fa fba6 	bl	800a1c0 <acc_log_rss>
 800fa74:	e6a6      	b.n	800f7c4 <acc_alg_plateau_finder+0x15c>
 800fa76:	bf00      	nop
 800fa78:	0801c4c8 	.word	0x0801c4c8
 800fa7c:	0801c470 	.word	0x0801c470
 800fa80:	0801c458 	.word	0x0801c458
 800fa84:	00000000 	.word	0x00000000
 800fa88:	0801c5b4 	.word	0x0801c5b4
 800fa8c:	0801c540 	.word	0x0801c540
 800fa90:	0801c4e0 	.word	0x0801c4e0

0800fa94 <acc_alg_basic_energy>:
 800fa94:	b082      	sub	sp, #8
 800fa96:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800fae4 <acc_alg_basic_energy+0x50>
 800fa9a:	9201      	str	r2, [sp, #4]
 800fa9c:	ed83 7a00 	vstr	s14, [r3]
 800faa0:	b1d9      	cbz	r1, 800fada <acc_alg_basic_energy+0x46>
 800faa2:	ee07 2a90 	vmov	s15, r2
 800faa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faaa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800faae:	f830 2b02 	ldrh.w	r2, [r0], #2
 800fab2:	ee07 2a90 	vmov	s15, r2
 800fab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faba:	4281      	cmp	r1, r0
 800fabc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fac8:	d1f1      	bne.n	800faae <acc_alg_basic_energy+0x1a>
 800faca:	eddf 6a07 	vldr	s13, [pc, #28]	; 800fae8 <acc_alg_basic_energy+0x54>
 800face:	eddf 7a07 	vldr	s15, [pc, #28]	; 800faec <acc_alg_basic_energy+0x58>
 800fad2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fada:	ed83 7a00 	vstr	s14, [r3]
 800fade:	b002      	add	sp, #8
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	00000000 	.word	0x00000000
 800fae8:	3d800000 	.word	0x3d800000
 800faec:	3919999a 	.word	0x3919999a

0800faf0 <acc_alg_filter_gauss_mask>:
 800faf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faf4:	ed2d 8b04 	vpush	{d8-d9}
 800faf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fafa:	2900      	cmp	r1, #0
 800fafc:	f000 8082 	beq.w	800fc04 <acc_alg_filter_gauss_mask+0x114>
 800fb00:	4607      	mov	r7, r0
 800fb02:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800fb06:	f04f 0c00 	mov.w	ip, #0
 800fb0a:	f837 4b02 	ldrh.w	r4, [r7], #2
 800fb0e:	1aa4      	subs	r4, r4, r2
 800fb10:	2c00      	cmp	r4, #0
 800fb12:	bfb8      	it	lt
 800fb14:	4264      	neglt	r4, r4
 800fb16:	b2a4      	uxth	r4, r4
 800fb18:	45a4      	cmp	ip, r4
 800fb1a:	bf38      	it	cc
 800fb1c:	46a4      	movcc	ip, r4
 800fb1e:	42be      	cmp	r6, r7
 800fb20:	d1f3      	bne.n	800fb0a <acc_alg_filter_gauss_mask+0x1a>
 800fb22:	ee60 0aa0 	vmul.f32	s1, s1, s1
 800fb26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb2a:	ee87 8aa0 	vdiv.f32	s16, s15, s1
 800fb2e:	1e86      	subs	r6, r0, #2
 800fb30:	f04f 0e00 	mov.w	lr, #0
 800fb34:	4637      	mov	r7, r6
 800fb36:	4670      	mov	r0, lr
 800fb38:	eddf 6a38 	vldr	s13, [pc, #224]	; 800fc1c <acc_alg_filter_gauss_mask+0x12c>
 800fb3c:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800fb40:	1aa4      	subs	r4, r4, r2
 800fb42:	2c00      	cmp	r4, #0
 800fb44:	bfb8      	it	lt
 800fb46:	4264      	neglt	r4, r4
 800fb48:	fa1f f884 	uxth.w	r8, r4
 800fb4c:	ee07 8a90 	vmov	s15, r8
 800fb50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fb54:	ee07 0a90 	vmov	s15, r0
 800fb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb62:	4288      	cmp	r0, r1
 800fb64:	44a6      	add	lr, r4
 800fb66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fb6a:	d1e7      	bne.n	800fb3c <acc_alg_filter_gauss_mask+0x4c>
 800fb6c:	ee07 ea90 	vmov	s15, lr
 800fb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb74:	4698      	mov	r8, r3
 800fb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	460f      	mov	r7, r1
 800fb7e:	4691      	mov	r9, r2
 800fb80:	f04f 0a00 	mov.w	sl, #0
 800fb84:	ee07 ca90 	vmov	s15, ip
 800fb88:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800fb8c:	ed85 7a00 	vstr	s14, [r5]
 800fb90:	eef0 8a40 	vmov.f32	s17, s0
 800fb94:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
 800fb98:	f8c8 3000 	str.w	r3, [r8]
 800fb9c:	ee07 aa90 	vmov	s15, sl
 800fba0:	ed95 7a00 	vldr	s14, [r5]
 800fba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fba8:	f10a 0a01 	add.w	sl, sl, #1
 800fbac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbb0:	ee27 7a89 	vmul.f32	s14, s15, s18
 800fbb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbb8:	ee27 0a88 	vmul.f32	s0, s15, s16
 800fbbc:	f001 fe0e 	bl	80117dc <expf>
 800fbc0:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800fbc4:	eba4 0409 	sub.w	r4, r4, r9
 800fbc8:	2c00      	cmp	r4, #0
 800fbca:	bfb8      	it	lt
 800fbcc:	4264      	neglt	r4, r4
 800fbce:	ee20 7a29 	vmul.f32	s14, s0, s19
 800fbd2:	ee07 4a90 	vmov	s15, r4
 800fbd6:	ee37 7a28 	vadd.f32	s14, s14, s17
 800fbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe6:	dd07      	ble.n	800fbf8 <acc_alg_filter_gauss_mask+0x108>
 800fbe8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fbec:	edd8 7a00 	vldr	s15, [r8]
 800fbf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbf4:	edc8 7a00 	vstr	s15, [r8]
 800fbf8:	45ba      	cmp	sl, r7
 800fbfa:	d1cf      	bne.n	800fb9c <acc_alg_filter_gauss_mask+0xac>
 800fbfc:	ecbd 8b04 	vpop	{d8-d9}
 800fc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc04:	eddf 7a05 	vldr	s15, [pc, #20]	; 800fc1c <acc_alg_filter_gauss_mask+0x12c>
 800fc08:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 800fc0c:	ecbd 8b04 	vpop	{d8-d9}
 800fc10:	ed85 7a00 	vstr	s14, [r5]
 800fc14:	edc3 7a00 	vstr	s15, [r3]
 800fc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1c:	00000000 	.word	0x00000000

0800fc20 <frequency_energy_ratio>:
 800fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	ed2d 8b04 	vpush	{d8-d9}
 800fc28:	1e82      	subs	r2, r0, #2
 800fc2a:	f200 34de 	addw	r4, r0, #990	; 0x3de
 800fc2e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800fc32:	eeb0 8a40 	vmov.f32	s16, s0
 800fc36:	4610      	mov	r0, r2
 800fc38:	2100      	movs	r1, #0
 800fc3a:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 800fc3e:	105b      	asrs	r3, r3, #1
 800fc40:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800fc44:	4284      	cmp	r4, r0
 800fc46:	fa01 f183 	sxtah	r1, r1, r3
 800fc4a:	d1f6      	bne.n	800fc3a <frequency_energy_ratio+0x1a>
 800fc4c:	4b5e      	ldr	r3, [pc, #376]	; (800fdc8 <frequency_energy_ratio+0x1a8>)
 800fc4e:	fb83 4301 	smull	r4, r3, r3, r1
 800fc52:	440b      	add	r3, r1
 800fc54:	17c9      	asrs	r1, r1, #31
 800fc56:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 800fc5a:	4615      	mov	r5, r2
 800fc5c:	2400      	movs	r4, #0
 800fc5e:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800fc62:	105b      	asrs	r3, r3, #1
 800fc64:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800fc68:	b21b      	sxth	r3, r3
 800fc6a:	1a5b      	subs	r3, r3, r1
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	bfb8      	it	lt
 800fc70:	425b      	neglt	r3, r3
 800fc72:	42a8      	cmp	r0, r5
 800fc74:	441c      	add	r4, r3
 800fc76:	d1f2      	bne.n	800fc5e <frequency_energy_ratio+0x3e>
 800fc78:	4e54      	ldr	r6, [pc, #336]	; (800fdcc <frequency_energy_ratio+0x1ac>)
 800fc7a:	b288      	uxth	r0, r1
 800fc7c:	f506 6cf8 	add.w	ip, r6, #1984	; 0x7c0
 800fc80:	4635      	mov	r5, r6
 800fc82:	4631      	mov	r1, r6
 800fc84:	2700      	movs	r7, #0
 800fc86:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800fc8a:	804f      	strh	r7, [r1, #2]
 800fc8c:	1a1b      	subs	r3, r3, r0
 800fc8e:	f343 034e 	sbfx	r3, r3, #1, #15
 800fc92:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800fc96:	800b      	strh	r3, [r1, #0]
 800fc98:	3104      	adds	r1, #4
 800fc9a:	458c      	cmp	ip, r1
 800fc9c:	d1f3      	bne.n	800fc86 <frequency_energy_ratio+0x66>
 800fc9e:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 800fdd0 <frequency_energy_ratio+0x1b0>
 800fca2:	484a      	ldr	r0, [pc, #296]	; (800fdcc <frequency_energy_ratio+0x1ac>)
 800fca4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fca8:	eeb0 0a48 	vmov.f32	s0, s16
 800fcac:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800fcb0:	f7f9 fbfa 	bl	80094a8 <acc_alg_iq_demodulation_q3_12>
 800fcb4:	2700      	movs	r7, #0
 800fcb6:	19e9      	adds	r1, r5, r7
 800fcb8:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800fcbc:	a80c      	add	r0, sp, #48	; 0x30
 800fcbe:	f000 f9ed 	bl	801009c <memcpy>
 800fcc2:	227c      	movs	r2, #124	; 0x7c
 800fcc4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800fcc8:	a80c      	add	r0, sp, #48	; 0x30
 800fcca:	f7fe ff81 	bl	800ebd0 <acc_alg_phase_estimation_q3_12>
 800fcce:	19f0      	adds	r0, r6, r7
 800fcd0:	227c      	movs	r2, #124	; 0x7c
 800fcd2:	a90c      	add	r1, sp, #48	; 0x30
 800fcd4:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800fcd8:	f000 f96c 	bl	800ffb4 <acc_alg_phase_compensation_q3_12>
 800fcdc:	f5b7 6ff8 	cmp.w	r7, #1984	; 0x7c0
 800fce0:	d1e9      	bne.n	800fcb6 <frequency_energy_ratio+0x96>
 800fce2:	2300      	movs	r3, #0
 800fce4:	461a      	mov	r2, r3
 800fce6:	a909      	add	r1, sp, #36	; 0x24
 800fce8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800fdd4 <frequency_energy_ratio+0x1b4>
 800fcec:	2001      	movs	r0, #1
 800fcee:	f7f8 fe9b 	bl	8008a28 <acc_alg_biquad_q3_12_lowpass_coeffs>
 800fcf2:	a809      	add	r0, sp, #36	; 0x24
 800fcf4:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800fcf8:	4934      	ldr	r1, [pc, #208]	; (800fdcc <frequency_energy_ratio+0x1ac>)
 800fcfa:	f7f9 f827 	bl	8008d4c <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt>
 800fcfe:	2600      	movs	r6, #0
 800fd00:	4637      	mov	r7, r6
 800fd02:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800fd06:	f7f8 fdd7 	bl	80088b8 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800fd0a:	3601      	adds	r6, #1
 800fd0c:	f5b6 7ff8 	cmp.w	r6, #496	; 0x1f0
 800fd10:	4407      	add	r7, r0
 800fd12:	d1f6      	bne.n	800fd02 <frequency_energy_ratio+0xe2>
 800fd14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1c:	eddf 8a2e 	vldr	s17, [pc, #184]	; 800fdd8 <frequency_energy_ratio+0x1b8>
 800fd20:	ed9f 9a2e 	vldr	s18, [pc, #184]	; 800fddc <frequency_energy_ratio+0x1bc>
 800fd24:	9403      	str	r4, [sp, #12]
 800fd26:	bf48      	it	mi
 800fd28:	eeb1 8a48 	vnegmi.f32	s16, s16
 800fd2c:	ee38 8a28 	vadd.f32	s16, s16, s17
 800fd30:	bf48      	it	mi
 800fd32:	f04f 082d 	movmi.w	r8, #45	; 0x2d
 800fd36:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800fd3a:	bf58      	it	pl
 800fd3c:	f04f 0820 	movpl.w	r8, #32
 800fd40:	ee17 6a90 	vmov	r6, s15
 800fd44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd48:	4643      	mov	r3, r8
 800fd4a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fd4e:	9702      	str	r7, [sp, #8]
 800fd50:	ee68 7a09 	vmul.f32	s15, s16, s18
 800fd54:	9600      	str	r6, [sp, #0]
 800fd56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd5a:	4a21      	ldr	r2, [pc, #132]	; (800fde0 <frequency_energy_ratio+0x1c0>)
 800fd5c:	edcd 7a01 	vstr	s15, [sp, #4]
 800fd60:	4920      	ldr	r1, [pc, #128]	; (800fde4 <frequency_energy_ratio+0x1c4>)
 800fd62:	2004      	movs	r0, #4
 800fd64:	ee17 5a90 	vmov	r5, s15
 800fd68:	f7fa fa2a 	bl	800a1c0 <acc_log_rss>
 800fd6c:	ee07 7a90 	vmov	s15, r7
 800fd70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fd74:	ee07 4a90 	vmov	s15, r4
 800fd78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd7c:	2220      	movs	r2, #32
 800fd7e:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800fd82:	9204      	str	r2, [sp, #16]
 800fd84:	e9cd 6500 	strd	r6, r5, [sp]
 800fd88:	e9cd 7402 	strd	r7, r4, [sp, #8]
 800fd8c:	4643      	mov	r3, r8
 800fd8e:	4a16      	ldr	r2, [pc, #88]	; (800fde8 <frequency_energy_ratio+0x1c8>)
 800fd90:	4914      	ldr	r1, [pc, #80]	; (800fde4 <frequency_energy_ratio+0x1c4>)
 800fd92:	2004      	movs	r0, #4
 800fd94:	ee78 7a28 	vadd.f32	s15, s16, s17
 800fd98:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fd9c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800fda0:	ed8d 7a05 	vstr	s14, [sp, #20]
 800fda4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fda8:	ee67 7a89 	vmul.f32	s15, s15, s18
 800fdac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdb0:	edcd 7a06 	vstr	s15, [sp, #24]
 800fdb4:	f7fa fa04 	bl	800a1c0 <acc_log_rss>
 800fdb8:	eeb0 0a48 	vmov.f32	s0, s16
 800fdbc:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 800fdc0:	ecbd 8b04 	vpop	{d8-d9}
 800fdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc8:	84210843 	.word	0x84210843
 800fdcc:	20000424 	.word	0x20000424
 800fdd0:	00000000 	.word	0x00000000
 800fdd4:	3b843809 	.word	0x3b843809
 800fdd8:	350637bd 	.word	0x350637bd
 800fddc:	49742400 	.word	0x49742400
 800fde0:	0801ceb4 	.word	0x0801ceb4
 800fde4:	0801cef0 	.word	0x0801cef0
 800fde8:	0801cf14 	.word	0x0801cf14

0800fdec <acc_alg_area_check_center_frequency>:
 800fdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf0:	4b19      	ldr	r3, [pc, #100]	; (800fe58 <acc_alg_area_check_center_frequency+0x6c>)
 800fdf2:	4680      	mov	r8, r0
 800fdf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fdf8:	b086      	sub	sp, #24
 800fdfa:	466d      	mov	r5, sp
 800fdfc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800fe00:	2400      	movs	r4, #0
 800fe02:	4627      	mov	r7, r4
 800fe04:	ae03      	add	r6, sp, #12
 800fe06:	ecb5 0a01 	vldmia	r5!, {s0}
 800fe0a:	4640      	mov	r0, r8
 800fe0c:	f7ff ff08 	bl	800fc20 <frequency_energy_ratio>
 800fe10:	ab06      	add	r3, sp, #24
 800fe12:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800fe16:	eca6 0a01 	vstmia	r6!, {s0}
 800fe1a:	ed53 7a03 	vldr	s15, [r3, #-12]
 800fe1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe26:	bfc8      	it	gt
 800fe28:	b2a7      	uxthgt	r7, r4
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	2c03      	cmp	r4, #3
 800fe2e:	d1ea      	bne.n	800fe06 <acc_alg_area_check_center_frequency+0x1a>
 800fe30:	2f01      	cmp	r7, #1
 800fe32:	d003      	beq.n	800fe3c <acc_alg_area_check_center_frequency+0x50>
 800fe34:	2000      	movs	r0, #0
 800fe36:	b006      	add	sp, #24
 800fe38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe3c:	ed9d 7a04 	vldr	s14, [sp, #16]
 800fe40:	eddf 7a06 	vldr	s15, [pc, #24]	; 800fe5c <acc_alg_area_check_center_frequency+0x70>
 800fe44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4c:	bfcc      	ite	gt
 800fe4e:	2001      	movgt	r0, #1
 800fe50:	2000      	movle	r0, #0
 800fe52:	b006      	add	sp, #24
 800fe54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe58:	080163d4 	.word	0x080163d4
 800fe5c:	3e99999a 	.word	0x3e99999a

0800fe60 <acc_alg_area_selection>:
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	b087      	sub	sp, #28
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	f000 8092 	beq.w	800ff94 <acc_alg_area_selection+0x134>
 800fe70:	0081      	lsls	r1, r0, #2
 800fe72:	310a      	adds	r1, #10
 800fe74:	0042      	lsls	r2, r0, #1
 800fe76:	466c      	mov	r4, sp
 800fe78:	08c9      	lsrs	r1, r1, #3
 800fe7a:	3208      	adds	r2, #8
 800fe7c:	eba4 01c1 	sub.w	r1, r4, r1, lsl #3
 800fe80:	08d2      	lsrs	r2, r2, #3
 800fe82:	468d      	mov	sp, r1
 800fe84:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 800fe88:	46e8      	mov	r8, sp
 800fe8a:	4695      	mov	sp, r2
 800fe8c:	466c      	mov	r4, sp
 800fe8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe92:	802a      	strh	r2, [r5, #0]
 800fe94:	1ea6      	subs	r6, r4, #2
 800fe96:	f100 39ff 	add.w	r9, r0, #4294967295
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f826 2f02 	strh.w	r2, [r6, #2]!
 800fea0:	3201      	adds	r2, #1
 800fea2:	fa1f fc82 	uxth.w	ip, r2
 800fea6:	f853 eb04 	ldr.w	lr, [r3], #4
 800feaa:	f841 eb04 	str.w	lr, [r1], #4
 800feae:	4560      	cmp	r0, ip
 800feb0:	d8f4      	bhi.n	800fe9c <acc_alg_area_selection+0x3c>
 800feb2:	2300      	movs	r3, #0
 800feb4:	469e      	mov	lr, r3
 800feb6:	4599      	cmp	r9, r3
 800feb8:	4619      	mov	r1, r3
 800feba:	dd21      	ble.n	800ff00 <acc_alg_area_selection+0xa0>
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	b293      	uxth	r3, r2
 800fec0:	eb08 0c81 	add.w	ip, r8, r1, lsl #2
 800fec4:	eb08 0682 	add.w	r6, r8, r2, lsl #2
 800fec8:	eddc 7a00 	vldr	s15, [ip]
 800fecc:	ed96 7a00 	vldr	s14, [r6]
 800fed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed8:	dded      	ble.n	800feb6 <acc_alg_area_selection+0x56>
 800feda:	f834 a011 	ldrh.w	sl, [r4, r1, lsl #1]
 800fede:	f834 b012 	ldrh.w	fp, [r4, r2, lsl #1]
 800fee2:	f824 b011 	strh.w	fp, [r4, r1, lsl #1]
 800fee6:	f10e 0e01 	add.w	lr, lr, #1
 800feea:	4599      	cmp	r9, r3
 800feec:	ed8c 7a00 	vstr	s14, [ip]
 800fef0:	f824 a012 	strh.w	sl, [r4, r2, lsl #1]
 800fef4:	fa1f fe8e 	uxth.w	lr, lr
 800fef8:	edc6 7a00 	vstr	s15, [r6]
 800fefc:	4619      	mov	r1, r3
 800fefe:	dcdd      	bgt.n	800febc <acc_alg_area_selection+0x5c>
 800ff00:	f1be 0f00 	cmp.w	lr, #0
 800ff04:	d008      	beq.n	800ff18 <acc_alg_area_selection+0xb8>
 800ff06:	f1b9 0f00 	cmp.w	r9, #0
 800ff0a:	d005      	beq.n	800ff18 <acc_alg_area_selection+0xb8>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f04f 0e00 	mov.w	lr, #0
 800ff12:	461a      	mov	r2, r3
 800ff14:	4671      	mov	r1, lr
 800ff16:	e7d3      	b.n	800fec0 <acc_alg_area_selection+0x60>
 800ff18:	8823      	ldrh	r3, [r4, #0]
 800ff1a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800ff1e:	469c      	mov	ip, r3
 800ff20:	eb00 080e 	add.w	r8, r0, lr
 800ff24:	1cbe      	adds	r6, r7, #2
 800ff26:	f107 0114 	add.w	r1, r7, #20
 800ff2a:	e001      	b.n	800ff30 <acc_alg_area_selection+0xd0>
 800ff2c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 800ff30:	4443      	add	r3, r8
 800ff32:	eba3 030c 	sub.w	r3, r3, ip
 800ff36:	fb93 f2f0 	sdiv	r2, r3, r0
 800ff3a:	fb00 3312 	mls	r3, r0, r2, r3
 800ff3e:	f826 3f02 	strh.w	r3, [r6, #2]!
 800ff42:	42b1      	cmp	r1, r6
 800ff44:	d1f2      	bne.n	800ff2c <acc_alg_area_selection+0xcc>
 800ff46:	1d3b      	adds	r3, r7, #4
 800ff48:	2400      	movs	r4, #0
 800ff4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff4e:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
 800ff52:	428a      	cmp	r2, r1
 800ff54:	dd04      	ble.n	800ff60 <acc_alg_area_selection+0x100>
 800ff56:	3401      	adds	r4, #1
 800ff58:	b2a4      	uxth	r4, r4
 800ff5a:	f823 1c02 	strh.w	r1, [r3, #-2]
 800ff5e:	801a      	strh	r2, [r3, #0]
 800ff60:	429e      	cmp	r6, r3
 800ff62:	d1f2      	bne.n	800ff4a <acc_alg_area_selection+0xea>
 800ff64:	2c00      	cmp	r4, #0
 800ff66:	d1ee      	bne.n	800ff46 <acc_alg_area_selection+0xe6>
 800ff68:	eba0 0e0e 	sub.w	lr, r0, lr
 800ff6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff70:	4a0b      	ldr	r2, [pc, #44]	; (800ffa0 <acc_alg_area_selection+0x140>)
 800ff72:	490c      	ldr	r1, [pc, #48]	; (800ffa4 <acc_alg_area_selection+0x144>)
 800ff74:	44f4      	add	ip, lr
 800ff76:	4463      	add	r3, ip
 800ff78:	fb93 f4f0 	sdiv	r4, r3, r0
 800ff7c:	fb00 3314 	mls	r3, r0, r4, r3
 800ff80:	802b      	strh	r3, [r5, #0]
 800ff82:	2004      	movs	r0, #4
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	f7fa f91b 	bl	800a1c0 <acc_log_rss>
 800ff8a:	2001      	movs	r0, #1
 800ff8c:	371c      	adds	r7, #28
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff94:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <acc_alg_area_selection+0x148>)
 800ff96:	4a05      	ldr	r2, [pc, #20]	; (800ffac <acc_alg_area_selection+0x14c>)
 800ff98:	4805      	ldr	r0, [pc, #20]	; (800ffb0 <acc_alg_area_selection+0x150>)
 800ff9a:	2118      	movs	r1, #24
 800ff9c:	f000 f81a 	bl	800ffd4 <__assert_func>
 800ffa0:	0801cfb0 	.word	0x0801cfb0
 800ffa4:	0801cfc8 	.word	0x0801cfc8
 800ffa8:	0801cf84 	.word	0x0801cf84
 800ffac:	0801cf6c 	.word	0x0801cf6c
 800ffb0:	0801cf94 	.word	0x0801cf94

0800ffb4 <acc_alg_phase_compensation_q3_12>:
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	4615      	mov	r5, r2
 800ffba:	4606      	mov	r6, r0
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7f8 fcae 	bl	8008920 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 800ffc4:	462a      	mov	r2, r5
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4630      	mov	r0, r6
 800ffca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffce:	f7f8 bc4b 	b.w	8008868 <acc_alg_basic_math_q3_12_complex_mul>
 800ffd2:	bf00      	nop

0800ffd4 <__assert_func>:
 800ffd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffd6:	461c      	mov	r4, r3
 800ffd8:	4b09      	ldr	r3, [pc, #36]	; (8010000 <__assert_func+0x2c>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4605      	mov	r5, r0
 800ffde:	68d8      	ldr	r0, [r3, #12]
 800ffe0:	b152      	cbz	r2, 800fff8 <__assert_func+0x24>
 800ffe2:	4b08      	ldr	r3, [pc, #32]	; (8010004 <__assert_func+0x30>)
 800ffe4:	9100      	str	r1, [sp, #0]
 800ffe6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ffea:	4907      	ldr	r1, [pc, #28]	; (8010008 <__assert_func+0x34>)
 800ffec:	462b      	mov	r3, r5
 800ffee:	4622      	mov	r2, r4
 800fff0:	f000 f80e 	bl	8010010 <fiprintf>
 800fff4:	f000 fe70 	bl	8010cd8 <abort>
 800fff8:	4b04      	ldr	r3, [pc, #16]	; (801000c <__assert_func+0x38>)
 800fffa:	461a      	mov	r2, r3
 800fffc:	e7f2      	b.n	800ffe4 <__assert_func+0x10>
 800fffe:	bf00      	nop
 8010000:	20000244 	.word	0x20000244
 8010004:	0801cfe0 	.word	0x0801cfe0
 8010008:	0801cfed 	.word	0x0801cfed
 801000c:	0801d01b 	.word	0x0801d01b

08010010 <fiprintf>:
 8010010:	b40e      	push	{r1, r2, r3}
 8010012:	b503      	push	{r0, r1, lr}
 8010014:	4601      	mov	r1, r0
 8010016:	ab03      	add	r3, sp, #12
 8010018:	4805      	ldr	r0, [pc, #20]	; (8010030 <fiprintf+0x20>)
 801001a:	f853 2b04 	ldr.w	r2, [r3], #4
 801001e:	6800      	ldr	r0, [r0, #0]
 8010020:	9301      	str	r3, [sp, #4]
 8010022:	f000 f939 	bl	8010298 <_vfiprintf_r>
 8010026:	b002      	add	sp, #8
 8010028:	f85d eb04 	ldr.w	lr, [sp], #4
 801002c:	b003      	add	sp, #12
 801002e:	4770      	bx	lr
 8010030:	20000244 	.word	0x20000244

08010034 <__libc_init_array>:
 8010034:	b570      	push	{r4, r5, r6, lr}
 8010036:	4e0d      	ldr	r6, [pc, #52]	; (801006c <__libc_init_array+0x38>)
 8010038:	4c0d      	ldr	r4, [pc, #52]	; (8010070 <__libc_init_array+0x3c>)
 801003a:	1ba4      	subs	r4, r4, r6
 801003c:	10a4      	asrs	r4, r4, #2
 801003e:	2500      	movs	r5, #0
 8010040:	42a5      	cmp	r5, r4
 8010042:	d109      	bne.n	8010058 <__libc_init_array+0x24>
 8010044:	4e0b      	ldr	r6, [pc, #44]	; (8010074 <__libc_init_array+0x40>)
 8010046:	4c0c      	ldr	r4, [pc, #48]	; (8010078 <__libc_init_array+0x44>)
 8010048:	f002 fd00 	bl	8012a4c <_init>
 801004c:	1ba4      	subs	r4, r4, r6
 801004e:	10a4      	asrs	r4, r4, #2
 8010050:	2500      	movs	r5, #0
 8010052:	42a5      	cmp	r5, r4
 8010054:	d105      	bne.n	8010062 <__libc_init_array+0x2e>
 8010056:	bd70      	pop	{r4, r5, r6, pc}
 8010058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801005c:	4798      	blx	r3
 801005e:	3501      	adds	r5, #1
 8010060:	e7ee      	b.n	8010040 <__libc_init_array+0xc>
 8010062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010066:	4798      	blx	r3
 8010068:	3501      	adds	r5, #1
 801006a:	e7f2      	b.n	8010052 <__libc_init_array+0x1e>
 801006c:	0801d4dc 	.word	0x0801d4dc
 8010070:	0801d4dc 	.word	0x0801d4dc
 8010074:	0801d4dc 	.word	0x0801d4dc
 8010078:	0801d4e0 	.word	0x0801d4e0

0801007c <malloc>:
 801007c:	4b02      	ldr	r3, [pc, #8]	; (8010088 <malloc+0xc>)
 801007e:	4601      	mov	r1, r0
 8010080:	6818      	ldr	r0, [r3, #0]
 8010082:	f000 b885 	b.w	8010190 <_malloc_r>
 8010086:	bf00      	nop
 8010088:	20000244 	.word	0x20000244

0801008c <free>:
 801008c:	4b02      	ldr	r3, [pc, #8]	; (8010098 <free+0xc>)
 801008e:	4601      	mov	r1, r0
 8010090:	6818      	ldr	r0, [r3, #0]
 8010092:	f000 b82f 	b.w	80100f4 <_free_r>
 8010096:	bf00      	nop
 8010098:	20000244 	.word	0x20000244

0801009c <memcpy>:
 801009c:	b510      	push	{r4, lr}
 801009e:	1e43      	subs	r3, r0, #1
 80100a0:	440a      	add	r2, r1
 80100a2:	4291      	cmp	r1, r2
 80100a4:	d100      	bne.n	80100a8 <memcpy+0xc>
 80100a6:	bd10      	pop	{r4, pc}
 80100a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100b0:	e7f7      	b.n	80100a2 <memcpy+0x6>

080100b2 <memmove>:
 80100b2:	4288      	cmp	r0, r1
 80100b4:	b510      	push	{r4, lr}
 80100b6:	eb01 0302 	add.w	r3, r1, r2
 80100ba:	d807      	bhi.n	80100cc <memmove+0x1a>
 80100bc:	1e42      	subs	r2, r0, #1
 80100be:	4299      	cmp	r1, r3
 80100c0:	d00a      	beq.n	80100d8 <memmove+0x26>
 80100c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80100ca:	e7f8      	b.n	80100be <memmove+0xc>
 80100cc:	4283      	cmp	r3, r0
 80100ce:	d9f5      	bls.n	80100bc <memmove+0xa>
 80100d0:	1881      	adds	r1, r0, r2
 80100d2:	1ad2      	subs	r2, r2, r3
 80100d4:	42d3      	cmn	r3, r2
 80100d6:	d100      	bne.n	80100da <memmove+0x28>
 80100d8:	bd10      	pop	{r4, pc}
 80100da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80100e2:	e7f7      	b.n	80100d4 <memmove+0x22>

080100e4 <memset>:
 80100e4:	4402      	add	r2, r0
 80100e6:	4603      	mov	r3, r0
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d100      	bne.n	80100ee <memset+0xa>
 80100ec:	4770      	bx	lr
 80100ee:	f803 1b01 	strb.w	r1, [r3], #1
 80100f2:	e7f9      	b.n	80100e8 <memset+0x4>

080100f4 <_free_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4605      	mov	r5, r0
 80100f8:	2900      	cmp	r1, #0
 80100fa:	d045      	beq.n	8010188 <_free_r+0x94>
 80100fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010100:	1f0c      	subs	r4, r1, #4
 8010102:	2b00      	cmp	r3, #0
 8010104:	bfb8      	it	lt
 8010106:	18e4      	addlt	r4, r4, r3
 8010108:	f000 ffcc 	bl	80110a4 <__malloc_lock>
 801010c:	4a1f      	ldr	r2, [pc, #124]	; (801018c <_free_r+0x98>)
 801010e:	6813      	ldr	r3, [r2, #0]
 8010110:	4610      	mov	r0, r2
 8010112:	b933      	cbnz	r3, 8010122 <_free_r+0x2e>
 8010114:	6063      	str	r3, [r4, #4]
 8010116:	6014      	str	r4, [r2, #0]
 8010118:	4628      	mov	r0, r5
 801011a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801011e:	f000 bfc2 	b.w	80110a6 <__malloc_unlock>
 8010122:	42a3      	cmp	r3, r4
 8010124:	d90c      	bls.n	8010140 <_free_r+0x4c>
 8010126:	6821      	ldr	r1, [r4, #0]
 8010128:	1862      	adds	r2, r4, r1
 801012a:	4293      	cmp	r3, r2
 801012c:	bf04      	itt	eq
 801012e:	681a      	ldreq	r2, [r3, #0]
 8010130:	685b      	ldreq	r3, [r3, #4]
 8010132:	6063      	str	r3, [r4, #4]
 8010134:	bf04      	itt	eq
 8010136:	1852      	addeq	r2, r2, r1
 8010138:	6022      	streq	r2, [r4, #0]
 801013a:	6004      	str	r4, [r0, #0]
 801013c:	e7ec      	b.n	8010118 <_free_r+0x24>
 801013e:	4613      	mov	r3, r2
 8010140:	685a      	ldr	r2, [r3, #4]
 8010142:	b10a      	cbz	r2, 8010148 <_free_r+0x54>
 8010144:	42a2      	cmp	r2, r4
 8010146:	d9fa      	bls.n	801013e <_free_r+0x4a>
 8010148:	6819      	ldr	r1, [r3, #0]
 801014a:	1858      	adds	r0, r3, r1
 801014c:	42a0      	cmp	r0, r4
 801014e:	d10b      	bne.n	8010168 <_free_r+0x74>
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	4401      	add	r1, r0
 8010154:	1858      	adds	r0, r3, r1
 8010156:	4282      	cmp	r2, r0
 8010158:	6019      	str	r1, [r3, #0]
 801015a:	d1dd      	bne.n	8010118 <_free_r+0x24>
 801015c:	6810      	ldr	r0, [r2, #0]
 801015e:	6852      	ldr	r2, [r2, #4]
 8010160:	605a      	str	r2, [r3, #4]
 8010162:	4401      	add	r1, r0
 8010164:	6019      	str	r1, [r3, #0]
 8010166:	e7d7      	b.n	8010118 <_free_r+0x24>
 8010168:	d902      	bls.n	8010170 <_free_r+0x7c>
 801016a:	230c      	movs	r3, #12
 801016c:	602b      	str	r3, [r5, #0]
 801016e:	e7d3      	b.n	8010118 <_free_r+0x24>
 8010170:	6820      	ldr	r0, [r4, #0]
 8010172:	1821      	adds	r1, r4, r0
 8010174:	428a      	cmp	r2, r1
 8010176:	bf04      	itt	eq
 8010178:	6811      	ldreq	r1, [r2, #0]
 801017a:	6852      	ldreq	r2, [r2, #4]
 801017c:	6062      	str	r2, [r4, #4]
 801017e:	bf04      	itt	eq
 8010180:	1809      	addeq	r1, r1, r0
 8010182:	6021      	streq	r1, [r4, #0]
 8010184:	605c      	str	r4, [r3, #4]
 8010186:	e7c7      	b.n	8010118 <_free_r+0x24>
 8010188:	bd38      	pop	{r3, r4, r5, pc}
 801018a:	bf00      	nop
 801018c:	20000be4 	.word	0x20000be4

08010190 <_malloc_r>:
 8010190:	b570      	push	{r4, r5, r6, lr}
 8010192:	1ccd      	adds	r5, r1, #3
 8010194:	f025 0503 	bic.w	r5, r5, #3
 8010198:	3508      	adds	r5, #8
 801019a:	2d0c      	cmp	r5, #12
 801019c:	bf38      	it	cc
 801019e:	250c      	movcc	r5, #12
 80101a0:	2d00      	cmp	r5, #0
 80101a2:	4606      	mov	r6, r0
 80101a4:	db01      	blt.n	80101aa <_malloc_r+0x1a>
 80101a6:	42a9      	cmp	r1, r5
 80101a8:	d903      	bls.n	80101b2 <_malloc_r+0x22>
 80101aa:	230c      	movs	r3, #12
 80101ac:	6033      	str	r3, [r6, #0]
 80101ae:	2000      	movs	r0, #0
 80101b0:	bd70      	pop	{r4, r5, r6, pc}
 80101b2:	f000 ff77 	bl	80110a4 <__malloc_lock>
 80101b6:	4a21      	ldr	r2, [pc, #132]	; (801023c <_malloc_r+0xac>)
 80101b8:	6814      	ldr	r4, [r2, #0]
 80101ba:	4621      	mov	r1, r4
 80101bc:	b991      	cbnz	r1, 80101e4 <_malloc_r+0x54>
 80101be:	4c20      	ldr	r4, [pc, #128]	; (8010240 <_malloc_r+0xb0>)
 80101c0:	6823      	ldr	r3, [r4, #0]
 80101c2:	b91b      	cbnz	r3, 80101cc <_malloc_r+0x3c>
 80101c4:	4630      	mov	r0, r6
 80101c6:	f000 fc7d 	bl	8010ac4 <_sbrk_r>
 80101ca:	6020      	str	r0, [r4, #0]
 80101cc:	4629      	mov	r1, r5
 80101ce:	4630      	mov	r0, r6
 80101d0:	f000 fc78 	bl	8010ac4 <_sbrk_r>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	d124      	bne.n	8010222 <_malloc_r+0x92>
 80101d8:	230c      	movs	r3, #12
 80101da:	6033      	str	r3, [r6, #0]
 80101dc:	4630      	mov	r0, r6
 80101de:	f000 ff62 	bl	80110a6 <__malloc_unlock>
 80101e2:	e7e4      	b.n	80101ae <_malloc_r+0x1e>
 80101e4:	680b      	ldr	r3, [r1, #0]
 80101e6:	1b5b      	subs	r3, r3, r5
 80101e8:	d418      	bmi.n	801021c <_malloc_r+0x8c>
 80101ea:	2b0b      	cmp	r3, #11
 80101ec:	d90f      	bls.n	801020e <_malloc_r+0x7e>
 80101ee:	600b      	str	r3, [r1, #0]
 80101f0:	50cd      	str	r5, [r1, r3]
 80101f2:	18cc      	adds	r4, r1, r3
 80101f4:	4630      	mov	r0, r6
 80101f6:	f000 ff56 	bl	80110a6 <__malloc_unlock>
 80101fa:	f104 000b 	add.w	r0, r4, #11
 80101fe:	1d23      	adds	r3, r4, #4
 8010200:	f020 0007 	bic.w	r0, r0, #7
 8010204:	1ac3      	subs	r3, r0, r3
 8010206:	d0d3      	beq.n	80101b0 <_malloc_r+0x20>
 8010208:	425a      	negs	r2, r3
 801020a:	50e2      	str	r2, [r4, r3]
 801020c:	e7d0      	b.n	80101b0 <_malloc_r+0x20>
 801020e:	428c      	cmp	r4, r1
 8010210:	684b      	ldr	r3, [r1, #4]
 8010212:	bf16      	itet	ne
 8010214:	6063      	strne	r3, [r4, #4]
 8010216:	6013      	streq	r3, [r2, #0]
 8010218:	460c      	movne	r4, r1
 801021a:	e7eb      	b.n	80101f4 <_malloc_r+0x64>
 801021c:	460c      	mov	r4, r1
 801021e:	6849      	ldr	r1, [r1, #4]
 8010220:	e7cc      	b.n	80101bc <_malloc_r+0x2c>
 8010222:	1cc4      	adds	r4, r0, #3
 8010224:	f024 0403 	bic.w	r4, r4, #3
 8010228:	42a0      	cmp	r0, r4
 801022a:	d005      	beq.n	8010238 <_malloc_r+0xa8>
 801022c:	1a21      	subs	r1, r4, r0
 801022e:	4630      	mov	r0, r6
 8010230:	f000 fc48 	bl	8010ac4 <_sbrk_r>
 8010234:	3001      	adds	r0, #1
 8010236:	d0cf      	beq.n	80101d8 <_malloc_r+0x48>
 8010238:	6025      	str	r5, [r4, #0]
 801023a:	e7db      	b.n	80101f4 <_malloc_r+0x64>
 801023c:	20000be4 	.word	0x20000be4
 8010240:	20000be8 	.word	0x20000be8

08010244 <__sfputc_r>:
 8010244:	6893      	ldr	r3, [r2, #8]
 8010246:	3b01      	subs	r3, #1
 8010248:	2b00      	cmp	r3, #0
 801024a:	b410      	push	{r4}
 801024c:	6093      	str	r3, [r2, #8]
 801024e:	da08      	bge.n	8010262 <__sfputc_r+0x1e>
 8010250:	6994      	ldr	r4, [r2, #24]
 8010252:	42a3      	cmp	r3, r4
 8010254:	db01      	blt.n	801025a <__sfputc_r+0x16>
 8010256:	290a      	cmp	r1, #10
 8010258:	d103      	bne.n	8010262 <__sfputc_r+0x1e>
 801025a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801025e:	f000 bc7b 	b.w	8010b58 <__swbuf_r>
 8010262:	6813      	ldr	r3, [r2, #0]
 8010264:	1c58      	adds	r0, r3, #1
 8010266:	6010      	str	r0, [r2, #0]
 8010268:	7019      	strb	r1, [r3, #0]
 801026a:	4608      	mov	r0, r1
 801026c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010270:	4770      	bx	lr

08010272 <__sfputs_r>:
 8010272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010274:	4606      	mov	r6, r0
 8010276:	460f      	mov	r7, r1
 8010278:	4614      	mov	r4, r2
 801027a:	18d5      	adds	r5, r2, r3
 801027c:	42ac      	cmp	r4, r5
 801027e:	d101      	bne.n	8010284 <__sfputs_r+0x12>
 8010280:	2000      	movs	r0, #0
 8010282:	e007      	b.n	8010294 <__sfputs_r+0x22>
 8010284:	463a      	mov	r2, r7
 8010286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801028a:	4630      	mov	r0, r6
 801028c:	f7ff ffda 	bl	8010244 <__sfputc_r>
 8010290:	1c43      	adds	r3, r0, #1
 8010292:	d1f3      	bne.n	801027c <__sfputs_r+0xa>
 8010294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010298 <_vfiprintf_r>:
 8010298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029c:	460c      	mov	r4, r1
 801029e:	b09d      	sub	sp, #116	; 0x74
 80102a0:	4617      	mov	r7, r2
 80102a2:	461d      	mov	r5, r3
 80102a4:	4606      	mov	r6, r0
 80102a6:	b118      	cbz	r0, 80102b0 <_vfiprintf_r+0x18>
 80102a8:	6983      	ldr	r3, [r0, #24]
 80102aa:	b90b      	cbnz	r3, 80102b0 <_vfiprintf_r+0x18>
 80102ac:	f000 fe0c 	bl	8010ec8 <__sinit>
 80102b0:	4b7c      	ldr	r3, [pc, #496]	; (80104a4 <_vfiprintf_r+0x20c>)
 80102b2:	429c      	cmp	r4, r3
 80102b4:	d158      	bne.n	8010368 <_vfiprintf_r+0xd0>
 80102b6:	6874      	ldr	r4, [r6, #4]
 80102b8:	89a3      	ldrh	r3, [r4, #12]
 80102ba:	0718      	lsls	r0, r3, #28
 80102bc:	d55e      	bpl.n	801037c <_vfiprintf_r+0xe4>
 80102be:	6923      	ldr	r3, [r4, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d05b      	beq.n	801037c <_vfiprintf_r+0xe4>
 80102c4:	2300      	movs	r3, #0
 80102c6:	9309      	str	r3, [sp, #36]	; 0x24
 80102c8:	2320      	movs	r3, #32
 80102ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102ce:	2330      	movs	r3, #48	; 0x30
 80102d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102d4:	9503      	str	r5, [sp, #12]
 80102d6:	f04f 0b01 	mov.w	fp, #1
 80102da:	46b8      	mov	r8, r7
 80102dc:	4645      	mov	r5, r8
 80102de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80102e2:	b10b      	cbz	r3, 80102e8 <_vfiprintf_r+0x50>
 80102e4:	2b25      	cmp	r3, #37	; 0x25
 80102e6:	d154      	bne.n	8010392 <_vfiprintf_r+0xfa>
 80102e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80102ec:	d00b      	beq.n	8010306 <_vfiprintf_r+0x6e>
 80102ee:	4653      	mov	r3, sl
 80102f0:	463a      	mov	r2, r7
 80102f2:	4621      	mov	r1, r4
 80102f4:	4630      	mov	r0, r6
 80102f6:	f7ff ffbc 	bl	8010272 <__sfputs_r>
 80102fa:	3001      	adds	r0, #1
 80102fc:	f000 80c2 	beq.w	8010484 <_vfiprintf_r+0x1ec>
 8010300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010302:	4453      	add	r3, sl
 8010304:	9309      	str	r3, [sp, #36]	; 0x24
 8010306:	f898 3000 	ldrb.w	r3, [r8]
 801030a:	2b00      	cmp	r3, #0
 801030c:	f000 80ba 	beq.w	8010484 <_vfiprintf_r+0x1ec>
 8010310:	2300      	movs	r3, #0
 8010312:	f04f 32ff 	mov.w	r2, #4294967295
 8010316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801031a:	9304      	str	r3, [sp, #16]
 801031c:	9307      	str	r3, [sp, #28]
 801031e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010322:	931a      	str	r3, [sp, #104]	; 0x68
 8010324:	46a8      	mov	r8, r5
 8010326:	2205      	movs	r2, #5
 8010328:	f818 1b01 	ldrb.w	r1, [r8], #1
 801032c:	485e      	ldr	r0, [pc, #376]	; (80104a8 <_vfiprintf_r+0x210>)
 801032e:	f7ef ffcf 	bl	80002d0 <memchr>
 8010332:	9b04      	ldr	r3, [sp, #16]
 8010334:	bb78      	cbnz	r0, 8010396 <_vfiprintf_r+0xfe>
 8010336:	06d9      	lsls	r1, r3, #27
 8010338:	bf44      	itt	mi
 801033a:	2220      	movmi	r2, #32
 801033c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010340:	071a      	lsls	r2, r3, #28
 8010342:	bf44      	itt	mi
 8010344:	222b      	movmi	r2, #43	; 0x2b
 8010346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801034a:	782a      	ldrb	r2, [r5, #0]
 801034c:	2a2a      	cmp	r2, #42	; 0x2a
 801034e:	d02a      	beq.n	80103a6 <_vfiprintf_r+0x10e>
 8010350:	9a07      	ldr	r2, [sp, #28]
 8010352:	46a8      	mov	r8, r5
 8010354:	2000      	movs	r0, #0
 8010356:	250a      	movs	r5, #10
 8010358:	4641      	mov	r1, r8
 801035a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801035e:	3b30      	subs	r3, #48	; 0x30
 8010360:	2b09      	cmp	r3, #9
 8010362:	d969      	bls.n	8010438 <_vfiprintf_r+0x1a0>
 8010364:	b360      	cbz	r0, 80103c0 <_vfiprintf_r+0x128>
 8010366:	e024      	b.n	80103b2 <_vfiprintf_r+0x11a>
 8010368:	4b50      	ldr	r3, [pc, #320]	; (80104ac <_vfiprintf_r+0x214>)
 801036a:	429c      	cmp	r4, r3
 801036c:	d101      	bne.n	8010372 <_vfiprintf_r+0xda>
 801036e:	68b4      	ldr	r4, [r6, #8]
 8010370:	e7a2      	b.n	80102b8 <_vfiprintf_r+0x20>
 8010372:	4b4f      	ldr	r3, [pc, #316]	; (80104b0 <_vfiprintf_r+0x218>)
 8010374:	429c      	cmp	r4, r3
 8010376:	bf08      	it	eq
 8010378:	68f4      	ldreq	r4, [r6, #12]
 801037a:	e79d      	b.n	80102b8 <_vfiprintf_r+0x20>
 801037c:	4621      	mov	r1, r4
 801037e:	4630      	mov	r0, r6
 8010380:	f000 fc3c 	bl	8010bfc <__swsetup_r>
 8010384:	2800      	cmp	r0, #0
 8010386:	d09d      	beq.n	80102c4 <_vfiprintf_r+0x2c>
 8010388:	f04f 30ff 	mov.w	r0, #4294967295
 801038c:	b01d      	add	sp, #116	; 0x74
 801038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010392:	46a8      	mov	r8, r5
 8010394:	e7a2      	b.n	80102dc <_vfiprintf_r+0x44>
 8010396:	4a44      	ldr	r2, [pc, #272]	; (80104a8 <_vfiprintf_r+0x210>)
 8010398:	1a80      	subs	r0, r0, r2
 801039a:	fa0b f000 	lsl.w	r0, fp, r0
 801039e:	4318      	orrs	r0, r3
 80103a0:	9004      	str	r0, [sp, #16]
 80103a2:	4645      	mov	r5, r8
 80103a4:	e7be      	b.n	8010324 <_vfiprintf_r+0x8c>
 80103a6:	9a03      	ldr	r2, [sp, #12]
 80103a8:	1d11      	adds	r1, r2, #4
 80103aa:	6812      	ldr	r2, [r2, #0]
 80103ac:	9103      	str	r1, [sp, #12]
 80103ae:	2a00      	cmp	r2, #0
 80103b0:	db01      	blt.n	80103b6 <_vfiprintf_r+0x11e>
 80103b2:	9207      	str	r2, [sp, #28]
 80103b4:	e004      	b.n	80103c0 <_vfiprintf_r+0x128>
 80103b6:	4252      	negs	r2, r2
 80103b8:	f043 0302 	orr.w	r3, r3, #2
 80103bc:	9207      	str	r2, [sp, #28]
 80103be:	9304      	str	r3, [sp, #16]
 80103c0:	f898 3000 	ldrb.w	r3, [r8]
 80103c4:	2b2e      	cmp	r3, #46	; 0x2e
 80103c6:	d10e      	bne.n	80103e6 <_vfiprintf_r+0x14e>
 80103c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80103cc:	2b2a      	cmp	r3, #42	; 0x2a
 80103ce:	d138      	bne.n	8010442 <_vfiprintf_r+0x1aa>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	9203      	str	r2, [sp, #12]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bfb8      	it	lt
 80103dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80103e0:	f108 0802 	add.w	r8, r8, #2
 80103e4:	9305      	str	r3, [sp, #20]
 80103e6:	4d33      	ldr	r5, [pc, #204]	; (80104b4 <_vfiprintf_r+0x21c>)
 80103e8:	f898 1000 	ldrb.w	r1, [r8]
 80103ec:	2203      	movs	r2, #3
 80103ee:	4628      	mov	r0, r5
 80103f0:	f7ef ff6e 	bl	80002d0 <memchr>
 80103f4:	b140      	cbz	r0, 8010408 <_vfiprintf_r+0x170>
 80103f6:	2340      	movs	r3, #64	; 0x40
 80103f8:	1b40      	subs	r0, r0, r5
 80103fa:	fa03 f000 	lsl.w	r0, r3, r0
 80103fe:	9b04      	ldr	r3, [sp, #16]
 8010400:	4303      	orrs	r3, r0
 8010402:	f108 0801 	add.w	r8, r8, #1
 8010406:	9304      	str	r3, [sp, #16]
 8010408:	f898 1000 	ldrb.w	r1, [r8]
 801040c:	482a      	ldr	r0, [pc, #168]	; (80104b8 <_vfiprintf_r+0x220>)
 801040e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010412:	2206      	movs	r2, #6
 8010414:	f108 0701 	add.w	r7, r8, #1
 8010418:	f7ef ff5a 	bl	80002d0 <memchr>
 801041c:	2800      	cmp	r0, #0
 801041e:	d037      	beq.n	8010490 <_vfiprintf_r+0x1f8>
 8010420:	4b26      	ldr	r3, [pc, #152]	; (80104bc <_vfiprintf_r+0x224>)
 8010422:	bb1b      	cbnz	r3, 801046c <_vfiprintf_r+0x1d4>
 8010424:	9b03      	ldr	r3, [sp, #12]
 8010426:	3307      	adds	r3, #7
 8010428:	f023 0307 	bic.w	r3, r3, #7
 801042c:	3308      	adds	r3, #8
 801042e:	9303      	str	r3, [sp, #12]
 8010430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010432:	444b      	add	r3, r9
 8010434:	9309      	str	r3, [sp, #36]	; 0x24
 8010436:	e750      	b.n	80102da <_vfiprintf_r+0x42>
 8010438:	fb05 3202 	mla	r2, r5, r2, r3
 801043c:	2001      	movs	r0, #1
 801043e:	4688      	mov	r8, r1
 8010440:	e78a      	b.n	8010358 <_vfiprintf_r+0xc0>
 8010442:	2300      	movs	r3, #0
 8010444:	f108 0801 	add.w	r8, r8, #1
 8010448:	9305      	str	r3, [sp, #20]
 801044a:	4619      	mov	r1, r3
 801044c:	250a      	movs	r5, #10
 801044e:	4640      	mov	r0, r8
 8010450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010454:	3a30      	subs	r2, #48	; 0x30
 8010456:	2a09      	cmp	r2, #9
 8010458:	d903      	bls.n	8010462 <_vfiprintf_r+0x1ca>
 801045a:	2b00      	cmp	r3, #0
 801045c:	d0c3      	beq.n	80103e6 <_vfiprintf_r+0x14e>
 801045e:	9105      	str	r1, [sp, #20]
 8010460:	e7c1      	b.n	80103e6 <_vfiprintf_r+0x14e>
 8010462:	fb05 2101 	mla	r1, r5, r1, r2
 8010466:	2301      	movs	r3, #1
 8010468:	4680      	mov	r8, r0
 801046a:	e7f0      	b.n	801044e <_vfiprintf_r+0x1b6>
 801046c:	ab03      	add	r3, sp, #12
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	4622      	mov	r2, r4
 8010472:	4b13      	ldr	r3, [pc, #76]	; (80104c0 <_vfiprintf_r+0x228>)
 8010474:	a904      	add	r1, sp, #16
 8010476:	4630      	mov	r0, r6
 8010478:	f3af 8000 	nop.w
 801047c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010480:	4681      	mov	r9, r0
 8010482:	d1d5      	bne.n	8010430 <_vfiprintf_r+0x198>
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	065b      	lsls	r3, r3, #25
 8010488:	f53f af7e 	bmi.w	8010388 <_vfiprintf_r+0xf0>
 801048c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801048e:	e77d      	b.n	801038c <_vfiprintf_r+0xf4>
 8010490:	ab03      	add	r3, sp, #12
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	4622      	mov	r2, r4
 8010496:	4b0a      	ldr	r3, [pc, #40]	; (80104c0 <_vfiprintf_r+0x228>)
 8010498:	a904      	add	r1, sp, #16
 801049a:	4630      	mov	r0, r6
 801049c:	f000 f888 	bl	80105b0 <_printf_i>
 80104a0:	e7ec      	b.n	801047c <_vfiprintf_r+0x1e4>
 80104a2:	bf00      	nop
 80104a4:	0801d074 	.word	0x0801d074
 80104a8:	0801d020 	.word	0x0801d020
 80104ac:	0801d094 	.word	0x0801d094
 80104b0:	0801d054 	.word	0x0801d054
 80104b4:	0801d026 	.word	0x0801d026
 80104b8:	0801d02a 	.word	0x0801d02a
 80104bc:	00000000 	.word	0x00000000
 80104c0:	08010273 	.word	0x08010273

080104c4 <_printf_common>:
 80104c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c8:	4691      	mov	r9, r2
 80104ca:	461f      	mov	r7, r3
 80104cc:	688a      	ldr	r2, [r1, #8]
 80104ce:	690b      	ldr	r3, [r1, #16]
 80104d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104d4:	4293      	cmp	r3, r2
 80104d6:	bfb8      	it	lt
 80104d8:	4613      	movlt	r3, r2
 80104da:	f8c9 3000 	str.w	r3, [r9]
 80104de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104e2:	4606      	mov	r6, r0
 80104e4:	460c      	mov	r4, r1
 80104e6:	b112      	cbz	r2, 80104ee <_printf_common+0x2a>
 80104e8:	3301      	adds	r3, #1
 80104ea:	f8c9 3000 	str.w	r3, [r9]
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	0699      	lsls	r1, r3, #26
 80104f2:	bf42      	ittt	mi
 80104f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80104f8:	3302      	addmi	r3, #2
 80104fa:	f8c9 3000 	strmi.w	r3, [r9]
 80104fe:	6825      	ldr	r5, [r4, #0]
 8010500:	f015 0506 	ands.w	r5, r5, #6
 8010504:	d107      	bne.n	8010516 <_printf_common+0x52>
 8010506:	f104 0a19 	add.w	sl, r4, #25
 801050a:	68e3      	ldr	r3, [r4, #12]
 801050c:	f8d9 2000 	ldr.w	r2, [r9]
 8010510:	1a9b      	subs	r3, r3, r2
 8010512:	42ab      	cmp	r3, r5
 8010514:	dc28      	bgt.n	8010568 <_printf_common+0xa4>
 8010516:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801051a:	6822      	ldr	r2, [r4, #0]
 801051c:	3300      	adds	r3, #0
 801051e:	bf18      	it	ne
 8010520:	2301      	movne	r3, #1
 8010522:	0692      	lsls	r2, r2, #26
 8010524:	d42d      	bmi.n	8010582 <_printf_common+0xbe>
 8010526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801052a:	4639      	mov	r1, r7
 801052c:	4630      	mov	r0, r6
 801052e:	47c0      	blx	r8
 8010530:	3001      	adds	r0, #1
 8010532:	d020      	beq.n	8010576 <_printf_common+0xb2>
 8010534:	6823      	ldr	r3, [r4, #0]
 8010536:	68e5      	ldr	r5, [r4, #12]
 8010538:	f8d9 2000 	ldr.w	r2, [r9]
 801053c:	f003 0306 	and.w	r3, r3, #6
 8010540:	2b04      	cmp	r3, #4
 8010542:	bf08      	it	eq
 8010544:	1aad      	subeq	r5, r5, r2
 8010546:	68a3      	ldr	r3, [r4, #8]
 8010548:	6922      	ldr	r2, [r4, #16]
 801054a:	bf0c      	ite	eq
 801054c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010550:	2500      	movne	r5, #0
 8010552:	4293      	cmp	r3, r2
 8010554:	bfc4      	itt	gt
 8010556:	1a9b      	subgt	r3, r3, r2
 8010558:	18ed      	addgt	r5, r5, r3
 801055a:	f04f 0900 	mov.w	r9, #0
 801055e:	341a      	adds	r4, #26
 8010560:	454d      	cmp	r5, r9
 8010562:	d11a      	bne.n	801059a <_printf_common+0xd6>
 8010564:	2000      	movs	r0, #0
 8010566:	e008      	b.n	801057a <_printf_common+0xb6>
 8010568:	2301      	movs	r3, #1
 801056a:	4652      	mov	r2, sl
 801056c:	4639      	mov	r1, r7
 801056e:	4630      	mov	r0, r6
 8010570:	47c0      	blx	r8
 8010572:	3001      	adds	r0, #1
 8010574:	d103      	bne.n	801057e <_printf_common+0xba>
 8010576:	f04f 30ff 	mov.w	r0, #4294967295
 801057a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057e:	3501      	adds	r5, #1
 8010580:	e7c3      	b.n	801050a <_printf_common+0x46>
 8010582:	18e1      	adds	r1, r4, r3
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	2030      	movs	r0, #48	; 0x30
 8010588:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801058c:	4422      	add	r2, r4
 801058e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010596:	3302      	adds	r3, #2
 8010598:	e7c5      	b.n	8010526 <_printf_common+0x62>
 801059a:	2301      	movs	r3, #1
 801059c:	4622      	mov	r2, r4
 801059e:	4639      	mov	r1, r7
 80105a0:	4630      	mov	r0, r6
 80105a2:	47c0      	blx	r8
 80105a4:	3001      	adds	r0, #1
 80105a6:	d0e6      	beq.n	8010576 <_printf_common+0xb2>
 80105a8:	f109 0901 	add.w	r9, r9, #1
 80105ac:	e7d8      	b.n	8010560 <_printf_common+0x9c>
	...

080105b0 <_printf_i>:
 80105b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80105b8:	460c      	mov	r4, r1
 80105ba:	7e09      	ldrb	r1, [r1, #24]
 80105bc:	b085      	sub	sp, #20
 80105be:	296e      	cmp	r1, #110	; 0x6e
 80105c0:	4617      	mov	r7, r2
 80105c2:	4606      	mov	r6, r0
 80105c4:	4698      	mov	r8, r3
 80105c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105c8:	f000 80b3 	beq.w	8010732 <_printf_i+0x182>
 80105cc:	d822      	bhi.n	8010614 <_printf_i+0x64>
 80105ce:	2963      	cmp	r1, #99	; 0x63
 80105d0:	d036      	beq.n	8010640 <_printf_i+0x90>
 80105d2:	d80a      	bhi.n	80105ea <_printf_i+0x3a>
 80105d4:	2900      	cmp	r1, #0
 80105d6:	f000 80b9 	beq.w	801074c <_printf_i+0x19c>
 80105da:	2958      	cmp	r1, #88	; 0x58
 80105dc:	f000 8083 	beq.w	80106e6 <_printf_i+0x136>
 80105e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80105e8:	e032      	b.n	8010650 <_printf_i+0xa0>
 80105ea:	2964      	cmp	r1, #100	; 0x64
 80105ec:	d001      	beq.n	80105f2 <_printf_i+0x42>
 80105ee:	2969      	cmp	r1, #105	; 0x69
 80105f0:	d1f6      	bne.n	80105e0 <_printf_i+0x30>
 80105f2:	6820      	ldr	r0, [r4, #0]
 80105f4:	6813      	ldr	r3, [r2, #0]
 80105f6:	0605      	lsls	r5, r0, #24
 80105f8:	f103 0104 	add.w	r1, r3, #4
 80105fc:	d52a      	bpl.n	8010654 <_printf_i+0xa4>
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	6011      	str	r1, [r2, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	da03      	bge.n	801060e <_printf_i+0x5e>
 8010606:	222d      	movs	r2, #45	; 0x2d
 8010608:	425b      	negs	r3, r3
 801060a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801060e:	486f      	ldr	r0, [pc, #444]	; (80107cc <_printf_i+0x21c>)
 8010610:	220a      	movs	r2, #10
 8010612:	e039      	b.n	8010688 <_printf_i+0xd8>
 8010614:	2973      	cmp	r1, #115	; 0x73
 8010616:	f000 809d 	beq.w	8010754 <_printf_i+0x1a4>
 801061a:	d808      	bhi.n	801062e <_printf_i+0x7e>
 801061c:	296f      	cmp	r1, #111	; 0x6f
 801061e:	d020      	beq.n	8010662 <_printf_i+0xb2>
 8010620:	2970      	cmp	r1, #112	; 0x70
 8010622:	d1dd      	bne.n	80105e0 <_printf_i+0x30>
 8010624:	6823      	ldr	r3, [r4, #0]
 8010626:	f043 0320 	orr.w	r3, r3, #32
 801062a:	6023      	str	r3, [r4, #0]
 801062c:	e003      	b.n	8010636 <_printf_i+0x86>
 801062e:	2975      	cmp	r1, #117	; 0x75
 8010630:	d017      	beq.n	8010662 <_printf_i+0xb2>
 8010632:	2978      	cmp	r1, #120	; 0x78
 8010634:	d1d4      	bne.n	80105e0 <_printf_i+0x30>
 8010636:	2378      	movs	r3, #120	; 0x78
 8010638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801063c:	4864      	ldr	r0, [pc, #400]	; (80107d0 <_printf_i+0x220>)
 801063e:	e055      	b.n	80106ec <_printf_i+0x13c>
 8010640:	6813      	ldr	r3, [r2, #0]
 8010642:	1d19      	adds	r1, r3, #4
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	6011      	str	r1, [r2, #0]
 8010648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801064c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010650:	2301      	movs	r3, #1
 8010652:	e08c      	b.n	801076e <_printf_i+0x1be>
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	6011      	str	r1, [r2, #0]
 8010658:	f010 0f40 	tst.w	r0, #64	; 0x40
 801065c:	bf18      	it	ne
 801065e:	b21b      	sxthne	r3, r3
 8010660:	e7cf      	b.n	8010602 <_printf_i+0x52>
 8010662:	6813      	ldr	r3, [r2, #0]
 8010664:	6825      	ldr	r5, [r4, #0]
 8010666:	1d18      	adds	r0, r3, #4
 8010668:	6010      	str	r0, [r2, #0]
 801066a:	0628      	lsls	r0, r5, #24
 801066c:	d501      	bpl.n	8010672 <_printf_i+0xc2>
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	e002      	b.n	8010678 <_printf_i+0xc8>
 8010672:	0668      	lsls	r0, r5, #25
 8010674:	d5fb      	bpl.n	801066e <_printf_i+0xbe>
 8010676:	881b      	ldrh	r3, [r3, #0]
 8010678:	4854      	ldr	r0, [pc, #336]	; (80107cc <_printf_i+0x21c>)
 801067a:	296f      	cmp	r1, #111	; 0x6f
 801067c:	bf14      	ite	ne
 801067e:	220a      	movne	r2, #10
 8010680:	2208      	moveq	r2, #8
 8010682:	2100      	movs	r1, #0
 8010684:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010688:	6865      	ldr	r5, [r4, #4]
 801068a:	60a5      	str	r5, [r4, #8]
 801068c:	2d00      	cmp	r5, #0
 801068e:	f2c0 8095 	blt.w	80107bc <_printf_i+0x20c>
 8010692:	6821      	ldr	r1, [r4, #0]
 8010694:	f021 0104 	bic.w	r1, r1, #4
 8010698:	6021      	str	r1, [r4, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d13d      	bne.n	801071a <_printf_i+0x16a>
 801069e:	2d00      	cmp	r5, #0
 80106a0:	f040 808e 	bne.w	80107c0 <_printf_i+0x210>
 80106a4:	4665      	mov	r5, ip
 80106a6:	2a08      	cmp	r2, #8
 80106a8:	d10b      	bne.n	80106c2 <_printf_i+0x112>
 80106aa:	6823      	ldr	r3, [r4, #0]
 80106ac:	07db      	lsls	r3, r3, #31
 80106ae:	d508      	bpl.n	80106c2 <_printf_i+0x112>
 80106b0:	6923      	ldr	r3, [r4, #16]
 80106b2:	6862      	ldr	r2, [r4, #4]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	bfde      	ittt	le
 80106b8:	2330      	movle	r3, #48	; 0x30
 80106ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106c2:	ebac 0305 	sub.w	r3, ip, r5
 80106c6:	6123      	str	r3, [r4, #16]
 80106c8:	f8cd 8000 	str.w	r8, [sp]
 80106cc:	463b      	mov	r3, r7
 80106ce:	aa03      	add	r2, sp, #12
 80106d0:	4621      	mov	r1, r4
 80106d2:	4630      	mov	r0, r6
 80106d4:	f7ff fef6 	bl	80104c4 <_printf_common>
 80106d8:	3001      	adds	r0, #1
 80106da:	d14d      	bne.n	8010778 <_printf_i+0x1c8>
 80106dc:	f04f 30ff 	mov.w	r0, #4294967295
 80106e0:	b005      	add	sp, #20
 80106e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106e6:	4839      	ldr	r0, [pc, #228]	; (80107cc <_printf_i+0x21c>)
 80106e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80106ec:	6813      	ldr	r3, [r2, #0]
 80106ee:	6821      	ldr	r1, [r4, #0]
 80106f0:	1d1d      	adds	r5, r3, #4
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6015      	str	r5, [r2, #0]
 80106f6:	060a      	lsls	r2, r1, #24
 80106f8:	d50b      	bpl.n	8010712 <_printf_i+0x162>
 80106fa:	07ca      	lsls	r2, r1, #31
 80106fc:	bf44      	itt	mi
 80106fe:	f041 0120 	orrmi.w	r1, r1, #32
 8010702:	6021      	strmi	r1, [r4, #0]
 8010704:	b91b      	cbnz	r3, 801070e <_printf_i+0x15e>
 8010706:	6822      	ldr	r2, [r4, #0]
 8010708:	f022 0220 	bic.w	r2, r2, #32
 801070c:	6022      	str	r2, [r4, #0]
 801070e:	2210      	movs	r2, #16
 8010710:	e7b7      	b.n	8010682 <_printf_i+0xd2>
 8010712:	064d      	lsls	r5, r1, #25
 8010714:	bf48      	it	mi
 8010716:	b29b      	uxthmi	r3, r3
 8010718:	e7ef      	b.n	80106fa <_printf_i+0x14a>
 801071a:	4665      	mov	r5, ip
 801071c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010720:	fb02 3311 	mls	r3, r2, r1, r3
 8010724:	5cc3      	ldrb	r3, [r0, r3]
 8010726:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801072a:	460b      	mov	r3, r1
 801072c:	2900      	cmp	r1, #0
 801072e:	d1f5      	bne.n	801071c <_printf_i+0x16c>
 8010730:	e7b9      	b.n	80106a6 <_printf_i+0xf6>
 8010732:	6813      	ldr	r3, [r2, #0]
 8010734:	6825      	ldr	r5, [r4, #0]
 8010736:	6961      	ldr	r1, [r4, #20]
 8010738:	1d18      	adds	r0, r3, #4
 801073a:	6010      	str	r0, [r2, #0]
 801073c:	0628      	lsls	r0, r5, #24
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	d501      	bpl.n	8010746 <_printf_i+0x196>
 8010742:	6019      	str	r1, [r3, #0]
 8010744:	e002      	b.n	801074c <_printf_i+0x19c>
 8010746:	066a      	lsls	r2, r5, #25
 8010748:	d5fb      	bpl.n	8010742 <_printf_i+0x192>
 801074a:	8019      	strh	r1, [r3, #0]
 801074c:	2300      	movs	r3, #0
 801074e:	6123      	str	r3, [r4, #16]
 8010750:	4665      	mov	r5, ip
 8010752:	e7b9      	b.n	80106c8 <_printf_i+0x118>
 8010754:	6813      	ldr	r3, [r2, #0]
 8010756:	1d19      	adds	r1, r3, #4
 8010758:	6011      	str	r1, [r2, #0]
 801075a:	681d      	ldr	r5, [r3, #0]
 801075c:	6862      	ldr	r2, [r4, #4]
 801075e:	2100      	movs	r1, #0
 8010760:	4628      	mov	r0, r5
 8010762:	f7ef fdb5 	bl	80002d0 <memchr>
 8010766:	b108      	cbz	r0, 801076c <_printf_i+0x1bc>
 8010768:	1b40      	subs	r0, r0, r5
 801076a:	6060      	str	r0, [r4, #4]
 801076c:	6863      	ldr	r3, [r4, #4]
 801076e:	6123      	str	r3, [r4, #16]
 8010770:	2300      	movs	r3, #0
 8010772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010776:	e7a7      	b.n	80106c8 <_printf_i+0x118>
 8010778:	6923      	ldr	r3, [r4, #16]
 801077a:	462a      	mov	r2, r5
 801077c:	4639      	mov	r1, r7
 801077e:	4630      	mov	r0, r6
 8010780:	47c0      	blx	r8
 8010782:	3001      	adds	r0, #1
 8010784:	d0aa      	beq.n	80106dc <_printf_i+0x12c>
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	079b      	lsls	r3, r3, #30
 801078a:	d413      	bmi.n	80107b4 <_printf_i+0x204>
 801078c:	68e0      	ldr	r0, [r4, #12]
 801078e:	9b03      	ldr	r3, [sp, #12]
 8010790:	4298      	cmp	r0, r3
 8010792:	bfb8      	it	lt
 8010794:	4618      	movlt	r0, r3
 8010796:	e7a3      	b.n	80106e0 <_printf_i+0x130>
 8010798:	2301      	movs	r3, #1
 801079a:	464a      	mov	r2, r9
 801079c:	4639      	mov	r1, r7
 801079e:	4630      	mov	r0, r6
 80107a0:	47c0      	blx	r8
 80107a2:	3001      	adds	r0, #1
 80107a4:	d09a      	beq.n	80106dc <_printf_i+0x12c>
 80107a6:	3501      	adds	r5, #1
 80107a8:	68e3      	ldr	r3, [r4, #12]
 80107aa:	9a03      	ldr	r2, [sp, #12]
 80107ac:	1a9b      	subs	r3, r3, r2
 80107ae:	42ab      	cmp	r3, r5
 80107b0:	dcf2      	bgt.n	8010798 <_printf_i+0x1e8>
 80107b2:	e7eb      	b.n	801078c <_printf_i+0x1dc>
 80107b4:	2500      	movs	r5, #0
 80107b6:	f104 0919 	add.w	r9, r4, #25
 80107ba:	e7f5      	b.n	80107a8 <_printf_i+0x1f8>
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1ac      	bne.n	801071a <_printf_i+0x16a>
 80107c0:	7803      	ldrb	r3, [r0, #0]
 80107c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107ca:	e76c      	b.n	80106a6 <_printf_i+0xf6>
 80107cc:	0801d031 	.word	0x0801d031
 80107d0:	0801d042 	.word	0x0801d042

080107d4 <iprintf>:
 80107d4:	b40f      	push	{r0, r1, r2, r3}
 80107d6:	4b0a      	ldr	r3, [pc, #40]	; (8010800 <iprintf+0x2c>)
 80107d8:	b513      	push	{r0, r1, r4, lr}
 80107da:	681c      	ldr	r4, [r3, #0]
 80107dc:	b124      	cbz	r4, 80107e8 <iprintf+0x14>
 80107de:	69a3      	ldr	r3, [r4, #24]
 80107e0:	b913      	cbnz	r3, 80107e8 <iprintf+0x14>
 80107e2:	4620      	mov	r0, r4
 80107e4:	f000 fb70 	bl	8010ec8 <__sinit>
 80107e8:	ab05      	add	r3, sp, #20
 80107ea:	9a04      	ldr	r2, [sp, #16]
 80107ec:	68a1      	ldr	r1, [r4, #8]
 80107ee:	9301      	str	r3, [sp, #4]
 80107f0:	4620      	mov	r0, r4
 80107f2:	f7ff fd51 	bl	8010298 <_vfiprintf_r>
 80107f6:	b002      	add	sp, #8
 80107f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107fc:	b004      	add	sp, #16
 80107fe:	4770      	bx	lr
 8010800:	20000244 	.word	0x20000244

08010804 <swapfunc>:
 8010804:	2b02      	cmp	r3, #2
 8010806:	b510      	push	{r4, lr}
 8010808:	d00a      	beq.n	8010820 <swapfunc+0x1c>
 801080a:	0892      	lsrs	r2, r2, #2
 801080c:	3a01      	subs	r2, #1
 801080e:	6803      	ldr	r3, [r0, #0]
 8010810:	680c      	ldr	r4, [r1, #0]
 8010812:	f840 4b04 	str.w	r4, [r0], #4
 8010816:	2a00      	cmp	r2, #0
 8010818:	f841 3b04 	str.w	r3, [r1], #4
 801081c:	dcf6      	bgt.n	801080c <swapfunc+0x8>
 801081e:	bd10      	pop	{r4, pc}
 8010820:	4402      	add	r2, r0
 8010822:	780c      	ldrb	r4, [r1, #0]
 8010824:	7803      	ldrb	r3, [r0, #0]
 8010826:	f800 4b01 	strb.w	r4, [r0], #1
 801082a:	f801 3b01 	strb.w	r3, [r1], #1
 801082e:	1a13      	subs	r3, r2, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	dcf6      	bgt.n	8010822 <swapfunc+0x1e>
 8010834:	e7f3      	b.n	801081e <swapfunc+0x1a>

08010836 <med3.isra.1>:
 8010836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010838:	460c      	mov	r4, r1
 801083a:	4615      	mov	r5, r2
 801083c:	4607      	mov	r7, r0
 801083e:	461e      	mov	r6, r3
 8010840:	4798      	blx	r3
 8010842:	2800      	cmp	r0, #0
 8010844:	4629      	mov	r1, r5
 8010846:	4620      	mov	r0, r4
 8010848:	da0a      	bge.n	8010860 <med3.isra.1+0x2a>
 801084a:	47b0      	blx	r6
 801084c:	2800      	cmp	r0, #0
 801084e:	db05      	blt.n	801085c <med3.isra.1+0x26>
 8010850:	4629      	mov	r1, r5
 8010852:	4638      	mov	r0, r7
 8010854:	47b0      	blx	r6
 8010856:	2800      	cmp	r0, #0
 8010858:	db0a      	blt.n	8010870 <med3.isra.1+0x3a>
 801085a:	463c      	mov	r4, r7
 801085c:	4620      	mov	r0, r4
 801085e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010860:	47b0      	blx	r6
 8010862:	2800      	cmp	r0, #0
 8010864:	dcfa      	bgt.n	801085c <med3.isra.1+0x26>
 8010866:	4629      	mov	r1, r5
 8010868:	4638      	mov	r0, r7
 801086a:	47b0      	blx	r6
 801086c:	2800      	cmp	r0, #0
 801086e:	dbf4      	blt.n	801085a <med3.isra.1+0x24>
 8010870:	462c      	mov	r4, r5
 8010872:	e7f3      	b.n	801085c <med3.isra.1+0x26>

08010874 <qsort>:
 8010874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010878:	b085      	sub	sp, #20
 801087a:	4606      	mov	r6, r0
 801087c:	468a      	mov	sl, r1
 801087e:	4614      	mov	r4, r2
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	07b2      	lsls	r2, r6, #30
 8010884:	d110      	bne.n	80108a8 <qsort+0x34>
 8010886:	07a3      	lsls	r3, r4, #30
 8010888:	d10e      	bne.n	80108a8 <qsort+0x34>
 801088a:	1f27      	subs	r7, r4, #4
 801088c:	bf18      	it	ne
 801088e:	2701      	movne	r7, #1
 8010890:	f1ba 0f06 	cmp.w	sl, #6
 8010894:	eb06 0b04 	add.w	fp, r6, r4
 8010898:	d828      	bhi.n	80108ec <qsort+0x78>
 801089a:	fb04 6a0a 	mla	sl, r4, sl, r6
 801089e:	45da      	cmp	sl, fp
 80108a0:	d80b      	bhi.n	80108ba <qsort+0x46>
 80108a2:	b005      	add	sp, #20
 80108a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a8:	2702      	movs	r7, #2
 80108aa:	e7f1      	b.n	8010890 <qsort+0x1c>
 80108ac:	463b      	mov	r3, r7
 80108ae:	4622      	mov	r2, r4
 80108b0:	4649      	mov	r1, r9
 80108b2:	4640      	mov	r0, r8
 80108b4:	f7ff ffa6 	bl	8010804 <swapfunc>
 80108b8:	e013      	b.n	80108e2 <qsort+0x6e>
 80108ba:	46d8      	mov	r8, fp
 80108bc:	e012      	b.n	80108e4 <qsort+0x70>
 80108be:	eba8 0904 	sub.w	r9, r8, r4
 80108c2:	4641      	mov	r1, r8
 80108c4:	4648      	mov	r0, r9
 80108c6:	9b00      	ldr	r3, [sp, #0]
 80108c8:	4798      	blx	r3
 80108ca:	2800      	cmp	r0, #0
 80108cc:	dd0c      	ble.n	80108e8 <qsort+0x74>
 80108ce:	2f00      	cmp	r7, #0
 80108d0:	d1ec      	bne.n	80108ac <qsort+0x38>
 80108d2:	f8d8 3000 	ldr.w	r3, [r8]
 80108d6:	f8d9 2000 	ldr.w	r2, [r9]
 80108da:	f8c8 2000 	str.w	r2, [r8]
 80108de:	f8c9 3000 	str.w	r3, [r9]
 80108e2:	46c8      	mov	r8, r9
 80108e4:	4546      	cmp	r6, r8
 80108e6:	d3ea      	bcc.n	80108be <qsort+0x4a>
 80108e8:	44a3      	add	fp, r4
 80108ea:	e7d8      	b.n	801089e <qsort+0x2a>
 80108ec:	ea4f 085a 	mov.w	r8, sl, lsr #1
 80108f0:	f10a 35ff 	add.w	r5, sl, #4294967295
 80108f4:	f1ba 0f07 	cmp.w	sl, #7
 80108f8:	fb04 6808 	mla	r8, r4, r8, r6
 80108fc:	fb04 6505 	mla	r5, r4, r5, r6
 8010900:	d027      	beq.n	8010952 <qsort+0xde>
 8010902:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 8010906:	d94a      	bls.n	801099e <qsort+0x12a>
 8010908:	ea4f 09da 	mov.w	r9, sl, lsr #3
 801090c:	fb04 f909 	mul.w	r9, r4, r9
 8010910:	eb06 0109 	add.w	r1, r6, r9
 8010914:	eb01 0209 	add.w	r2, r1, r9
 8010918:	9b00      	ldr	r3, [sp, #0]
 801091a:	4630      	mov	r0, r6
 801091c:	f7ff ff8b 	bl	8010836 <med3.isra.1>
 8010920:	eb08 0209 	add.w	r2, r8, r9
 8010924:	4641      	mov	r1, r8
 8010926:	9001      	str	r0, [sp, #4]
 8010928:	9b00      	ldr	r3, [sp, #0]
 801092a:	eba8 0009 	sub.w	r0, r8, r9
 801092e:	f7ff ff82 	bl	8010836 <med3.isra.1>
 8010932:	4680      	mov	r8, r0
 8010934:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 8010938:	462a      	mov	r2, r5
 801093a:	9b00      	ldr	r3, [sp, #0]
 801093c:	eb00 0109 	add.w	r1, r0, r9
 8010940:	f7ff ff79 	bl	8010836 <med3.isra.1>
 8010944:	4602      	mov	r2, r0
 8010946:	4641      	mov	r1, r8
 8010948:	9b00      	ldr	r3, [sp, #0]
 801094a:	9801      	ldr	r0, [sp, #4]
 801094c:	f7ff ff73 	bl	8010836 <med3.isra.1>
 8010950:	4680      	mov	r8, r0
 8010952:	bb3f      	cbnz	r7, 80109a4 <qsort+0x130>
 8010954:	6833      	ldr	r3, [r6, #0]
 8010956:	f8d8 2000 	ldr.w	r2, [r8]
 801095a:	6032      	str	r2, [r6, #0]
 801095c:	f8c8 3000 	str.w	r3, [r8]
 8010960:	46d8      	mov	r8, fp
 8010962:	46a9      	mov	r9, r5
 8010964:	f8cd b004 	str.w	fp, [sp, #4]
 8010968:	2300      	movs	r3, #0
 801096a:	45a8      	cmp	r8, r5
 801096c:	d857      	bhi.n	8010a1e <qsort+0x1aa>
 801096e:	9302      	str	r3, [sp, #8]
 8010970:	4631      	mov	r1, r6
 8010972:	9b00      	ldr	r3, [sp, #0]
 8010974:	4640      	mov	r0, r8
 8010976:	4798      	blx	r3
 8010978:	2800      	cmp	r0, #0
 801097a:	9b02      	ldr	r3, [sp, #8]
 801097c:	dc2e      	bgt.n	80109dc <qsort+0x168>
 801097e:	d10c      	bne.n	801099a <qsort+0x126>
 8010980:	b9bf      	cbnz	r7, 80109b2 <qsort+0x13e>
 8010982:	9b01      	ldr	r3, [sp, #4]
 8010984:	9901      	ldr	r1, [sp, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f8d8 2000 	ldr.w	r2, [r8]
 801098c:	600a      	str	r2, [r1, #0]
 801098e:	f8c8 3000 	str.w	r3, [r8]
 8010992:	9b01      	ldr	r3, [sp, #4]
 8010994:	4423      	add	r3, r4
 8010996:	9301      	str	r3, [sp, #4]
 8010998:	2301      	movs	r3, #1
 801099a:	44a0      	add	r8, r4
 801099c:	e7e5      	b.n	801096a <qsort+0xf6>
 801099e:	462a      	mov	r2, r5
 80109a0:	9601      	str	r6, [sp, #4]
 80109a2:	e7d0      	b.n	8010946 <qsort+0xd2>
 80109a4:	463b      	mov	r3, r7
 80109a6:	4622      	mov	r2, r4
 80109a8:	4641      	mov	r1, r8
 80109aa:	4630      	mov	r0, r6
 80109ac:	f7ff ff2a 	bl	8010804 <swapfunc>
 80109b0:	e7d6      	b.n	8010960 <qsort+0xec>
 80109b2:	463b      	mov	r3, r7
 80109b4:	4622      	mov	r2, r4
 80109b6:	4641      	mov	r1, r8
 80109b8:	9801      	ldr	r0, [sp, #4]
 80109ba:	f7ff ff23 	bl	8010804 <swapfunc>
 80109be:	e7e8      	b.n	8010992 <qsort+0x11e>
 80109c0:	d109      	bne.n	80109d6 <qsort+0x162>
 80109c2:	b9f7      	cbnz	r7, 8010a02 <qsort+0x18e>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	f8d9 2000 	ldr.w	r2, [r9]
 80109ca:	602a      	str	r2, [r5, #0]
 80109cc:	f8c9 3000 	str.w	r3, [r9]
 80109d0:	eba9 0904 	sub.w	r9, r9, r4
 80109d4:	2301      	movs	r3, #1
 80109d6:	9d02      	ldr	r5, [sp, #8]
 80109d8:	45a8      	cmp	r8, r5
 80109da:	d820      	bhi.n	8010a1e <qsort+0x1aa>
 80109dc:	9303      	str	r3, [sp, #12]
 80109de:	4631      	mov	r1, r6
 80109e0:	9b00      	ldr	r3, [sp, #0]
 80109e2:	4628      	mov	r0, r5
 80109e4:	4798      	blx	r3
 80109e6:	1b2b      	subs	r3, r5, r4
 80109e8:	2800      	cmp	r0, #0
 80109ea:	9302      	str	r3, [sp, #8]
 80109ec:	9b03      	ldr	r3, [sp, #12]
 80109ee:	dae7      	bge.n	80109c0 <qsort+0x14c>
 80109f0:	b977      	cbnz	r7, 8010a10 <qsort+0x19c>
 80109f2:	f8d8 3000 	ldr.w	r3, [r8]
 80109f6:	682a      	ldr	r2, [r5, #0]
 80109f8:	f8c8 2000 	str.w	r2, [r8]
 80109fc:	602b      	str	r3, [r5, #0]
 80109fe:	9d02      	ldr	r5, [sp, #8]
 8010a00:	e7ca      	b.n	8010998 <qsort+0x124>
 8010a02:	463b      	mov	r3, r7
 8010a04:	4622      	mov	r2, r4
 8010a06:	4649      	mov	r1, r9
 8010a08:	4628      	mov	r0, r5
 8010a0a:	f7ff fefb 	bl	8010804 <swapfunc>
 8010a0e:	e7df      	b.n	80109d0 <qsort+0x15c>
 8010a10:	463b      	mov	r3, r7
 8010a12:	4622      	mov	r2, r4
 8010a14:	4629      	mov	r1, r5
 8010a16:	4640      	mov	r0, r8
 8010a18:	f7ff fef4 	bl	8010804 <swapfunc>
 8010a1c:	e7ef      	b.n	80109fe <qsort+0x18a>
 8010a1e:	fb04 6a0a 	mla	sl, r4, sl, r6
 8010a22:	bb03      	cbnz	r3, 8010a66 <qsort+0x1f2>
 8010a24:	45d3      	cmp	fp, sl
 8010a26:	f4bf af3c 	bcs.w	80108a2 <qsort+0x2e>
 8010a2a:	465d      	mov	r5, fp
 8010a2c:	e017      	b.n	8010a5e <qsort+0x1ea>
 8010a2e:	463b      	mov	r3, r7
 8010a30:	4622      	mov	r2, r4
 8010a32:	4641      	mov	r1, r8
 8010a34:	4628      	mov	r0, r5
 8010a36:	f7ff fee5 	bl	8010804 <swapfunc>
 8010a3a:	e00f      	b.n	8010a5c <qsort+0x1e8>
 8010a3c:	eba5 0804 	sub.w	r8, r5, r4
 8010a40:	4629      	mov	r1, r5
 8010a42:	4640      	mov	r0, r8
 8010a44:	9b00      	ldr	r3, [sp, #0]
 8010a46:	4798      	blx	r3
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	dd0a      	ble.n	8010a62 <qsort+0x1ee>
 8010a4c:	2f00      	cmp	r7, #0
 8010a4e:	d1ee      	bne.n	8010a2e <qsort+0x1ba>
 8010a50:	682b      	ldr	r3, [r5, #0]
 8010a52:	f8d8 2000 	ldr.w	r2, [r8]
 8010a56:	602a      	str	r2, [r5, #0]
 8010a58:	f8c8 3000 	str.w	r3, [r8]
 8010a5c:	4645      	mov	r5, r8
 8010a5e:	42ae      	cmp	r6, r5
 8010a60:	d3ec      	bcc.n	8010a3c <qsort+0x1c8>
 8010a62:	44a3      	add	fp, r4
 8010a64:	e7de      	b.n	8010a24 <qsort+0x1b0>
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	eba8 0b03 	sub.w	fp, r8, r3
 8010a6c:	1b9a      	subs	r2, r3, r6
 8010a6e:	455a      	cmp	r2, fp
 8010a70:	bfa8      	it	ge
 8010a72:	465a      	movge	r2, fp
 8010a74:	b12a      	cbz	r2, 8010a82 <qsort+0x20e>
 8010a76:	463b      	mov	r3, r7
 8010a78:	eba8 0102 	sub.w	r1, r8, r2
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	f7ff fec1 	bl	8010804 <swapfunc>
 8010a82:	ebaa 0209 	sub.w	r2, sl, r9
 8010a86:	eba9 0505 	sub.w	r5, r9, r5
 8010a8a:	1b12      	subs	r2, r2, r4
 8010a8c:	42aa      	cmp	r2, r5
 8010a8e:	bf28      	it	cs
 8010a90:	462a      	movcs	r2, r5
 8010a92:	b12a      	cbz	r2, 8010aa0 <qsort+0x22c>
 8010a94:	463b      	mov	r3, r7
 8010a96:	ebaa 0102 	sub.w	r1, sl, r2
 8010a9a:	4640      	mov	r0, r8
 8010a9c:	f7ff feb2 	bl	8010804 <swapfunc>
 8010aa0:	455c      	cmp	r4, fp
 8010aa2:	d206      	bcs.n	8010ab2 <qsort+0x23e>
 8010aa4:	fbbb f1f4 	udiv	r1, fp, r4
 8010aa8:	9b00      	ldr	r3, [sp, #0]
 8010aaa:	4622      	mov	r2, r4
 8010aac:	4630      	mov	r0, r6
 8010aae:	f7ff fee1 	bl	8010874 <qsort>
 8010ab2:	42a5      	cmp	r5, r4
 8010ab4:	f67f aef5 	bls.w	80108a2 <qsort+0x2e>
 8010ab8:	ebaa 0605 	sub.w	r6, sl, r5
 8010abc:	fbb5 faf4 	udiv	sl, r5, r4
 8010ac0:	e6df      	b.n	8010882 <qsort+0xe>
	...

08010ac4 <_sbrk_r>:
 8010ac4:	b538      	push	{r3, r4, r5, lr}
 8010ac6:	4c06      	ldr	r4, [pc, #24]	; (8010ae0 <_sbrk_r+0x1c>)
 8010ac8:	2300      	movs	r3, #0
 8010aca:	4605      	mov	r5, r0
 8010acc:	4608      	mov	r0, r1
 8010ace:	6023      	str	r3, [r4, #0]
 8010ad0:	f001 ffac 	bl	8012a2c <_sbrk>
 8010ad4:	1c43      	adds	r3, r0, #1
 8010ad6:	d102      	bne.n	8010ade <_sbrk_r+0x1a>
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	b103      	cbz	r3, 8010ade <_sbrk_r+0x1a>
 8010adc:	602b      	str	r3, [r5, #0]
 8010ade:	bd38      	pop	{r3, r4, r5, pc}
 8010ae0:	20000d8c 	.word	0x20000d8c

08010ae4 <_vsniprintf_r>:
 8010ae4:	b530      	push	{r4, r5, lr}
 8010ae6:	1e14      	subs	r4, r2, #0
 8010ae8:	4605      	mov	r5, r0
 8010aea:	b09b      	sub	sp, #108	; 0x6c
 8010aec:	4618      	mov	r0, r3
 8010aee:	da05      	bge.n	8010afc <_vsniprintf_r+0x18>
 8010af0:	238b      	movs	r3, #139	; 0x8b
 8010af2:	602b      	str	r3, [r5, #0]
 8010af4:	f04f 30ff 	mov.w	r0, #4294967295
 8010af8:	b01b      	add	sp, #108	; 0x6c
 8010afa:	bd30      	pop	{r4, r5, pc}
 8010afc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010b00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010b04:	bf14      	ite	ne
 8010b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010b0a:	4623      	moveq	r3, r4
 8010b0c:	9302      	str	r3, [sp, #8]
 8010b0e:	9305      	str	r3, [sp, #20]
 8010b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b14:	9100      	str	r1, [sp, #0]
 8010b16:	9104      	str	r1, [sp, #16]
 8010b18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010b20:	4669      	mov	r1, sp
 8010b22:	4628      	mov	r0, r5
 8010b24:	f000 fb40 	bl	80111a8 <_svfiprintf_r>
 8010b28:	1c43      	adds	r3, r0, #1
 8010b2a:	bfbc      	itt	lt
 8010b2c:	238b      	movlt	r3, #139	; 0x8b
 8010b2e:	602b      	strlt	r3, [r5, #0]
 8010b30:	2c00      	cmp	r4, #0
 8010b32:	d0e1      	beq.n	8010af8 <_vsniprintf_r+0x14>
 8010b34:	9b00      	ldr	r3, [sp, #0]
 8010b36:	2200      	movs	r2, #0
 8010b38:	701a      	strb	r2, [r3, #0]
 8010b3a:	e7dd      	b.n	8010af8 <_vsniprintf_r+0x14>

08010b3c <vsniprintf>:
 8010b3c:	b507      	push	{r0, r1, r2, lr}
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	4613      	mov	r3, r2
 8010b42:	460a      	mov	r2, r1
 8010b44:	4601      	mov	r1, r0
 8010b46:	4803      	ldr	r0, [pc, #12]	; (8010b54 <vsniprintf+0x18>)
 8010b48:	6800      	ldr	r0, [r0, #0]
 8010b4a:	f7ff ffcb 	bl	8010ae4 <_vsniprintf_r>
 8010b4e:	b003      	add	sp, #12
 8010b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b54:	20000244 	.word	0x20000244

08010b58 <__swbuf_r>:
 8010b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5a:	460e      	mov	r6, r1
 8010b5c:	4614      	mov	r4, r2
 8010b5e:	4605      	mov	r5, r0
 8010b60:	b118      	cbz	r0, 8010b6a <__swbuf_r+0x12>
 8010b62:	6983      	ldr	r3, [r0, #24]
 8010b64:	b90b      	cbnz	r3, 8010b6a <__swbuf_r+0x12>
 8010b66:	f000 f9af 	bl	8010ec8 <__sinit>
 8010b6a:	4b21      	ldr	r3, [pc, #132]	; (8010bf0 <__swbuf_r+0x98>)
 8010b6c:	429c      	cmp	r4, r3
 8010b6e:	d12a      	bne.n	8010bc6 <__swbuf_r+0x6e>
 8010b70:	686c      	ldr	r4, [r5, #4]
 8010b72:	69a3      	ldr	r3, [r4, #24]
 8010b74:	60a3      	str	r3, [r4, #8]
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	071a      	lsls	r2, r3, #28
 8010b7a:	d52e      	bpl.n	8010bda <__swbuf_r+0x82>
 8010b7c:	6923      	ldr	r3, [r4, #16]
 8010b7e:	b363      	cbz	r3, 8010bda <__swbuf_r+0x82>
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	6820      	ldr	r0, [r4, #0]
 8010b84:	1ac0      	subs	r0, r0, r3
 8010b86:	6963      	ldr	r3, [r4, #20]
 8010b88:	b2f6      	uxtb	r6, r6
 8010b8a:	4283      	cmp	r3, r0
 8010b8c:	4637      	mov	r7, r6
 8010b8e:	dc04      	bgt.n	8010b9a <__swbuf_r+0x42>
 8010b90:	4621      	mov	r1, r4
 8010b92:	4628      	mov	r0, r5
 8010b94:	f000 f92e 	bl	8010df4 <_fflush_r>
 8010b98:	bb28      	cbnz	r0, 8010be6 <__swbuf_r+0x8e>
 8010b9a:	68a3      	ldr	r3, [r4, #8]
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	60a3      	str	r3, [r4, #8]
 8010ba0:	6823      	ldr	r3, [r4, #0]
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	6022      	str	r2, [r4, #0]
 8010ba6:	701e      	strb	r6, [r3, #0]
 8010ba8:	6963      	ldr	r3, [r4, #20]
 8010baa:	3001      	adds	r0, #1
 8010bac:	4283      	cmp	r3, r0
 8010bae:	d004      	beq.n	8010bba <__swbuf_r+0x62>
 8010bb0:	89a3      	ldrh	r3, [r4, #12]
 8010bb2:	07db      	lsls	r3, r3, #31
 8010bb4:	d519      	bpl.n	8010bea <__swbuf_r+0x92>
 8010bb6:	2e0a      	cmp	r6, #10
 8010bb8:	d117      	bne.n	8010bea <__swbuf_r+0x92>
 8010bba:	4621      	mov	r1, r4
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f000 f919 	bl	8010df4 <_fflush_r>
 8010bc2:	b190      	cbz	r0, 8010bea <__swbuf_r+0x92>
 8010bc4:	e00f      	b.n	8010be6 <__swbuf_r+0x8e>
 8010bc6:	4b0b      	ldr	r3, [pc, #44]	; (8010bf4 <__swbuf_r+0x9c>)
 8010bc8:	429c      	cmp	r4, r3
 8010bca:	d101      	bne.n	8010bd0 <__swbuf_r+0x78>
 8010bcc:	68ac      	ldr	r4, [r5, #8]
 8010bce:	e7d0      	b.n	8010b72 <__swbuf_r+0x1a>
 8010bd0:	4b09      	ldr	r3, [pc, #36]	; (8010bf8 <__swbuf_r+0xa0>)
 8010bd2:	429c      	cmp	r4, r3
 8010bd4:	bf08      	it	eq
 8010bd6:	68ec      	ldreq	r4, [r5, #12]
 8010bd8:	e7cb      	b.n	8010b72 <__swbuf_r+0x1a>
 8010bda:	4621      	mov	r1, r4
 8010bdc:	4628      	mov	r0, r5
 8010bde:	f000 f80d 	bl	8010bfc <__swsetup_r>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d0cc      	beq.n	8010b80 <__swbuf_r+0x28>
 8010be6:	f04f 37ff 	mov.w	r7, #4294967295
 8010bea:	4638      	mov	r0, r7
 8010bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	0801d074 	.word	0x0801d074
 8010bf4:	0801d094 	.word	0x0801d094
 8010bf8:	0801d054 	.word	0x0801d054

08010bfc <__swsetup_r>:
 8010bfc:	4b32      	ldr	r3, [pc, #200]	; (8010cc8 <__swsetup_r+0xcc>)
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	681d      	ldr	r5, [r3, #0]
 8010c02:	4606      	mov	r6, r0
 8010c04:	460c      	mov	r4, r1
 8010c06:	b125      	cbz	r5, 8010c12 <__swsetup_r+0x16>
 8010c08:	69ab      	ldr	r3, [r5, #24]
 8010c0a:	b913      	cbnz	r3, 8010c12 <__swsetup_r+0x16>
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	f000 f95b 	bl	8010ec8 <__sinit>
 8010c12:	4b2e      	ldr	r3, [pc, #184]	; (8010ccc <__swsetup_r+0xd0>)
 8010c14:	429c      	cmp	r4, r3
 8010c16:	d10f      	bne.n	8010c38 <__swsetup_r+0x3c>
 8010c18:	686c      	ldr	r4, [r5, #4]
 8010c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	0715      	lsls	r5, r2, #28
 8010c22:	d42c      	bmi.n	8010c7e <__swsetup_r+0x82>
 8010c24:	06d0      	lsls	r0, r2, #27
 8010c26:	d411      	bmi.n	8010c4c <__swsetup_r+0x50>
 8010c28:	2209      	movs	r2, #9
 8010c2a:	6032      	str	r2, [r6, #0]
 8010c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	f04f 30ff 	mov.w	r0, #4294967295
 8010c36:	e03e      	b.n	8010cb6 <__swsetup_r+0xba>
 8010c38:	4b25      	ldr	r3, [pc, #148]	; (8010cd0 <__swsetup_r+0xd4>)
 8010c3a:	429c      	cmp	r4, r3
 8010c3c:	d101      	bne.n	8010c42 <__swsetup_r+0x46>
 8010c3e:	68ac      	ldr	r4, [r5, #8]
 8010c40:	e7eb      	b.n	8010c1a <__swsetup_r+0x1e>
 8010c42:	4b24      	ldr	r3, [pc, #144]	; (8010cd4 <__swsetup_r+0xd8>)
 8010c44:	429c      	cmp	r4, r3
 8010c46:	bf08      	it	eq
 8010c48:	68ec      	ldreq	r4, [r5, #12]
 8010c4a:	e7e6      	b.n	8010c1a <__swsetup_r+0x1e>
 8010c4c:	0751      	lsls	r1, r2, #29
 8010c4e:	d512      	bpl.n	8010c76 <__swsetup_r+0x7a>
 8010c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c52:	b141      	cbz	r1, 8010c66 <__swsetup_r+0x6a>
 8010c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c58:	4299      	cmp	r1, r3
 8010c5a:	d002      	beq.n	8010c62 <__swsetup_r+0x66>
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f7ff fa49 	bl	80100f4 <_free_r>
 8010c62:	2300      	movs	r3, #0
 8010c64:	6363      	str	r3, [r4, #52]	; 0x34
 8010c66:	89a3      	ldrh	r3, [r4, #12]
 8010c68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c6c:	81a3      	strh	r3, [r4, #12]
 8010c6e:	2300      	movs	r3, #0
 8010c70:	6063      	str	r3, [r4, #4]
 8010c72:	6923      	ldr	r3, [r4, #16]
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	89a3      	ldrh	r3, [r4, #12]
 8010c78:	f043 0308 	orr.w	r3, r3, #8
 8010c7c:	81a3      	strh	r3, [r4, #12]
 8010c7e:	6923      	ldr	r3, [r4, #16]
 8010c80:	b94b      	cbnz	r3, 8010c96 <__swsetup_r+0x9a>
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c8c:	d003      	beq.n	8010c96 <__swsetup_r+0x9a>
 8010c8e:	4621      	mov	r1, r4
 8010c90:	4630      	mov	r0, r6
 8010c92:	f000 f9c7 	bl	8011024 <__smakebuf_r>
 8010c96:	89a2      	ldrh	r2, [r4, #12]
 8010c98:	f012 0301 	ands.w	r3, r2, #1
 8010c9c:	d00c      	beq.n	8010cb8 <__swsetup_r+0xbc>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60a3      	str	r3, [r4, #8]
 8010ca2:	6963      	ldr	r3, [r4, #20]
 8010ca4:	425b      	negs	r3, r3
 8010ca6:	61a3      	str	r3, [r4, #24]
 8010ca8:	6923      	ldr	r3, [r4, #16]
 8010caa:	b953      	cbnz	r3, 8010cc2 <__swsetup_r+0xc6>
 8010cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010cb4:	d1ba      	bne.n	8010c2c <__swsetup_r+0x30>
 8010cb6:	bd70      	pop	{r4, r5, r6, pc}
 8010cb8:	0792      	lsls	r2, r2, #30
 8010cba:	bf58      	it	pl
 8010cbc:	6963      	ldrpl	r3, [r4, #20]
 8010cbe:	60a3      	str	r3, [r4, #8]
 8010cc0:	e7f2      	b.n	8010ca8 <__swsetup_r+0xac>
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	e7f7      	b.n	8010cb6 <__swsetup_r+0xba>
 8010cc6:	bf00      	nop
 8010cc8:	20000244 	.word	0x20000244
 8010ccc:	0801d074 	.word	0x0801d074
 8010cd0:	0801d094 	.word	0x0801d094
 8010cd4:	0801d054 	.word	0x0801d054

08010cd8 <abort>:
 8010cd8:	b508      	push	{r3, lr}
 8010cda:	2006      	movs	r0, #6
 8010cdc:	f000 fb84 	bl	80113e8 <raise>
 8010ce0:	2001      	movs	r0, #1
 8010ce2:	f001 feb1 	bl	8012a48 <_exit>
	...

08010ce8 <__sflush_r>:
 8010ce8:	898a      	ldrh	r2, [r1, #12]
 8010cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cee:	4605      	mov	r5, r0
 8010cf0:	0710      	lsls	r0, r2, #28
 8010cf2:	460c      	mov	r4, r1
 8010cf4:	d458      	bmi.n	8010da8 <__sflush_r+0xc0>
 8010cf6:	684b      	ldr	r3, [r1, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dc05      	bgt.n	8010d08 <__sflush_r+0x20>
 8010cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	dc02      	bgt.n	8010d08 <__sflush_r+0x20>
 8010d02:	2000      	movs	r0, #0
 8010d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d0a:	2e00      	cmp	r6, #0
 8010d0c:	d0f9      	beq.n	8010d02 <__sflush_r+0x1a>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d14:	682f      	ldr	r7, [r5, #0]
 8010d16:	6a21      	ldr	r1, [r4, #32]
 8010d18:	602b      	str	r3, [r5, #0]
 8010d1a:	d032      	beq.n	8010d82 <__sflush_r+0x9a>
 8010d1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	075a      	lsls	r2, r3, #29
 8010d22:	d505      	bpl.n	8010d30 <__sflush_r+0x48>
 8010d24:	6863      	ldr	r3, [r4, #4]
 8010d26:	1ac0      	subs	r0, r0, r3
 8010d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d2a:	b10b      	cbz	r3, 8010d30 <__sflush_r+0x48>
 8010d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d2e:	1ac0      	subs	r0, r0, r3
 8010d30:	2300      	movs	r3, #0
 8010d32:	4602      	mov	r2, r0
 8010d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d36:	6a21      	ldr	r1, [r4, #32]
 8010d38:	4628      	mov	r0, r5
 8010d3a:	47b0      	blx	r6
 8010d3c:	1c43      	adds	r3, r0, #1
 8010d3e:	89a3      	ldrh	r3, [r4, #12]
 8010d40:	d106      	bne.n	8010d50 <__sflush_r+0x68>
 8010d42:	6829      	ldr	r1, [r5, #0]
 8010d44:	291d      	cmp	r1, #29
 8010d46:	d848      	bhi.n	8010dda <__sflush_r+0xf2>
 8010d48:	4a29      	ldr	r2, [pc, #164]	; (8010df0 <__sflush_r+0x108>)
 8010d4a:	40ca      	lsrs	r2, r1
 8010d4c:	07d6      	lsls	r6, r2, #31
 8010d4e:	d544      	bpl.n	8010dda <__sflush_r+0xf2>
 8010d50:	2200      	movs	r2, #0
 8010d52:	6062      	str	r2, [r4, #4]
 8010d54:	04d9      	lsls	r1, r3, #19
 8010d56:	6922      	ldr	r2, [r4, #16]
 8010d58:	6022      	str	r2, [r4, #0]
 8010d5a:	d504      	bpl.n	8010d66 <__sflush_r+0x7e>
 8010d5c:	1c42      	adds	r2, r0, #1
 8010d5e:	d101      	bne.n	8010d64 <__sflush_r+0x7c>
 8010d60:	682b      	ldr	r3, [r5, #0]
 8010d62:	b903      	cbnz	r3, 8010d66 <__sflush_r+0x7e>
 8010d64:	6560      	str	r0, [r4, #84]	; 0x54
 8010d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d68:	602f      	str	r7, [r5, #0]
 8010d6a:	2900      	cmp	r1, #0
 8010d6c:	d0c9      	beq.n	8010d02 <__sflush_r+0x1a>
 8010d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d72:	4299      	cmp	r1, r3
 8010d74:	d002      	beq.n	8010d7c <__sflush_r+0x94>
 8010d76:	4628      	mov	r0, r5
 8010d78:	f7ff f9bc 	bl	80100f4 <_free_r>
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8010d80:	e7c0      	b.n	8010d04 <__sflush_r+0x1c>
 8010d82:	2301      	movs	r3, #1
 8010d84:	4628      	mov	r0, r5
 8010d86:	47b0      	blx	r6
 8010d88:	1c41      	adds	r1, r0, #1
 8010d8a:	d1c8      	bne.n	8010d1e <__sflush_r+0x36>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d0c5      	beq.n	8010d1e <__sflush_r+0x36>
 8010d92:	2b1d      	cmp	r3, #29
 8010d94:	d001      	beq.n	8010d9a <__sflush_r+0xb2>
 8010d96:	2b16      	cmp	r3, #22
 8010d98:	d101      	bne.n	8010d9e <__sflush_r+0xb6>
 8010d9a:	602f      	str	r7, [r5, #0]
 8010d9c:	e7b1      	b.n	8010d02 <__sflush_r+0x1a>
 8010d9e:	89a3      	ldrh	r3, [r4, #12]
 8010da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010da4:	81a3      	strh	r3, [r4, #12]
 8010da6:	e7ad      	b.n	8010d04 <__sflush_r+0x1c>
 8010da8:	690f      	ldr	r7, [r1, #16]
 8010daa:	2f00      	cmp	r7, #0
 8010dac:	d0a9      	beq.n	8010d02 <__sflush_r+0x1a>
 8010dae:	0793      	lsls	r3, r2, #30
 8010db0:	680e      	ldr	r6, [r1, #0]
 8010db2:	bf08      	it	eq
 8010db4:	694b      	ldreq	r3, [r1, #20]
 8010db6:	600f      	str	r7, [r1, #0]
 8010db8:	bf18      	it	ne
 8010dba:	2300      	movne	r3, #0
 8010dbc:	eba6 0807 	sub.w	r8, r6, r7
 8010dc0:	608b      	str	r3, [r1, #8]
 8010dc2:	f1b8 0f00 	cmp.w	r8, #0
 8010dc6:	dd9c      	ble.n	8010d02 <__sflush_r+0x1a>
 8010dc8:	4643      	mov	r3, r8
 8010dca:	463a      	mov	r2, r7
 8010dcc:	6a21      	ldr	r1, [r4, #32]
 8010dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b0      	blx	r6
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	dc06      	bgt.n	8010de6 <__sflush_r+0xfe>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dde:	81a3      	strh	r3, [r4, #12]
 8010de0:	f04f 30ff 	mov.w	r0, #4294967295
 8010de4:	e78e      	b.n	8010d04 <__sflush_r+0x1c>
 8010de6:	4407      	add	r7, r0
 8010de8:	eba8 0800 	sub.w	r8, r8, r0
 8010dec:	e7e9      	b.n	8010dc2 <__sflush_r+0xda>
 8010dee:	bf00      	nop
 8010df0:	20400001 	.word	0x20400001

08010df4 <_fflush_r>:
 8010df4:	b538      	push	{r3, r4, r5, lr}
 8010df6:	690b      	ldr	r3, [r1, #16]
 8010df8:	4605      	mov	r5, r0
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	b1db      	cbz	r3, 8010e36 <_fflush_r+0x42>
 8010dfe:	b118      	cbz	r0, 8010e08 <_fflush_r+0x14>
 8010e00:	6983      	ldr	r3, [r0, #24]
 8010e02:	b90b      	cbnz	r3, 8010e08 <_fflush_r+0x14>
 8010e04:	f000 f860 	bl	8010ec8 <__sinit>
 8010e08:	4b0c      	ldr	r3, [pc, #48]	; (8010e3c <_fflush_r+0x48>)
 8010e0a:	429c      	cmp	r4, r3
 8010e0c:	d109      	bne.n	8010e22 <_fflush_r+0x2e>
 8010e0e:	686c      	ldr	r4, [r5, #4]
 8010e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e14:	b17b      	cbz	r3, 8010e36 <_fflush_r+0x42>
 8010e16:	4621      	mov	r1, r4
 8010e18:	4628      	mov	r0, r5
 8010e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e1e:	f7ff bf63 	b.w	8010ce8 <__sflush_r>
 8010e22:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <_fflush_r+0x4c>)
 8010e24:	429c      	cmp	r4, r3
 8010e26:	d101      	bne.n	8010e2c <_fflush_r+0x38>
 8010e28:	68ac      	ldr	r4, [r5, #8]
 8010e2a:	e7f1      	b.n	8010e10 <_fflush_r+0x1c>
 8010e2c:	4b05      	ldr	r3, [pc, #20]	; (8010e44 <_fflush_r+0x50>)
 8010e2e:	429c      	cmp	r4, r3
 8010e30:	bf08      	it	eq
 8010e32:	68ec      	ldreq	r4, [r5, #12]
 8010e34:	e7ec      	b.n	8010e10 <_fflush_r+0x1c>
 8010e36:	2000      	movs	r0, #0
 8010e38:	bd38      	pop	{r3, r4, r5, pc}
 8010e3a:	bf00      	nop
 8010e3c:	0801d074 	.word	0x0801d074
 8010e40:	0801d094 	.word	0x0801d094
 8010e44:	0801d054 	.word	0x0801d054

08010e48 <std>:
 8010e48:	2300      	movs	r3, #0
 8010e4a:	b510      	push	{r4, lr}
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010e52:	6083      	str	r3, [r0, #8]
 8010e54:	8181      	strh	r1, [r0, #12]
 8010e56:	6643      	str	r3, [r0, #100]	; 0x64
 8010e58:	81c2      	strh	r2, [r0, #14]
 8010e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e5e:	6183      	str	r3, [r0, #24]
 8010e60:	4619      	mov	r1, r3
 8010e62:	2208      	movs	r2, #8
 8010e64:	305c      	adds	r0, #92	; 0x5c
 8010e66:	f7ff f93d 	bl	80100e4 <memset>
 8010e6a:	4b05      	ldr	r3, [pc, #20]	; (8010e80 <std+0x38>)
 8010e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8010e6e:	4b05      	ldr	r3, [pc, #20]	; (8010e84 <std+0x3c>)
 8010e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e72:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <std+0x40>)
 8010e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e76:	4b05      	ldr	r3, [pc, #20]	; (8010e8c <std+0x44>)
 8010e78:	6224      	str	r4, [r4, #32]
 8010e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8010e7c:	bd10      	pop	{r4, pc}
 8010e7e:	bf00      	nop
 8010e80:	08011421 	.word	0x08011421
 8010e84:	08011443 	.word	0x08011443
 8010e88:	0801147b 	.word	0x0801147b
 8010e8c:	0801149f 	.word	0x0801149f

08010e90 <_cleanup_r>:
 8010e90:	4901      	ldr	r1, [pc, #4]	; (8010e98 <_cleanup_r+0x8>)
 8010e92:	f000 b885 	b.w	8010fa0 <_fwalk_reent>
 8010e96:	bf00      	nop
 8010e98:	08010df5 	.word	0x08010df5

08010e9c <__sfmoreglue>:
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	1e4a      	subs	r2, r1, #1
 8010ea0:	2568      	movs	r5, #104	; 0x68
 8010ea2:	4355      	muls	r5, r2
 8010ea4:	460e      	mov	r6, r1
 8010ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010eaa:	f7ff f971 	bl	8010190 <_malloc_r>
 8010eae:	4604      	mov	r4, r0
 8010eb0:	b140      	cbz	r0, 8010ec4 <__sfmoreglue+0x28>
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8010eb8:	300c      	adds	r0, #12
 8010eba:	60a0      	str	r0, [r4, #8]
 8010ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ec0:	f7ff f910 	bl	80100e4 <memset>
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	bd70      	pop	{r4, r5, r6, pc}

08010ec8 <__sinit>:
 8010ec8:	6983      	ldr	r3, [r0, #24]
 8010eca:	b510      	push	{r4, lr}
 8010ecc:	4604      	mov	r4, r0
 8010ece:	bb33      	cbnz	r3, 8010f1e <__sinit+0x56>
 8010ed0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010ed4:	6503      	str	r3, [r0, #80]	; 0x50
 8010ed6:	4b12      	ldr	r3, [pc, #72]	; (8010f20 <__sinit+0x58>)
 8010ed8:	4a12      	ldr	r2, [pc, #72]	; (8010f24 <__sinit+0x5c>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	6282      	str	r2, [r0, #40]	; 0x28
 8010ede:	4298      	cmp	r0, r3
 8010ee0:	bf04      	itt	eq
 8010ee2:	2301      	moveq	r3, #1
 8010ee4:	6183      	streq	r3, [r0, #24]
 8010ee6:	f000 f81f 	bl	8010f28 <__sfp>
 8010eea:	6060      	str	r0, [r4, #4]
 8010eec:	4620      	mov	r0, r4
 8010eee:	f000 f81b 	bl	8010f28 <__sfp>
 8010ef2:	60a0      	str	r0, [r4, #8]
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f000 f817 	bl	8010f28 <__sfp>
 8010efa:	2200      	movs	r2, #0
 8010efc:	60e0      	str	r0, [r4, #12]
 8010efe:	2104      	movs	r1, #4
 8010f00:	6860      	ldr	r0, [r4, #4]
 8010f02:	f7ff ffa1 	bl	8010e48 <std>
 8010f06:	2201      	movs	r2, #1
 8010f08:	2109      	movs	r1, #9
 8010f0a:	68a0      	ldr	r0, [r4, #8]
 8010f0c:	f7ff ff9c 	bl	8010e48 <std>
 8010f10:	2202      	movs	r2, #2
 8010f12:	2112      	movs	r1, #18
 8010f14:	68e0      	ldr	r0, [r4, #12]
 8010f16:	f7ff ff97 	bl	8010e48 <std>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	61a3      	str	r3, [r4, #24]
 8010f1e:	bd10      	pop	{r4, pc}
 8010f20:	0801d01c 	.word	0x0801d01c
 8010f24:	08010e91 	.word	0x08010e91

08010f28 <__sfp>:
 8010f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f2a:	4b1b      	ldr	r3, [pc, #108]	; (8010f98 <__sfp+0x70>)
 8010f2c:	681e      	ldr	r6, [r3, #0]
 8010f2e:	69b3      	ldr	r3, [r6, #24]
 8010f30:	4607      	mov	r7, r0
 8010f32:	b913      	cbnz	r3, 8010f3a <__sfp+0x12>
 8010f34:	4630      	mov	r0, r6
 8010f36:	f7ff ffc7 	bl	8010ec8 <__sinit>
 8010f3a:	3648      	adds	r6, #72	; 0x48
 8010f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f40:	3b01      	subs	r3, #1
 8010f42:	d503      	bpl.n	8010f4c <__sfp+0x24>
 8010f44:	6833      	ldr	r3, [r6, #0]
 8010f46:	b133      	cbz	r3, 8010f56 <__sfp+0x2e>
 8010f48:	6836      	ldr	r6, [r6, #0]
 8010f4a:	e7f7      	b.n	8010f3c <__sfp+0x14>
 8010f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f50:	b16d      	cbz	r5, 8010f6e <__sfp+0x46>
 8010f52:	3468      	adds	r4, #104	; 0x68
 8010f54:	e7f4      	b.n	8010f40 <__sfp+0x18>
 8010f56:	2104      	movs	r1, #4
 8010f58:	4638      	mov	r0, r7
 8010f5a:	f7ff ff9f 	bl	8010e9c <__sfmoreglue>
 8010f5e:	6030      	str	r0, [r6, #0]
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d1f1      	bne.n	8010f48 <__sfp+0x20>
 8010f64:	230c      	movs	r3, #12
 8010f66:	603b      	str	r3, [r7, #0]
 8010f68:	4604      	mov	r4, r0
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f6e:	4b0b      	ldr	r3, [pc, #44]	; (8010f9c <__sfp+0x74>)
 8010f70:	6665      	str	r5, [r4, #100]	; 0x64
 8010f72:	e9c4 5500 	strd	r5, r5, [r4]
 8010f76:	60a5      	str	r5, [r4, #8]
 8010f78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010f7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010f80:	2208      	movs	r2, #8
 8010f82:	4629      	mov	r1, r5
 8010f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f88:	f7ff f8ac 	bl	80100e4 <memset>
 8010f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f94:	e7e9      	b.n	8010f6a <__sfp+0x42>
 8010f96:	bf00      	nop
 8010f98:	0801d01c 	.word	0x0801d01c
 8010f9c:	ffff0001 	.word	0xffff0001

08010fa0 <_fwalk_reent>:
 8010fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa4:	4680      	mov	r8, r0
 8010fa6:	4689      	mov	r9, r1
 8010fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fac:	2600      	movs	r6, #0
 8010fae:	b914      	cbnz	r4, 8010fb6 <_fwalk_reent+0x16>
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010fba:	3f01      	subs	r7, #1
 8010fbc:	d501      	bpl.n	8010fc2 <_fwalk_reent+0x22>
 8010fbe:	6824      	ldr	r4, [r4, #0]
 8010fc0:	e7f5      	b.n	8010fae <_fwalk_reent+0xe>
 8010fc2:	89ab      	ldrh	r3, [r5, #12]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d907      	bls.n	8010fd8 <_fwalk_reent+0x38>
 8010fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	d003      	beq.n	8010fd8 <_fwalk_reent+0x38>
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	4640      	mov	r0, r8
 8010fd4:	47c8      	blx	r9
 8010fd6:	4306      	orrs	r6, r0
 8010fd8:	3568      	adds	r5, #104	; 0x68
 8010fda:	e7ee      	b.n	8010fba <_fwalk_reent+0x1a>

08010fdc <__swhatbuf_r>:
 8010fdc:	b570      	push	{r4, r5, r6, lr}
 8010fde:	460e      	mov	r6, r1
 8010fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe4:	2900      	cmp	r1, #0
 8010fe6:	b096      	sub	sp, #88	; 0x58
 8010fe8:	4614      	mov	r4, r2
 8010fea:	461d      	mov	r5, r3
 8010fec:	da07      	bge.n	8010ffe <__swhatbuf_r+0x22>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	89b3      	ldrh	r3, [r6, #12]
 8010ff4:	061a      	lsls	r2, r3, #24
 8010ff6:	d410      	bmi.n	801101a <__swhatbuf_r+0x3e>
 8010ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ffc:	e00e      	b.n	801101c <__swhatbuf_r+0x40>
 8010ffe:	466a      	mov	r2, sp
 8011000:	f000 fa74 	bl	80114ec <_fstat_r>
 8011004:	2800      	cmp	r0, #0
 8011006:	dbf2      	blt.n	8010fee <__swhatbuf_r+0x12>
 8011008:	9a01      	ldr	r2, [sp, #4]
 801100a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801100e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011012:	425a      	negs	r2, r3
 8011014:	415a      	adcs	r2, r3
 8011016:	602a      	str	r2, [r5, #0]
 8011018:	e7ee      	b.n	8010ff8 <__swhatbuf_r+0x1c>
 801101a:	2340      	movs	r3, #64	; 0x40
 801101c:	2000      	movs	r0, #0
 801101e:	6023      	str	r3, [r4, #0]
 8011020:	b016      	add	sp, #88	; 0x58
 8011022:	bd70      	pop	{r4, r5, r6, pc}

08011024 <__smakebuf_r>:
 8011024:	898b      	ldrh	r3, [r1, #12]
 8011026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011028:	079d      	lsls	r5, r3, #30
 801102a:	4606      	mov	r6, r0
 801102c:	460c      	mov	r4, r1
 801102e:	d507      	bpl.n	8011040 <__smakebuf_r+0x1c>
 8011030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011034:	6023      	str	r3, [r4, #0]
 8011036:	6123      	str	r3, [r4, #16]
 8011038:	2301      	movs	r3, #1
 801103a:	6163      	str	r3, [r4, #20]
 801103c:	b002      	add	sp, #8
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	ab01      	add	r3, sp, #4
 8011042:	466a      	mov	r2, sp
 8011044:	f7ff ffca 	bl	8010fdc <__swhatbuf_r>
 8011048:	9900      	ldr	r1, [sp, #0]
 801104a:	4605      	mov	r5, r0
 801104c:	4630      	mov	r0, r6
 801104e:	f7ff f89f 	bl	8010190 <_malloc_r>
 8011052:	b948      	cbnz	r0, 8011068 <__smakebuf_r+0x44>
 8011054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011058:	059a      	lsls	r2, r3, #22
 801105a:	d4ef      	bmi.n	801103c <__smakebuf_r+0x18>
 801105c:	f023 0303 	bic.w	r3, r3, #3
 8011060:	f043 0302 	orr.w	r3, r3, #2
 8011064:	81a3      	strh	r3, [r4, #12]
 8011066:	e7e3      	b.n	8011030 <__smakebuf_r+0xc>
 8011068:	4b0d      	ldr	r3, [pc, #52]	; (80110a0 <__smakebuf_r+0x7c>)
 801106a:	62b3      	str	r3, [r6, #40]	; 0x28
 801106c:	89a3      	ldrh	r3, [r4, #12]
 801106e:	6020      	str	r0, [r4, #0]
 8011070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011074:	81a3      	strh	r3, [r4, #12]
 8011076:	9b00      	ldr	r3, [sp, #0]
 8011078:	6163      	str	r3, [r4, #20]
 801107a:	9b01      	ldr	r3, [sp, #4]
 801107c:	6120      	str	r0, [r4, #16]
 801107e:	b15b      	cbz	r3, 8011098 <__smakebuf_r+0x74>
 8011080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011084:	4630      	mov	r0, r6
 8011086:	f000 fa43 	bl	8011510 <_isatty_r>
 801108a:	b128      	cbz	r0, 8011098 <__smakebuf_r+0x74>
 801108c:	89a3      	ldrh	r3, [r4, #12]
 801108e:	f023 0303 	bic.w	r3, r3, #3
 8011092:	f043 0301 	orr.w	r3, r3, #1
 8011096:	81a3      	strh	r3, [r4, #12]
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	431d      	orrs	r5, r3
 801109c:	81a5      	strh	r5, [r4, #12]
 801109e:	e7cd      	b.n	801103c <__smakebuf_r+0x18>
 80110a0:	08010e91 	.word	0x08010e91

080110a4 <__malloc_lock>:
 80110a4:	4770      	bx	lr

080110a6 <__malloc_unlock>:
 80110a6:	4770      	bx	lr

080110a8 <_realloc_r>:
 80110a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110aa:	4607      	mov	r7, r0
 80110ac:	4614      	mov	r4, r2
 80110ae:	460e      	mov	r6, r1
 80110b0:	b921      	cbnz	r1, 80110bc <_realloc_r+0x14>
 80110b2:	4611      	mov	r1, r2
 80110b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80110b8:	f7ff b86a 	b.w	8010190 <_malloc_r>
 80110bc:	b922      	cbnz	r2, 80110c8 <_realloc_r+0x20>
 80110be:	f7ff f819 	bl	80100f4 <_free_r>
 80110c2:	4625      	mov	r5, r4
 80110c4:	4628      	mov	r0, r5
 80110c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c8:	f000 fa44 	bl	8011554 <_malloc_usable_size_r>
 80110cc:	42a0      	cmp	r0, r4
 80110ce:	d20f      	bcs.n	80110f0 <_realloc_r+0x48>
 80110d0:	4621      	mov	r1, r4
 80110d2:	4638      	mov	r0, r7
 80110d4:	f7ff f85c 	bl	8010190 <_malloc_r>
 80110d8:	4605      	mov	r5, r0
 80110da:	2800      	cmp	r0, #0
 80110dc:	d0f2      	beq.n	80110c4 <_realloc_r+0x1c>
 80110de:	4631      	mov	r1, r6
 80110e0:	4622      	mov	r2, r4
 80110e2:	f7fe ffdb 	bl	801009c <memcpy>
 80110e6:	4631      	mov	r1, r6
 80110e8:	4638      	mov	r0, r7
 80110ea:	f7ff f803 	bl	80100f4 <_free_r>
 80110ee:	e7e9      	b.n	80110c4 <_realloc_r+0x1c>
 80110f0:	4635      	mov	r5, r6
 80110f2:	e7e7      	b.n	80110c4 <_realloc_r+0x1c>

080110f4 <__ssputs_r>:
 80110f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f8:	688e      	ldr	r6, [r1, #8]
 80110fa:	429e      	cmp	r6, r3
 80110fc:	4682      	mov	sl, r0
 80110fe:	460c      	mov	r4, r1
 8011100:	4690      	mov	r8, r2
 8011102:	4699      	mov	r9, r3
 8011104:	d837      	bhi.n	8011176 <__ssputs_r+0x82>
 8011106:	898a      	ldrh	r2, [r1, #12]
 8011108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801110c:	d031      	beq.n	8011172 <__ssputs_r+0x7e>
 801110e:	6825      	ldr	r5, [r4, #0]
 8011110:	6909      	ldr	r1, [r1, #16]
 8011112:	1a6f      	subs	r7, r5, r1
 8011114:	6965      	ldr	r5, [r4, #20]
 8011116:	2302      	movs	r3, #2
 8011118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801111c:	fb95 f5f3 	sdiv	r5, r5, r3
 8011120:	f109 0301 	add.w	r3, r9, #1
 8011124:	443b      	add	r3, r7
 8011126:	429d      	cmp	r5, r3
 8011128:	bf38      	it	cc
 801112a:	461d      	movcc	r5, r3
 801112c:	0553      	lsls	r3, r2, #21
 801112e:	d530      	bpl.n	8011192 <__ssputs_r+0x9e>
 8011130:	4629      	mov	r1, r5
 8011132:	f7ff f82d 	bl	8010190 <_malloc_r>
 8011136:	4606      	mov	r6, r0
 8011138:	b950      	cbnz	r0, 8011150 <__ssputs_r+0x5c>
 801113a:	230c      	movs	r3, #12
 801113c:	f8ca 3000 	str.w	r3, [sl]
 8011140:	89a3      	ldrh	r3, [r4, #12]
 8011142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011146:	81a3      	strh	r3, [r4, #12]
 8011148:	f04f 30ff 	mov.w	r0, #4294967295
 801114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011150:	463a      	mov	r2, r7
 8011152:	6921      	ldr	r1, [r4, #16]
 8011154:	f7fe ffa2 	bl	801009c <memcpy>
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801115e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011162:	81a3      	strh	r3, [r4, #12]
 8011164:	6126      	str	r6, [r4, #16]
 8011166:	6165      	str	r5, [r4, #20]
 8011168:	443e      	add	r6, r7
 801116a:	1bed      	subs	r5, r5, r7
 801116c:	6026      	str	r6, [r4, #0]
 801116e:	60a5      	str	r5, [r4, #8]
 8011170:	464e      	mov	r6, r9
 8011172:	454e      	cmp	r6, r9
 8011174:	d900      	bls.n	8011178 <__ssputs_r+0x84>
 8011176:	464e      	mov	r6, r9
 8011178:	4632      	mov	r2, r6
 801117a:	4641      	mov	r1, r8
 801117c:	6820      	ldr	r0, [r4, #0]
 801117e:	f7fe ff98 	bl	80100b2 <memmove>
 8011182:	68a3      	ldr	r3, [r4, #8]
 8011184:	1b9b      	subs	r3, r3, r6
 8011186:	60a3      	str	r3, [r4, #8]
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	441e      	add	r6, r3
 801118c:	6026      	str	r6, [r4, #0]
 801118e:	2000      	movs	r0, #0
 8011190:	e7dc      	b.n	801114c <__ssputs_r+0x58>
 8011192:	462a      	mov	r2, r5
 8011194:	f7ff ff88 	bl	80110a8 <_realloc_r>
 8011198:	4606      	mov	r6, r0
 801119a:	2800      	cmp	r0, #0
 801119c:	d1e2      	bne.n	8011164 <__ssputs_r+0x70>
 801119e:	6921      	ldr	r1, [r4, #16]
 80111a0:	4650      	mov	r0, sl
 80111a2:	f7fe ffa7 	bl	80100f4 <_free_r>
 80111a6:	e7c8      	b.n	801113a <__ssputs_r+0x46>

080111a8 <_svfiprintf_r>:
 80111a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ac:	461d      	mov	r5, r3
 80111ae:	898b      	ldrh	r3, [r1, #12]
 80111b0:	061f      	lsls	r7, r3, #24
 80111b2:	b09d      	sub	sp, #116	; 0x74
 80111b4:	4680      	mov	r8, r0
 80111b6:	460c      	mov	r4, r1
 80111b8:	4616      	mov	r6, r2
 80111ba:	d50f      	bpl.n	80111dc <_svfiprintf_r+0x34>
 80111bc:	690b      	ldr	r3, [r1, #16]
 80111be:	b96b      	cbnz	r3, 80111dc <_svfiprintf_r+0x34>
 80111c0:	2140      	movs	r1, #64	; 0x40
 80111c2:	f7fe ffe5 	bl	8010190 <_malloc_r>
 80111c6:	6020      	str	r0, [r4, #0]
 80111c8:	6120      	str	r0, [r4, #16]
 80111ca:	b928      	cbnz	r0, 80111d8 <_svfiprintf_r+0x30>
 80111cc:	230c      	movs	r3, #12
 80111ce:	f8c8 3000 	str.w	r3, [r8]
 80111d2:	f04f 30ff 	mov.w	r0, #4294967295
 80111d6:	e0c8      	b.n	801136a <_svfiprintf_r+0x1c2>
 80111d8:	2340      	movs	r3, #64	; 0x40
 80111da:	6163      	str	r3, [r4, #20]
 80111dc:	2300      	movs	r3, #0
 80111de:	9309      	str	r3, [sp, #36]	; 0x24
 80111e0:	2320      	movs	r3, #32
 80111e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111e6:	2330      	movs	r3, #48	; 0x30
 80111e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111ec:	9503      	str	r5, [sp, #12]
 80111ee:	f04f 0b01 	mov.w	fp, #1
 80111f2:	4637      	mov	r7, r6
 80111f4:	463d      	mov	r5, r7
 80111f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80111fa:	b10b      	cbz	r3, 8011200 <_svfiprintf_r+0x58>
 80111fc:	2b25      	cmp	r3, #37	; 0x25
 80111fe:	d13e      	bne.n	801127e <_svfiprintf_r+0xd6>
 8011200:	ebb7 0a06 	subs.w	sl, r7, r6
 8011204:	d00b      	beq.n	801121e <_svfiprintf_r+0x76>
 8011206:	4653      	mov	r3, sl
 8011208:	4632      	mov	r2, r6
 801120a:	4621      	mov	r1, r4
 801120c:	4640      	mov	r0, r8
 801120e:	f7ff ff71 	bl	80110f4 <__ssputs_r>
 8011212:	3001      	adds	r0, #1
 8011214:	f000 80a4 	beq.w	8011360 <_svfiprintf_r+0x1b8>
 8011218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801121a:	4453      	add	r3, sl
 801121c:	9309      	str	r3, [sp, #36]	; 0x24
 801121e:	783b      	ldrb	r3, [r7, #0]
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 809d 	beq.w	8011360 <_svfiprintf_r+0x1b8>
 8011226:	2300      	movs	r3, #0
 8011228:	f04f 32ff 	mov.w	r2, #4294967295
 801122c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011230:	9304      	str	r3, [sp, #16]
 8011232:	9307      	str	r3, [sp, #28]
 8011234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011238:	931a      	str	r3, [sp, #104]	; 0x68
 801123a:	462f      	mov	r7, r5
 801123c:	2205      	movs	r2, #5
 801123e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011242:	4850      	ldr	r0, [pc, #320]	; (8011384 <_svfiprintf_r+0x1dc>)
 8011244:	f7ef f844 	bl	80002d0 <memchr>
 8011248:	9b04      	ldr	r3, [sp, #16]
 801124a:	b9d0      	cbnz	r0, 8011282 <_svfiprintf_r+0xda>
 801124c:	06d9      	lsls	r1, r3, #27
 801124e:	bf44      	itt	mi
 8011250:	2220      	movmi	r2, #32
 8011252:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011256:	071a      	lsls	r2, r3, #28
 8011258:	bf44      	itt	mi
 801125a:	222b      	movmi	r2, #43	; 0x2b
 801125c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011260:	782a      	ldrb	r2, [r5, #0]
 8011262:	2a2a      	cmp	r2, #42	; 0x2a
 8011264:	d015      	beq.n	8011292 <_svfiprintf_r+0xea>
 8011266:	9a07      	ldr	r2, [sp, #28]
 8011268:	462f      	mov	r7, r5
 801126a:	2000      	movs	r0, #0
 801126c:	250a      	movs	r5, #10
 801126e:	4639      	mov	r1, r7
 8011270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011274:	3b30      	subs	r3, #48	; 0x30
 8011276:	2b09      	cmp	r3, #9
 8011278:	d94d      	bls.n	8011316 <_svfiprintf_r+0x16e>
 801127a:	b1b8      	cbz	r0, 80112ac <_svfiprintf_r+0x104>
 801127c:	e00f      	b.n	801129e <_svfiprintf_r+0xf6>
 801127e:	462f      	mov	r7, r5
 8011280:	e7b8      	b.n	80111f4 <_svfiprintf_r+0x4c>
 8011282:	4a40      	ldr	r2, [pc, #256]	; (8011384 <_svfiprintf_r+0x1dc>)
 8011284:	1a80      	subs	r0, r0, r2
 8011286:	fa0b f000 	lsl.w	r0, fp, r0
 801128a:	4318      	orrs	r0, r3
 801128c:	9004      	str	r0, [sp, #16]
 801128e:	463d      	mov	r5, r7
 8011290:	e7d3      	b.n	801123a <_svfiprintf_r+0x92>
 8011292:	9a03      	ldr	r2, [sp, #12]
 8011294:	1d11      	adds	r1, r2, #4
 8011296:	6812      	ldr	r2, [r2, #0]
 8011298:	9103      	str	r1, [sp, #12]
 801129a:	2a00      	cmp	r2, #0
 801129c:	db01      	blt.n	80112a2 <_svfiprintf_r+0xfa>
 801129e:	9207      	str	r2, [sp, #28]
 80112a0:	e004      	b.n	80112ac <_svfiprintf_r+0x104>
 80112a2:	4252      	negs	r2, r2
 80112a4:	f043 0302 	orr.w	r3, r3, #2
 80112a8:	9207      	str	r2, [sp, #28]
 80112aa:	9304      	str	r3, [sp, #16]
 80112ac:	783b      	ldrb	r3, [r7, #0]
 80112ae:	2b2e      	cmp	r3, #46	; 0x2e
 80112b0:	d10c      	bne.n	80112cc <_svfiprintf_r+0x124>
 80112b2:	787b      	ldrb	r3, [r7, #1]
 80112b4:	2b2a      	cmp	r3, #42	; 0x2a
 80112b6:	d133      	bne.n	8011320 <_svfiprintf_r+0x178>
 80112b8:	9b03      	ldr	r3, [sp, #12]
 80112ba:	1d1a      	adds	r2, r3, #4
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	9203      	str	r2, [sp, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	bfb8      	it	lt
 80112c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80112c8:	3702      	adds	r7, #2
 80112ca:	9305      	str	r3, [sp, #20]
 80112cc:	4d2e      	ldr	r5, [pc, #184]	; (8011388 <_svfiprintf_r+0x1e0>)
 80112ce:	7839      	ldrb	r1, [r7, #0]
 80112d0:	2203      	movs	r2, #3
 80112d2:	4628      	mov	r0, r5
 80112d4:	f7ee fffc 	bl	80002d0 <memchr>
 80112d8:	b138      	cbz	r0, 80112ea <_svfiprintf_r+0x142>
 80112da:	2340      	movs	r3, #64	; 0x40
 80112dc:	1b40      	subs	r0, r0, r5
 80112de:	fa03 f000 	lsl.w	r0, r3, r0
 80112e2:	9b04      	ldr	r3, [sp, #16]
 80112e4:	4303      	orrs	r3, r0
 80112e6:	3701      	adds	r7, #1
 80112e8:	9304      	str	r3, [sp, #16]
 80112ea:	7839      	ldrb	r1, [r7, #0]
 80112ec:	4827      	ldr	r0, [pc, #156]	; (801138c <_svfiprintf_r+0x1e4>)
 80112ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112f2:	2206      	movs	r2, #6
 80112f4:	1c7e      	adds	r6, r7, #1
 80112f6:	f7ee ffeb 	bl	80002d0 <memchr>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d038      	beq.n	8011370 <_svfiprintf_r+0x1c8>
 80112fe:	4b24      	ldr	r3, [pc, #144]	; (8011390 <_svfiprintf_r+0x1e8>)
 8011300:	bb13      	cbnz	r3, 8011348 <_svfiprintf_r+0x1a0>
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	3307      	adds	r3, #7
 8011306:	f023 0307 	bic.w	r3, r3, #7
 801130a:	3308      	adds	r3, #8
 801130c:	9303      	str	r3, [sp, #12]
 801130e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011310:	444b      	add	r3, r9
 8011312:	9309      	str	r3, [sp, #36]	; 0x24
 8011314:	e76d      	b.n	80111f2 <_svfiprintf_r+0x4a>
 8011316:	fb05 3202 	mla	r2, r5, r2, r3
 801131a:	2001      	movs	r0, #1
 801131c:	460f      	mov	r7, r1
 801131e:	e7a6      	b.n	801126e <_svfiprintf_r+0xc6>
 8011320:	2300      	movs	r3, #0
 8011322:	3701      	adds	r7, #1
 8011324:	9305      	str	r3, [sp, #20]
 8011326:	4619      	mov	r1, r3
 8011328:	250a      	movs	r5, #10
 801132a:	4638      	mov	r0, r7
 801132c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011330:	3a30      	subs	r2, #48	; 0x30
 8011332:	2a09      	cmp	r2, #9
 8011334:	d903      	bls.n	801133e <_svfiprintf_r+0x196>
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0c8      	beq.n	80112cc <_svfiprintf_r+0x124>
 801133a:	9105      	str	r1, [sp, #20]
 801133c:	e7c6      	b.n	80112cc <_svfiprintf_r+0x124>
 801133e:	fb05 2101 	mla	r1, r5, r1, r2
 8011342:	2301      	movs	r3, #1
 8011344:	4607      	mov	r7, r0
 8011346:	e7f0      	b.n	801132a <_svfiprintf_r+0x182>
 8011348:	ab03      	add	r3, sp, #12
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	4622      	mov	r2, r4
 801134e:	4b11      	ldr	r3, [pc, #68]	; (8011394 <_svfiprintf_r+0x1ec>)
 8011350:	a904      	add	r1, sp, #16
 8011352:	4640      	mov	r0, r8
 8011354:	f3af 8000 	nop.w
 8011358:	f1b0 3fff 	cmp.w	r0, #4294967295
 801135c:	4681      	mov	r9, r0
 801135e:	d1d6      	bne.n	801130e <_svfiprintf_r+0x166>
 8011360:	89a3      	ldrh	r3, [r4, #12]
 8011362:	065b      	lsls	r3, r3, #25
 8011364:	f53f af35 	bmi.w	80111d2 <_svfiprintf_r+0x2a>
 8011368:	9809      	ldr	r0, [sp, #36]	; 0x24
 801136a:	b01d      	add	sp, #116	; 0x74
 801136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011370:	ab03      	add	r3, sp, #12
 8011372:	9300      	str	r3, [sp, #0]
 8011374:	4622      	mov	r2, r4
 8011376:	4b07      	ldr	r3, [pc, #28]	; (8011394 <_svfiprintf_r+0x1ec>)
 8011378:	a904      	add	r1, sp, #16
 801137a:	4640      	mov	r0, r8
 801137c:	f7ff f918 	bl	80105b0 <_printf_i>
 8011380:	e7ea      	b.n	8011358 <_svfiprintf_r+0x1b0>
 8011382:	bf00      	nop
 8011384:	0801d020 	.word	0x0801d020
 8011388:	0801d026 	.word	0x0801d026
 801138c:	0801d02a 	.word	0x0801d02a
 8011390:	00000000 	.word	0x00000000
 8011394:	080110f5 	.word	0x080110f5

08011398 <_raise_r>:
 8011398:	291f      	cmp	r1, #31
 801139a:	b538      	push	{r3, r4, r5, lr}
 801139c:	4604      	mov	r4, r0
 801139e:	460d      	mov	r5, r1
 80113a0:	d904      	bls.n	80113ac <_raise_r+0x14>
 80113a2:	2316      	movs	r3, #22
 80113a4:	6003      	str	r3, [r0, #0]
 80113a6:	f04f 30ff 	mov.w	r0, #4294967295
 80113aa:	bd38      	pop	{r3, r4, r5, pc}
 80113ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80113ae:	b112      	cbz	r2, 80113b6 <_raise_r+0x1e>
 80113b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113b4:	b94b      	cbnz	r3, 80113ca <_raise_r+0x32>
 80113b6:	4620      	mov	r0, r4
 80113b8:	f000 f830 	bl	801141c <_getpid_r>
 80113bc:	462a      	mov	r2, r5
 80113be:	4601      	mov	r1, r0
 80113c0:	4620      	mov	r0, r4
 80113c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113c6:	f000 b817 	b.w	80113f8 <_kill_r>
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d00a      	beq.n	80113e4 <_raise_r+0x4c>
 80113ce:	1c59      	adds	r1, r3, #1
 80113d0:	d103      	bne.n	80113da <_raise_r+0x42>
 80113d2:	2316      	movs	r3, #22
 80113d4:	6003      	str	r3, [r0, #0]
 80113d6:	2001      	movs	r0, #1
 80113d8:	e7e7      	b.n	80113aa <_raise_r+0x12>
 80113da:	2400      	movs	r4, #0
 80113dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113e0:	4628      	mov	r0, r5
 80113e2:	4798      	blx	r3
 80113e4:	2000      	movs	r0, #0
 80113e6:	e7e0      	b.n	80113aa <_raise_r+0x12>

080113e8 <raise>:
 80113e8:	4b02      	ldr	r3, [pc, #8]	; (80113f4 <raise+0xc>)
 80113ea:	4601      	mov	r1, r0
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	f7ff bfd3 	b.w	8011398 <_raise_r>
 80113f2:	bf00      	nop
 80113f4:	20000244 	.word	0x20000244

080113f8 <_kill_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4c07      	ldr	r4, [pc, #28]	; (8011418 <_kill_r+0x20>)
 80113fc:	2300      	movs	r3, #0
 80113fe:	4605      	mov	r5, r0
 8011400:	4608      	mov	r0, r1
 8011402:	4611      	mov	r1, r2
 8011404:	6023      	str	r3, [r4, #0]
 8011406:	f001 faf9 	bl	80129fc <_kill>
 801140a:	1c43      	adds	r3, r0, #1
 801140c:	d102      	bne.n	8011414 <_kill_r+0x1c>
 801140e:	6823      	ldr	r3, [r4, #0]
 8011410:	b103      	cbz	r3, 8011414 <_kill_r+0x1c>
 8011412:	602b      	str	r3, [r5, #0]
 8011414:	bd38      	pop	{r3, r4, r5, pc}
 8011416:	bf00      	nop
 8011418:	20000d8c 	.word	0x20000d8c

0801141c <_getpid_r>:
 801141c:	f001 bade 	b.w	80129dc <_getpid>

08011420 <__sread>:
 8011420:	b510      	push	{r4, lr}
 8011422:	460c      	mov	r4, r1
 8011424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011428:	f000 f89c 	bl	8011564 <_read_r>
 801142c:	2800      	cmp	r0, #0
 801142e:	bfab      	itete	ge
 8011430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011432:	89a3      	ldrhlt	r3, [r4, #12]
 8011434:	181b      	addge	r3, r3, r0
 8011436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801143a:	bfac      	ite	ge
 801143c:	6563      	strge	r3, [r4, #84]	; 0x54
 801143e:	81a3      	strhlt	r3, [r4, #12]
 8011440:	bd10      	pop	{r4, pc}

08011442 <__swrite>:
 8011442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011446:	461f      	mov	r7, r3
 8011448:	898b      	ldrh	r3, [r1, #12]
 801144a:	05db      	lsls	r3, r3, #23
 801144c:	4605      	mov	r5, r0
 801144e:	460c      	mov	r4, r1
 8011450:	4616      	mov	r6, r2
 8011452:	d505      	bpl.n	8011460 <__swrite+0x1e>
 8011454:	2302      	movs	r3, #2
 8011456:	2200      	movs	r2, #0
 8011458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801145c:	f000 f868 	bl	8011530 <_lseek_r>
 8011460:	89a3      	ldrh	r3, [r4, #12]
 8011462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801146a:	81a3      	strh	r3, [r4, #12]
 801146c:	4632      	mov	r2, r6
 801146e:	463b      	mov	r3, r7
 8011470:	4628      	mov	r0, r5
 8011472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011476:	f000 b817 	b.w	80114a8 <_write_r>

0801147a <__sseek>:
 801147a:	b510      	push	{r4, lr}
 801147c:	460c      	mov	r4, r1
 801147e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011482:	f000 f855 	bl	8011530 <_lseek_r>
 8011486:	1c43      	adds	r3, r0, #1
 8011488:	89a3      	ldrh	r3, [r4, #12]
 801148a:	bf15      	itete	ne
 801148c:	6560      	strne	r0, [r4, #84]	; 0x54
 801148e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011496:	81a3      	strheq	r3, [r4, #12]
 8011498:	bf18      	it	ne
 801149a:	81a3      	strhne	r3, [r4, #12]
 801149c:	bd10      	pop	{r4, pc}

0801149e <__sclose>:
 801149e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114a2:	f000 b813 	b.w	80114cc <_close_r>
	...

080114a8 <_write_r>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	4c07      	ldr	r4, [pc, #28]	; (80114c8 <_write_r+0x20>)
 80114ac:	4605      	mov	r5, r0
 80114ae:	4608      	mov	r0, r1
 80114b0:	4611      	mov	r1, r2
 80114b2:	2200      	movs	r2, #0
 80114b4:	6022      	str	r2, [r4, #0]
 80114b6:	461a      	mov	r2, r3
 80114b8:	f7f5 fb50 	bl	8006b5c <_write>
 80114bc:	1c43      	adds	r3, r0, #1
 80114be:	d102      	bne.n	80114c6 <_write_r+0x1e>
 80114c0:	6823      	ldr	r3, [r4, #0]
 80114c2:	b103      	cbz	r3, 80114c6 <_write_r+0x1e>
 80114c4:	602b      	str	r3, [r5, #0]
 80114c6:	bd38      	pop	{r3, r4, r5, pc}
 80114c8:	20000d8c 	.word	0x20000d8c

080114cc <_close_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	4c06      	ldr	r4, [pc, #24]	; (80114e8 <_close_r+0x1c>)
 80114d0:	2300      	movs	r3, #0
 80114d2:	4605      	mov	r5, r0
 80114d4:	4608      	mov	r0, r1
 80114d6:	6023      	str	r3, [r4, #0]
 80114d8:	f001 fa70 	bl	80129bc <_close>
 80114dc:	1c43      	adds	r3, r0, #1
 80114de:	d102      	bne.n	80114e6 <_close_r+0x1a>
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	b103      	cbz	r3, 80114e6 <_close_r+0x1a>
 80114e4:	602b      	str	r3, [r5, #0]
 80114e6:	bd38      	pop	{r3, r4, r5, pc}
 80114e8:	20000d8c 	.word	0x20000d8c

080114ec <_fstat_r>:
 80114ec:	b538      	push	{r3, r4, r5, lr}
 80114ee:	4c07      	ldr	r4, [pc, #28]	; (801150c <_fstat_r+0x20>)
 80114f0:	2300      	movs	r3, #0
 80114f2:	4605      	mov	r5, r0
 80114f4:	4608      	mov	r0, r1
 80114f6:	4611      	mov	r1, r2
 80114f8:	6023      	str	r3, [r4, #0]
 80114fa:	f001 fa67 	bl	80129cc <_fstat>
 80114fe:	1c43      	adds	r3, r0, #1
 8011500:	d102      	bne.n	8011508 <_fstat_r+0x1c>
 8011502:	6823      	ldr	r3, [r4, #0]
 8011504:	b103      	cbz	r3, 8011508 <_fstat_r+0x1c>
 8011506:	602b      	str	r3, [r5, #0]
 8011508:	bd38      	pop	{r3, r4, r5, pc}
 801150a:	bf00      	nop
 801150c:	20000d8c 	.word	0x20000d8c

08011510 <_isatty_r>:
 8011510:	b538      	push	{r3, r4, r5, lr}
 8011512:	4c06      	ldr	r4, [pc, #24]	; (801152c <_isatty_r+0x1c>)
 8011514:	2300      	movs	r3, #0
 8011516:	4605      	mov	r5, r0
 8011518:	4608      	mov	r0, r1
 801151a:	6023      	str	r3, [r4, #0]
 801151c:	f001 fa66 	bl	80129ec <_isatty>
 8011520:	1c43      	adds	r3, r0, #1
 8011522:	d102      	bne.n	801152a <_isatty_r+0x1a>
 8011524:	6823      	ldr	r3, [r4, #0]
 8011526:	b103      	cbz	r3, 801152a <_isatty_r+0x1a>
 8011528:	602b      	str	r3, [r5, #0]
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	20000d8c 	.word	0x20000d8c

08011530 <_lseek_r>:
 8011530:	b538      	push	{r3, r4, r5, lr}
 8011532:	4c07      	ldr	r4, [pc, #28]	; (8011550 <_lseek_r+0x20>)
 8011534:	4605      	mov	r5, r0
 8011536:	4608      	mov	r0, r1
 8011538:	4611      	mov	r1, r2
 801153a:	2200      	movs	r2, #0
 801153c:	6022      	str	r2, [r4, #0]
 801153e:	461a      	mov	r2, r3
 8011540:	f001 fa64 	bl	8012a0c <_lseek>
 8011544:	1c43      	adds	r3, r0, #1
 8011546:	d102      	bne.n	801154e <_lseek_r+0x1e>
 8011548:	6823      	ldr	r3, [r4, #0]
 801154a:	b103      	cbz	r3, 801154e <_lseek_r+0x1e>
 801154c:	602b      	str	r3, [r5, #0]
 801154e:	bd38      	pop	{r3, r4, r5, pc}
 8011550:	20000d8c 	.word	0x20000d8c

08011554 <_malloc_usable_size_r>:
 8011554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011558:	1f18      	subs	r0, r3, #4
 801155a:	2b00      	cmp	r3, #0
 801155c:	bfbc      	itt	lt
 801155e:	580b      	ldrlt	r3, [r1, r0]
 8011560:	18c0      	addlt	r0, r0, r3
 8011562:	4770      	bx	lr

08011564 <_read_r>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	4c07      	ldr	r4, [pc, #28]	; (8011584 <_read_r+0x20>)
 8011568:	4605      	mov	r5, r0
 801156a:	4608      	mov	r0, r1
 801156c:	4611      	mov	r1, r2
 801156e:	2200      	movs	r2, #0
 8011570:	6022      	str	r2, [r4, #0]
 8011572:	461a      	mov	r2, r3
 8011574:	f001 fa52 	bl	8012a1c <_read>
 8011578:	1c43      	adds	r3, r0, #1
 801157a:	d102      	bne.n	8011582 <_read_r+0x1e>
 801157c:	6823      	ldr	r3, [r4, #0]
 801157e:	b103      	cbz	r3, 8011582 <_read_r+0x1e>
 8011580:	602b      	str	r3, [r5, #0]
 8011582:	bd38      	pop	{r3, r4, r5, pc}
 8011584:	20000d8c 	.word	0x20000d8c

08011588 <atanf>:
 8011588:	b538      	push	{r3, r4, r5, lr}
 801158a:	ee10 5a10 	vmov	r5, s0
 801158e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011592:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011596:	eef0 7a40 	vmov.f32	s15, s0
 801159a:	db10      	blt.n	80115be <atanf+0x36>
 801159c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80115a0:	dd04      	ble.n	80115ac <atanf+0x24>
 80115a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80115a6:	eeb0 0a67 	vmov.f32	s0, s15
 80115aa:	bd38      	pop	{r3, r4, r5, pc}
 80115ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80116e4 <atanf+0x15c>
 80115b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80116e8 <atanf+0x160>
 80115b4:	2d00      	cmp	r5, #0
 80115b6:	bfd8      	it	le
 80115b8:	eef0 7a47 	vmovle.f32	s15, s14
 80115bc:	e7f3      	b.n	80115a6 <atanf+0x1e>
 80115be:	4b4b      	ldr	r3, [pc, #300]	; (80116ec <atanf+0x164>)
 80115c0:	429c      	cmp	r4, r3
 80115c2:	dc10      	bgt.n	80115e6 <atanf+0x5e>
 80115c4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80115c8:	da0a      	bge.n	80115e0 <atanf+0x58>
 80115ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80116f0 <atanf+0x168>
 80115ce:	ee30 7a07 	vadd.f32	s14, s0, s14
 80115d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80115da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115de:	dce2      	bgt.n	80115a6 <atanf+0x1e>
 80115e0:	f04f 33ff 	mov.w	r3, #4294967295
 80115e4:	e013      	b.n	801160e <atanf+0x86>
 80115e6:	f000 f8a3 	bl	8011730 <fabsf>
 80115ea:	4b42      	ldr	r3, [pc, #264]	; (80116f4 <atanf+0x16c>)
 80115ec:	429c      	cmp	r4, r3
 80115ee:	dc4f      	bgt.n	8011690 <atanf+0x108>
 80115f0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80115f4:	429c      	cmp	r4, r3
 80115f6:	dc41      	bgt.n	801167c <atanf+0xf4>
 80115f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80115fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011600:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011604:	2300      	movs	r3, #0
 8011606:	ee30 0a27 	vadd.f32	s0, s0, s15
 801160a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801160e:	1c5a      	adds	r2, r3, #1
 8011610:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011614:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80116f8 <atanf+0x170>
 8011618:	eddf 5a38 	vldr	s11, [pc, #224]	; 80116fc <atanf+0x174>
 801161c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8011700 <atanf+0x178>
 8011620:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011624:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011628:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011704 <atanf+0x17c>
 801162c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011630:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011708 <atanf+0x180>
 8011634:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011638:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801170c <atanf+0x184>
 801163c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011640:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011710 <atanf+0x188>
 8011644:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011648:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011714 <atanf+0x18c>
 801164c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011650:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011718 <atanf+0x190>
 8011654:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011658:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801171c <atanf+0x194>
 801165c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011660:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8011720 <atanf+0x198>
 8011664:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011668:	ee27 7a26 	vmul.f32	s14, s14, s13
 801166c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011674:	d121      	bne.n	80116ba <atanf+0x132>
 8011676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801167a:	e794      	b.n	80115a6 <atanf+0x1e>
 801167c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011680:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011684:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011688:	2301      	movs	r3, #1
 801168a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801168e:	e7be      	b.n	801160e <atanf+0x86>
 8011690:	4b24      	ldr	r3, [pc, #144]	; (8011724 <atanf+0x19c>)
 8011692:	429c      	cmp	r4, r3
 8011694:	dc0b      	bgt.n	80116ae <atanf+0x126>
 8011696:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801169a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801169e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80116a2:	2302      	movs	r3, #2
 80116a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80116a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116ac:	e7af      	b.n	801160e <atanf+0x86>
 80116ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80116b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80116b6:	2303      	movs	r3, #3
 80116b8:	e7a9      	b.n	801160e <atanf+0x86>
 80116ba:	4a1b      	ldr	r2, [pc, #108]	; (8011728 <atanf+0x1a0>)
 80116bc:	491b      	ldr	r1, [pc, #108]	; (801172c <atanf+0x1a4>)
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	441a      	add	r2, r3
 80116c2:	440b      	add	r3, r1
 80116c4:	edd3 6a00 	vldr	s13, [r3]
 80116c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80116cc:	2d00      	cmp	r5, #0
 80116ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116d2:	ed92 7a00 	vldr	s14, [r2]
 80116d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116da:	bfb8      	it	lt
 80116dc:	eef1 7a67 	vneglt.f32	s15, s15
 80116e0:	e761      	b.n	80115a6 <atanf+0x1e>
 80116e2:	bf00      	nop
 80116e4:	bfc90fdb 	.word	0xbfc90fdb
 80116e8:	3fc90fdb 	.word	0x3fc90fdb
 80116ec:	3edfffff 	.word	0x3edfffff
 80116f0:	7149f2ca 	.word	0x7149f2ca
 80116f4:	3f97ffff 	.word	0x3f97ffff
 80116f8:	3c8569d7 	.word	0x3c8569d7
 80116fc:	3d4bda59 	.word	0x3d4bda59
 8011700:	bd6ef16b 	.word	0xbd6ef16b
 8011704:	3d886b35 	.word	0x3d886b35
 8011708:	3dba2e6e 	.word	0x3dba2e6e
 801170c:	3e124925 	.word	0x3e124925
 8011710:	3eaaaaab 	.word	0x3eaaaaab
 8011714:	bd15a221 	.word	0xbd15a221
 8011718:	bd9d8795 	.word	0xbd9d8795
 801171c:	bde38e38 	.word	0xbde38e38
 8011720:	be4ccccd 	.word	0xbe4ccccd
 8011724:	401bffff 	.word	0x401bffff
 8011728:	0801d0b4 	.word	0x0801d0b4
 801172c:	0801d0c4 	.word	0x0801d0c4

08011730 <fabsf>:
 8011730:	ee10 3a10 	vmov	r3, s0
 8011734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011738:	ee00 3a10 	vmov	s0, r3
 801173c:	4770      	bx	lr
	...

08011740 <roundf>:
 8011740:	ee10 0a10 	vmov	r0, s0
 8011744:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011748:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801174c:	2a16      	cmp	r2, #22
 801174e:	dc15      	bgt.n	801177c <roundf+0x3c>
 8011750:	2a00      	cmp	r2, #0
 8011752:	da08      	bge.n	8011766 <roundf+0x26>
 8011754:	3201      	adds	r2, #1
 8011756:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801175a:	d101      	bne.n	8011760 <roundf+0x20>
 801175c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011760:	ee00 3a10 	vmov	s0, r3
 8011764:	4770      	bx	lr
 8011766:	4908      	ldr	r1, [pc, #32]	; (8011788 <roundf+0x48>)
 8011768:	4111      	asrs	r1, r2
 801176a:	4208      	tst	r0, r1
 801176c:	d0fa      	beq.n	8011764 <roundf+0x24>
 801176e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011772:	4113      	asrs	r3, r2
 8011774:	4403      	add	r3, r0
 8011776:	ea23 0301 	bic.w	r3, r3, r1
 801177a:	e7f1      	b.n	8011760 <roundf+0x20>
 801177c:	2a80      	cmp	r2, #128	; 0x80
 801177e:	d1f1      	bne.n	8011764 <roundf+0x24>
 8011780:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	007fffff 	.word	0x007fffff

0801178c <tanf>:
 801178c:	ee10 3a10 	vmov	r3, s0
 8011790:	b507      	push	{r0, r1, r2, lr}
 8011792:	4a10      	ldr	r2, [pc, #64]	; (80117d4 <tanf+0x48>)
 8011794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011798:	4293      	cmp	r3, r2
 801179a:	dc05      	bgt.n	80117a8 <tanf+0x1c>
 801179c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80117d8 <tanf+0x4c>
 80117a0:	2001      	movs	r0, #1
 80117a2:	f000 ff5f 	bl	8012664 <__kernel_tanf>
 80117a6:	e004      	b.n	80117b2 <tanf+0x26>
 80117a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80117ac:	db04      	blt.n	80117b8 <tanf+0x2c>
 80117ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 80117b2:	b003      	add	sp, #12
 80117b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80117b8:	4668      	mov	r0, sp
 80117ba:	f000 fba5 	bl	8011f08 <__ieee754_rem_pio2f>
 80117be:	0040      	lsls	r0, r0, #1
 80117c0:	f000 0002 	and.w	r0, r0, #2
 80117c4:	f1c0 0001 	rsb	r0, r0, #1
 80117c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80117cc:	ed9d 0a00 	vldr	s0, [sp]
 80117d0:	e7e7      	b.n	80117a2 <tanf+0x16>
 80117d2:	bf00      	nop
 80117d4:	3f490fda 	.word	0x3f490fda
 80117d8:	00000000 	.word	0x00000000

080117dc <expf>:
 80117dc:	b530      	push	{r4, r5, lr}
 80117de:	ed2d 8b02 	vpush	{d8}
 80117e2:	4d35      	ldr	r5, [pc, #212]	; (80118b8 <expf+0xdc>)
 80117e4:	b08b      	sub	sp, #44	; 0x2c
 80117e6:	eeb0 8a40 	vmov.f32	s16, s0
 80117ea:	f000 f943 	bl	8011a74 <__ieee754_expf>
 80117ee:	f995 3000 	ldrsb.w	r3, [r5]
 80117f2:	3301      	adds	r3, #1
 80117f4:	ee10 4a10 	vmov	r4, s0
 80117f8:	d030      	beq.n	801185c <expf+0x80>
 80117fa:	eeb0 0a48 	vmov.f32	s0, s16
 80117fe:	f001 f81f 	bl	8012840 <finitef>
 8011802:	b358      	cbz	r0, 801185c <expf+0x80>
 8011804:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80118bc <expf+0xe0>
 8011808:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011810:	dd35      	ble.n	801187e <expf+0xa2>
 8011812:	2303      	movs	r3, #3
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	4b2a      	ldr	r3, [pc, #168]	; (80118c0 <expf+0xe4>)
 8011818:	9301      	str	r3, [sp, #4]
 801181a:	ee18 0a10 	vmov	r0, s16
 801181e:	2300      	movs	r3, #0
 8011820:	9308      	str	r3, [sp, #32]
 8011822:	f7ee ff09 	bl	8000638 <__aeabi_f2d>
 8011826:	f995 3000 	ldrsb.w	r3, [r5]
 801182a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801182e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011832:	b9cb      	cbnz	r3, 8011868 <expf+0x8c>
 8011834:	4b23      	ldr	r3, [pc, #140]	; (80118c4 <expf+0xe8>)
 8011836:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801183a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801183e:	4668      	mov	r0, sp
 8011840:	f000 fff4 	bl	801282c <matherr>
 8011844:	b1b0      	cbz	r0, 8011874 <expf+0x98>
 8011846:	9b08      	ldr	r3, [sp, #32]
 8011848:	b11b      	cbz	r3, 8011852 <expf+0x76>
 801184a:	f001 f8b1 	bl	80129b0 <__errno>
 801184e:	9b08      	ldr	r3, [sp, #32]
 8011850:	6003      	str	r3, [r0, #0]
 8011852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011856:	f7ef f959 	bl	8000b0c <__aeabi_d2f>
 801185a:	4604      	mov	r4, r0
 801185c:	ee00 4a10 	vmov	s0, r4
 8011860:	b00b      	add	sp, #44	; 0x2c
 8011862:	ecbd 8b02 	vpop	{d8}
 8011866:	bd30      	pop	{r4, r5, pc}
 8011868:	4917      	ldr	r1, [pc, #92]	; (80118c8 <expf+0xec>)
 801186a:	2000      	movs	r0, #0
 801186c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011870:	2b02      	cmp	r3, #2
 8011872:	d1e4      	bne.n	801183e <expf+0x62>
 8011874:	f001 f89c 	bl	80129b0 <__errno>
 8011878:	2322      	movs	r3, #34	; 0x22
 801187a:	6003      	str	r3, [r0, #0]
 801187c:	e7e3      	b.n	8011846 <expf+0x6a>
 801187e:	eddf 7a13 	vldr	s15, [pc, #76]	; 80118cc <expf+0xf0>
 8011882:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801188a:	d5e7      	bpl.n	801185c <expf+0x80>
 801188c:	2304      	movs	r3, #4
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	4b0b      	ldr	r3, [pc, #44]	; (80118c0 <expf+0xe4>)
 8011892:	9301      	str	r3, [sp, #4]
 8011894:	ee18 0a10 	vmov	r0, s16
 8011898:	2300      	movs	r3, #0
 801189a:	9308      	str	r3, [sp, #32]
 801189c:	f7ee fecc 	bl	8000638 <__aeabi_f2d>
 80118a0:	2300      	movs	r3, #0
 80118a2:	2200      	movs	r2, #0
 80118a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80118a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118b0:	f995 3000 	ldrsb.w	r3, [r5]
 80118b4:	e7dc      	b.n	8011870 <expf+0x94>
 80118b6:	bf00      	nop
 80118b8:	200002a8 	.word	0x200002a8
 80118bc:	42b17180 	.word	0x42b17180
 80118c0:	0801d0d4 	.word	0x0801d0d4
 80118c4:	47efffff 	.word	0x47efffff
 80118c8:	7ff00000 	.word	0x7ff00000
 80118cc:	c2cff1b5 	.word	0xc2cff1b5

080118d0 <fmodf>:
 80118d0:	b5d0      	push	{r4, r6, r7, lr}
 80118d2:	ed2d 8b02 	vpush	{d8}
 80118d6:	b08a      	sub	sp, #40	; 0x28
 80118d8:	eef0 8a40 	vmov.f32	s17, s0
 80118dc:	eeb0 8a60 	vmov.f32	s16, s1
 80118e0:	f000 f99c 	bl	8011c1c <__ieee754_fmodf>
 80118e4:	4b26      	ldr	r3, [pc, #152]	; (8011980 <fmodf+0xb0>)
 80118e6:	f993 4000 	ldrsb.w	r4, [r3]
 80118ea:	1c63      	adds	r3, r4, #1
 80118ec:	d035      	beq.n	801195a <fmodf+0x8a>
 80118ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	d630      	bvs.n	801195a <fmodf+0x8a>
 80118f8:	eef4 8a68 	vcmp.f32	s17, s17
 80118fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011900:	d62b      	bvs.n	801195a <fmodf+0x8a>
 8011902:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190a:	d126      	bne.n	801195a <fmodf+0x8a>
 801190c:	2301      	movs	r3, #1
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	4b1c      	ldr	r3, [pc, #112]	; (8011984 <fmodf+0xb4>)
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	ee18 0a90 	vmov	r0, s17
 8011918:	2300      	movs	r3, #0
 801191a:	9308      	str	r3, [sp, #32]
 801191c:	f7ee fe8c 	bl	8000638 <__aeabi_f2d>
 8011920:	4606      	mov	r6, r0
 8011922:	460f      	mov	r7, r1
 8011924:	ee18 0a10 	vmov	r0, s16
 8011928:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801192c:	f7ee fe84 	bl	8000638 <__aeabi_f2d>
 8011930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011934:	b9ac      	cbnz	r4, 8011962 <fmodf+0x92>
 8011936:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801193a:	4668      	mov	r0, sp
 801193c:	f000 ff76 	bl	801282c <matherr>
 8011940:	b1c8      	cbz	r0, 8011976 <fmodf+0xa6>
 8011942:	9b08      	ldr	r3, [sp, #32]
 8011944:	b11b      	cbz	r3, 801194e <fmodf+0x7e>
 8011946:	f001 f833 	bl	80129b0 <__errno>
 801194a:	9b08      	ldr	r3, [sp, #32]
 801194c:	6003      	str	r3, [r0, #0]
 801194e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011952:	f7ef f8db 	bl	8000b0c <__aeabi_d2f>
 8011956:	ee00 0a10 	vmov	s0, r0
 801195a:	b00a      	add	sp, #40	; 0x28
 801195c:	ecbd 8b02 	vpop	{d8}
 8011960:	bdd0      	pop	{r4, r6, r7, pc}
 8011962:	2200      	movs	r2, #0
 8011964:	2300      	movs	r3, #0
 8011966:	4610      	mov	r0, r2
 8011968:	4619      	mov	r1, r3
 801196a:	f7ee ffe7 	bl	800093c <__aeabi_ddiv>
 801196e:	2c02      	cmp	r4, #2
 8011970:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011974:	d1e1      	bne.n	801193a <fmodf+0x6a>
 8011976:	f001 f81b 	bl	80129b0 <__errno>
 801197a:	2321      	movs	r3, #33	; 0x21
 801197c:	6003      	str	r3, [r0, #0]
 801197e:	e7e0      	b.n	8011942 <fmodf+0x72>
 8011980:	200002a8 	.word	0x200002a8
 8011984:	0801d0d9 	.word	0x0801d0d9

08011988 <logf>:
 8011988:	b510      	push	{r4, lr}
 801198a:	ed2d 8b02 	vpush	{d8}
 801198e:	b08a      	sub	sp, #40	; 0x28
 8011990:	eeb0 8a40 	vmov.f32	s16, s0
 8011994:	f000 f9ca 	bl	8011d2c <__ieee754_logf>
 8011998:	4b31      	ldr	r3, [pc, #196]	; (8011a60 <logf+0xd8>)
 801199a:	f993 4000 	ldrsb.w	r4, [r3]
 801199e:	1c63      	adds	r3, r4, #1
 80119a0:	d059      	beq.n	8011a56 <logf+0xce>
 80119a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80119a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119aa:	d654      	bvs.n	8011a56 <logf+0xce>
 80119ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80119b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b4:	dc4f      	bgt.n	8011a56 <logf+0xce>
 80119b6:	4b2b      	ldr	r3, [pc, #172]	; (8011a64 <logf+0xdc>)
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	ee18 0a10 	vmov	r0, s16
 80119be:	2300      	movs	r3, #0
 80119c0:	9308      	str	r3, [sp, #32]
 80119c2:	f7ee fe39 	bl	8000638 <__aeabi_f2d>
 80119c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119ce:	b994      	cbnz	r4, 80119f6 <logf+0x6e>
 80119d0:	4b25      	ldr	r3, [pc, #148]	; (8011a68 <logf+0xe0>)
 80119d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80119d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80119da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80119e2:	d025      	beq.n	8011a30 <logf+0xa8>
 80119e4:	2301      	movs	r3, #1
 80119e6:	2c02      	cmp	r4, #2
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	d116      	bne.n	8011a1a <logf+0x92>
 80119ec:	f000 ffe0 	bl	80129b0 <__errno>
 80119f0:	2321      	movs	r3, #33	; 0x21
 80119f2:	6003      	str	r3, [r0, #0]
 80119f4:	e016      	b.n	8011a24 <logf+0x9c>
 80119f6:	4b1d      	ldr	r3, [pc, #116]	; (8011a6c <logf+0xe4>)
 80119f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80119fc:	2200      	movs	r2, #0
 80119fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011a06:	d1ed      	bne.n	80119e4 <logf+0x5c>
 8011a08:	2302      	movs	r3, #2
 8011a0a:	429c      	cmp	r4, r3
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	d111      	bne.n	8011a34 <logf+0xac>
 8011a10:	f000 ffce 	bl	80129b0 <__errno>
 8011a14:	2322      	movs	r3, #34	; 0x22
 8011a16:	6003      	str	r3, [r0, #0]
 8011a18:	e011      	b.n	8011a3e <logf+0xb6>
 8011a1a:	4668      	mov	r0, sp
 8011a1c:	f000 ff06 	bl	801282c <matherr>
 8011a20:	2800      	cmp	r0, #0
 8011a22:	d0e3      	beq.n	80119ec <logf+0x64>
 8011a24:	4812      	ldr	r0, [pc, #72]	; (8011a70 <logf+0xe8>)
 8011a26:	f000 ff03 	bl	8012830 <nan>
 8011a2a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011a2e:	e006      	b.n	8011a3e <logf+0xb6>
 8011a30:	2302      	movs	r3, #2
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	4668      	mov	r0, sp
 8011a36:	f000 fef9 	bl	801282c <matherr>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	d0e8      	beq.n	8011a10 <logf+0x88>
 8011a3e:	9b08      	ldr	r3, [sp, #32]
 8011a40:	b11b      	cbz	r3, 8011a4a <logf+0xc2>
 8011a42:	f000 ffb5 	bl	80129b0 <__errno>
 8011a46:	9b08      	ldr	r3, [sp, #32]
 8011a48:	6003      	str	r3, [r0, #0]
 8011a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a4e:	f7ef f85d 	bl	8000b0c <__aeabi_d2f>
 8011a52:	ee00 0a10 	vmov	s0, r0
 8011a56:	b00a      	add	sp, #40	; 0x28
 8011a58:	ecbd 8b02 	vpop	{d8}
 8011a5c:	bd10      	pop	{r4, pc}
 8011a5e:	bf00      	nop
 8011a60:	200002a8 	.word	0x200002a8
 8011a64:	0801d0df 	.word	0x0801d0df
 8011a68:	c7efffff 	.word	0xc7efffff
 8011a6c:	fff00000 	.word	0xfff00000
 8011a70:	0801d01b 	.word	0x0801d01b

08011a74 <__ieee754_expf>:
 8011a74:	ee10 2a10 	vmov	r2, s0
 8011a78:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011a7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011a80:	d902      	bls.n	8011a88 <__ieee754_expf+0x14>
 8011a82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a86:	4770      	bx	lr
 8011a88:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011a8c:	d106      	bne.n	8011a9c <__ieee754_expf+0x28>
 8011a8e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8011bd4 <__ieee754_expf+0x160>
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	bf18      	it	ne
 8011a96:	eeb0 0a67 	vmovne.f32	s0, s15
 8011a9a:	4770      	bx	lr
 8011a9c:	484e      	ldr	r0, [pc, #312]	; (8011bd8 <__ieee754_expf+0x164>)
 8011a9e:	4282      	cmp	r2, r0
 8011aa0:	dd04      	ble.n	8011aac <__ieee754_expf+0x38>
 8011aa2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8011bdc <__ieee754_expf+0x168>
 8011aa6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011aaa:	4770      	bx	lr
 8011aac:	2a00      	cmp	r2, #0
 8011aae:	da03      	bge.n	8011ab8 <__ieee754_expf+0x44>
 8011ab0:	4a4b      	ldr	r2, [pc, #300]	; (8011be0 <__ieee754_expf+0x16c>)
 8011ab2:	4291      	cmp	r1, r2
 8011ab4:	f200 808a 	bhi.w	8011bcc <__ieee754_expf+0x158>
 8011ab8:	4a4a      	ldr	r2, [pc, #296]	; (8011be4 <__ieee754_expf+0x170>)
 8011aba:	4291      	cmp	r1, r2
 8011abc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011ac0:	d954      	bls.n	8011b6c <__ieee754_expf+0xf8>
 8011ac2:	4a49      	ldr	r2, [pc, #292]	; (8011be8 <__ieee754_expf+0x174>)
 8011ac4:	4291      	cmp	r1, r2
 8011ac6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011aca:	d836      	bhi.n	8011b3a <__ieee754_expf+0xc6>
 8011acc:	4947      	ldr	r1, [pc, #284]	; (8011bec <__ieee754_expf+0x178>)
 8011ace:	4411      	add	r1, r2
 8011ad0:	ed91 7a00 	vldr	s14, [r1]
 8011ad4:	4946      	ldr	r1, [pc, #280]	; (8011bf0 <__ieee754_expf+0x17c>)
 8011ad6:	440a      	add	r2, r1
 8011ad8:	edd2 7a00 	vldr	s15, [r2]
 8011adc:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011ae0:	f1c3 0201 	rsb	r2, r3, #1
 8011ae4:	1ad2      	subs	r2, r2, r3
 8011ae6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011aea:	ee60 6a00 	vmul.f32	s13, s0, s0
 8011aee:	eddf 5a41 	vldr	s11, [pc, #260]	; 8011bf4 <__ieee754_expf+0x180>
 8011af2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8011bf8 <__ieee754_expf+0x184>
 8011af6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8011afa:	eddf 5a40 	vldr	s11, [pc, #256]	; 8011bfc <__ieee754_expf+0x188>
 8011afe:	eee5 5a26 	vfma.f32	s11, s10, s13
 8011b02:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8011c00 <__ieee754_expf+0x18c>
 8011b06:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8011b0a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8011c04 <__ieee754_expf+0x190>
 8011b0e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8011b12:	eeb0 5a40 	vmov.f32	s10, s0
 8011b16:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8011b1a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011b1e:	eef0 6a45 	vmov.f32	s13, s10
 8011b22:	ee20 5a05 	vmul.f32	s10, s0, s10
 8011b26:	bb92      	cbnz	r2, 8011b8e <__ieee754_expf+0x11a>
 8011b28:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8011b2c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011b30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011b34:	ee36 0a40 	vsub.f32	s0, s12, s0
 8011b38:	4770      	bx	lr
 8011b3a:	4b33      	ldr	r3, [pc, #204]	; (8011c08 <__ieee754_expf+0x194>)
 8011b3c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011c0c <__ieee754_expf+0x198>
 8011b40:	4413      	add	r3, r2
 8011b42:	edd3 7a00 	vldr	s15, [r3]
 8011b46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011b4a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011c10 <__ieee754_expf+0x19c>
 8011b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b52:	ee17 2a90 	vmov	r2, s15
 8011b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b5a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011b5e:	eeb0 7a40 	vmov.f32	s14, s0
 8011b62:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011c14 <__ieee754_expf+0x1a0>
 8011b66:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011b6a:	e7bc      	b.n	8011ae6 <__ieee754_expf+0x72>
 8011b6c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8011b70:	d20b      	bcs.n	8011b8a <__ieee754_expf+0x116>
 8011b72:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8011bdc <__ieee754_expf+0x168>
 8011b76:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011b7a:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b82:	dd02      	ble.n	8011b8a <__ieee754_expf+0x116>
 8011b84:	ee30 0a06 	vadd.f32	s0, s0, s12
 8011b88:	4770      	bx	lr
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	e7ad      	b.n	8011aea <__ieee754_expf+0x76>
 8011b8e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011b92:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011b96:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8011b9a:	bfb8      	it	lt
 8011b9c:	3264      	addlt	r2, #100	; 0x64
 8011b9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011ba2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011ba6:	ee76 7a40 	vsub.f32	s15, s12, s0
 8011baa:	ee17 3a90 	vmov	r3, s15
 8011bae:	bfab      	itete	ge
 8011bb0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011bb4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011bb8:	ee00 3a10 	vmovge	s0, r3
 8011bbc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8011c18 <__ieee754_expf+0x1a4>
 8011bc0:	bfbc      	itt	lt
 8011bc2:	ee00 3a10 	vmovlt	s0, r3
 8011bc6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011bca:	4770      	bx	lr
 8011bcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011bd4 <__ieee754_expf+0x160>
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop
 8011bd4:	00000000 	.word	0x00000000
 8011bd8:	42b17217 	.word	0x42b17217
 8011bdc:	7149f2ca 	.word	0x7149f2ca
 8011be0:	42cff1b5 	.word	0x42cff1b5
 8011be4:	3eb17218 	.word	0x3eb17218
 8011be8:	3f851591 	.word	0x3f851591
 8011bec:	0801d0ec 	.word	0x0801d0ec
 8011bf0:	0801d0f4 	.word	0x0801d0f4
 8011bf4:	3331bb4c 	.word	0x3331bb4c
 8011bf8:	b5ddea0e 	.word	0xb5ddea0e
 8011bfc:	388ab355 	.word	0x388ab355
 8011c00:	bb360b61 	.word	0xbb360b61
 8011c04:	3e2aaaab 	.word	0x3e2aaaab
 8011c08:	0801d0e4 	.word	0x0801d0e4
 8011c0c:	3fb8aa3b 	.word	0x3fb8aa3b
 8011c10:	3f317180 	.word	0x3f317180
 8011c14:	3717f7d1 	.word	0x3717f7d1
 8011c18:	0d800000 	.word	0x0d800000

08011c1c <__ieee754_fmodf>:
 8011c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c1e:	ee10 6a90 	vmov	r6, s1
 8011c22:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8011c26:	ee10 3a10 	vmov	r3, s0
 8011c2a:	d009      	beq.n	8011c40 <__ieee754_fmodf+0x24>
 8011c2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c30:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011c34:	ee10 7a10 	vmov	r7, s0
 8011c38:	da02      	bge.n	8011c40 <__ieee754_fmodf+0x24>
 8011c3a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011c3e:	dd0a      	ble.n	8011c56 <__ieee754_fmodf+0x3a>
 8011c40:	ee07 3a90 	vmov	s15, r3
 8011c44:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8011c48:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8011c4c:	ee17 3a90 	vmov	r3, s15
 8011c50:	ee00 3a10 	vmov	s0, r3
 8011c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c56:	42a9      	cmp	r1, r5
 8011c58:	dbfa      	blt.n	8011c50 <__ieee754_fmodf+0x34>
 8011c5a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8011c5e:	d105      	bne.n	8011c6c <__ieee754_fmodf+0x50>
 8011c60:	4a30      	ldr	r2, [pc, #192]	; (8011d24 <__ieee754_fmodf+0x108>)
 8011c62:	0fe3      	lsrs	r3, r4, #31
 8011c64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	e7f1      	b.n	8011c50 <__ieee754_fmodf+0x34>
 8011c6c:	4b2e      	ldr	r3, [pc, #184]	; (8011d28 <__ieee754_fmodf+0x10c>)
 8011c6e:	4299      	cmp	r1, r3
 8011c70:	dc3e      	bgt.n	8011cf0 <__ieee754_fmodf+0xd4>
 8011c72:	020a      	lsls	r2, r1, #8
 8011c74:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011c78:	2a00      	cmp	r2, #0
 8011c7a:	dc36      	bgt.n	8011cea <__ieee754_fmodf+0xce>
 8011c7c:	429d      	cmp	r5, r3
 8011c7e:	dc3a      	bgt.n	8011cf6 <__ieee754_fmodf+0xda>
 8011c80:	022b      	lsls	r3, r5, #8
 8011c82:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	f102 32ff 	add.w	r2, r2, #4294967295
 8011c8c:	d5fb      	bpl.n	8011c86 <__ieee754_fmodf+0x6a>
 8011c8e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011c92:	bfbb      	ittet	lt
 8011c94:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011c98:	1a1b      	sublt	r3, r3, r0
 8011c9a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8011c9e:	4099      	lsllt	r1, r3
 8011ca0:	bfa8      	it	ge
 8011ca2:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8011ca6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011caa:	bfb5      	itete	lt
 8011cac:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011cb0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8011cb4:	1a9b      	sublt	r3, r3, r2
 8011cb6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8011cba:	bfb8      	it	lt
 8011cbc:	409d      	lsllt	r5, r3
 8011cbe:	1a80      	subs	r0, r0, r2
 8011cc0:	1b4b      	subs	r3, r1, r5
 8011cc2:	b9d8      	cbnz	r0, 8011cfc <__ieee754_fmodf+0xe0>
 8011cc4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8011cc8:	bf28      	it	cs
 8011cca:	460b      	movcs	r3, r1
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d0c7      	beq.n	8011c60 <__ieee754_fmodf+0x44>
 8011cd0:	4915      	ldr	r1, [pc, #84]	; (8011d28 <__ieee754_fmodf+0x10c>)
 8011cd2:	428b      	cmp	r3, r1
 8011cd4:	dd1a      	ble.n	8011d0c <__ieee754_fmodf+0xf0>
 8011cd6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011cda:	db1a      	blt.n	8011d12 <__ieee754_fmodf+0xf6>
 8011cdc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011ce0:	4323      	orrs	r3, r4
 8011ce2:	327f      	adds	r2, #127	; 0x7f
 8011ce4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011ce8:	e7b2      	b.n	8011c50 <__ieee754_fmodf+0x34>
 8011cea:	3801      	subs	r0, #1
 8011cec:	0052      	lsls	r2, r2, #1
 8011cee:	e7c3      	b.n	8011c78 <__ieee754_fmodf+0x5c>
 8011cf0:	15c8      	asrs	r0, r1, #23
 8011cf2:	387f      	subs	r0, #127	; 0x7f
 8011cf4:	e7c2      	b.n	8011c7c <__ieee754_fmodf+0x60>
 8011cf6:	15ea      	asrs	r2, r5, #23
 8011cf8:	3a7f      	subs	r2, #127	; 0x7f
 8011cfa:	e7c8      	b.n	8011c8e <__ieee754_fmodf+0x72>
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	da02      	bge.n	8011d06 <__ieee754_fmodf+0xea>
 8011d00:	0049      	lsls	r1, r1, #1
 8011d02:	3801      	subs	r0, #1
 8011d04:	e7dc      	b.n	8011cc0 <__ieee754_fmodf+0xa4>
 8011d06:	d0ab      	beq.n	8011c60 <__ieee754_fmodf+0x44>
 8011d08:	0059      	lsls	r1, r3, #1
 8011d0a:	e7fa      	b.n	8011d02 <__ieee754_fmodf+0xe6>
 8011d0c:	005b      	lsls	r3, r3, #1
 8011d0e:	3a01      	subs	r2, #1
 8011d10:	e7df      	b.n	8011cd2 <__ieee754_fmodf+0xb6>
 8011d12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011d16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011d1a:	3282      	adds	r2, #130	; 0x82
 8011d1c:	4113      	asrs	r3, r2
 8011d1e:	4323      	orrs	r3, r4
 8011d20:	e796      	b.n	8011c50 <__ieee754_fmodf+0x34>
 8011d22:	bf00      	nop
 8011d24:	0801d0fc 	.word	0x0801d0fc
 8011d28:	007fffff 	.word	0x007fffff

08011d2c <__ieee754_logf>:
 8011d2c:	ee10 3a10 	vmov	r3, s0
 8011d30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011d34:	d106      	bne.n	8011d44 <__ieee754_logf+0x18>
 8011d36:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8011ecc <__ieee754_logf+0x1a0>
 8011d3a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011ed0 <__ieee754_logf+0x1a4>
 8011d3e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011d42:	4770      	bx	lr
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	da02      	bge.n	8011d4e <__ieee754_logf+0x22>
 8011d48:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011d4c:	e7f5      	b.n	8011d3a <__ieee754_logf+0xe>
 8011d4e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d52:	db02      	blt.n	8011d5a <__ieee754_logf+0x2e>
 8011d54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011d58:	4770      	bx	lr
 8011d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011d5e:	bfbf      	itttt	lt
 8011d60:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8011ed4 <__ieee754_logf+0x1a8>
 8011d64:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011d68:	f06f 0118 	mvnlt.w	r1, #24
 8011d6c:	ee17 3a90 	vmovlt	r3, s15
 8011d70:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011d74:	bfa8      	it	ge
 8011d76:	2100      	movge	r1, #0
 8011d78:	3a7f      	subs	r2, #127	; 0x7f
 8011d7a:	440a      	add	r2, r1
 8011d7c:	4956      	ldr	r1, [pc, #344]	; (8011ed8 <__ieee754_logf+0x1ac>)
 8011d7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011d82:	4419      	add	r1, r3
 8011d84:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8011d88:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8011d8c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8011d90:	4319      	orrs	r1, r3
 8011d92:	ee07 1a90 	vmov	s15, r1
 8011d96:	f103 010f 	add.w	r1, r3, #15
 8011d9a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8011d9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011da2:	290f      	cmp	r1, #15
 8011da4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011da8:	dc31      	bgt.n	8011e0e <__ieee754_logf+0xe2>
 8011daa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db2:	d10f      	bne.n	8011dd4 <__ieee754_logf+0xa8>
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	f000 8085 	beq.w	8011ec4 <__ieee754_logf+0x198>
 8011dba:	ee07 2a90 	vmov	s15, r2
 8011dbe:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8011edc <__ieee754_logf+0x1b0>
 8011dc2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8011ee0 <__ieee754_logf+0x1b4>
 8011dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011dce:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011dd2:	4770      	bx	lr
 8011dd4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011ee4 <__ieee754_logf+0x1b8>
 8011dd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011ddc:	eea0 7a67 	vfms.f32	s14, s0, s15
 8011de0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011de8:	b912      	cbnz	r2, 8011df0 <__ieee754_logf+0xc4>
 8011dea:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011dee:	4770      	bx	lr
 8011df0:	ee07 2a90 	vmov	s15, r2
 8011df4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8011edc <__ieee754_logf+0x1b0>
 8011df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dfc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011e00:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011e04:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011ee0 <__ieee754_logf+0x1b4>
 8011e08:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011e0c:	4770      	bx	lr
 8011e0e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011e12:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011e16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011ee8 <__ieee754_logf+0x1bc>
 8011e1a:	eddf 4a34 	vldr	s9, [pc, #208]	; 8011eec <__ieee754_logf+0x1c0>
 8011e1e:	4934      	ldr	r1, [pc, #208]	; (8011ef0 <__ieee754_logf+0x1c4>)
 8011e20:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011e24:	4419      	add	r1, r3
 8011e26:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8011e2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011e2e:	430b      	orrs	r3, r1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	ee07 2a90 	vmov	s15, r2
 8011e36:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011e3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011e3e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8011e42:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8011ef4 <__ieee754_logf+0x1c8>
 8011e46:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011e4a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8011ef8 <__ieee754_logf+0x1cc>
 8011e4e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011e52:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8011efc <__ieee754_logf+0x1d0>
 8011e56:	eee7 7a24 	vfma.f32	s15, s14, s9
 8011e5a:	eddf 4a29 	vldr	s9, [pc, #164]	; 8011f00 <__ieee754_logf+0x1d4>
 8011e5e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8011e62:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011f04 <__ieee754_logf+0x1d8>
 8011e66:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011e6a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011e6e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011e72:	dd1c      	ble.n	8011eae <__ieee754_logf+0x182>
 8011e74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011e78:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011e7c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e84:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011e88:	b922      	cbnz	r2, 8011e94 <__ieee754_logf+0x168>
 8011e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e92:	4770      	bx	lr
 8011e94:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8011edc <__ieee754_logf+0x1b0>
 8011e98:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ea0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011ea4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011ee0 <__ieee754_logf+0x1b4>
 8011ea8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011eac:	4770      	bx	lr
 8011eae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011eb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	d0e9      	beq.n	8011e8e <__ieee754_logf+0x162>
 8011eba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8011edc <__ieee754_logf+0x1b0>
 8011ebe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011ec2:	e7ed      	b.n	8011ea0 <__ieee754_logf+0x174>
 8011ec4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011ed0 <__ieee754_logf+0x1a4>
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	cc000000 	.word	0xcc000000
 8011ed0:	00000000 	.word	0x00000000
 8011ed4:	4c000000 	.word	0x4c000000
 8011ed8:	004afb20 	.word	0x004afb20
 8011edc:	3717f7d1 	.word	0x3717f7d1
 8011ee0:	3f317180 	.word	0x3f317180
 8011ee4:	3eaaaaab 	.word	0x3eaaaaab
 8011ee8:	3e1cd04f 	.word	0x3e1cd04f
 8011eec:	3e178897 	.word	0x3e178897
 8011ef0:	ffcf5c30 	.word	0xffcf5c30
 8011ef4:	3e638e29 	.word	0x3e638e29
 8011ef8:	3ecccccd 	.word	0x3ecccccd
 8011efc:	3e3a3325 	.word	0x3e3a3325
 8011f00:	3e924925 	.word	0x3e924925
 8011f04:	3f2aaaab 	.word	0x3f2aaaab

08011f08 <__ieee754_rem_pio2f>:
 8011f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f0a:	ee10 6a10 	vmov	r6, s0
 8011f0e:	4b86      	ldr	r3, [pc, #536]	; (8012128 <__ieee754_rem_pio2f+0x220>)
 8011f10:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8011f14:	429c      	cmp	r4, r3
 8011f16:	b087      	sub	sp, #28
 8011f18:	4605      	mov	r5, r0
 8011f1a:	dc05      	bgt.n	8011f28 <__ieee754_rem_pio2f+0x20>
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	ed85 0a00 	vstr	s0, [r5]
 8011f22:	6043      	str	r3, [r0, #4]
 8011f24:	2000      	movs	r0, #0
 8011f26:	e020      	b.n	8011f6a <__ieee754_rem_pio2f+0x62>
 8011f28:	4b80      	ldr	r3, [pc, #512]	; (801212c <__ieee754_rem_pio2f+0x224>)
 8011f2a:	429c      	cmp	r4, r3
 8011f2c:	dc38      	bgt.n	8011fa0 <__ieee754_rem_pio2f+0x98>
 8011f2e:	2e00      	cmp	r6, #0
 8011f30:	f024 040f 	bic.w	r4, r4, #15
 8011f34:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8012130 <__ieee754_rem_pio2f+0x228>
 8011f38:	4b7e      	ldr	r3, [pc, #504]	; (8012134 <__ieee754_rem_pio2f+0x22c>)
 8011f3a:	dd18      	ble.n	8011f6e <__ieee754_rem_pio2f+0x66>
 8011f3c:	429c      	cmp	r4, r3
 8011f3e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011f42:	bf09      	itett	eq
 8011f44:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8012138 <__ieee754_rem_pio2f+0x230>
 8011f48:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801213c <__ieee754_rem_pio2f+0x234>
 8011f4c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011f50:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8012140 <__ieee754_rem_pio2f+0x238>
 8011f54:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011f58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011f5c:	edc0 6a00 	vstr	s13, [r0]
 8011f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f64:	edc0 7a01 	vstr	s15, [r0, #4]
 8011f68:	2001      	movs	r0, #1
 8011f6a:	b007      	add	sp, #28
 8011f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f6e:	429c      	cmp	r4, r3
 8011f70:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011f74:	bf09      	itett	eq
 8011f76:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8012138 <__ieee754_rem_pio2f+0x230>
 8011f7a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801213c <__ieee754_rem_pio2f+0x234>
 8011f7e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011f82:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8012140 <__ieee754_rem_pio2f+0x238>
 8011f86:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011f8e:	edc0 6a00 	vstr	s13, [r0]
 8011f92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f96:	edc0 7a01 	vstr	s15, [r0, #4]
 8011f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f9e:	e7e4      	b.n	8011f6a <__ieee754_rem_pio2f+0x62>
 8011fa0:	4b68      	ldr	r3, [pc, #416]	; (8012144 <__ieee754_rem_pio2f+0x23c>)
 8011fa2:	429c      	cmp	r4, r3
 8011fa4:	dc71      	bgt.n	801208a <__ieee754_rem_pio2f+0x182>
 8011fa6:	f7ff fbc3 	bl	8011730 <fabsf>
 8011faa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8012148 <__ieee754_rem_pio2f+0x240>
 8011fae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011fb2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8011fbe:	ee17 0a90 	vmov	r0, s15
 8011fc2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8012130 <__ieee754_rem_pio2f+0x228>
 8011fc6:	eeb1 7a46 	vneg.f32	s14, s12
 8011fca:	eea7 0a27 	vfma.f32	s0, s14, s15
 8011fce:	281f      	cmp	r0, #31
 8011fd0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801213c <__ieee754_rem_pio2f+0x234>
 8011fd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011fd8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011fdc:	ee16 3a90 	vmov	r3, s13
 8011fe0:	dc1c      	bgt.n	801201c <__ieee754_rem_pio2f+0x114>
 8011fe2:	1e47      	subs	r7, r0, #1
 8011fe4:	4959      	ldr	r1, [pc, #356]	; (801214c <__ieee754_rem_pio2f+0x244>)
 8011fe6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8011fea:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8011fee:	428a      	cmp	r2, r1
 8011ff0:	d014      	beq.n	801201c <__ieee754_rem_pio2f+0x114>
 8011ff2:	602b      	str	r3, [r5, #0]
 8011ff4:	ed95 7a00 	vldr	s14, [r5]
 8011ff8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011ffc:	2e00      	cmp	r6, #0
 8011ffe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012002:	ed85 0a01 	vstr	s0, [r5, #4]
 8012006:	dab0      	bge.n	8011f6a <__ieee754_rem_pio2f+0x62>
 8012008:	eeb1 7a47 	vneg.f32	s14, s14
 801200c:	eeb1 0a40 	vneg.f32	s0, s0
 8012010:	ed85 7a00 	vstr	s14, [r5]
 8012014:	ed85 0a01 	vstr	s0, [r5, #4]
 8012018:	4240      	negs	r0, r0
 801201a:	e7a6      	b.n	8011f6a <__ieee754_rem_pio2f+0x62>
 801201c:	15e4      	asrs	r4, r4, #23
 801201e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012022:	1aa2      	subs	r2, r4, r2
 8012024:	2a08      	cmp	r2, #8
 8012026:	dde4      	ble.n	8011ff2 <__ieee754_rem_pio2f+0xea>
 8012028:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012138 <__ieee754_rem_pio2f+0x230>
 801202c:	eef0 6a40 	vmov.f32	s13, s0
 8012030:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012034:	ee30 0a66 	vsub.f32	s0, s0, s13
 8012038:	eea7 0a27 	vfma.f32	s0, s14, s15
 801203c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012140 <__ieee754_rem_pio2f+0x238>
 8012040:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8012044:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8012048:	eef0 7a40 	vmov.f32	s15, s0
 801204c:	ee15 3a90 	vmov	r3, s11
 8012050:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012054:	1aa4      	subs	r4, r4, r2
 8012056:	2c19      	cmp	r4, #25
 8012058:	dc04      	bgt.n	8012064 <__ieee754_rem_pio2f+0x15c>
 801205a:	edc5 5a00 	vstr	s11, [r5]
 801205e:	eeb0 0a66 	vmov.f32	s0, s13
 8012062:	e7c7      	b.n	8011ff4 <__ieee754_rem_pio2f+0xec>
 8012064:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8012150 <__ieee754_rem_pio2f+0x248>
 8012068:	eeb0 0a66 	vmov.f32	s0, s13
 801206c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8012070:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012074:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012078:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012154 <__ieee754_rem_pio2f+0x24c>
 801207c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8012080:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012084:	ed85 7a00 	vstr	s14, [r5]
 8012088:	e7b4      	b.n	8011ff4 <__ieee754_rem_pio2f+0xec>
 801208a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801208e:	db06      	blt.n	801209e <__ieee754_rem_pio2f+0x196>
 8012090:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012094:	edc0 7a01 	vstr	s15, [r0, #4]
 8012098:	edc0 7a00 	vstr	s15, [r0]
 801209c:	e742      	b.n	8011f24 <__ieee754_rem_pio2f+0x1c>
 801209e:	15e2      	asrs	r2, r4, #23
 80120a0:	3a86      	subs	r2, #134	; 0x86
 80120a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80120a6:	ee07 3a90 	vmov	s15, r3
 80120aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80120ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8012158 <__ieee754_rem_pio2f+0x250>
 80120b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80120b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80120be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80120c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80120c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80120ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80120d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80120d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80120da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120de:	edcd 7a05 	vstr	s15, [sp, #20]
 80120e2:	d11e      	bne.n	8012122 <__ieee754_rem_pio2f+0x21a>
 80120e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80120e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ec:	bf0c      	ite	eq
 80120ee:	2301      	moveq	r3, #1
 80120f0:	2302      	movne	r3, #2
 80120f2:	491a      	ldr	r1, [pc, #104]	; (801215c <__ieee754_rem_pio2f+0x254>)
 80120f4:	9101      	str	r1, [sp, #4]
 80120f6:	2102      	movs	r1, #2
 80120f8:	9100      	str	r1, [sp, #0]
 80120fa:	a803      	add	r0, sp, #12
 80120fc:	4629      	mov	r1, r5
 80120fe:	f000 f82f 	bl	8012160 <__kernel_rem_pio2f>
 8012102:	2e00      	cmp	r6, #0
 8012104:	f6bf af31 	bge.w	8011f6a <__ieee754_rem_pio2f+0x62>
 8012108:	edd5 7a00 	vldr	s15, [r5]
 801210c:	eef1 7a67 	vneg.f32	s15, s15
 8012110:	edc5 7a00 	vstr	s15, [r5]
 8012114:	edd5 7a01 	vldr	s15, [r5, #4]
 8012118:	eef1 7a67 	vneg.f32	s15, s15
 801211c:	edc5 7a01 	vstr	s15, [r5, #4]
 8012120:	e77a      	b.n	8012018 <__ieee754_rem_pio2f+0x110>
 8012122:	2303      	movs	r3, #3
 8012124:	e7e5      	b.n	80120f2 <__ieee754_rem_pio2f+0x1ea>
 8012126:	bf00      	nop
 8012128:	3f490fd8 	.word	0x3f490fd8
 801212c:	4016cbe3 	.word	0x4016cbe3
 8012130:	3fc90f80 	.word	0x3fc90f80
 8012134:	3fc90fd0 	.word	0x3fc90fd0
 8012138:	37354400 	.word	0x37354400
 801213c:	37354443 	.word	0x37354443
 8012140:	2e85a308 	.word	0x2e85a308
 8012144:	43490f80 	.word	0x43490f80
 8012148:	3f22f984 	.word	0x3f22f984
 801214c:	0801d104 	.word	0x0801d104
 8012150:	2e85a300 	.word	0x2e85a300
 8012154:	248d3132 	.word	0x248d3132
 8012158:	43800000 	.word	0x43800000
 801215c:	0801d184 	.word	0x0801d184

08012160 <__kernel_rem_pio2f>:
 8012160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012164:	ed2d 8b04 	vpush	{d8-d9}
 8012168:	b0d7      	sub	sp, #348	; 0x15c
 801216a:	469b      	mov	fp, r3
 801216c:	460e      	mov	r6, r1
 801216e:	4bbe      	ldr	r3, [pc, #760]	; (8012468 <__kernel_rem_pio2f+0x308>)
 8012170:	9964      	ldr	r1, [sp, #400]	; 0x190
 8012172:	9002      	str	r0, [sp, #8]
 8012174:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8012178:	9865      	ldr	r0, [sp, #404]	; 0x194
 801217a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8012478 <__kernel_rem_pio2f+0x318>
 801217e:	1ed1      	subs	r1, r2, #3
 8012180:	2308      	movs	r3, #8
 8012182:	fb91 f1f3 	sdiv	r1, r1, r3
 8012186:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801218a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801218e:	1c4c      	adds	r4, r1, #1
 8012190:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8012194:	eba1 050a 	sub.w	r5, r1, sl
 8012198:	aa1a      	add	r2, sp, #104	; 0x68
 801219a:	eb09 070a 	add.w	r7, r9, sl
 801219e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80121a2:	4696      	mov	lr, r2
 80121a4:	2300      	movs	r3, #0
 80121a6:	42bb      	cmp	r3, r7
 80121a8:	dd0f      	ble.n	80121ca <__kernel_rem_pio2f+0x6a>
 80121aa:	af42      	add	r7, sp, #264	; 0x108
 80121ac:	2200      	movs	r2, #0
 80121ae:	454a      	cmp	r2, r9
 80121b0:	dc27      	bgt.n	8012202 <__kernel_rem_pio2f+0xa2>
 80121b2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80121b6:	eb0b 0302 	add.w	r3, fp, r2
 80121ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80121be:	9d02      	ldr	r5, [sp, #8]
 80121c0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8012478 <__kernel_rem_pio2f+0x318>
 80121c4:	f04f 0c00 	mov.w	ip, #0
 80121c8:	e015      	b.n	80121f6 <__kernel_rem_pio2f+0x96>
 80121ca:	42dd      	cmn	r5, r3
 80121cc:	bf5d      	ittte	pl
 80121ce:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80121d2:	ee07 2a90 	vmovpl	s15, r2
 80121d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80121da:	eef0 7a47 	vmovmi.f32	s15, s14
 80121de:	ecee 7a01 	vstmia	lr!, {s15}
 80121e2:	3301      	adds	r3, #1
 80121e4:	e7df      	b.n	80121a6 <__kernel_rem_pio2f+0x46>
 80121e6:	ecf5 6a01 	vldmia	r5!, {s13}
 80121ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80121ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80121f2:	f10c 0c01 	add.w	ip, ip, #1
 80121f6:	45d4      	cmp	ip, sl
 80121f8:	ddf5      	ble.n	80121e6 <__kernel_rem_pio2f+0x86>
 80121fa:	ece7 7a01 	vstmia	r7!, {s15}
 80121fe:	3201      	adds	r2, #1
 8012200:	e7d5      	b.n	80121ae <__kernel_rem_pio2f+0x4e>
 8012202:	ab06      	add	r3, sp, #24
 8012204:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012208:	9304      	str	r3, [sp, #16]
 801220a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8012474 <__kernel_rem_pio2f+0x314>
 801220e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8012470 <__kernel_rem_pio2f+0x310>
 8012212:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8012216:	9303      	str	r3, [sp, #12]
 8012218:	464d      	mov	r5, r9
 801221a:	ab56      	add	r3, sp, #344	; 0x158
 801221c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8012220:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8012224:	3f01      	subs	r7, #1
 8012226:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801222a:	00bf      	lsls	r7, r7, #2
 801222c:	ab56      	add	r3, sp, #344	; 0x158
 801222e:	19da      	adds	r2, r3, r7
 8012230:	3a4c      	subs	r2, #76	; 0x4c
 8012232:	2300      	movs	r3, #0
 8012234:	1ae9      	subs	r1, r5, r3
 8012236:	2900      	cmp	r1, #0
 8012238:	dc4c      	bgt.n	80122d4 <__kernel_rem_pio2f+0x174>
 801223a:	4620      	mov	r0, r4
 801223c:	f000 fb4c 	bl	80128d8 <scalbnf>
 8012240:	eeb0 8a40 	vmov.f32	s16, s0
 8012244:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012248:	ee28 0a00 	vmul.f32	s0, s16, s0
 801224c:	f000 fb02 	bl	8012854 <floorf>
 8012250:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012254:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012258:	2c00      	cmp	r4, #0
 801225a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801225e:	edcd 7a01 	vstr	s15, [sp, #4]
 8012262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012266:	ee38 8a67 	vsub.f32	s16, s16, s15
 801226a:	dd48      	ble.n	80122fe <__kernel_rem_pio2f+0x19e>
 801226c:	1e69      	subs	r1, r5, #1
 801226e:	ab06      	add	r3, sp, #24
 8012270:	f1c4 0008 	rsb	r0, r4, #8
 8012274:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8012278:	9a01      	ldr	r2, [sp, #4]
 801227a:	fa4c f300 	asr.w	r3, ip, r0
 801227e:	441a      	add	r2, r3
 8012280:	4083      	lsls	r3, r0
 8012282:	9201      	str	r2, [sp, #4]
 8012284:	ebac 0203 	sub.w	r2, ip, r3
 8012288:	ab06      	add	r3, sp, #24
 801228a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801228e:	f1c4 0307 	rsb	r3, r4, #7
 8012292:	fa42 f803 	asr.w	r8, r2, r3
 8012296:	f1b8 0f00 	cmp.w	r8, #0
 801229a:	dd41      	ble.n	8012320 <__kernel_rem_pio2f+0x1c0>
 801229c:	9b01      	ldr	r3, [sp, #4]
 801229e:	2000      	movs	r0, #0
 80122a0:	3301      	adds	r3, #1
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	4601      	mov	r1, r0
 80122a6:	4285      	cmp	r5, r0
 80122a8:	dc6d      	bgt.n	8012386 <__kernel_rem_pio2f+0x226>
 80122aa:	2c00      	cmp	r4, #0
 80122ac:	dd04      	ble.n	80122b8 <__kernel_rem_pio2f+0x158>
 80122ae:	2c01      	cmp	r4, #1
 80122b0:	d07e      	beq.n	80123b0 <__kernel_rem_pio2f+0x250>
 80122b2:	2c02      	cmp	r4, #2
 80122b4:	f000 8086 	beq.w	80123c4 <__kernel_rem_pio2f+0x264>
 80122b8:	f1b8 0f02 	cmp.w	r8, #2
 80122bc:	d130      	bne.n	8012320 <__kernel_rem_pio2f+0x1c0>
 80122be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80122c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80122c6:	b359      	cbz	r1, 8012320 <__kernel_rem_pio2f+0x1c0>
 80122c8:	4620      	mov	r0, r4
 80122ca:	f000 fb05 	bl	80128d8 <scalbnf>
 80122ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80122d2:	e025      	b.n	8012320 <__kernel_rem_pio2f+0x1c0>
 80122d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80122d8:	a806      	add	r0, sp, #24
 80122da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80122e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80122ea:	ee10 1a10 	vmov	r1, s0
 80122ee:	ed32 0a01 	vldmdb	r2!, {s0}
 80122f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80122f6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80122fa:	3301      	adds	r3, #1
 80122fc:	e79a      	b.n	8012234 <__kernel_rem_pio2f+0xd4>
 80122fe:	d106      	bne.n	801230e <__kernel_rem_pio2f+0x1ae>
 8012300:	1e6b      	subs	r3, r5, #1
 8012302:	aa06      	add	r2, sp, #24
 8012304:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012308:	ea4f 2822 	mov.w	r8, r2, asr #8
 801230c:	e7c3      	b.n	8012296 <__kernel_rem_pio2f+0x136>
 801230e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012312:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801231a:	da31      	bge.n	8012380 <__kernel_rem_pio2f+0x220>
 801231c:	f04f 0800 	mov.w	r8, #0
 8012320:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012328:	f040 80a8 	bne.w	801247c <__kernel_rem_pio2f+0x31c>
 801232c:	1e6b      	subs	r3, r5, #1
 801232e:	4618      	mov	r0, r3
 8012330:	2200      	movs	r2, #0
 8012332:	4548      	cmp	r0, r9
 8012334:	da4d      	bge.n	80123d2 <__kernel_rem_pio2f+0x272>
 8012336:	2a00      	cmp	r2, #0
 8012338:	f000 8087 	beq.w	801244a <__kernel_rem_pio2f+0x2ea>
 801233c:	aa06      	add	r2, sp, #24
 801233e:	3c08      	subs	r4, #8
 8012340:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012344:	2900      	cmp	r1, #0
 8012346:	f000 808d 	beq.w	8012464 <__kernel_rem_pio2f+0x304>
 801234a:	4620      	mov	r0, r4
 801234c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012350:	9302      	str	r3, [sp, #8]
 8012352:	f000 fac1 	bl	80128d8 <scalbnf>
 8012356:	9b02      	ldr	r3, [sp, #8]
 8012358:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012474 <__kernel_rem_pio2f+0x314>
 801235c:	0099      	lsls	r1, r3, #2
 801235e:	aa42      	add	r2, sp, #264	; 0x108
 8012360:	1850      	adds	r0, r2, r1
 8012362:	1d05      	adds	r5, r0, #4
 8012364:	461c      	mov	r4, r3
 8012366:	2c00      	cmp	r4, #0
 8012368:	f280 80b8 	bge.w	80124dc <__kernel_rem_pio2f+0x37c>
 801236c:	2500      	movs	r5, #0
 801236e:	1b5c      	subs	r4, r3, r5
 8012370:	2c00      	cmp	r4, #0
 8012372:	f2c0 80d8 	blt.w	8012526 <__kernel_rem_pio2f+0x3c6>
 8012376:	4f3d      	ldr	r7, [pc, #244]	; (801246c <__kernel_rem_pio2f+0x30c>)
 8012378:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8012478 <__kernel_rem_pio2f+0x318>
 801237c:	2400      	movs	r4, #0
 801237e:	e0c6      	b.n	801250e <__kernel_rem_pio2f+0x3ae>
 8012380:	f04f 0802 	mov.w	r8, #2
 8012384:	e78a      	b.n	801229c <__kernel_rem_pio2f+0x13c>
 8012386:	ab06      	add	r3, sp, #24
 8012388:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801238c:	b949      	cbnz	r1, 80123a2 <__kernel_rem_pio2f+0x242>
 801238e:	b12b      	cbz	r3, 801239c <__kernel_rem_pio2f+0x23c>
 8012390:	aa06      	add	r2, sp, #24
 8012392:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8012396:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801239a:	2301      	movs	r3, #1
 801239c:	3001      	adds	r0, #1
 801239e:	4619      	mov	r1, r3
 80123a0:	e781      	b.n	80122a6 <__kernel_rem_pio2f+0x146>
 80123a2:	aa06      	add	r2, sp, #24
 80123a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80123a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80123ac:	460b      	mov	r3, r1
 80123ae:	e7f5      	b.n	801239c <__kernel_rem_pio2f+0x23c>
 80123b0:	1e68      	subs	r0, r5, #1
 80123b2:	ab06      	add	r3, sp, #24
 80123b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123bc:	aa06      	add	r2, sp, #24
 80123be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80123c2:	e779      	b.n	80122b8 <__kernel_rem_pio2f+0x158>
 80123c4:	1e68      	subs	r0, r5, #1
 80123c6:	ab06      	add	r3, sp, #24
 80123c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123d0:	e7f4      	b.n	80123bc <__kernel_rem_pio2f+0x25c>
 80123d2:	a906      	add	r1, sp, #24
 80123d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80123d8:	3801      	subs	r0, #1
 80123da:	430a      	orrs	r2, r1
 80123dc:	e7a9      	b.n	8012332 <__kernel_rem_pio2f+0x1d2>
 80123de:	f10c 0c01 	add.w	ip, ip, #1
 80123e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80123e6:	2a00      	cmp	r2, #0
 80123e8:	d0f9      	beq.n	80123de <__kernel_rem_pio2f+0x27e>
 80123ea:	eb0b 0305 	add.w	r3, fp, r5
 80123ee:	aa1a      	add	r2, sp, #104	; 0x68
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	1898      	adds	r0, r3, r2
 80123f4:	3004      	adds	r0, #4
 80123f6:	1c69      	adds	r1, r5, #1
 80123f8:	3704      	adds	r7, #4
 80123fa:	2200      	movs	r2, #0
 80123fc:	4465      	add	r5, ip
 80123fe:	9005      	str	r0, [sp, #20]
 8012400:	428d      	cmp	r5, r1
 8012402:	f6ff af0a 	blt.w	801221a <__kernel_rem_pio2f+0xba>
 8012406:	a81a      	add	r0, sp, #104	; 0x68
 8012408:	eb02 0c03 	add.w	ip, r2, r3
 801240c:	4484      	add	ip, r0
 801240e:	9803      	ldr	r0, [sp, #12]
 8012410:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012414:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8012418:	9001      	str	r0, [sp, #4]
 801241a:	ee07 0a90 	vmov	s15, r0
 801241e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012422:	9805      	ldr	r0, [sp, #20]
 8012424:	edcc 7a00 	vstr	s15, [ip]
 8012428:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012478 <__kernel_rem_pio2f+0x318>
 801242c:	eb00 0802 	add.w	r8, r0, r2
 8012430:	f04f 0c00 	mov.w	ip, #0
 8012434:	45d4      	cmp	ip, sl
 8012436:	dd0c      	ble.n	8012452 <__kernel_rem_pio2f+0x2f2>
 8012438:	eb02 0c07 	add.w	ip, r2, r7
 801243c:	a842      	add	r0, sp, #264	; 0x108
 801243e:	4484      	add	ip, r0
 8012440:	edcc 7a01 	vstr	s15, [ip, #4]
 8012444:	3101      	adds	r1, #1
 8012446:	3204      	adds	r2, #4
 8012448:	e7da      	b.n	8012400 <__kernel_rem_pio2f+0x2a0>
 801244a:	9b04      	ldr	r3, [sp, #16]
 801244c:	f04f 0c01 	mov.w	ip, #1
 8012450:	e7c7      	b.n	80123e2 <__kernel_rem_pio2f+0x282>
 8012452:	ecfe 6a01 	vldmia	lr!, {s13}
 8012456:	ed38 7a01 	vldmdb	r8!, {s14}
 801245a:	f10c 0c01 	add.w	ip, ip, #1
 801245e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012462:	e7e7      	b.n	8012434 <__kernel_rem_pio2f+0x2d4>
 8012464:	3b01      	subs	r3, #1
 8012466:	e769      	b.n	801233c <__kernel_rem_pio2f+0x1dc>
 8012468:	0801d4c8 	.word	0x0801d4c8
 801246c:	0801d49c 	.word	0x0801d49c
 8012470:	43800000 	.word	0x43800000
 8012474:	3b800000 	.word	0x3b800000
 8012478:	00000000 	.word	0x00000000
 801247c:	4260      	negs	r0, r4
 801247e:	eeb0 0a48 	vmov.f32	s0, s16
 8012482:	f000 fa29 	bl	80128d8 <scalbnf>
 8012486:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8012470 <__kernel_rem_pio2f+0x310>
 801248a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012492:	db1a      	blt.n	80124ca <__kernel_rem_pio2f+0x36a>
 8012494:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8012474 <__kernel_rem_pio2f+0x314>
 8012498:	ee60 7a27 	vmul.f32	s15, s0, s15
 801249c:	aa06      	add	r2, sp, #24
 801249e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124a2:	a906      	add	r1, sp, #24
 80124a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124a8:	3408      	adds	r4, #8
 80124aa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80124ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80124b6:	ee10 3a10 	vmov	r3, s0
 80124ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80124be:	1c6b      	adds	r3, r5, #1
 80124c0:	ee17 2a90 	vmov	r2, s15
 80124c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80124c8:	e73f      	b.n	801234a <__kernel_rem_pio2f+0x1ea>
 80124ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80124ce:	aa06      	add	r2, sp, #24
 80124d0:	ee10 3a10 	vmov	r3, s0
 80124d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80124d8:	462b      	mov	r3, r5
 80124da:	e736      	b.n	801234a <__kernel_rem_pio2f+0x1ea>
 80124dc:	aa06      	add	r2, sp, #24
 80124de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80124e2:	9202      	str	r2, [sp, #8]
 80124e4:	ee07 2a90 	vmov	s15, r2
 80124e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124ec:	3c01      	subs	r4, #1
 80124ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80124f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80124f6:	ed65 7a01 	vstmdb	r5!, {s15}
 80124fa:	e734      	b.n	8012366 <__kernel_rem_pio2f+0x206>
 80124fc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8012500:	ecf7 6a01 	vldmia	r7!, {s13}
 8012504:	ed9c 7a00 	vldr	s14, [ip]
 8012508:	eee6 7a87 	vfma.f32	s15, s13, s14
 801250c:	3401      	adds	r4, #1
 801250e:	454c      	cmp	r4, r9
 8012510:	dc01      	bgt.n	8012516 <__kernel_rem_pio2f+0x3b6>
 8012512:	42a5      	cmp	r5, r4
 8012514:	daf2      	bge.n	80124fc <__kernel_rem_pio2f+0x39c>
 8012516:	aa56      	add	r2, sp, #344	; 0x158
 8012518:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 801251c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8012520:	3501      	adds	r5, #1
 8012522:	3804      	subs	r0, #4
 8012524:	e723      	b.n	801236e <__kernel_rem_pio2f+0x20e>
 8012526:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012528:	2a03      	cmp	r2, #3
 801252a:	d84d      	bhi.n	80125c8 <__kernel_rem_pio2f+0x468>
 801252c:	e8df f002 	tbb	[pc, r2]
 8012530:	021f1f3e 	.word	0x021f1f3e
 8012534:	aa56      	add	r2, sp, #344	; 0x158
 8012536:	4411      	add	r1, r2
 8012538:	399c      	subs	r1, #156	; 0x9c
 801253a:	4608      	mov	r0, r1
 801253c:	461c      	mov	r4, r3
 801253e:	2c00      	cmp	r4, #0
 8012540:	dc5f      	bgt.n	8012602 <__kernel_rem_pio2f+0x4a2>
 8012542:	4608      	mov	r0, r1
 8012544:	461c      	mov	r4, r3
 8012546:	2c01      	cmp	r4, #1
 8012548:	dc6b      	bgt.n	8012622 <__kernel_rem_pio2f+0x4c2>
 801254a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8012478 <__kernel_rem_pio2f+0x318>
 801254e:	2b01      	cmp	r3, #1
 8012550:	dc77      	bgt.n	8012642 <__kernel_rem_pio2f+0x4e2>
 8012552:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8012556:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801255a:	f1b8 0f00 	cmp.w	r8, #0
 801255e:	d176      	bne.n	801264e <__kernel_rem_pio2f+0x4ee>
 8012560:	edc6 6a00 	vstr	s13, [r6]
 8012564:	ed86 7a01 	vstr	s14, [r6, #4]
 8012568:	edc6 7a02 	vstr	s15, [r6, #8]
 801256c:	e02c      	b.n	80125c8 <__kernel_rem_pio2f+0x468>
 801256e:	aa56      	add	r2, sp, #344	; 0x158
 8012570:	4411      	add	r1, r2
 8012572:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8012478 <__kernel_rem_pio2f+0x318>
 8012576:	399c      	subs	r1, #156	; 0x9c
 8012578:	4618      	mov	r0, r3
 801257a:	2800      	cmp	r0, #0
 801257c:	da32      	bge.n	80125e4 <__kernel_rem_pio2f+0x484>
 801257e:	f1b8 0f00 	cmp.w	r8, #0
 8012582:	d035      	beq.n	80125f0 <__kernel_rem_pio2f+0x490>
 8012584:	eef1 7a47 	vneg.f32	s15, s14
 8012588:	edc6 7a00 	vstr	s15, [r6]
 801258c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8012590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012594:	a82f      	add	r0, sp, #188	; 0xbc
 8012596:	2101      	movs	r1, #1
 8012598:	428b      	cmp	r3, r1
 801259a:	da2c      	bge.n	80125f6 <__kernel_rem_pio2f+0x496>
 801259c:	f1b8 0f00 	cmp.w	r8, #0
 80125a0:	d001      	beq.n	80125a6 <__kernel_rem_pio2f+0x446>
 80125a2:	eef1 7a67 	vneg.f32	s15, s15
 80125a6:	edc6 7a01 	vstr	s15, [r6, #4]
 80125aa:	e00d      	b.n	80125c8 <__kernel_rem_pio2f+0x468>
 80125ac:	aa56      	add	r2, sp, #344	; 0x158
 80125ae:	4411      	add	r1, r2
 80125b0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8012478 <__kernel_rem_pio2f+0x318>
 80125b4:	399c      	subs	r1, #156	; 0x9c
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	da0e      	bge.n	80125d8 <__kernel_rem_pio2f+0x478>
 80125ba:	f1b8 0f00 	cmp.w	r8, #0
 80125be:	d001      	beq.n	80125c4 <__kernel_rem_pio2f+0x464>
 80125c0:	eef1 7a67 	vneg.f32	s15, s15
 80125c4:	edc6 7a00 	vstr	s15, [r6]
 80125c8:	9b01      	ldr	r3, [sp, #4]
 80125ca:	f003 0007 	and.w	r0, r3, #7
 80125ce:	b057      	add	sp, #348	; 0x15c
 80125d0:	ecbd 8b04 	vpop	{d8-d9}
 80125d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d8:	ed31 7a01 	vldmdb	r1!, {s14}
 80125dc:	3b01      	subs	r3, #1
 80125de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125e2:	e7e8      	b.n	80125b6 <__kernel_rem_pio2f+0x456>
 80125e4:	ed71 7a01 	vldmdb	r1!, {s15}
 80125e8:	3801      	subs	r0, #1
 80125ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125ee:	e7c4      	b.n	801257a <__kernel_rem_pio2f+0x41a>
 80125f0:	eef0 7a47 	vmov.f32	s15, s14
 80125f4:	e7c8      	b.n	8012588 <__kernel_rem_pio2f+0x428>
 80125f6:	ecb0 7a01 	vldmia	r0!, {s14}
 80125fa:	3101      	adds	r1, #1
 80125fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012600:	e7ca      	b.n	8012598 <__kernel_rem_pio2f+0x438>
 8012602:	ed50 7a02 	vldr	s15, [r0, #-8]
 8012606:	ed70 6a01 	vldmdb	r0!, {s13}
 801260a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801260e:	3c01      	subs	r4, #1
 8012610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012614:	ed00 7a01 	vstr	s14, [r0, #-4]
 8012618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801261c:	edc0 7a00 	vstr	s15, [r0]
 8012620:	e78d      	b.n	801253e <__kernel_rem_pio2f+0x3de>
 8012622:	ed50 7a02 	vldr	s15, [r0, #-8]
 8012626:	ed70 6a01 	vldmdb	r0!, {s13}
 801262a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801262e:	3c01      	subs	r4, #1
 8012630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012634:	ed00 7a01 	vstr	s14, [r0, #-4]
 8012638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801263c:	edc0 7a00 	vstr	s15, [r0]
 8012640:	e781      	b.n	8012546 <__kernel_rem_pio2f+0x3e6>
 8012642:	ed31 7a01 	vldmdb	r1!, {s14}
 8012646:	3b01      	subs	r3, #1
 8012648:	ee77 7a87 	vadd.f32	s15, s15, s14
 801264c:	e77f      	b.n	801254e <__kernel_rem_pio2f+0x3ee>
 801264e:	eef1 6a66 	vneg.f32	s13, s13
 8012652:	eeb1 7a47 	vneg.f32	s14, s14
 8012656:	edc6 6a00 	vstr	s13, [r6]
 801265a:	ed86 7a01 	vstr	s14, [r6, #4]
 801265e:	eef1 7a67 	vneg.f32	s15, s15
 8012662:	e781      	b.n	8012568 <__kernel_rem_pio2f+0x408>

08012664 <__kernel_tanf>:
 8012664:	b508      	push	{r3, lr}
 8012666:	ee10 3a10 	vmov	r3, s0
 801266a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801266e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8012672:	eef0 7a40 	vmov.f32	s15, s0
 8012676:	da17      	bge.n	80126a8 <__kernel_tanf+0x44>
 8012678:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801267c:	ee17 1a10 	vmov	r1, s14
 8012680:	bb41      	cbnz	r1, 80126d4 <__kernel_tanf+0x70>
 8012682:	1c43      	adds	r3, r0, #1
 8012684:	4313      	orrs	r3, r2
 8012686:	d108      	bne.n	801269a <__kernel_tanf+0x36>
 8012688:	f7ff f852 	bl	8011730 <fabsf>
 801268c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012690:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012694:	eeb0 0a67 	vmov.f32	s0, s15
 8012698:	bd08      	pop	{r3, pc}
 801269a:	2801      	cmp	r0, #1
 801269c:	d0fa      	beq.n	8012694 <__kernel_tanf+0x30>
 801269e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80126a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80126a6:	e7f5      	b.n	8012694 <__kernel_tanf+0x30>
 80126a8:	494e      	ldr	r1, [pc, #312]	; (80127e4 <__kernel_tanf+0x180>)
 80126aa:	428a      	cmp	r2, r1
 80126ac:	dd12      	ble.n	80126d4 <__kernel_tanf+0x70>
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80127e8 <__kernel_tanf+0x184>
 80126b4:	bfb8      	it	lt
 80126b6:	eef1 7a40 	vneglt.f32	s15, s0
 80126ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126be:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80127ec <__kernel_tanf+0x188>
 80126c2:	bfb8      	it	lt
 80126c4:	eef1 0a60 	vneglt.f32	s1, s1
 80126c8:	ee77 0a60 	vsub.f32	s1, s14, s1
 80126cc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80126d0:	eddf 0a47 	vldr	s1, [pc, #284]	; 80127f0 <__kernel_tanf+0x18c>
 80126d4:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80127f4 <__kernel_tanf+0x190>
 80126d8:	eddf 5a47 	vldr	s11, [pc, #284]	; 80127f8 <__kernel_tanf+0x194>
 80126dc:	ed9f 5a47 	vldr	s10, [pc, #284]	; 80127fc <__kernel_tanf+0x198>
 80126e0:	4940      	ldr	r1, [pc, #256]	; (80127e4 <__kernel_tanf+0x180>)
 80126e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80126e6:	428a      	cmp	r2, r1
 80126e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80126ec:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80126f0:	eee7 5a06 	vfma.f32	s11, s14, s12
 80126f4:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8012800 <__kernel_tanf+0x19c>
 80126f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80126fc:	eddf 5a41 	vldr	s11, [pc, #260]	; 8012804 <__kernel_tanf+0x1a0>
 8012700:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012704:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8012808 <__kernel_tanf+0x1a4>
 8012708:	eea5 6a87 	vfma.f32	s12, s11, s14
 801270c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801280c <__kernel_tanf+0x1a8>
 8012710:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012714:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8012810 <__kernel_tanf+0x1ac>
 8012718:	eea7 6a05 	vfma.f32	s12, s14, s10
 801271c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8012814 <__kernel_tanf+0x1b0>
 8012720:	eea6 5a07 	vfma.f32	s10, s12, s14
 8012724:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8012818 <__kernel_tanf+0x1b4>
 8012728:	eea5 6a07 	vfma.f32	s12, s10, s14
 801272c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801281c <__kernel_tanf+0x1b8>
 8012730:	eea6 5a07 	vfma.f32	s10, s12, s14
 8012734:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8012820 <__kernel_tanf+0x1bc>
 8012738:	eea5 6a07 	vfma.f32	s12, s10, s14
 801273c:	eeb0 7a46 	vmov.f32	s14, s12
 8012740:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012744:	eeb0 6a60 	vmov.f32	s12, s1
 8012748:	eea7 6a24 	vfma.f32	s12, s14, s9
 801274c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012824 <__kernel_tanf+0x1c0>
 8012750:	eee6 0a26 	vfma.f32	s1, s12, s13
 8012754:	eee4 0a87 	vfma.f32	s1, s9, s14
 8012758:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801275c:	dd1d      	ble.n	801279a <__kernel_tanf+0x136>
 801275e:	ee07 0a10 	vmov	s14, r0
 8012762:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012766:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801276a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801276e:	179b      	asrs	r3, r3, #30
 8012770:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8012774:	f003 0302 	and.w	r3, r3, #2
 8012778:	f1c3 0301 	rsb	r3, r3, #1
 801277c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012780:	ee76 0a60 	vsub.f32	s1, s12, s1
 8012784:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012788:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801278c:	ee07 3a90 	vmov	s15, r3
 8012790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012798:	e77c      	b.n	8012694 <__kernel_tanf+0x30>
 801279a:	2801      	cmp	r0, #1
 801279c:	d01f      	beq.n	80127de <__kernel_tanf+0x17a>
 801279e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80127a2:	eec7 5a26 	vdiv.f32	s11, s14, s13
 80127a6:	4b20      	ldr	r3, [pc, #128]	; (8012828 <__kernel_tanf+0x1c4>)
 80127a8:	ee16 2a90 	vmov	r2, s13
 80127ac:	401a      	ands	r2, r3
 80127ae:	ee06 2a10 	vmov	s12, r2
 80127b2:	ee15 2a90 	vmov	r2, s11
 80127b6:	4013      	ands	r3, r2
 80127b8:	ee07 3a10 	vmov	s14, r3
 80127bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127c0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80127c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80127c8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80127cc:	eef0 7a66 	vmov.f32	s15, s13
 80127d0:	eee7 7a20 	vfma.f32	s15, s14, s1
 80127d4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80127d8:	eef0 7a47 	vmov.f32	s15, s14
 80127dc:	e75a      	b.n	8012694 <__kernel_tanf+0x30>
 80127de:	eef0 7a66 	vmov.f32	s15, s13
 80127e2:	e757      	b.n	8012694 <__kernel_tanf+0x30>
 80127e4:	3f2ca13f 	.word	0x3f2ca13f
 80127e8:	3f490fda 	.word	0x3f490fda
 80127ec:	33222168 	.word	0x33222168
 80127f0:	00000000 	.word	0x00000000
 80127f4:	37d95384 	.word	0x37d95384
 80127f8:	3895c07a 	.word	0x3895c07a
 80127fc:	b79bae5f 	.word	0xb79bae5f
 8012800:	398137b9 	.word	0x398137b9
 8012804:	3abede48 	.word	0x3abede48
 8012808:	3c11371f 	.word	0x3c11371f
 801280c:	3d5d0dd1 	.word	0x3d5d0dd1
 8012810:	38a3f445 	.word	0x38a3f445
 8012814:	3a1a26c8 	.word	0x3a1a26c8
 8012818:	3b6b6916 	.word	0x3b6b6916
 801281c:	3cb327a4 	.word	0x3cb327a4
 8012820:	3e088889 	.word	0x3e088889
 8012824:	3eaaaaab 	.word	0x3eaaaaab
 8012828:	fffff000 	.word	0xfffff000

0801282c <matherr>:
 801282c:	2000      	movs	r0, #0
 801282e:	4770      	bx	lr

08012830 <nan>:
 8012830:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012838 <nan+0x8>
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	00000000 	.word	0x00000000
 801283c:	7ff80000 	.word	0x7ff80000

08012840 <finitef>:
 8012840:	ee10 3a10 	vmov	r3, s0
 8012844:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8012848:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801284c:	bfac      	ite	ge
 801284e:	2000      	movge	r0, #0
 8012850:	2001      	movlt	r0, #1
 8012852:	4770      	bx	lr

08012854 <floorf>:
 8012854:	ee10 3a10 	vmov	r3, s0
 8012858:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801285c:	0dca      	lsrs	r2, r1, #23
 801285e:	3a7f      	subs	r2, #127	; 0x7f
 8012860:	2a16      	cmp	r2, #22
 8012862:	dc2a      	bgt.n	80128ba <floorf+0x66>
 8012864:	2a00      	cmp	r2, #0
 8012866:	da11      	bge.n	801288c <floorf+0x38>
 8012868:	eddf 7a18 	vldr	s15, [pc, #96]	; 80128cc <floorf+0x78>
 801286c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012870:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012878:	dd05      	ble.n	8012886 <floorf+0x32>
 801287a:	2b00      	cmp	r3, #0
 801287c:	da23      	bge.n	80128c6 <floorf+0x72>
 801287e:	4a14      	ldr	r2, [pc, #80]	; (80128d0 <floorf+0x7c>)
 8012880:	2900      	cmp	r1, #0
 8012882:	bf18      	it	ne
 8012884:	4613      	movne	r3, r2
 8012886:	ee00 3a10 	vmov	s0, r3
 801288a:	4770      	bx	lr
 801288c:	4911      	ldr	r1, [pc, #68]	; (80128d4 <floorf+0x80>)
 801288e:	4111      	asrs	r1, r2
 8012890:	420b      	tst	r3, r1
 8012892:	d0fa      	beq.n	801288a <floorf+0x36>
 8012894:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80128cc <floorf+0x78>
 8012898:	ee30 0a27 	vadd.f32	s0, s0, s15
 801289c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80128a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a4:	ddef      	ble.n	8012886 <floorf+0x32>
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	bfbe      	ittt	lt
 80128aa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80128ae:	fa40 f202 	asrlt.w	r2, r0, r2
 80128b2:	189b      	addlt	r3, r3, r2
 80128b4:	ea23 0301 	bic.w	r3, r3, r1
 80128b8:	e7e5      	b.n	8012886 <floorf+0x32>
 80128ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80128be:	d3e4      	bcc.n	801288a <floorf+0x36>
 80128c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128c4:	4770      	bx	lr
 80128c6:	2300      	movs	r3, #0
 80128c8:	e7dd      	b.n	8012886 <floorf+0x32>
 80128ca:	bf00      	nop
 80128cc:	7149f2ca 	.word	0x7149f2ca
 80128d0:	bf800000 	.word	0xbf800000
 80128d4:	007fffff 	.word	0x007fffff

080128d8 <scalbnf>:
 80128d8:	b508      	push	{r3, lr}
 80128da:	ee10 2a10 	vmov	r2, s0
 80128de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80128e2:	ed2d 8b02 	vpush	{d8}
 80128e6:	eef0 0a40 	vmov.f32	s1, s0
 80128ea:	d004      	beq.n	80128f6 <scalbnf+0x1e>
 80128ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80128f0:	d306      	bcc.n	8012900 <scalbnf+0x28>
 80128f2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80128f6:	ecbd 8b02 	vpop	{d8}
 80128fa:	eeb0 0a60 	vmov.f32	s0, s1
 80128fe:	bd08      	pop	{r3, pc}
 8012900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012904:	d21c      	bcs.n	8012940 <scalbnf+0x68>
 8012906:	4b1f      	ldr	r3, [pc, #124]	; (8012984 <scalbnf+0xac>)
 8012908:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012988 <scalbnf+0xb0>
 801290c:	4298      	cmp	r0, r3
 801290e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8012912:	db10      	blt.n	8012936 <scalbnf+0x5e>
 8012914:	ee10 2a90 	vmov	r2, s1
 8012918:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801291c:	3b19      	subs	r3, #25
 801291e:	4403      	add	r3, r0
 8012920:	2bfe      	cmp	r3, #254	; 0xfe
 8012922:	dd0f      	ble.n	8012944 <scalbnf+0x6c>
 8012924:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801298c <scalbnf+0xb4>
 8012928:	eeb0 0a48 	vmov.f32	s0, s16
 801292c:	f000 f834 	bl	8012998 <copysignf>
 8012930:	ee60 0a08 	vmul.f32	s1, s0, s16
 8012934:	e7df      	b.n	80128f6 <scalbnf+0x1e>
 8012936:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012990 <scalbnf+0xb8>
 801293a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801293e:	e7da      	b.n	80128f6 <scalbnf+0x1e>
 8012940:	0ddb      	lsrs	r3, r3, #23
 8012942:	e7ec      	b.n	801291e <scalbnf+0x46>
 8012944:	2b00      	cmp	r3, #0
 8012946:	dd06      	ble.n	8012956 <scalbnf+0x7e>
 8012948:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801294c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012950:	ee00 3a90 	vmov	s1, r3
 8012954:	e7cf      	b.n	80128f6 <scalbnf+0x1e>
 8012956:	f113 0f16 	cmn.w	r3, #22
 801295a:	da06      	bge.n	801296a <scalbnf+0x92>
 801295c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012960:	4298      	cmp	r0, r3
 8012962:	dcdf      	bgt.n	8012924 <scalbnf+0x4c>
 8012964:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8012990 <scalbnf+0xb8>
 8012968:	e7de      	b.n	8012928 <scalbnf+0x50>
 801296a:	3319      	adds	r3, #25
 801296c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8012970:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012974:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012994 <scalbnf+0xbc>
 8012978:	ee07 3a10 	vmov	s14, r3
 801297c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8012980:	e7b9      	b.n	80128f6 <scalbnf+0x1e>
 8012982:	bf00      	nop
 8012984:	ffff3cb0 	.word	0xffff3cb0
 8012988:	4c000000 	.word	0x4c000000
 801298c:	7149f2ca 	.word	0x7149f2ca
 8012990:	0da24260 	.word	0x0da24260
 8012994:	33000000 	.word	0x33000000

08012998 <copysignf>:
 8012998:	ee10 3a10 	vmov	r3, s0
 801299c:	ee10 2a90 	vmov	r2, s1
 80129a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80129a8:	4313      	orrs	r3, r2
 80129aa:	ee00 3a10 	vmov	s0, r3
 80129ae:	4770      	bx	lr

080129b0 <__errno>:
 80129b0:	4b01      	ldr	r3, [pc, #4]	; (80129b8 <__errno+0x8>)
 80129b2:	6818      	ldr	r0, [r3, #0]
 80129b4:	4770      	bx	lr
 80129b6:	bf00      	nop
 80129b8:	20000244 	.word	0x20000244

080129bc <_close>:
 80129bc:	4b02      	ldr	r3, [pc, #8]	; (80129c8 <_close+0xc>)
 80129be:	2258      	movs	r2, #88	; 0x58
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	f04f 30ff 	mov.w	r0, #4294967295
 80129c6:	4770      	bx	lr
 80129c8:	20000d8c 	.word	0x20000d8c

080129cc <_fstat>:
 80129cc:	4b02      	ldr	r3, [pc, #8]	; (80129d8 <_fstat+0xc>)
 80129ce:	2258      	movs	r2, #88	; 0x58
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	f04f 30ff 	mov.w	r0, #4294967295
 80129d6:	4770      	bx	lr
 80129d8:	20000d8c 	.word	0x20000d8c

080129dc <_getpid>:
 80129dc:	4b02      	ldr	r3, [pc, #8]	; (80129e8 <_getpid+0xc>)
 80129de:	2258      	movs	r2, #88	; 0x58
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	f04f 30ff 	mov.w	r0, #4294967295
 80129e6:	4770      	bx	lr
 80129e8:	20000d8c 	.word	0x20000d8c

080129ec <_isatty>:
 80129ec:	4b02      	ldr	r3, [pc, #8]	; (80129f8 <_isatty+0xc>)
 80129ee:	2258      	movs	r2, #88	; 0x58
 80129f0:	601a      	str	r2, [r3, #0]
 80129f2:	2000      	movs	r0, #0
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	20000d8c 	.word	0x20000d8c

080129fc <_kill>:
 80129fc:	4b02      	ldr	r3, [pc, #8]	; (8012a08 <_kill+0xc>)
 80129fe:	2258      	movs	r2, #88	; 0x58
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	f04f 30ff 	mov.w	r0, #4294967295
 8012a06:	4770      	bx	lr
 8012a08:	20000d8c 	.word	0x20000d8c

08012a0c <_lseek>:
 8012a0c:	4b02      	ldr	r3, [pc, #8]	; (8012a18 <_lseek+0xc>)
 8012a0e:	2258      	movs	r2, #88	; 0x58
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	f04f 30ff 	mov.w	r0, #4294967295
 8012a16:	4770      	bx	lr
 8012a18:	20000d8c 	.word	0x20000d8c

08012a1c <_read>:
 8012a1c:	4b02      	ldr	r3, [pc, #8]	; (8012a28 <_read+0xc>)
 8012a1e:	2258      	movs	r2, #88	; 0x58
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	f04f 30ff 	mov.w	r0, #4294967295
 8012a26:	4770      	bx	lr
 8012a28:	20000d8c 	.word	0x20000d8c

08012a2c <_sbrk>:
 8012a2c:	4b04      	ldr	r3, [pc, #16]	; (8012a40 <_sbrk+0x14>)
 8012a2e:	6819      	ldr	r1, [r3, #0]
 8012a30:	4602      	mov	r2, r0
 8012a32:	b909      	cbnz	r1, 8012a38 <_sbrk+0xc>
 8012a34:	4903      	ldr	r1, [pc, #12]	; (8012a44 <_sbrk+0x18>)
 8012a36:	6019      	str	r1, [r3, #0]
 8012a38:	6818      	ldr	r0, [r3, #0]
 8012a3a:	4402      	add	r2, r0
 8012a3c:	601a      	str	r2, [r3, #0]
 8012a3e:	4770      	bx	lr
 8012a40:	20000bec 	.word	0x20000bec
 8012a44:	20000d90 	.word	0x20000d90

08012a48 <_exit>:
 8012a48:	e7fe      	b.n	8012a48 <_exit>
	...

08012a4c <_init>:
 8012a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4e:	bf00      	nop
 8012a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a52:	bc08      	pop	{r3}
 8012a54:	469e      	mov	lr, r3
 8012a56:	4770      	bx	lr

08012a58 <_fini>:
 8012a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a5a:	bf00      	nop
 8012a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a5e:	bc08      	pop	{r3}
 8012a60:	469e      	mov	lr, r3
 8012a62:	4770      	bx	lr
